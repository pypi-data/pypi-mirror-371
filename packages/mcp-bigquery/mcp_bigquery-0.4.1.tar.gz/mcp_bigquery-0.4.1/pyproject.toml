[project]
name = "mcp-bigquery"
version = "0.4.1"
description = "Minimal MCP server for BigQuery SQL validation and dry-run analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "caron14", email = "caron14@users.noreply.github.com"}
]
maintainers = [
    {name = "caron14", email = "caron14@users.noreply.github.com"}
]
keywords = ["mcp", "bigquery", "sql", "validation", "dry-run", "gcp", "claude"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.0.0",
    "google-cloud-bigquery>=3.0.0",
    "sqlparse>=0.4.0",
    "tabulate>=0.9.0",
    "pydantic>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/caron14/mcp-bigquery"
Documentation = "https://github.com/caron14/mcp-bigquery#readme"
Repository = "https://github.com/caron14/mcp-bigquery.git"
Issues = "https://github.com/caron14/mcp-bigquery/issues"

[project.scripts]
mcp-bigquery = "mcp_bigquery.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "pre-commit>=3.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "src/**/*.py",
    "README.md",
    "LICENSE",
]
exclude = [
    "tests/",
    "examples/",
    "*.md",
    "!README.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_bigquery"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v"

# Black configuration
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["mcp_bigquery"]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_strict_optional = true