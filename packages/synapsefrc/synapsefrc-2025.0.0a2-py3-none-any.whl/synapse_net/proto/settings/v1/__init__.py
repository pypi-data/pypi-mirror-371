# SPDX-FileCopyrightText: 2025 Dan Peled
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/settings/v1/boolean.proto, proto/settings/v1/color.proto, proto/settings/v1/constraint_type.proto, proto/settings/v1/enumerated.proto, proto/settings/v1/list.proto, proto/settings/v1/number.proto, proto/settings/v1/settings.proto, proto/settings/v1/string.proto, proto/settings/v1/value.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List, Optional

import betterproto


class ColorFormatProto(betterproto.Enum):
    """Enumeration of supported color formats"""

    UNSPECIFIED = 0
    """Default unspecified color format"""

    HEX = 1
    """Color represented as a HEX string (e.g., "#FFAABB")"""

    RGB = 2
    """Color represented using RGB components"""

    HSV = 3
    """Color represented using HSV (Hue, Saturation, Value) components"""


class ConstraintTypeProto(betterproto.Enum):
    """
    Enumeration of constraint types that can be applied to settings.
     Some constraints may not have corresponding config messages.
    """

    UNSPECIFIED = 0
    """Default unspecified constraint type"""

    NUMBER = 1
    """Numeric range constraint"""

    LIST = 2
    """Constraint requiring value to be one of a predefined list"""

    STRING = 3
    """String-based constraint"""

    COLOR = 4
    """Color-related constraint"""

    BOOLEAN = 5
    """Boolean constraint (true/false), no separate config message needed"""

    ENUMERATED = 8
    """List options constraint"""


@dataclass(eq=False, repr=False)
class BooleanConstraintProto(betterproto.Message):
    render_as_button: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ColorConstraintProto(betterproto.Message):
    """Defines constraints for color settings, specifying format and mode"""

    format: "ColorFormatProto" = betterproto.enum_field(1)
    """The color format constraint (HEX, RGB, HSV)"""

    range_mode: bool = betterproto.bool_field(2)
    """
    If true, enables a range mode for color selection rather than fixed values
    """


@dataclass(eq=False, repr=False)
class SettingValueProto(betterproto.Message):
    """
    Represents a flexible value for a setting, supporting multiple scalar types and arrays.
    """

    int_value: int = betterproto.int32_field(1, group="scalar_value")
    """Integer scalar value"""

    string_value: str = betterproto.string_field(2, group="scalar_value")
    """String scalar value"""

    bool_value: bool = betterproto.bool_field(3, group="scalar_value")
    """Boolean scalar value"""

    float_value: float = betterproto.float_field(4, group="scalar_value")
    """Float scalar value"""

    bytes_value: bytes = betterproto.bytes_field(5, group="scalar_value")
    """Bytes scalar value"""

    int_array_value: List[int] = betterproto.int32_field(6)
    """Repeated integer values (array)"""

    string_array_value: List[str] = betterproto.string_field(7)
    """Repeated string values (array)"""

    bool_array_value: List[bool] = betterproto.bool_field(8)
    """Repeated boolean values (array)"""

    float_array_value: List[float] = betterproto.float_field(9)
    """Repeated float values (array)"""

    bytes_array_value: List[bytes] = betterproto.bytes_field(10)
    """Repeated bytes values (array)"""


@dataclass(eq=False, repr=False)
class EnumeratedConstraintProto(betterproto.Message):
    """
    Constraint that limits a setting to a predefined list of possible values
    """

    options: List["SettingValueProto"] = betterproto.message_field(1)
    """List of allowed option values for the setting"""


@dataclass(eq=False, repr=False)
class ListConstraintProto(betterproto.Message):
    """Constraint defining allowed length boundaries for a list setting"""

    min_length: int = betterproto.int32_field(2)
    """Minimum number of elements required in the list (inclusive)"""

    max_length: int = betterproto.int32_field(3)
    """Maximum number of elements allowed in the list (inclusive)"""


@dataclass(eq=False, repr=False)
class NumberConstraintProto(betterproto.Message):
    """
    Defines a numeric constraint with optional minimum, maximum, and step values.
    """

    min: Optional[float] = betterproto.message_field(1, wraps=betterproto.TYPE_FLOAT)
    """Optional minimum allowed value (inclusive)"""

    max: Optional[float] = betterproto.message_field(2, wraps=betterproto.TYPE_FLOAT)
    """Optional maximum allowed value (inclusive)"""

    step: Optional[float] = betterproto.message_field(3, wraps=betterproto.TYPE_FLOAT)
    """Optional step/increment value for valid values within the range"""


@dataclass(eq=False, repr=False)
class StringConstraintProto(betterproto.Message):
    """Constraint specifying limitations on string values"""

    min_length: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_INT32
    )
    """Optional minimum length of the string (inclusive)"""

    max_length: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_INT32
    )
    """Optional maximum length of the string (inclusive)"""

    pattern: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    """Optional regex pattern that the string must match"""


@dataclass(eq=False, repr=False)
class ConstraintConfigProto(betterproto.Message):
    """
    Configuration for different types of constraints on settings values.
     Uses a oneof to specify exactly one type of constraint configuration.
    """

    numeric: "NumberConstraintProto" = betterproto.message_field(1, group="config")
    """Constraint based on a numeric value"""

    enumerated: "EnumeratedConstraintProto" = betterproto.message_field(
        2, group="config"
    )
    """Constraint based on selectable list options with extra options"""

    color: "ColorConstraintProto" = betterproto.message_field(3, group="config")
    """Constraint based on color formats and modes"""

    string: "StringConstraintProto" = betterproto.message_field(4, group="config")
    """Constraint based on string properties (e.g., regex, length)"""

    list: "ListConstraintProto" = betterproto.message_field(5, group="config")
    """Constraint for a value list"""

    boolean: "BooleanConstraintProto" = betterproto.message_field(6, group="config")
    """Boolean constraint"""


@dataclass(eq=False, repr=False)
class ConstraintProto(betterproto.Message):
    """
    Represents a constraint applied to a setting, specifying its type and configuration.
    """

    type: "ConstraintTypeProto" = betterproto.enum_field(4)
    """The type of constraint (e.g., range, list, color)"""

    constraint: "ConstraintConfigProto" = betterproto.message_field(5)
    """
    The configuration details for the constraint (oneof different constraint configs)
    """


@dataclass(eq=False, repr=False)
class SettingMetaProto(betterproto.Message):
    """
    Metadata describing a setting, including identification, categorization, and constraints.
    """

    name: str = betterproto.string_field(1)
    """The unique name/key of the setting"""

    category: str = betterproto.string_field(2)
    """
    The category or group this setting belongs to (e.g., "display", "audio")
    """

    description: str = betterproto.string_field(3)
    """A human-readable description explaining the purpose of the setting"""

    default: "SettingValueProto" = betterproto.message_field(4)
    """The default value for the setting"""

    constraint: "ConstraintProto" = betterproto.message_field(5)
    """
    Optional constraints that restrict or define valid values for the setting
    """
