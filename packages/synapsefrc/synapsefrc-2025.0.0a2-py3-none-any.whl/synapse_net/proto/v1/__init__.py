# SPDX-FileCopyrightText: 2025 Dan Peled
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/v1/alert.proto, proto/v1/camera.proto, proto/v1/device.proto, proto/v1/log.proto, proto/v1/message.proto, proto/v1/pipeline.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import Dict, List

import betterproto

from ..settings import v1 as _settings_v1__


class AlertTypeProto(betterproto.Enum):
    UNSPECIFIED = 0
    INFO = 1
    WARNING = 2
    ERROR = 3


class LogLevelProto(betterproto.Enum):
    UNSPECIFIED = 0
    """Unspecified log level, used for default or unknown cases"""

    INFO = 2
    """Debug level, used for detailed debugging information"""

    WARNING = 3
    """Warning level, used for potentially harmful situations"""

    ERROR = 4
    """
    Error level, used for error events that might still allow the application to continue running
    """


class MessageTypeProto(betterproto.Enum):
    """Enum for different message types in the protocol"""

    UNSPECIFIED = 0
    SEND_DEVICE_INFO = 1
    SEND_METRICS = 2
    ADD_PIPELINE = 3
    SEND_PIPELINE_TYPES = 4
    ADD_CAMERA = 5
    SET_TYPE_FOR_PIPELINE = 6
    SET_SETTING = 7
    SET_PIPELINE_INDEX = 8
    SET_PIPELINE_NAME = 9
    SET_DEFAULT_PIPELINE = 10
    DELETE_PIPELINE = 11
    LOG = 12
    SAVE = 13
    REPORT_CAMERA_PERFORMANCE = 14
    SET_NETWORK_SETTINGS = 15
    REBOOT = 16
    FORMAT = 17
    RESTART_SYNAPSE = 18
    RENAME_CAMERA = 19
    CALIBRATING = 20
    CALIBRATION_DATA = 21
    DELETE_CALIBRATION = 22
    SET_CAMERA_RECORDING_STATUS = 23
    SET_DEVICE_CONNECTION_STATUS = 24
    SET_PIPELINE_RESULT = 25
    ALERT = 26


@dataclass(eq=False, repr=False)
class AlertProto(betterproto.Message):
    type: "AlertTypeProto" = betterproto.enum_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CameraProto(betterproto.Message):
    """Represents a camera in the system"""

    name: str = betterproto.string_field(1)
    stream_path: str = betterproto.string_field(2)
    kind: str = betterproto.string_field(3)
    index: int = betterproto.int32_field(4)
    pipeline_index: int = betterproto.int32_field(5)
    default_pipeline: int = betterproto.int32_field(6)
    max_fps: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CameraPerformanceProto(betterproto.Message):
    """Performance metrics for a camera"""

    latency_capture: float = betterproto.float_field(1)
    latency_process: float = betterproto.float_field(2)
    fps: int = betterproto.int64_field(3)
    camera_index: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SetDefaultPipelineMessageProto(betterproto.Message):
    camera_index: int = betterproto.int32_field(1)
    pipeline_index: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class RenameCameraMessageProto(betterproto.Message):
    camera_index: int = betterproto.int32_field(1)
    new_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CalibrationDataProto(betterproto.Message):
    camera_index: int = betterproto.int32_field(1)
    mean_error: float = betterproto.float_field(2)
    resolution: str = betterproto.string_field(3)
    camera_matrix: List[float] = betterproto.float_field(4)
    dist_coeffs: List[float] = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class RemoveCalibrationDataMessageProto(betterproto.Message):
    camera_index: int = betterproto.int32_field(1)
    resolution: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetCameraRecordingStatusMessageProto(betterproto.Message):
    record: bool = betterproto.bool_field(1)
    camera_index: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class DeviceInfoProto(betterproto.Message):
    """Information about a device's network and system identification"""

    version: str = betterproto.string_field(1)
    """The version of the Synapse runtime"""

    hostname: str = betterproto.string_field(2)
    """The device's hostname"""

    ip: str = betterproto.string_field(3)
    """The IP address of the device"""

    platform: str = betterproto.string_field(4)
    """The platform or operating system (e.g., "linux", "windows")"""

    network_interfaces: List[str] = betterproto.string_field(5)
    """List of network interfaces available on the device"""


@dataclass(eq=False, repr=False)
class SetConnectionInfoProto(betterproto.Message):
    """Message to set the connection information for a device"""

    connected_to_networktables: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class HardwareMetricsProto(betterproto.Message):
    """Metrics related to the hardware status of a device"""

    cpu_temp: float = betterproto.float_field(1)
    """CPU temperature in degrees Celsius"""

    cpu_usage: float = betterproto.float_field(2)
    """CPU usage as a percentage (0 to 100)"""

    disk_usage: float = betterproto.float_field(3)
    """Disk usage as a percentage (0 to 100)"""

    ram_usage: float = betterproto.float_field(4)
    """RAM usage"""

    memory: float = betterproto.float_field(5)
    """Total memory available"""

    uptime: float = betterproto.float_field(6)
    """Uptime of the device in seconds"""

    last_fetched: str = betterproto.string_field(7)
    """
    Timestamp when the metrics were last fetched (ISO 8601 or other format)
    """


@dataclass(eq=False, repr=False)
class SetNetworkSettingsProto(betterproto.Message):
    """Message to set network settings on a device"""

    hostname: str = betterproto.string_field(1)
    ip: str = betterproto.string_field(2)
    network_interface: str = betterproto.string_field(3)
    network_table: str = betterproto.string_field(4)
    team_number: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LogMessageProto(betterproto.Message):
    """Represents a log message with its content, level, and timestamp"""

    message: str = betterproto.string_field(1)
    """The log message content"""

    level: "LogLevelProto" = betterproto.enum_field(2)
    """Log level of the message"""

    timestamp: int = betterproto.int64_field(3)
    """Unix timestamp in milliseconds"""


@dataclass(eq=False, repr=False)
class PipelineTypeProto(betterproto.Message):
    """Defines a type of pipeline with its associated settings metadata"""

    type: str = betterproto.string_field(1)
    """The pipeline type identifier (e.g., "image-processing")"""

    settings: List["_settings_v1__.SettingMetaProto"] = betterproto.message_field(2)
    """List of metadata for each setting related to this pipeline type"""


@dataclass(eq=False, repr=False)
class PipelineProto(betterproto.Message):
    """
    Represents an instance of a pipeline with a name, type, and settings values
    """

    name: str = betterproto.string_field(1)
    """The human-readable name of the pipeline instance"""

    index: int = betterproto.uint32_field(2)
    """The index or ID of this pipeline instance"""

    type: str = betterproto.string_field(3)
    """The pipeline type identifier this instance corresponds to"""

    settings_values: Dict[str, "_settings_v1__.SettingValueProto"] = (
        betterproto.map_field(4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )
    """
    Map of setting keys to their actual configured values for this pipeline instance
    """


@dataclass(eq=False, repr=False)
class SetPipelineTypeMessageProto(betterproto.Message):
    """Message to request changing the type of a specific pipeline instance"""

    new_type: str = betterproto.string_field(1)
    """The new pipeline type to assign"""

    pipeline_index: int = betterproto.int32_field(2)
    """The index of the pipeline instance to update"""


@dataclass(eq=False, repr=False)
class SetPipleineSettingMessageProto(betterproto.Message):
    """
    Message to request updating a single setting of a specific pipeline instance
    """

    setting: str = betterproto.string_field(1)
    """The key/name of the setting to update"""

    value: "_settings_v1__.SettingValueProto" = betterproto.message_field(2)
    """The new value to assign to the setting"""

    pipeline_index: int = betterproto.int32_field(3)
    """The index of the pipeline instance to update"""


@dataclass(eq=False, repr=False)
class SetPipelineIndexMessageProto(betterproto.Message):
    pipeline_index: int = betterproto.int32_field(1)
    camera_index: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class SetPipelineNameMessageProto(betterproto.Message):
    pipeline_index: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PipelineResultProto(betterproto.Message):
    """
    Represents the result of a pipeline execution, including whether it's in MsgPack format
    """

    is_msgpack: bool = betterproto.bool_field(1)
    """Indicates if the result is in MsgPack format"""

    key: str = betterproto.string_field(2)
    """Key to identify the result"""

    pipeline_index: int = betterproto.int32_field(3)
    """The index of the pipeline instance this result belongs to"""

    value: "_settings_v1__.SettingValueProto" = betterproto.message_field(4)
    """The value of the result"""


@dataclass(eq=False, repr=False)
class MessageProto(betterproto.Message):
    type: "MessageTypeProto" = betterproto.enum_field(1)
    device_info: "DeviceInfoProto" = betterproto.message_field(2, group="payload")
    hardware_metrics: "HardwareMetricsProto" = betterproto.message_field(
        3, group="payload"
    )
    camera_info: "CameraProto" = betterproto.message_field(4, group="payload")
    pipeline_info: "PipelineProto" = betterproto.message_field(5, group="payload")
    set_pipeline_type: "SetPipelineTypeMessageProto" = betterproto.message_field(
        6, group="payload"
    )
    set_pipeline_setting: "SetPipleineSettingMessageProto" = betterproto.message_field(
        7, group="payload"
    )
    set_pipeline_index: "SetPipelineIndexMessageProto" = betterproto.message_field(
        8, group="payload"
    )
    set_pipeline_name: "SetPipelineNameMessageProto" = betterproto.message_field(
        9, group="payload"
    )
    set_default_pipeline: "SetDefaultPipelineMessageProto" = betterproto.message_field(
        10, group="payload"
    )
    remove_pipeline_index: int = betterproto.int32_field(11, group="payload")
    log: "LogMessageProto" = betterproto.message_field(12, group="payload")
    camera_performance: "CameraPerformanceProto" = betterproto.message_field(
        13, group="payload"
    )
    set_network_settings: "SetNetworkSettingsProto" = betterproto.message_field(
        14, group="payload"
    )
    rename_camera: "RenameCameraMessageProto" = betterproto.message_field(
        15, group="payload"
    )
    calibration_data: "CalibrationDataProto" = betterproto.message_field(
        16, group="payload"
    )
    delete_calibration: "RemoveCalibrationDataMessageProto" = betterproto.message_field(
        17, group="payload"
    )
    set_camera_recording_status: "SetCameraRecordingStatusMessageProto" = (
        betterproto.message_field(18, group="payload")
    )
    set_connection_info: "SetConnectionInfoProto" = betterproto.message_field(
        19, group="payload"
    )
    pipeline_result: "PipelineResultProto" = betterproto.message_field(
        21, group="payload"
    )
    alert: "AlertProto" = betterproto.message_field(22, group="payload")
    pipeline_type_info: List["PipelineTypeProto"] = betterproto.message_field(20)
