# SPDX-FileCopyrightText: 2025 Dan Peled
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os
from enum import Enum
from pathlib import Path
from typing import Final, Optional, Tuple

import questionary

from .deploy import loadDeviceData
from .util import SYNAPSE_PROJECT_FILE

baseMainPy: Final[str] = """# Automatically generated by Synapse
# Will work out of the box

import os
from pathlib import Path

from synapse.core import Synapse

if __name__ == "__main__":
    Synapse.createAndRunRuntime(root=Path(os.getcwd()))
""".lstrip()


class ConfirmProjectNameOptions(Enum):
    kOverride = "Override Files In Folder"
    kCancel = "Cancel"
    kSwitchProjectName = "Switch Project Name"


def selectProjectName(cwd: Path) -> Tuple[Optional[str], Path]:
    projectName = ""
    while projectName is None or len(projectName) == 0:
        projectName: Optional[str] = questionary.text("Project Name").ask()
        if projectName is None:
            return None, cwd

    projectPath = cwd / str(projectName)
    if not projectPath.exists():
        os.makedirs(projectPath)
    else:
        projectNameAlreadyExistsSelected = questionary.select(
            f"A folder named `{projectName}` already exists, how do you wish to proceed?",
            choices=[
                ConfirmProjectNameOptions.kOverride.value,
                ConfirmProjectNameOptions.kCancel.value,
                ConfirmProjectNameOptions.kSwitchProjectName.value,
            ],
        ).ask()

        if projectNameAlreadyExistsSelected == ConfirmProjectNameOptions.kCancel.value:
            return None, cwd
        elif (
            projectNameAlreadyExistsSelected
            == ConfirmProjectNameOptions.kSwitchProjectName.value
        ):
            return selectProjectName(cwd)

    with open(projectPath / SYNAPSE_PROJECT_FILE, "w") as projectFile:
        projectFile.write(f"name: {projectName}")
    return projectName, projectPath


def createProject() -> None:
    cwd: Path = Path.cwd()
    print(
        "This will create a folder with the provided project name\nat the current working directory with the project files inside it"
    )
    projectName, projectPath = selectProjectName(cwd)

    if projectName is not None:
        deployConfigPath = projectPath / SYNAPSE_PROJECT_FILE
        setupDeviceConfig = questionary.confirm("Setup coprocessor info").ask()
        if setupDeviceConfig:
            loadDeviceData(deployConfigPath)
        with open(projectPath / "main.py", "w") as f:
            f.write(baseMainPy)

        if not (projectPath / "pipelines").exists():
            os.makedirs(projectPath / "pipelines")
        deployDir = projectPath / "deploy"
        if not (deployDir).exists():
            os.makedirs(deployDir)
        deployReadme = f"# {projectName} Deploy Directory\nPlace here all files you want to deploy onto the coprocessor"

        with open(deployDir / "readme.md", "w") as readmeFile:
            readmeFile.write(deployReadme)

        print(f"Created project `{projectName}` at:\n{projectPath.absolute()}")
