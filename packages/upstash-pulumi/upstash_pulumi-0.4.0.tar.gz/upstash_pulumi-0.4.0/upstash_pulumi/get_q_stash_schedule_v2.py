# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetQStashScheduleV2Result',
    'AwaitableGetQStashScheduleV2Result',
    'get_q_stash_schedule_v2',
    'get_q_stash_schedule_v2_output',
]

@pulumi.output_type
class GetQStashScheduleV2Result:
    """
    A collection of values returned by getQStashScheduleV2.
    """
    def __init__(__self__, body=None, callback=None, created_at=None, cron=None, delay=None, destination=None, header=None, id=None, method=None, retries=None, schedule_id=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if callback and not isinstance(callback, str):
            raise TypeError("Expected argument 'callback' to be a str")
        pulumi.set(__self__, "callback", callback)
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if cron and not isinstance(cron, str):
            raise TypeError("Expected argument 'cron' to be a str")
        pulumi.set(__self__, "cron", cron)
        if delay and not isinstance(delay, str):
            raise TypeError("Expected argument 'delay' to be a str")
        pulumi.set(__self__, "delay", delay)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if header and not isinstance(header, str):
            raise TypeError("Expected argument 'header' to be a str")
        pulumi.set(__self__, "header", header)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        pulumi.set(__self__, "method", method)
        if retries and not isinstance(retries, int):
            raise TypeError("Expected argument 'retries' to be a int")
        pulumi.set(__self__, "retries", retries)
        if schedule_id and not isinstance(schedule_id, str):
            raise TypeError("Expected argument 'schedule_id' to be a str")
        pulumi.set(__self__, "schedule_id", schedule_id)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def callback(self) -> Optional[str]:
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> int:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def cron(self) -> str:
        return pulumi.get(self, "cron")

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> str:
        return pulumi.get(self, "schedule_id")


class AwaitableGetQStashScheduleV2Result(GetQStashScheduleV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQStashScheduleV2Result(
            body=self.body,
            callback=self.callback,
            created_at=self.created_at,
            cron=self.cron,
            delay=self.delay,
            destination=self.destination,
            header=self.header,
            id=self.id,
            method=self.method,
            retries=self.retries,
            schedule_id=self.schedule_id)


def get_q_stash_schedule_v2(body: Optional[str] = None,
                            callback: Optional[str] = None,
                            delay: Optional[str] = None,
                            header: Optional[str] = None,
                            retries: Optional[int] = None,
                            schedule_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQStashScheduleV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['body'] = body
    __args__['callback'] = callback
    __args__['delay'] = delay
    __args__['header'] = header
    __args__['retries'] = retries
    __args__['scheduleId'] = schedule_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('upstash:index/getQStashScheduleV2:getQStashScheduleV2', __args__, opts=opts, typ=GetQStashScheduleV2Result).value

    return AwaitableGetQStashScheduleV2Result(
        body=__ret__.body,
        callback=__ret__.callback,
        created_at=__ret__.created_at,
        cron=__ret__.cron,
        delay=__ret__.delay,
        destination=__ret__.destination,
        header=__ret__.header,
        id=__ret__.id,
        method=__ret__.method,
        retries=__ret__.retries,
        schedule_id=__ret__.schedule_id)


@_utilities.lift_output_func(get_q_stash_schedule_v2)
def get_q_stash_schedule_v2_output(body: Optional[pulumi.Input[Optional[str]]] = None,
                                   callback: Optional[pulumi.Input[Optional[str]]] = None,
                                   delay: Optional[pulumi.Input[Optional[str]]] = None,
                                   header: Optional[pulumi.Input[Optional[str]]] = None,
                                   retries: Optional[pulumi.Input[Optional[int]]] = None,
                                   schedule_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQStashScheduleV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
