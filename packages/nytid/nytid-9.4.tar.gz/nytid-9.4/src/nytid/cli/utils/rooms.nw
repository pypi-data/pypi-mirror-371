\chapter{The \texttt{cli.utils.rooms} module and \texttt{utils rooms} 
subcommands}%
\label{cli.utils.rooms}

In this chapter we introduce the subommands found under [[nytid utils 
rooms]],
it's the [[cli.utils.rooms]] module.
We want to add tools to easily filter and find free rooms that we're interested 
in for our courses.

The overall structure is like this.
<<rooms.py>>=
import logging
import typer
import typerconf
import typing
from typing_extensions import Annotated

<<imports>>

cli = typer.Typer(name="rooms",
                  help="Finding free rooms for courses")

<<constants>>
<<helper functions>>
<<argument and option definitions>>
<<subcommands>>

if __name__ == "__main__":
  cli()
@


\section{Setting the URL to free rooms}

We want a command that sets the URL to the free rooms file in the config.
Something like this:
\begin{center}
[[nytid utils rooms set-url https://cloud.timeedit.net/...]]
\end{center}
So that we don't have to set it manually.
Then the command itself simply sets the given URL in the config.
<<subcommands>>=
@cli.command(name="set-url")
def set_url_cmd(<<[[set-url]] args>>):
  """
  <<[[set-url]] doc>>
  """
  <<update the data in the config>>
@

We want to add a helpful description of how to find the right URL to add.
This is another reason to make this a command.
<<[[set-url]] doc>>=
Search for all the rooms that you're interested in in TimeEdit,
e.g. D1, D2, D3 and D37.
Set the relevant time intervals to something future proof: you
don't want it to be too short, then you have to update the URL
too often. Use a relative time frame. Get the URL for subscribing,
ICS format, make sure to select the right time frame.
@

To set the URL we need the URL as an argument.
<<[[set-url]] args>>=
url: Annotated[str,
               typer.Argument(help="URL to TimeEdit export, "
                                   "ICS format for subscribing.",
                              show_default=False)],
<<update the data in the config>>=
try:
  typerconf.set(BOOKED_ROOMS_URL, url)
except Exception as err:
  logging.error(f"Can't set URL: {err}")
  raise typer.Exit(1)
<<constants>>=
BOOKED_ROOMS_URL = "utils.rooms.url"
@

We also want to have a list of the rooms that we searched for.
This is so that we can figure out that a room is free---\ie not in the 
ICS---when we can't find a booking for it.
We want the user to supply such a list of rooms.
<<[[set-url]] args>>=
interesting_rooms: Annotated[typing.List[str],
                             typer.Argument(help="Space-separated list of "
                                                 "rooms in the schedule, e.g.: "
                                                 "D1 D2 D3 D37",
                                            show_default=False)]
<<update the data in the config>>=
try:
  typerconf.set(INTERESTING_ROOMS, interesting_rooms)
except Exception as err:
  logging.error(f"Can't set interesting rooms: {err}")
  raise typer.Exit(1)
<<constants>>=
INTERESTING_ROOMS = "utils.rooms.interesting_rooms"
@


\section{Computing free rooms}

We want to write a function that computes the free rooms based on the schedule 
we get from TimeEdit.
<<[[free_rooms]] doc>>=
Given a URL or path to a TimeEdit ICS file (`ics_url`),
return a CSV (list of tuples) of the free rooms:

[(start, end, unbooked_rooms), ...]

where start and end are datetime objects and unbooked_rooms is a set of 
strings.
<<helper functions>>=
def free_rooms(ics_url: str) -> typing.List[typing.Tuple]:
  """
  <<[[free_rooms]] doc>>
  """
  results = []
  all_rooms = set(typerconf.get(INTERESTING_ROOMS))

  <<let [[schedule]] be the parsed ICS file we get from [[ics_url]]>>
  for event in schedule.events:
    start = event.begin.datetime
    end = event.end.datetime

    booked_rooms = event.location.split(",")
    <<turn [[booked_rooms]] into a set, properly>>

    # If there are no booked rooms, we can skip this event.
    if not booked_rooms:
      continue

    unbooked_rooms = all_rooms - booked_rooms
    results.append((start, end, unbooked_rooms))

  <<clean up [[results]]>>
  return results
<<imports>>=
import datetime
@

If there are no booked rooms for a time, we get an empty string in a 
list---which will not be an empty set.
<<turn [[booked_rooms]] into a set, properly>>=
if len(booked_rooms) == 1 and booked_rooms[0].strip() == "":
  booked_rooms = set()
else:
  booked_rooms = set(map(lambda x: x.strip(), booked_rooms))
@

Finally, let's turn our attention to how to get the schedule containing all 
events.
Fortunately, we have the [[nytid.schedules.read_calendar]] function.
It simply takes the URL and returns a parsed schedule.
<<let [[schedule]] be the parsed ICS file we get from [[ics_url]]>>=
schedule = read_calendar(ics_url)
<<imports>>=
from nytid.schedules import read_calendar
@


\subsection{Clean up the results}

Now that we have the CSV, we just have to merge all the overlap.
We'll make it a simple algorithm:
If the start and end are the same, merge them by taking the union.

We'll use a dictionary to keep track of start and end times that are the same.
We use the start and end as the key, the free rooms as the value.
Then we can merge whenever the key already exists.
<<clean up [[results]]>>=
time_dict = {}
for start, end, unbooked_rooms in results:
  if (start, end) in time_dict:
    time_dict[(start, end)] |= unbooked_rooms
  else:
    time_dict[(start, end)] = unbooked_rooms

results = [(start.strftime(DATE_FORMAT),
            end.strftime(DATE_FORMAT),
            unbooked_rooms)
           for (start, end), unbooked_rooms in time_dict.items()]
results.sort()
<<constants>>=
DATE_FORMAT = "%Y-%m-%d %H:%M"
@



\section{The \texttt{unbooked} command}

We want a command that shows the free rooms in a human readable format.
\begin{center}
[[nytid utils rooms unbooked]]
\end{center}
This function will simply call the [[free_rooms]] function and print the CSV 
data that it returns.
<<[[unbooked]] doc>>=
Shows date and time and which rooms are free. Note that if a time is NOT in the 
list, it means that all rooms are FREE.
<<subcommands>>=
@cli.command(name="unbooked")
def unbooked_cmd(<<arg [[delimiter]]>>):
  """
  <<[[unbooked]] doc>>
  """
  <<let [[rooms_url]] be the URL to the TimeEdit export>>
  try:
    csv_out = csv.writer(sys.stdout, delimiter=delimiter)

    for start, end, rooms in free_rooms(rooms_url):
      csv_out.writerow([start, end, ", ".join(sorted(rooms))])
  except Exception as err:
    logging.error(f"Can't get free rooms: {err}")
    raise typer.Exit(1)
<<imports>>=
import csv
import sys
<<arg [[delimiter]]>>=
delimiter: delimiter_opt = "\t",
<<argument and option definitions>>=
delimiter_opt = Annotated[str,
                          typer.Option("-d", "--delimiter",
                          help="CSV delimiter, default tab.",
                          show_default=False)]
@


We need to get the URL to the TimeEdit export from the config.
If it's not there, we tell the user to set it.
<<let [[rooms_url]] be the URL to the TimeEdit export>>=
try:
  rooms_url = typerconf.get(BOOKED_ROOMS_URL)
except Exception as err:
  logging.error(f"Can't get URL from config: {err}")
  logging.info("Please set it with "
               "'nytid utils rooms set-url <url>'")
  raise typer.Exit(1)
@


\section{The \texttt{booked} command}

We also add a command that simply prints the bookings as they are.
\begin{center}
[[nytid utils rooms booked]]
\end{center}
This is useful to see what rooms are booked and when, because we still get 
overlaps when some rooms are booked 15--17 and some 15--16.
<<[[booked]] doc>>=
Shows date and time and which rooms are booked.
<<subcommands>>=
@cli.command(name="booked")
def booked_cmd(<<arg [[delimiter]]>>):
  """
  <<[[booked]] doc>>
  """
  <<let [[rooms_url]] be the URL to the TimeEdit export>>
  try:
    csv_out = csv.writer(sys.stdout, delimiter=delimiter)

    for start, end, rooms in booked_rooms(rooms_url):
      csv_out.writerow([start, end, ", ".join(sorted(rooms))])
  except Exception as err:
    logging.error(f"Can't get booked rooms: {err}")
    raise typer.Exit(1)
@

Now we implement the [[booked_rooms]] function similarly to the [[free_rooms]] 
function.
<<helper functions>>=
def booked_rooms(ics_url: str) -> typing.List[typing.Tuple]:
  """
  Given a URL or path to a TimeEdit ICS file ([[ics_url]]),
  return a ics (list of tuples) of the booked rooms:

  [(start, end, booked_rooms), ...]

  where start and end are datetime objects and booked_rooms is a set of 
  strings.
  """
  results = []

  <<let [[schedule]] be the parsed ICS file we get from [[ics_url]]>>
  for event in schedule.events:
    start = event.begin.datetime
    end = event.end.datetime

    booked_rooms = event.location.split(",")
    <<turn [[booked_rooms]] into a set, properly>>

    # If there are no booked rooms, we can skip this event.
    if not booked_rooms:
      continue

    results.append((start, end, booked_rooms))

  <<clean up [[results]]>>
  return results
