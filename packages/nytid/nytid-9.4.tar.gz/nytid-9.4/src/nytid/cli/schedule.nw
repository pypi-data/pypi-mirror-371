\chapter{The \texttt{cli.schedule} module and
         the \texttt{schedule} subcommands}%
\label{cli.schedule}

In this chapter we introduce the subommands found under [[nytid schedule]],
it's the [[cli.schedule]] module.
<<schedule.py>>=
import datetime
from enum import Enum
import ics.icalendar
import logging
import os
import sys
import typer
from typing_extensions import Annotated

from nytid.cli import courses as coursescli
from nytid import courses as courseutils
from nytid import schedules as schedutils
from nytid.cli.signupsheets import SIGNUPSHEET_URL_PATH

<<imports>>

cli = typer.Typer(name="schedule",
                  help="Working with course schedules")

<<helper functions>>
<<argument and option definitions>>
<<subcommands>>
@


\section{Default arguments for matching courses}

The first argument we need is to identify a set of courses.
For this we might also have to identify a set of registers.
We'll use the argument and option defined in the [[cli.courses]] module.
We'll default to all courses ([[.*]]) in the register of the [[mine]] command.
<<argument for matching courses>>=
course: Annotated[str, coursescli.course_arg_regex]
<<option for matching registers, default to mine>>=
register: Annotated[str, coursescli.register_opt_regex] = coursescli.MINE
@

Then we can create a list of course--configuration pairs like this.
<<set list [[courses]] to ((course, register), config)-pairs>>=
registers = coursescli.registers_regex(register)
courses = {}
for course_reg in coursescli.courses_regex(course, registers):
  try:
    courses[course_reg] = courseutils.get_course_config(*course_reg)
  <<handle errors for accessing course data>>
<<handle errors for accessing course data>>=
except KeyError as err:
  logging.warning(err)
except PermissionError as err:
  course, register = course_reg
  logging.warning(f"You don't have access to {course} in {register}: {err}")
@

Now, if that list is empty, we have no courses, then we exit with a non-zero 
return code.
<<set list [[courses]] to ((course, register), config)-pairs>>=
if not courses:
  sys.exit(1)
@


\section{My ICS, the \texttt{ics} command}

We want a command that outputs an ICS file that can be imported to a calendar, 
such as Google Calendar or Thunderbird.
The idea is to have a command such that you run
\begin{center}
[[nytid schedule ics > ~/public_html/nytid.ics]]
\end{center}
and then can import [[nytid.ics]] to the calendar through the public URL.
That way we can update it easily.
<<subcommands>>=
@cli.command(name="ics")
def ics_cmd(<<argument for matching courses>> = ".*",
            <<option for matching registers, default to mine>>,
            <<option for username to filter for>>):
  """
  Prints ICS data to stdout. Redirect to a .ics file, preferably in 
  ~/public_html, and add it to your calendar.
  """
  <<generate [[schedule]] from sign-up sheets for matching courses>>
  print(schedule.serialize())
<<generate [[schedule]] from sign-up sheets for matching courses>>=
<<set list [[courses]] to ((course, register), config)-pairs>>

schedule = ics.icalendar.Calendar()
<<set refresh rate for [[schedule]], same as TimeEdit>>

booked = []
for (course, register), config in courses.items():
  try:
    <<fill [[booked]] or [[schedule]] for [[course]] with [[config]]>>
  except Exception as err:
    logging.error(f"Can't read sign-up sheet nor ICS for "
                  f"{course} ({register}): {err}")
    continue

<<add [[booked]] to [[schedule]]>>
<<set meta data for [[schedule]]>>
@

When we read in the bookings for a course, unlike before, we want to use the 
schedule if there is no sign-up sheet available.
If there is no sign-up sheet, we'll get a [[KeyError]] exception when we try to 
get its entry from the course's config.
In that case we use the schedule instead.
<<fill [[booked]] or [[schedule]] for [[course]] with [[config]]>>=
try:
  <<add to [[booked]] from [[course]] in [[register]] using [[config]]>>
except KeyError as err_signupsheet:
  logging.warning(f"Can't read sign-up sheet for {course} ({register}): "
                  f"{err_signupsheet}")
  <<read schedule from [[config]], add to [[schedule]]>>
@

To add the bookings of a course to [[booked]], we simply get the URL of the 
sign-up sheet and read the bookings.
<<add to [[booked]] from [[course]] in [[register]] using [[config]]>>=
url = config.get(SIGNUPSHEET_URL_PATH)
<<convert [[url]] to Google Sheet CSV-export URL if necessary>>
booked += sheets.read_signup_sheet_from_url(url)
<<imports>>=
from nytid.signup import sheets
@

If it's a Google Sheets sharing URL, we want to convert it to the export-CSV 
URL.
<<convert [[url]] to Google Sheet CSV-export URL if necessary>>=
if "docs.google.com" in url:
  url = sheets.google_sheet_to_csv_url(url)
@

We read the ICS URL from the course's config and then read it in and add it to 
[[schedule]].
We also run all the events from the schedule through a filter that removes 
events that are uninteresting.
For instance, we don't want to include events like holidays, exam weeks or 
fairs like KTH Global.
<<read schedule from [[config]], add to [[schedule]]>>=
course_schedule = schedutils.read_calendar(config.get("ics"))
schedule.events.update(schedutils.event_filter(course_schedule.events))
@

We need a username.
We will default to the username of the logged in user.
<<option for username to filter for>>=
user: Annotated[str, username_opt] = default_username
<<argument and option definitions>>=
try:
  default_username = os.environ["USER"]
except KeyError:
  default_username = None

username_opt = typer.Option(help="Username to filter sign-up sheet for, "
                                 "defaults to logged in user's username.")
<<imports>>=
import os
@

We will filter [[booked]] by the sought-after username, if there is one.
We also want to prefix a "RESERVE:" to the event if the person is a reserve and 
not booked to work.
Then we turn it into an ICS calendar object [[schedule]] as desired.
<<add [[booked]] to [[schedule]]>>=
if user:
  booked = sheets.filter_events_by_TA(user, booked)
  booked = map(functools.partial(add_reserve_to_title, user), booked)

schedule.events.update(set(map_drop_exceptions(sheets.EventFromCSV, booked)))
<<imports>>=
import functools
import ics.icalendar
<<helper functions>>=
def map_drop_exceptions(func, iterable):
  """
  Same as map, but ignores exceptions from `func`.
  Logs a warning when an item is dropped.
  """
  for item in iterable:
    try:
      yield func(item)
    except Exception as err:
      logging.warning(f"Dropped {item}: {err}")
@

Now, only that helper function remains.
It takes a TA and an event, checks if the TA is in the list of reserves, if so, 
modifies the event to include "RESERVE:" in the title.
<<helper functions>>=
def add_reserve_to_title(ta, event):
  """
  Input: an event in CSV form.
  Ouput: the same CSV data, but with title prepended "RESERVE: " if TA is 
  among the reserves.
  """
  _, reserves = sheets.get_booked_TAs_from_csv(event)
  if ta in reserves:
      event[0] = "RESERVE: " + event[0]

  return event
@

\subsection{Adding refresh interval to ICS output}

ICS supports specifying the refresh interval for a calendar\footnote{%
  See 
  \url{https://icalendar.org/New-Properties-for-iCalendar-RFC-7986/5-7-refresh-interval-property.html}.
  See also
  \url{https://lauren-c-stephen.medium.com/subscribe-to-an-icalendar-feed-in-google-calendar-and-solve-update-issues-79b4e84b3c64}.
}.
However, the ICS library we're using doesn't, but it supports custom properties 
that we can use.
We can set custom properties by using the [[.extra]] attribute.

There are seemingly two ways to do this.
One is to set the [[REFRESH-INTERVAL]] property.
Another, found by inspecting TimeEdit exports, is to set method to [[PUBLISH]] 
and then add a property [[X-PUBLISHED-TTL]].
<<set refresh rate for [[schedule]]>>=
schedule.extra += [ContentLine("REFRESH-INTERVAL",
                               {"VALUE": ["DURATION"]},
                               "PT20M")]
<<set refresh rate for [[schedule]], same as TimeEdit>>=
schedule.method = "PUBLISH"
schedule.extra += [ContentLine("X-PUBLISHED-TTL", {}, "PT20M")]
<<imports>>=
from ics.grammar.parse import ContentLine
@

\subsection{Other metadata for ICS export}

Based on our observations from the TimeEdit exports, we can set other metadata 
in the calendar export.
<<set meta data for [[schedule]]>>=
schedule.name = "Nytid"
if user:
  schedule.name = f"{user}'s nytid"
schedule.extra += [ContentLine("X-WR-CALNAME", {}, schedule.name)]
schedule.description = "Nytid export"
if user:
  schedule.description = f"Nytid export for {user}"
schedule.extra += [ContentLine("X-WR-CALDESC", {}, schedule.description)]
@


\section{Showing the schedule, the \texttt{schedule show} command}

We want a command to just show the schedule in human readable format.
It should be able to include several courses.
We will use regex to match the courses and registers.
<<subcommands>>=
@cli.command()
def show(<<argument for matching courses>> = ".*",
         <<option for matching registers, default to mine>>,
         <<option for username to filter for>>,
         <<default arguments for start and end dates>>,
         <<printing control options>>):
  """
  Shows schedule for courses in human readable format. If there is a sign-up 
  sheet for a course, it is used instead of the ICS.
  """
  <<double check [[start]] and [[end]] dates>>
  <<generate [[schedule]] from sign-up sheets for matching courses>>
  <<print [[schedule]]>>
@

\subsection{Default arguments for start and end dates}

We'd also like to show only part of the schedule, given a start and end points.
We want to have today as the default start point and a week later as the 
default end point.
<<default arguments for start and end dates>>=
start: Annotated[datetime.datetime, start_date_opt]
  = str(datetime.date.today()),
end: Annotated[datetime.datetime, end_date_opt]
  = str(datetime.date.today() + datetime.timedelta(weeks=1))
<<argument and option definitions>>=
start_date_opt = typer.Option(help="The start date",
                              formats=["%Y-%m-%d"])
end_date_opt = typer.Option(help="The end date",
                            formats=["%Y-%m-%d"])
@

If we change the start date, but not the end date, the end date might be before 
the start date.
A user will likely expect that if they update only the start date, the end date 
will still be a week after the start date.
<<helper functions>>=
def update_end_date(start, end):
  """
  Returns a correct end date.
  """
  if end < start:
    return start + datetime.timedelta(weeks=1)
  return end
<<double check [[start]] and [[end]] dates>>=
end = update_end_date(start, end)
@

\subsubsection{Filter events based on start--end time}

We don't want to print events that end before our starting time and we don't 
want to print events that start after our ending time.
Once we've passed the ending time, we can break, since the timeline is given in 
chronological order.
<<continue if [[event]] is not in start-end interval>>=
if event.end.date() < start.date():
  continue
elif event.begin.date() > end.date():
  continue
@

\subsubsection{Printing the events}

To print, we simply go through the timeline and print events that fall within 
the time interval that we're interested in.
<<print [[schedule]]>>=
<<printing events variables>>
for event in schedule.timeline:
  <<continue if [[event]] is not in start-end interval>>
  <<otherwise print [[event]]>>
@

To print the events in a more useful way, we'd like to have an empty line here 
and there.
Where we'd like to have it might vary on the printout.
If we print a week, we'd might want to have it between days.
Otherwise, between weeks for longer periods.
<<printing control options>>=
group_by: Annotated[GroupByDayOrWeek, group_by_day_or_week]
  = "week",
<<argument and option definitions>>=
class GroupByDayOrWeek(str, Enum):
  week = "week"
  day = "day"

group_by_day_or_week = typer.Option(help="Choose whether to group events "
                                         "by day or week",
                                    case_sensitive=False)
@

To print, we simply keep track of the first round, no extra spacing there; and 
then add a line whenever we detect a change in either day or week.
<<printing events variables>>=
first = True
if group_by == GroupByDayOrWeek.week:
  group_by_idx = 1
elif group_by == GroupByDayOrWeek.day:
  group_by_idx = 2
<<otherwise print [[event]]>>=
if first:
  first = False
  current_epoc = event.begin.isocalendar()[group_by_idx]
elif event.begin.isocalendar()[group_by_idx] != current_epoc:
  print("\n")
  current_epoc = event.begin.isocalendar()[group_by_idx]
@

As to the actual printing.
We want to print to stdout using CSV format.
<<printing events variables>>=
csvout = csv.writer(sys.stdout, delimiter=delimiter)
<<otherwise print [[event]]>>=
csvout.writerow(schedutils.format_event_csv(event, week, location))
<<imports>>=
import csv
import sys
@

We use the [[week]] argument to [[format_event_short]] to indicate whether we 
want to print the week number and day or not.
<<printing control options>>=
week: Annotated[bool, week_opt] = False,
<<argument and option definitions>>=
week_opt = typer.Option(help="Print week number and day of week")
@ The same for the location.
<<printing control options>>=
location: Annotated[bool, location_opt] = True,
<<argument and option definitions>>=
location_opt = typer.Option(help="Print location of event")
@

Finally, we want to output the CSV in tab-separated format by default, to be 
able to use tools like [[cut]] on the output.
<<printing control options>>=
delimiter: Annotated[str, delimiter_opt] = "\t",
<<argument and option definitions>>=
delimiter_opt = typer.Option(help="Delimiter for CSV output")
@
