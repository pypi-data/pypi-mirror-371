\chapter{Course management, the \texttt{courses} module}\label{courses}

In this chapter we cover the [[nytid.courses]] module and API for managing 
courses.
We want to add courses to course registers (\cref{registry}).

Each course register is a directory.
We can add a course by creating a subdirectory for the course.
Then we can manage access by managing access to that subdirectory.
Each course subdirectory contains a config file for the course.


\section{Code outline}

Here we provide the module [[nytid.courses]] ([[<<init.py>>]]) that is used to 
manage courses found in the course registers.
<<init.py>>=
"""The nytid course management module"""

import typerconf

import pathlib
from nytid.courses import registry
from nytid import storage
import typing

<<functions>>
@

\subsection{Testing}

We also add tests.
These are all prepended [[test_]] to the function name.
We will run them using [[pytest]].

We need some setup for the testing.
Particularly, we must set up a register.
For this we need a config and a temporary directory.
<<test courses.py>>=
from typerconf import Config
import pathlib
import tempfile

from nytid.courses import *

register = "register"
reg_path = pathlib.Path(tempfile.mkdtemp())

course = "course"

config = Config()

registry.add(register, str(reg_path), config=config)

<<test functions>>
@

We want to be able to override the default configuration by supplying a value 
to the [[config]] argument of these functions.
This also helps with testing.
<<config arg>>=
config: typerconf.Config = typerconf
<<config arg doc>>=
The default `config` is the default config of the `typerconf` package.
@


\section{Adding a new course}

We will add a function [[new]] to create a new course.
<<functions>>=
def new(<<new args>>
        <<config arg>>):
  """
  Creates a new course. It takes the following arguments:

  <<new doc>>

  <<config arg doc>>
  """
  <<new body>>
@ We will write the help section (docstring) along with the arguments and how 
they are used by the command.
(Note that there is no comma between [[<<new args>>]] and [[<<config arg>>]] in 
the function head, this is due to there being enough commas in [[<<new args>>]] 
due to it not knowing what is the last argument---so it terminates with a 
comma.)

\subsection{Creating the course}\label{CreatingTheCourse}

To create a course, we need a name for the course.
<<new args>>=
name: str,
<<new doc>>=
- `name` (mandatory), which is the human readable nickname of the course. This 
  is used to refer to the course with other parts of nytid.

@

We will create the course by creating a directory in an available courses 
directory and write a [[config.json]] file there.
However, if it exists, we want to exit with an error.
<<new body>>=
<<determine which course register path [[register_path]] to use>>

with storage.open_root(f"{register_path}/{name}") as root:
  try:
    with root.open("config.json", "r") as course_conf_file:
      pass
  except FileNotFoundError:
    course_conf = typerconf.Config()
  else:
    raise FileExistsError(f"The config for {name} already exists: "
                          f"{register_path}/{name}/config.json")

  <<add settings to [[course_conf]]>>

  with root.open("config.json", "w") as course_conf_file:
    course_conf.write_config(course_conf_file)
@

Now we want to test the function~[[new]].
This means that we want to check that there is a directory for the course in 
the path~[[reg_path]].
And inside it, there should be a file~[[config.json]].
<<test functions>>=
def test_new_create():
  for subdir in reg_path.iterdir():
    if subdir.name == course:
      assert False

  <<call new to test>>

  found = False
  for subdir in reg_path.iterdir():
    if subdir.name == course:
      for file in subdir.iterdir():
        if file.name == "config.json":
          found = True

  if not found:
    assert False
@

We would first like to create the course in one of the available course 
registers.
If there is only one register, we'll create the course there.
If there are more, however, we need the user to decide which one to use.
<<new args>>=
register: str = None,
<<new doc>>=
- `register` is the name of the course register to use. Required if there are 
  more than one course register in the config. Default is `None`, which selects 
  the only available course register. If more registers, raises exception 
  `ValueError`.

@

Now, remember that when we make calls to [[registry]], we must pass on the 
[[config]] argument in case it's overridden.
<<determine which course register path [[register_path]] to use>>=
if not register:
  registers = registry.ls(config=config)

  if len(registers) > 1:
    raise ValueError(f"Must specify a course register: {registers}")
  elif len(registers) < 1:
    raise ValueError(f"There are no course registers in the config.")
  else:
    register = registers[0]

register_path = registry.get(register, config=config)
@


\subsection{Setting the course settings}

We want to be able to set the course settings.
To make it easier, we'll simply accept all settings as a dictionary [[kwdata]] 
that will be set in the course config.
However, we want to provide some defaults for some of them if they're not 
given.
<<new args>>=
kwdata: dict = None,
<<new doc>>=
- `kwdata` is a dictionary containing key-value pairs for the course 
  configuration. `kwdata` expect the following:

    <<kwdata doc>>

  Any other key--value pairs will simply be written to the course configuration 
  as is.
<<add settings to [[course_conf]]>>=
if not kwdata:
  kwdata = {}

<<process expected [[key]]s>>

for key, value in kwdata.items():
  course_conf.set(key, value)
@

\subsection{Contact information}

We want to include the contact information for whoever is responsible for the 
course.

Usually, it's the course responsible who will run the [[courses new]] command.
We will let the user adjust the default values through the main config file, in 
the same fashion as Git.
<<kwdata doc>>=
- `contact` contains the contact information for the course responsible, it can 
  be any format, but we recommend "Firstname Lastname <email>". The default 
  value is built from values in the main config file:

    - `me.name` contains the name,
    - `me.email` contains the email address.

<<process expected [[key]]s>>=
try:
  contact = kwdata["contact"]
except KeyError:
  contact = None

if not contact:
  try:
    contact = config.get("me.name")
  except KeyError:
    contact = ""

  try:
    email = config.get("me.email")
  except KeyError:
    pass
  else:
    if contact:
      contact += f" <{email}>"
    else:
      contact = email

kwdata["contact"] = contact
@

\subsection{Course code}

Each course has a course code.
We need one to identity the course from year to year and to identify similar 
courses.
The reason we're interested in this is because then we can recruit TAs from 
similar enough courses.
<<kwdata doc>>=
- `code`, which is the course code. This is to relate the course to other 
  courses through `related_codes`. However, it's not mandatory.

- `related_codes`, a list of related course codes. Courses with one of these 
  course codes can share TAs.

<<process expected [[key]]s>>=
if "code" not in kwdata:
  kwdata["code"] = None
if "related_codes" not in kwdata:
  kwdata["related_codes"] = None
@

\subsection{The schedule}

All courses need a schedule for their teaching.
We add a URL to the ICS file, \eg TimeEdit.
<<kwdata doc>>=
- `ics` (optional, default None), a URL to an ICS file with the schedule of the 
  course. E.g. a URL to a TimeEdit export/subscription.

<<process expected [[key]]s>>=
if "ics" not in kwdata:
  kwdata["ics"] = None
@

\subsection{The data directory}

Each course also needs a data directory.
The data directory is a directory that only members can access.
It can contain a more detailed config or TA bookings.
The default path is simply to append [[data]] to the course's config path.
<<kwdata doc>>=
- `data_path` is the path to the course's data directory. If not supplied,
  we append `/data` to the course's config directory.

@

If the user didn't specify a data directory, then [[data_path]] will be 
[[None]] or not exist.
In this case, we should update it with the default value.
We get the default value from [[root.path]] (see
[[<<new body>>]]).
<<process expected [[key]]s>>=
try:
  data_path = kwdata["data_path"]
except KeyError:
  data_path = None

if not data_path:
  data_path = str(root.path / "data")

kwdata["data_path"] = data_path
@

\subsection{Testing the \texttt{new} function}

Now we can finally make the call to [[new]] to test it.
<<call new to test>>=
new(course, register, config=config)
@


\section{Revising the config of a course}

We want to be able to read a config file of a course and to update it.
Here we provide that functionality.
Fortunately, most of what we need is already provided by [[typerconf]].

We need two things to locate a course.
We need the course name and the course register in which it is located.
<<functions>>=
def get_course_config(course: str,
                      register: str = None,
                      <<config arg>>) -> typerconf.Config:
  """
  Returns a typerconf.Config object for the course's configuration. Writeback 
  is enabled meaning that any changes made to the config object will be written 
  back to the config file.

  `course` identifies the course in the `register`. If `register` is None, 
  search through all registers in the registry, use the first one found 
  (undefined in which order duplicates are sorted).

  <<config arg doc>>
  """
  <<set [[course]]'s config file as [[conf]]>>
  return conf
@

Let's test this.
<<test functions>>=
def test_get_course_config():
  conf = get_course_config(course, register, config=config)
  assert conf.get("data_path") == str(reg_path / course / "data")

  conf.set("data_path", "a/b/c")
  conf.set("contact", "Me")

  conf2 = get_course_config(course, register, config=config)
  assert conf2.get("data_path") == "a/b/c"
  assert conf2.get("contact") == "Me"
@

\subsection{Finding the course}

Let's start with the course.
We need the name of the course ([[course]]) so that we can look it up in the 
course register ([[register]]) to get its config file.

As mentioned above, if the user doesn't specify a course register, we must 
search through all of them.
In that case, we'll use [[registry.ls()]].
If we have a register specified, we'll use [[registry.get(register_name)]].
<<set [[course]]'s config file as [[conf]]>>=
if register:
  register_map = {register: registry.get(register, config=config)}
else:
  register_map = {register: registry.get(register, config=config)
                  for register in registry.ls(config=config)}
@

In the course register, each course has its own subdirectory.
Now let's turn back to the main problem.
<<set [[course]]'s config file as [[conf]]>>=
try:
  conf_path = get_course_conf_path(course, register_map)
except KeyError as err:
  raise KeyError(f"Couldn't uniquely identify {course} in "
                 f"registers {register_map.keys()}: {err}")

conf = typerconf.Config(conf_file=conf_path)
@

We want [[get_course_conf_path]] to ensure a unique match for [[course]].
This means that we must search through all the course registers and keep 
track of the number of matches.
<<functions>>=
def get_course_conf_path(course, register_map):
  """
  Find the course named `course` among all the courses in the registers found 
  in `register_map`, a list of (name, path)-tuples.

  If `course` is not a unique match, it raises a `KeyError`.
  """
  <<[[get_course_conf_path]] variables>>

  for register_name, register_path in register_map.items():
    <<search for matches to [[course]] in [[register_path]]>>

  <<check ending criteria for [[get_course_conf_path]], return>>
@

In each course register, we go through the courses to check for a match.
If we find the course, we note its [[conf_path]] and also note that we had a 
hit in [[register_name]].
<<search for matches to [[course]] in [[register_path]]>>=
courses = all_courses(register_path)
matching_courses = list(filter(lambda x: x == course, courses))
if len(matching_courses) > 0:
  conf_path = f"{register_path}/{course}/config.json"
  hits_from_register_dirs.append(register_name)
<<[[get_course_conf_path]] variables>>=
hits_from_register_dirs = []
conf_path = None
@

\subsection{Listing all courses in register}

To list all the courses, we simply list all directories in the register's 
directory.
<<functions>>=
def all_courses(register_path: pathlib.Path) -> typing.List[str]:
  """
  Returns a list (generator) of all courses found in `register_path`.
  """
  for file in pathlib.Path(register_path).iterdir():
    if file.is_dir():
      yield file.name
@

Once we're through all the courses, we check if we have a non-[[None]] value in 
[[conf_path]].
If not, we didn't find anything.
Otherwise, we check how many entries we have in [[hits_from_register_dirs]].
If we have more than one, we raise an exception saying there were too many 
matches.
<<check ending criteria for [[get_course_conf_path]], return>>=
if not conf_path:
  raise KeyError(f"Couldn't find course {course}.")
elif len(hits_from_register_dirs) > 1:
  raise KeyError(f"Course `{course}` found in "
                  f"several course registers: {hits_from_register_dirs}.")

return conf_path
@


\section{Getting the data directory of a course}

We want to access a course's data directory.
We'll now provide a function that returns a [[StorageRoot]] object for a given 
course's data directory.
<<functions>>=
def get_course_data(course: str,
                    register: str = None,
                    <<config arg>>) -> storage.StorageRoot:
  """
  Returns a StorageRoot object for the data directory of the course `course`.

  If `register` is `None` (default), the first occurence of `course` in all 
  registers will be used.
  """
  course_conf = get_course_config(course, register, config)
  return storage.open_root(course_conf.get("data_path"))

