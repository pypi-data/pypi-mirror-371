"""
{{ class_name }} model for the application.
"""

import uuid
from datetime import datetime
from sqlalchemy import Column, String, DateTime, UUID, Integer, Text, Float, Boolean, Date, Time, JSON, Numeric
from sqlalchemy.sql import func
from config.database import Base


class {{ class_name }}(Base):
    """{{ class_name }} model."""
    
    __tablename__ = "{{ table_name }}"
    
    # Primary key and timestamps (always included)
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Custom attributes
{% for attr in attributes %}    {{ attr.name }} = Column({{ attr.sqlalchemy_type }}{% if not attr.nullable %}, nullable=False{% endif %})
{% endfor %}
    
    def __repr__(self):
        return f"<{{ class_name }}(id={self.id}{% if attributes and attributes[0] %}, {{ attributes[0].name }}={getattr(self, '{{ attributes[0].name }}', None)}{% endif %})>"
    
    def to_dict(self):
        """Convert model instance to dictionary."""
        return {
            'id': str(self.id),
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
{% for attr in attributes %}            '{{ attr.name }}': self.{{ attr.name }},
{% endfor %}        }
