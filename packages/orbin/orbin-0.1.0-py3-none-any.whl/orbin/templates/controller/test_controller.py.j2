"""
Tests for {{ class_name }}.
"""

import pytest
import uuid
from orbin.testing import BaseTestCase
{% if model_name %}from app.models.{{ model_name }} import {{ model_class_name }}
{% endif %}

class Test{{ model_class_name }}Controller(BaseTestCase):
    """Test class for {{ model_class_name }}Controller."""
{% if model_name %}
    @pytest.fixture(scope="function")
    def sample_{{ controller_name }}(self, db_session):
        """Create sample {{ controller_name }} from fixtures."""
        fixtures = self.load_fixtures("{{ controller_name }}")
        items = []
        
        for item_key, item_data in fixtures['{{ controller_name }}'].items():
            item = {{ model_class_name }}(
{% for attr in model_attributes %}                {{ attr.name }}=item_data['{{ attr.name }}'],
{% endfor %}            )
            db_session.add(item)
            items.append(item)
        
        db_session.commit()
        
        # Refresh to get IDs
        for item in items:
            db_session.refresh(item)
        
        return items

    def test_index_{{ controller_name }}_empty(self, client, db_session):
        """Test listing {{ controller_name }} when database is empty."""
        response = client.get("/{{ controller_name }}")
        assert response.status_code == 200
        assert response.json() == []

    def test_index_{{ controller_name }}_with_data(self, client, sample_{{ controller_name }}):
        """Test listing {{ controller_name }} with sample data."""
        response = client.get("/{{ controller_name }}")
        assert response.status_code == 200
        
        items = response.json()
        assert len(items) == len(sample_{{ controller_name }})
        
        # Check first item structure
        if items:
            item = items[0]
            assert "id" in item
{% for attr in model_attributes %}            assert "{{ attr.name }}" in item
{% endfor %}            assert "created_at" in item
            assert "updated_at" in item

    def test_show_{{ model_name }}_exists(self, client, sample_{{ controller_name }}):
        """Test getting a {{ model_name }} that exists."""
        item = sample_{{ controller_name }}[0]
        response = client.get(f"/{{ controller_name }}/{item.id}")
        assert response.status_code == 200
        
        item_data = response.json()
{% for attr in model_attributes %}        assert item_data["{{ attr.name }}"] == item.{{ attr.name }}
{% endfor %}
    def test_show_{{ model_name }}_not_found(self, client, db_session):
        """Test getting a {{ model_name }} that doesn't exist."""
        fake_id = str(uuid.uuid4())
        response = client.get(f"/{{ controller_name }}/{fake_id}")
        assert response.status_code == 404
        assert "{{ model_class_name }} not found" in response.json()["detail"]

    def test_create_{{ model_name }}_valid_data(self, client, db_session):
        """Test creating a {{ model_name }} with valid data."""
        item_data = {
{% for attr in model_attributes %}            "{{ attr.name }}": {{ attr.test_value }},
{% endfor %}        }
        
        response = client.post("/{{ controller_name }}", json=item_data)
        assert response.status_code == 200
        
        created_item = response.json()
{% for attr in model_attributes %}        assert created_item["{{ attr.name }}"] == item_data["{{ attr.name }}"]
{% endfor %}        assert "id" in created_item
        assert "created_at" in created_item
        assert "updated_at" in created_item

    def test_update_{{ model_name }}_exists(self, client, sample_{{ controller_name }}):
        """Test updating a {{ model_name }} that exists."""
        item = sample_{{ controller_name }}[0]
        update_data = {
{% for attr in model_attributes %}            "{{ attr.name }}": {{ attr.test_value_alt }},
{% endfor %}        }
        
        response = client.put(f"/{{ controller_name }}/{item.id}", json=update_data)
        assert response.status_code == 200
        
        updated_item = response.json()
{% for attr in model_attributes %}        assert updated_item["{{ attr.name }}"] == update_data["{{ attr.name }}"]
{% endfor %}
    def test_update_{{ model_name }}_not_found(self, client, db_session):
        """Test updating a {{ model_name }} that doesn't exist."""
        fake_id = str(uuid.uuid4())
        update_data = {
{% for attr in model_attributes %}            "{{ attr.name }}": {{ attr.test_value }},
{% endfor %}        }
        
        response = client.put(f"/{{ controller_name }}/{fake_id}", json=update_data)
        assert response.status_code == 404
        assert "{{ model_class_name }} not found" in response.json()["detail"]

    def test_delete_{{ model_name }}_exists(self, client, sample_{{ controller_name }}):
        """Test deleting a {{ model_name }} that exists."""
        item = sample_{{ controller_name }}[0]
        response = client.delete(f"/{{ controller_name }}/{item.id}")
        assert response.status_code == 200
        
        result = response.json()
        assert "message" in result
        assert "{{ model_class_name }} deleted successfully" in result["message"]
        assert result["id"] == str(item.id)
        
        # Verify item is actually deleted
        get_response = client.get(f"/{{ controller_name }}/{item.id}")
        assert get_response.status_code == 404

    def test_delete_{{ model_name }}_not_found(self, client, db_session):
        """Test deleting a {{ model_name }} that doesn't exist."""
        fake_id = str(uuid.uuid4())
        response = client.delete(f"/{{ controller_name }}/{fake_id}")
        assert response.status_code == 404
        assert "{{ model_class_name }} not found" in response.json()["detail"]

    def test_{{ model_name }}_crud_workflow(self, client, db_session):
        """Test complete CRUD workflow for a {{ model_name }}."""
        # Create
        item_data = {
{% for attr in model_attributes %}            "{{ attr.name }}": {{ attr.test_value }},
{% endfor %}        }
        
        create_response = client.post("/{{ controller_name }}", json=item_data)
        assert create_response.status_code == 200
        created_item = create_response.json()
        item_id = created_item["id"]
        
        # Read
        get_response = client.get(f"/{{ controller_name }}/{item_id}")
        assert get_response.status_code == 200
{% for attr in model_attributes %}        assert get_response.json()["{{ attr.name }}"] == item_data["{{ attr.name }}"]
{% endfor %}        
        # Update
        update_data = {
{% for attr in model_attributes %}            "{{ attr.name }}": {{ attr.test_value_alt }},
{% endfor %}        }
        update_response = client.put(f"/{{ controller_name }}/{item_id}", json=update_data)
        assert update_response.status_code == 200
{% for attr in model_attributes %}        assert update_response.json()["{{ attr.name }}"] == update_data["{{ attr.name }}"]
{% endfor %}        
        # Delete
        delete_response = client.delete(f"/{{ controller_name }}/{item_id}")
        assert delete_response.status_code == 200
        
        # Verify deletion
        final_get_response = client.get(f"/{{ controller_name }}/{item_id}")
        assert final_get_response.status_code == 404
{% endif %}
