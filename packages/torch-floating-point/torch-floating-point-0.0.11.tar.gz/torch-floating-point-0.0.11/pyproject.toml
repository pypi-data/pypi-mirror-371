[build-system]
requires = ["setuptools>=61.0", "wheel", "torch>=2.4.0"]
build-backend = "setuptools.build_meta"

[project]
name = "torch-floating-point"
dynamic = ["version"]
description = "A PyTorch library for custom floating point quantization with autograd support"
readme = "README.md"

authors = [
    {name = "Samir Moustafa", email = "samir.moustafa.97@gmail.com"}
]
maintainers = [
    {name = "Samir Moustafa", email = "samir.moustafa.97@gmail.com"}
]
keywords = ["pytorch", "floating-point", "quantization", "autograd", "machine-learning", "deep-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: Pytest",
]
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]


[project.urls]
Homepage = "https://github.com/SamirMoustafa/torch-floating-point"
Documentation = "https://torch-floating-point.readthedocs.io/"
Repository = "https://github.com/SamirMoustafa/torch-floating-point"
"Bug Tracker" = "https://github.com/SamirMoustafa/torch-floating-point/issues"
"Source Code" = "https://github.com/SamirMoustafa/torch-floating-point"



[tool.setuptools]
packages = ["floating_point"]

[tool.setuptools.package-data]
floating_point = ["*.cpp", "*.cu", "*.h"]

[tool.setuptools.dynamic]
version = {attr = "version.__version__"}

[tool.setuptools.package-dir]
floating_point = "floating_point"

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 120
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "PL", # pylint
    "RUF", # ruff-specific rules
]

lint.ignore = [
    "PLR0911",  # pylint: Too many return statements
    "PLR0913",  # pylint: Too many arguments
    "E402", # pycodestyle: Module level import not at top of file
    "B028", # explicitly stacklevel in warnings.warn
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test/*" = ["PLR2004", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["floating_point"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
exclude = ["test/**/*.py"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]




