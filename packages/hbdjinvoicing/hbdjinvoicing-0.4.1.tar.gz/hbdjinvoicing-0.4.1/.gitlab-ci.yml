stages:
  - test
  - publish

tests:
  stage: test
  image: python:3.12
  variables:
    DJANGO_SETTINGS_MODULE: "devproject.settings"
    DB_NAME: "postgres"
    DB_USER: "postgres"
    DB_PASSWORD: "mysecretpassword"
    DB_HOST: "postgres"
    DB_PORT: "5432"
    POSTGRES_HOST_AUTH_METHOD: "trust"
  services:
    - postgres:16
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - python manage.py makemigrations --check --dry-run
    - pytest --create-db --cov --cov-report=xml -n auto
    - if [ ! -z "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ] ; then git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME ; diff-cover coverage.xml --fail-under=90 --compare-branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME ; fi
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

publish:
  stage: publish
  image: python:3-bookworm
  rules:
    - if: $CI_COMMIT_TAG
  id_tokens:
    PYPI_ID_TOKEN:
      # Use "testpypi" if uploading to TestPyPI
      aud: pypi
  script:
    # Install dependencies
    - apt update && apt install -y jq
    - python -m pip install -U twine id build

    # Retrieve the OIDC token from GitLab CI/CD, and exchange it for a PyPI API token
    - oidc_token=$(python -m id PYPI)
    # Replace "https://pypi.org/*" with "https://test.pypi.org/*" if uploading to TestPyPI
    - resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")

    - python -m build
    # Upload to PyPI authenticating via the newly-minted token
    # Add "--repository testpypi" if uploading to TestPyPI
    - twine upload -u __token__ -p "${api_token}" dist/*
