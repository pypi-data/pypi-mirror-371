{
  "ERROR_EMPTY_DATA": "Njehie: data efu enyere",
  "ERROR_COLUMN_NOT_FOUND": "Njehie: kọlụm '{}' ahụghị na dataframe",
  "ERROR_PLOT_GENERATION": "Njehie na-eme atụmatụ: {}",
  "ERROR_INVALID_DATA": "Njehie: data ezighi ezi enyere",
  "ERROR_MODA": "Njehie na-agba mbọ",
  "ERROR_MEDIA": "Njehie ihe pụtara",
  "ERROR_MEDIANA": "Njehie na-agbakọ median",
  "ERROR_RANGO": "Njehie na-agbakọ oke",
  "ERROR_VARIANZA": "Njehie na-agbakọ mgbanwe",
  "ERROR_DESVIACION": "Njehie na-agbakọ",
  "ERROR_DISPERSION": "Njehie na-agbasa usoro mgbasa",
  "ERROR_COLUMNA_NO_EXISTE": "Kunggba ọgwụ '{}' adịghị na dataaframe ahụ",
  "error_type": "Ntinye ga-abụrịrị ụdị eriri.",
  "not_found": "Enweghị ọrụ aha ya bụ \"{Aha {aha.",
  "title_all": "Akwụkwọ Ndoma",
  "title_not_found": "Ahụghị ọrụ",
  "copy": "Detuo na Clipboard",
  "close": "Mechie",
  "call": "Kpọọ (aha, ụdị = onweghị, ụzọ = onweghị, oge = 5, siri ike)\nNchọta maka aha faịlụ (na ụdị dị iche iche) na folda enyere (ma ọ bụ site na CWD) na-agbadata ma gbadaa,\nna ibu ya dabere na ụdị ya na-akpaghị aka.\n\nParames:\n    Aha (str): Banye aha nke faịlị, na-enweghị ndọtị.\n    Pịnye (str, nhọrọ): Ntinye uche ya ('CSV', 'JSON', 'XML').\n    ụzọ (eriri, nhọrọ): ụzọ mbụ iji chọọ.\n    Oge (Int, nhọrọ): Oge nchọta kachasị na sekọnd.\n    Uzo siri ike (bool, nhọrọ): Ọ bụrụ na eziokwu, na-ekwupụta njehie ma ọ bụrụ na achọtala ọtụtụ faịlụ ahụ.\n\nNlọghachi: ọdịnaya nke faịlụ achọtara ma ọ bụ onweghị.",
  "load_user_translations": "Ibu_ser_translisations (Lang_aphey = \"Lang.json\")\nNsụgharị Nsụgharị Si Na Na Na Na Na Na Na Na Na Na Naa\n\nParames:\n    Lang_path (str, Nhọrọ): uzo rue ntụgharị onye ọrụ. Defaara na \"lang.json\".\n\nOmume:\n    - Ọ bụrụ na faịlụ ahụ dị ma bụrụ nke dị irè JSON, na-agbanye ya na nsụgharị ndabere\n    - Ọ bụrụ na faịlụ ahụ adị, na-echekwa naanị nsụgharị ndabara\n    - na - egosiputa popup ịdọ aka ná ntị ma ọ bụrụ na faịlụ ahụ dị mana enweghị ike ibu ya\n    - Imelite ụwa niile _translication\n\nIHE: A ga-akpọ ọrụ a tupu iji T () ọrụ maka ntụgharị ọrụ iji rụọ ọrụ.",
  "switch": "Sistemụ ọkụ na-eme ka ọ bụrụ nke Python. Na-akwado:\n- otutu igodo ekwenti\n- Dakọtara site na ọnụahịa, ụdị, regex, ọrụ larịmma, ma ọ bụ klaasị\n- Pandas na Nchiju data Nkwado Nkwado\n- Nhọrọ async dara nke ikpe\n- Accen-Unive mode maka ịrụ ọtụtụ ikpe dabara adaba\n- Debug mode iji log",
  "async_switch": "Kechie ya ka ọ banye na mpaghara ASYNC. Parames:\n- Uru: Uru dabara na ikpe akọwapụtara.\n- ** Kwargs: Arụmụka isiokwu nhọrọ na-agafe na klas ịgbanyụ ọkụ. Ndị a nwere ike ịgụnye:\n  - Damy_all (Bool): Mechie ikpe niile dabara adaba kama ịkwụsị na mbụ.\n  - Bubg (Bool): Mbipụta nke dabara na nke egbu.\n  - Async_mode (bool): ekwesighi ka agafee na ebe a (na-amanye ya eziokwu).\nIhe atụ: asynccy ('Ndewo', dakọtara_ell = eziokwu, debug = eziokwu) (...)",
  "file_not_found": "Achọpụtaghị faịlụ: {file_affy}",
  "encoding_error": "Faịlụ na-etinye njehie (ọ bụghị UTF-8)",
  "syntax_error": "Njehie Syntax: {msg}",
  "undefined_name": "Aha a na-akọwaghị: '{Aha}'",
  "syntax_check_title": "Nyocha Synt",
  "no_errors_found": "Enweghị Errors Syntax Achọtara!",
  "errors_found": "Achọtara {Gụta} Njedebe (s) na {file_path}:",
  "error_line": "Ahịrị {line}: Ozi}",
  "error_context": "Ọnọdụ: {{)",
  "syntax_errors_title": "Njehie Syntax",
  "multiple_errors": "Hụrụ ọtụtụ njehie",
  "error_types_found": "A na-ahụkarị njehie: {ụdị}",
  "multiple_errors_title": "Hụrụ ọtụtụ ụdị njehie",
  "syntax_analysis": "Nyocha Syntax",
  "semantic_analysis": "Nyocha nyocha",
  "provide_file_path": "Biko nye ụzọ faịlụ iji lelee",
  "file_search_title": "Nchọta faịlụ",
  "searching_from": "Na-achọ",
  "files_found": "Faịlụ achọtara",
  "file_not_found_explicit": "Achọpụtaghị faịlụ '{Aha {.",
  "file_not_found_any": "Enweghị faịlụ aha ya bụ '{Aha {aha ya' {ụzọ} '",
  "file_ambiguous": "Ọtụtụ faịlụ akpọrọ '{Aha}: {likes}. Ezipụta ụdị ma ọ bụ jiri ike.",
  "unsupported_file_type": "Ụdị faịlụ na-akwadoghị: {Wepụta}",
  "t": "Weghachite ederede mpaghara maka igodo enyere dabere n'asụsụ ahọpụtara.",
  "show_gui_popup_description": "Na-egosiputa windo popup na ederede ederede na nlele nke nhọrọ.\nAka abụọ Cli na gburugburu akwụkwọ ndetu jupyter.\n\nAtụmatụ:\n- Detuo / chekwaa arụmọrụ gbanwere dabere taabụ na-arụ ọrụ taabụ\n- Nchịkọta ziri ezi na JiPyer\n- Nkwụsị windo dị ọcha\n\nArsurs:\n    Aha (str): Isi nke mpio\n    ọdịnaya (str): ederede ederede iji gosipụta\n    Fig (Matplotlib.figred.figred, nhọrọ): onye mezuru\n    nkata_function (a na-akpọ, nhọrọ): Ọrụ na-eweta ọnụ ọgụgụ\n    Ndekọ_args (Alge, Nhọrọ): arụmụka maka nkata chfunction",
  "warning": "Ndumodu",
  "translations_not_found_warning": "Nsụgharị.json ahụghị",
  "load_user_translations_error": "Enweghị ike ibu onye ọrụ lang.json: {njehie}",
  "missing_translation_key": "missing: {key}",
  "semantic_analysis_failed": "Semantic analysis failed: {msg}",
  "redundant_true": "Redundant comparison with True, use the value directly",
  "redundant_false": "Redundant comparison with False, use 'not' instead",
  "none_comparison": "Comparison with None should use 'is' instead of '=='",
  "not_true_recommendation": "Using '!= True' is not recommended, consider simplifying the condition",
  "not_false_recommendation": "Using '!= False' is not recommended, consider using a positive condition",
  "function": "function",
  "class": "class",
  "help_usage": "Use help('function_name') for details about a specific function",
  "help_error": "Error: Function '{}' does not exist or has no documentation",
  "save": "Save",
  "content": "Content",
  "preview": "Preview",
  "light_theme": "Light Theme",
  "dark_theme": "Dark Theme",
  "settings": "Settings",
  "error_in_gui": "Error in GUI",
  "example": "Example",
  "preview_error": "Preview Error",
  "help_available_functions": "Available functions:",
  "function_preview_title": "Preview of {function}",
  "non_graph_preview_available": "Non-graphical preview available",
  "preview_error_message": "Error in preview:\n{error}",
  "async_preview_not_available": "Async example cannot be shown in sync preview.\nUse 'await AsyncSwitch(...)' in async environment.",
  "switch_preview_positive": "Positive (Switch example)",
  "switch_preview_zero": "Zero (Switch example)",
  "scatter_description": "Creates a scatter plot to visualize the relationship between two continuous variables.",
  "lineplot_description": "Creates a line plot ideal for time series or ordered categorical data.",
  "kdeplot_description": "Creates a smoothed histogram using kernel density estimation.",
  "violinplot_description": "Shows the distribution of quantitative data across several categories.",
  "pairplot_description": "Creates pairwise relationships in a dataset showing both joint and marginal distributions.",
  "countplot_description": "A bar plot that shows the frequency of categorical data.",
  "lmplot_description": "Plots data and a linear regression model fit with confidence intervals.",
  "jointplot_description": "Combines scatter plot with histograms or KDE plots on the margins.",
  "swarmplot_description": "Shows all observations along with representation of the underlying distribution.",
  "regplot_description": "Plots data and a regression model fit with optional polynomial order.",
  "barplot_description": "Shows point estimates and confidence intervals as rectangular bars.",
  "stripplot_description": "A scatter plot where one variable is categorical with jitter to avoid overlap.",
  "large_plot_note": "Note: This plot may take a moment to render due to its size",
  "preview_not_available": "Interactive preview not available for this function",
  "description": "description",
  "get_moda_description": "Calculates the mode (most frequent value) of a dataset. Can return the value with its frequency count.",
  "get_media_description": "Calculates the arithmetic mean (average) of a dataset. Handles NaN values optionally.",
  "get_median_description": "Calculates the median (middle value) of a dataset. Handles NaN values optionally.",
  "get_rank_description": "Calculates the range (difference between max and min) of a DataFrame column.",
  "get_var_description": "Calculates the variance of a DataFrame column.",
  "get_desv_description": "Calculates the standard deviation of a DataFrame column.",
  "disp_description": "Returns dispersion measures (range, variance, standard deviation) for a DataFrame column.",
  "call_description": "Searches for and reads files of different formats (CSV, JSON, XML) with flexible search options.",
  "check_syntax_description": "Analyzes Python code for syntax errors, undefined names, and style issues.",
  "createDB_description": "Factory function to create a database connection instance.",
  "exportData_description": "Exports data from database tables to various formats (CSV, JSON, XML, SQL, Excel, etc.).",
  "addTable_description": "Adds a new table to the database with specified columns and constraints.",
  "mergeTable_description": "Merges multiple tables using SQL logic with different join types.",
  "join_description": "Performs SQL joins between tables with various join types.",
  "drop_description": "Drops tables from the database, optionally with cascade.",
  "cascadeDelete_description": "Performs cascade deletion based on a condition, handling dependencies.",
  "recursiveQuery_description": "Executes recursive queries using Common Table Expressions (CTE).",
  "windowFunction_description": "Applies window functions (ROW_NUMBER, RANK, etc.) to table data.",
  "executeRawSQL_description": "Executes raw SQL queries directly on the database.",
  "show_description": "Displays database tables and data in a graphical interface.",
  "hbar_description": "Creates a horizontal bar chart with customizable labels and colors.",
  "vbar_description": "Creates a vertical bar chart with customizable labels and colors.",
  "pie_description": "Creates a pie chart with customizable labels, colors, and percentage formatting.",
  "boxplot_description": "Creates a box plot to visualize distribution of data across categories.",
  "histo_description": "Creates a histogram to visualize distribution of a numeric variable.",
  "heatmap_description": "Creates a heatmap to visualize matrix-like data with color coding.",
  "table_description": "Creates a table visualization from data arrays or DataFrames.",
  "normalize_description": "Normalizes an array between 0 and 1 using min-max scaling.",
  "conditional_description": "Applies logical conditions to generate a new column in a DataFrame.",
  "convert_file_description": "Converts files between different formats (SHP, DBF, XML, etc.) to CSV.",
  "Switch_description": "Synchronous switch implementation with multiple pattern matching formats.",
  "switch_description": "Wrapper function for natural syntax usage of the synchronous switch.",
  "AsyncSwitch_description": "Asynchronous switch implementation with multiple pattern matching formats.",
  "async_switch_description": "Wrapper function for natural syntax usage of the asynchronous switch.",
  "config_description": "Global configuration dictionary for module settings.",
  "fig_to_img_description": "Converts a matplotlib figure to an image array for use in other visualizations.",
  "format_number_description": "Formats numbers with customizable decimal places and percentage formatting.",
  "load_user_translations_description": "Loads user-defined translation files to extend or override default translations.",
  "register_description": "Decorator to register functions or classes in the global REGISTRY.",
  "set_language_description": "Sets the current language for translations.",
  "t_description": "Translation function that returns the translated string for a given key in the current language."
}