{
  "ERROR_EMPTY_DATA": "შეცდომა: მოწოდებული ცარიელი მონაცემები",
  "ERROR_COLUMN_NOT_FOUND": "შეცდომა: სვეტი '{}' არ არის ნაპოვნი DataFrame- ში",
  "ERROR_PLOT_GENERATION": "ნაკვეთის წარმოქმნის შეცდომა: {}",
  "ERROR_INVALID_DATA": "შეცდომა: მოწოდებული მონაცემები",
  "ERROR_MODA": "შეცდომის გაანგარიშების რეჟიმი",
  "ERROR_MEDIA": "შეცდომის გამოანგარიშება საშუალო",
  "ERROR_MEDIANA": "შეცდომის გამოანგარიშება",
  "ERROR_RANGO": "შეცდომის გაანგარიშება დიაპაზონის გამოანგარიშება",
  "ERROR_VARIANZA": "შეცდომა ცვალებადობის გამოთვლებით",
  "ERROR_DESVIACION": "სტანდარტული გადახრის გაანგარიშება",
  "ERROR_DISPERSION": "დისპერსიული ზომების გაანგარიშება",
  "ERROR_COLUMNA_NO_EXISTE": "სვეტი '{}' არ არსებობს DataFrame- ში",
  "error_type": "შეყვანა უნდა იყოს ტიპის სიმებიანი.",
  "not_found": "არ არის ნაპოვნი ფუნქცია \"{სახელი}\". \\ N \\ ნავიგაციური პარამეტრებია",
  "title_all": "დამხმარე დოკუმენტაცია",
  "title_not_found": "ფუნქცია ვერ მოიძებნა",
  "copy": "კოპირება ბუფერში",
  "close": "ახლო",
  "call": "ზარი (სახელი, ტიპი = არცერთი, ბილიკი = არცერთი, ვადა, 5, 5, მკაცრი = მართალია)\nეძებს ფაილს სახელის მიხედვით (და სურვილისამებრ ჩაწერეთ) მოცემულ საქაღალდეში (ან CWD- დან) რეკურსიულად ქვევით და შემდეგ ზემოთ,\nდა იტვირთება იგი დამოკიდებულია მისი ტიპიდან ავტომატურად.\n\nპარამეტრები:\n    სახელი (str): ფაილის საბაზო სახელი, გაფართოების გარეშე.\n    ტიპი (STR, სურვილისამებრ): მოსალოდნელი გაფართოება ('CSV', 'JSON', 'XML').\n    ბილიკი (STR, სურვილისამებრ): საძიებო საწყისი გზა.\n    ვადა (int, სურვილისამებრ): მაქსიმალური ძიების დრო წამში.\n    მკაცრი (ბოლი, სურვილისამებრ): თუ მართალია, ზრდის შეცდომას, თუ ამავე სახელწოდებით მრავალჯერადი ფაილი გვხვდება.\n\nანაზღაურება: ნაპოვნი ფაილის შინაარსი ან არცერთი.",
  "load_user_translations": "load_user_translations (lang_path = \"lang.json\")\nიტვირთება მომხმარებლის მიერ განსაზღვრული თარგმანები JSON ფაილიდან და აერთიანებს მათ ნაგულისხმევი თარგმანებით.\n\nპარამეტრები:\n    lang_path (STR, სურვილისამებრ): გზა მომხმარებლის თარგმანის ფაილზე. ნაგულისხმევი \"lang.json\".\n\nქცევა:\n    - თუ ფაილი არსებობს და მართებულია JSON, აერთიანებს მის შინაარსს ნაგულისხმევი თარგმანებით\n    - თუ ფაილი არ არსებობს, მხოლოდ ნაგულისხმევი თარგმანებს ინახავს\n    - აჩვენებს გამაფრთხილებელ popup- ს, თუ ფაილი არსებობს, მაგრამ ვერ იტვირთება\n    - განაახლებს გლობალური _translations ლექსიკონი\n\nშენიშვნა: ამ ფუნქციას უნდა დაურეკოს t () ფუნქციის გამოყენებამდე, რომ მომხმარებლის თარგმანები ამოქმედდეს.",
  "switch": "Python- ის გაუმჯობესებული შეცვლის სისტემა. მხარს უჭერს:\n- მრავალჯერადი შესატყვისი გასაღებები თითო შემთხვევაში\n- ემთხვევა მნიშვნელობას, ტიპს, regex- ს, ლამბდას ფუნქციას ან კლასს\n- PANDAS და NUMPY მონაცემთა სტრუქტურის მხარდაჭერა\n- არასავალდებულო ასინკის საქმეების შესრულება\n- მატჩის ყველა რეჟიმი მრავალჯერადი შესატყვისი შემთხვევის შესასრულებლად\n- გამართვის რეჟიმი შესატყვისი შემთხვევების შესასვლელად",
  "async_switch": "შეფუთვის შეცვლა Async რეჟიმში. პარამეტრები:\n- ღირებულება: განსაზღვრული შემთხვევების საწინააღმდეგოდ.\n- ** Kwargs: სურვილისამებრ საკვანძო სიტყვის არგუმენტები პირდაპირ გადართვის კლასში გადავიდა. ეს შეიძლება შეიცავდეს:\n  - match_all (bool): შეასრულეთ ყველა შესატყვისი შემთხვევა, პირველ რიგში გაჩერების ნაცვლად.\n  - debug (bool): დაბეჭდეთ რომელი საქმე ემთხვევა და რა შესრულებულია.\n  - ASYNC_MODE (BOOL): აქ ხელით არ უნდა გაიაროთ (ყოველთვის იძულებულია ჭეშმარიტი).\nმაგალითი: asyncswitch ('Hello', match_all = True, Debug = True) (...)",
  "file_not_found": "ფაილი ვერ მოიძებნა: {File_Path",
  "encoding_error": "ფაილის კოდირების შეცდომა (არა UTF-8)",
  "syntax_error": "სინტაქსის შეცდომა: {msg}",
  "undefined_name": "დაუზუსტებელი სახელი: '{სახელი}'",
  "syntax_check_title": "სინტაქსის შემოწმება",
  "no_errors_found": "სინტაქსის შეცდომები ვერ მოიძებნა!",
  "errors_found": "ნაპოვნია {count} შეცდომა (s) in {file_path}:",
  "error_line": "ხაზი {ხაზი}: {შეტყობინება}",
  "error_context": "კონტექსტი: {კონტექსტი}",
  "syntax_errors_title": "სინტაქსის შეცდომები",
  "multiple_errors": "ნაპოვნია მრავალი შეცდომა",
  "error_types_found": "ნაპოვნი შეცდომების ტიპები: {ტიპები}",
  "multiple_errors_title": "ნაპოვნია შეცდომების მრავალი ტიპი",
  "syntax_analysis": "სინტაქსის ანალიზი",
  "semantic_analysis": "სემანტიკური ანალიზი",
  "provide_file_path": "გთხოვთ, მიუთითოთ ფაილის გზა, რომ შეამოწმოთ",
  "file_search_title": "ფაილის ძებნა",
  "searching_from": "ძებნა",
  "files_found": "ნაპოვნი ფაილები",
  "file_not_found_explicit": "ფაილი '{სახელი.",
  "file_not_found_any": "ფაილი სახელწოდებით '{სახელი}' ნაპოვნია '{გზაზე'",
  "file_ambiguous": "მრავალჯერადი ფაილი სახელწოდებით '{სახელი}' ნაპოვნია: {ტიპები. მიუთითეთ ტიპი ან გამოიყენეთ მკაცრი = მცდარი.",
  "unsupported_file_type": "დაუცველი ფაილის ტიპი: {ext}",
  "t": "აბრუნებს ლოკალიზებულ ტექსტს მოცემული გასაღებისთვის, არჩეული ენის საფუძველზე.",
  "show_gui_popup_description": "აჩვენებს popup ფანჯარას ტექსტური შინაარსით და არჩევითი ვიზუალიზაციით.\nგაუმკლავდება როგორც CLI და Jupyter ნოუთბუქის გარემო.\n\nთვისებები:\n- კოპირება/შენახვა ფუნქციონალური ცვლილებები აქტიური ჩანართის საფუძველზე\n- სათანადო ფიგურის მართვა ჯუპიტში\n- სუფთა ფანჯრის შეწყვეტა\n\nარგუმენტები:\n    სათაური (STR): ფანჯრის სათაური\n    შინაარსი (STR): ტექსტის შინაარსი სანახავად\n    ლეღვი (matplotlib.figure.figure, სურვილისამებრ): წინასწარ შექმნილი ფიგურა\n    plot_function (callable, არასავალდებულო): ფუნქცია, რომელიც წარმოქმნის ფიგურას\n    plot_args (Dict, არასავალდებულო): არგუმენტები plot_function",
  "warning": "გაფრთხილება",
  "translations_not_found_warning": "თარგმანები.ჯსონი ვერ მოიძებნა",
  "load_user_translations_error": "ვერ იტვირთება მომხმარებელი lang.json: {შეცდომა}",
  "missing_translation_key": "დაკარგული: {გასაღები}",
  "semantic_analysis_failed": "სემანტიკური ანალიზი ვერ მოხერხდა: {msg}",
  "redundant_true": "ჭარბი შედარება სიმართლესთან, გამოიყენეთ მნიშვნელობა პირდაპირ",
  "redundant_false": "ზედმეტი შედარება ყალბთან, გამოიყენეთ 'არა' ამის ნაცვლად",
  "none_comparison": "შედარება არცერთთან არ უნდა გამოიყენოს '' == '' ნაცვლად '",
  "not_true_recommendation": "გამოყენება '! = ჭეშმარიტი' არ არის რეკომენდებული, განვიხილოთ მდგომარეობის გამარტივება",
  "not_false_recommendation": "გამოყენება '! = ყალბი' არ არის რეკომენდებული, განვიხილოთ პოზიტიური პირობის გამოყენება",
  "function": "ფუნქცია",
  "class": "კლასი",
  "help_usage": "გამოიყენეთ დახმარება ('function_name') კონკრეტული ფუნქციის შესახებ დეტალებისთვის",
  "help_error": "შეცდომა: ფუნქცია '{}' არ არსებობს ან არ აქვს დოკუმენტაცია",
  "save": "გადარჩენა",
  "content": "კმაყოფილი",
  "preview": "ანონსი",
  "light_theme": "მსუბუქი თემა",
  "dark_theme": "ბნელი თემა",
  "settings": "პარამეტრები",
  "error_in_gui": "შეცდომა GUI- ში",
  "example": "მაგალითი",
  "preview_error": "გადახედვის შეცდომა",
  "help_available_functions": "ხელმისაწვდომი ფუნქციები:",
  "function_preview_title": "{ფუნქციის გადახედვა",
  "non_graph_preview_available": "არა გრაფიკული გადახედვა ხელმისაწვდომია",
  "preview_error_message": "შეცდომა გადახედვისას:\n{შეცდომა",
  "async_preview_not_available": "Async მაგალითი არ შეიძლება ნაჩვენები იყოს სინქრონიზაციის გადახედვაში.\nგამოიყენეთ 'დაელოდეთ Asyncswitch (...)' Async- ის გარემოში.",
  "switch_preview_positive": "პოზიტიური (შეცვლის მაგალითი)",
  "switch_preview_zero": "ნულოვანი (შეცვლის მაგალითი)",
  "scatter_description": "ქმნის სკატერის ნაკვეთს, რათა ვიზუალიზაცია მოახდინოს ორ უწყვეტ ცვლადს შორის ურთიერთობის შესახებ.",
  "lineplot_description": "ქმნის ხაზის ნაკვეთს, რომელიც იდეალურია დროის სერიებისთვის ან შეკვეთილი კატეგორიული მონაცემებისთვის.",
  "kdeplot_description": "ქმნის გახურებულ ჰისტოგრამას ბირთვის სიმკვრივის შეფასების გამოყენებით.",
  "violinplot_description": "აჩვენებს რაოდენობრივი მონაცემების განაწილებას რამდენიმე კატეგორიაში.",
  "pairplot_description": "ქმნის ურთიერთობებს მონაცემთა ბაზაში, სადაც ნაჩვენებია როგორც ერთობლივი, ისე ზღვრული განაწილება.",
  "countplot_description": "ბარი ნაკვეთი, რომელიც გვიჩვენებს კატეგორიული მონაცემების სიხშირეს.",
  "lmplot_description": "ნაკვეთების მონაცემები და ხაზოვანი რეგრესიის მოდელი შეესაბამება ნდობის ინტერვალს.",
  "jointplot_description": "აერთიანებს სკატერის ნაკვეთს ჰისტოგრამებით ან KDE ნაკვეთებით ზღვარზე.",
  "swarmplot_description": "აჩვენებს ყველა დაკვირვებას, ძირითადი განაწილების წარმოდგენასთან ერთად.",
  "regplot_description": "ნაკვეთების მონაცემები და რეგრესიის მოდელი შეესაბამება არჩევითი პოლინომიური წესრიგს.",
  "barplot_description": "გვიჩვენებს წერტილის შეფასებებს და ნდობის ინტერვალებს, როგორც მართკუთხა ბარები.",
  "stripplot_description": "გაფანტული ნაკვეთი, სადაც ერთი ცვლადი კატეგორიულია jitter- ით, რათა თავიდან იქნას აცილებული გადახურვა.",
  "large_plot_note": "შენიშვნა: ამ ნაკვეთს შეიძლება ერთი წამი დასჭირდეს მისი ზომების გამო",
  "preview_not_available": "ინტერაქტიული გადახედვა არ არის ხელმისაწვდომი ამ ფუნქციისთვის",
  "description": "აღწერილობა",
  "get_moda_description": "ითვლის მონაცემთა ბაზის რეჟიმს (ყველაზე ხშირი მნიშვნელობა). შეუძლია დააბრუნოს მნიშვნელობა მისი სიხშირის რაოდენობით.",
  "get_media_description": "ითვლის მონაცემთა ბაზის არითმეტიკულ საშუალო (საშუალო). NAN მნიშვნელობებს სურვილისამებრ ასრულებს.",
  "get_median_description": "ითვლის მონაცემთა ბაზის საშუალო (საშუალო მნიშვნელობა). NAN მნიშვნელობებს სურვილისამებრ ასრულებს.",
  "get_rank_description": "ითვლის DataFrame სვეტის დიაპაზონს (განსხვავება მაქსიმუმსა და მინს შორის).",
  "get_var_description": "ითვლის DataFrame სვეტის ცვალებადობას.",
  "get_desv_description": "ითვლის DataFrame სვეტის სტანდარტული გადახრა.",
  "disp_description": "აბრუნებს დისპერსიულ ზომებს (დიაპაზონი, ცვალებადობა, სტანდარტული გადახრა) DataFrame სვეტისთვის.",
  "call_description": "ეძებს და კითხულობს სხვადასხვა ფორმატის ფაილებს (CSV, JSON, XML) მოქნილი ძებნის ვარიანტებით.",
  "check_syntax_description": "აანალიზებს პითონის კოდს სინტაქსის შეცდომების, განუსაზღვრელი სახელების და სტილის საკითხების შესახებ.",
  "createDB_description": "ქარხნის ფუნქცია მონაცემთა ბაზის კავშირის ინსტანციის შესაქმნელად.",
  "exportData_description": "მონაცემთა ბაზის ცხრილებიდან სხვადასხვა ფორმატის ექსპორტს (CSV, JSON, XML, SQL, Excel და ა.შ.).",
  "addTable_description": "მონაცემთა ბაზაში ახალ ცხრილს ამატებს მითითებული სვეტებითა და შეზღუდვებით.",
  "mergeTable_description": "აერთიანებს მრავალ ცხრილს SQL ლოგიკის გამოყენებით სხვადასხვა შეერთების ტიპებით.",
  "join_description": "ასრულებს SQL უერთდება მაგიდებს შორის სხვადასხვა შეერთების ტიპებით.",
  "drop_description": "წვეთებს ცხრილებს მონაცემთა ბაზიდან, სურვილისამებრ კასკადით.",
  "cascadeDelete_description": "ასრულებს კასკადის წაშლას მდგომარეობიდან გამომდინარე, დამოკიდებულებების საფუძველზე.",
  "recursiveQuery_description": "ასრულებს რეკურსიულ მოთხოვნებს საერთო ცხრილის გამონათქვამების გამოყენებით (CTE).",
  "windowFunction_description": "იყენებს ფანჯრის ფუნქციებს (row_number, წოდება და ა.შ.) მონაცემების ცხრილის დასადგენად.",
  "executeRawSQL_description": "ასრულებს უმი SQL მოთხოვნებს პირდაპირ მონაცემთა ბაზაში.",
  "show_description": "აჩვენებს მონაცემთა ბაზის ცხრილებს და მონაცემებს გრაფიკულ ინტერფეისში.",
  "hbar_description": "ქმნის ჰორიზონტალური ბარის გრაფიკს დააკონფიგურიროთ ეტიკეტებით და ფერებით.",
  "vbar_description": "ქმნის ვერტიკალურ ბარის გრაფიკს დააკონფიგურიროთ ეტიკეტებითა და ფერებით.",
  "pie_description": "ქმნის ტორტების გრაფიკს დააკონფიგურიროთ ეტიკეტებით, ფერებით და პროცენტული ფორმატით.",
  "boxplot_description": "ქმნის ყუთის ნაკვეთს მონაცემების განაწილების ვიზუალიზაციისთვის კატეგორიებში.",
  "histo_description": "ქმნის ჰისტოგრამას რიცხვითი ცვლადის განაწილების ვიზუალიზაციისთვის.",
  "heatmap_description": "ქმნის სითბოს რუქას მატრიქსის მსგავსი მონაცემების ვიზუალიზაციისთვის ფერადი კოდირებით.",
  "table_description": "ქმნის ცხრილის ვიზუალიზაციას მონაცემთა მასივებიდან ან მონაცემთა ბაზიდან.",
  "normalize_description": "ნორმალიზდება მასივი 0-დან 1-მდე, Min-Max სკალირების გამოყენებით.",
  "conditional_description": "იყენებს ლოგიკურ პირობებს ახალი სვეტის შესაქმნელად DataFrame- ში.",
  "convert_file_description": "ფაილებს სხვადასხვა ფორმატს (SHP, DBF, XML და ა.შ.) გარდაქმნის CSV- ს შორის.",
  "Switch_description": "სინქრონული შეცვლის განხორციელება მრავალჯერადი ნიმუშის შესაბამისი ფორმატით.",
  "switch_description": "შეფუთვის ფუნქცია სინქრონული შეცვლის ბუნებრივი სინტაქსის გამოყენებისთვის.",
  "AsyncSwitch_description": "ასინქრონული შეცვლის განხორციელება მრავალჯერადი ნიმუშის შესაბამისი ფორმატით.",
  "async_switch_description": "შეფუთვის ფუნქცია ასინქრონული შეცვლის ბუნებრივი სინტაქსის გამოყენებისთვის.",
  "config_description": "გლობალური კონფიგურაციის ლექსიკონი მოდულის პარამეტრებისთვის.",
  "fig_to_img_description": "Matplotlib ფიგურას გარდაქმნის გამოსახულების მასივში სხვა ვიზუალიზაციებში გამოსაყენებლად.",
  "format_number_description": "ფორმატის ციფრები დააკონფიგურიროთ ათობითი ადგილები და პროცენტული ფორმატირება.",
  "load_user_translations_description": "იტვირთება მომხმარებლის მიერ განსაზღვრული მთარგმნელობითი ფაილები, რომ გახანგრძლივდეს ან გადალახოს ნაგულისხმევი თარგმანები.",
  "register_description": "დეკორატორი გლობალურ რეესტრში ფუნქციების ან კლასების დარეგისტრირებისთვის.",
  "set_language_description": "ადგენს მიმდინარე ენას თარგმანებისთვის.",
  "t_description": "მთარგმნელობითი ფუნქცია, რომელიც აბრუნებს თარგმნილ სტრიქონს მოცემული კლავიშისთვის მიმდინარე ენაზე."
}