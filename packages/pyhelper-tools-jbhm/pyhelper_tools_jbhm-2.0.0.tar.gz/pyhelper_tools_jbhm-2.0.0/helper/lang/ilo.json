{
  "ERROR_EMPTY_DATA": "Biddut: Naipaay ti empty data .",
  "ERROR_COLUMN_NOT_FOUND": "Biddut: adigi '{}' saan a masarakan iti DataFrame .",
  "ERROR_PLOT_GENERATION": "Ti plot a mangpataud ti biddut: {} .",
  "ERROR_INVALID_DATA": "Biddut: Di umiso a datos a naited .",
  "ERROR_MODA": "Ti Modo ti Panagkuenta ti Biddut .",
  "ERROR_MEDIA": "Biddut a panagkuenta ti kaibuksilan .",
  "ERROR_MEDIANA": "Ti Media ti Panagkuenta ti Biddut .",
  "ERROR_RANGO": "Ti sakop ti panagkuenta ti biddut .",
  "ERROR_VARIANZA": "Biddut a panagkuenta ti panagdumaduma .",
  "ERROR_DESVIACION": "Biddut a panagkuenta ti pagalagadan a panagsisina .",
  "ERROR_DISPERSION": "Dagiti rukod ti panagkuenta ti biddut .",
  "ERROR_COLUMNA_NO_EXISTE": "Ti kolum a '{}' ket awan iti dataframe .",
  "error_type": "Ti input ket masapul a ti type string.",
  "not_found": "Awan ti function a napanaganan iti \"{Name}\" a nasarakan.\\n\\navailable a pagpilian ket:\\n\\n{opsion}.",
  "title_all": "Dokumentasion ti katulongan .",
  "title_not_found": "Saan a nasarakan ti function .",
  "copy": "Kopiaen ti clipboard .",
  "close": "Iserra",
  "call": "awag(nagan, tipo=awan, dalan=awan, timeout=5, strict=pudno) .\nAgbirok iti file babaen ti nagan (ken opsional nga i-type) iti naited a folder (wenno manipud iti CWD) recursively downwards ken kalpasanna nga agpangato, .\nken ikargana dayta depende iti kitana nga automatiko.\n\nParametro:\n    Nagan (STR): Naina ti batayan ti file, nga awan ti ekstension.\n    tipo (str, opsional): Namnamaen a panagpaatiddog ​​('CSV', 'JSON', 'XML').\n    dalan (str, opsional): Umuna a dalan a pagsapulan manipud.\n    Timeout (int, opsional): Maximum nga oras ti panagsapul iti sumagmamano a segundo.\n    Nainget (Bool, Opsional): No pudno, mangingato ti biddut no adu a file nga addaan iti isu met laeng a nagan ti masarakan.\n\nIsubli: Ti linaon ti nasarakan a file wenno awan.",
  "load_user_translations": "load_user_dagiti_panagpatarus(lang_path=\"lang.json\")\nIkargana dagiti patarus a naikeddeng babaen ti agar-aramat manipud iti maysa a papeles ti JSON ken pagtiponenna dagitoy kadagiti kasisigud a panagipatarus.\n\nParametro:\n    lang_path (str, opsional): Dalan iti file ti panagipatarus ti agar-aramat. Default iti \"lang.json\".\n\nPanagtignay:\n    - No ti papeles ket adda ken balido a JSON, pagtiponenna dagiti linaonna kadagiti default a patarus .\n    - No awan ti file, pagtalinaedenna laeng dagiti default a patarus .\n    - Ipakitana ti pakdaar a popup no adda ti file ngem saan a maikarga .\n    - Ipabaro ti Global _Translations Dictionary .\n\nPakaammo: Daytoy a panagandar ket masapul a maawagan sakbay nga usaren ti T() a panagandar para kadagiti panagipatarus ti agar-aramat tapno ag-epekto.",
  "switch": "Napasayaat a sistema ti switch-case para iti Python. Suporta:\n- Adu a maitunos a tulbek iti tunggal kaso .\n- Panagtunos babaen ti pateg, kita, regex, lambda function, wenno klase .\n- Pandas ken numpy nga estruktura ti estruktura ti datos .\n- Opsional nga async nga pannakaipatungpal dagiti kaso .\n- Match-all mode para iti panangipatungpal iti adu a matching cases .\n- Debug mode kadagiti kaso ti panagtunos ti log .",
  "async_switch": "Wrapper tapno mai-instantiate ti switch iti async mode. Parametro:\n- Pateg: Ti pateg a maipada kadagiti naikeddeng a kaso.\n- **Kwargs: Dagiti opsional nga argumento ti keyword ket naipasa a direkta iti klase ti switch. Mabalin a karaman kadagitoy ti:\n  - match_all (Bool): Ipatungpal amin a matching cases imbes nga agsardeng iti umuna.\n  - Debug (Bool): I-print no ania a kaso ti nagtunos ken no ania ti na-execute.\n  - async_mode (Bool): Saan koma a maipasa a manual ditoy (kanayon a mapilit nga agpudno).\nKas pagarigan: asyncswitch('hello', match_all=pudno, debug=pudno)(...)",
  "file_not_found": "Saan a nasarakan ti file: {file_path}.",
  "encoding_error": "Biddut ti panagkodigo ti papeles (saan nga UTF-8) .",
  "syntax_error": "Biddut ti Sintaksis: {MSG}.",
  "undefined_name": "saan a naikeddeng a nagan: '{name}'.",
  "syntax_check_title": "Panagsukimat ti Sintaksis .",
  "no_errors_found": "Awan ti nasarakan a biddut ti sintaksis!",
  "errors_found": "Nasarakan ti {count} a (dagiti) biddut iti {file_path}:",
  "error_line": "linia {line}: {mensahe}.",
  "error_context": "Konteksto: {konteksto}.",
  "syntax_errors_title": "Dagiti Biddut ti Sintaksis .",
  "multiple_errors": "Nasarakan ti adu a biddut .",
  "error_types_found": "Nasarakan dagiti kita ti biddut: {Types}",
  "multiple_errors_title": "Nasarakan ti adu a kita ti biddut .",
  "syntax_analysis": "Panag-analisar ti Sintaksis .",
  "semantic_analysis": "Semantiko nga analisar .",
  "provide_file_path": "Pangngaasi nga ipaay ti dalan ti file tapno ma-check .",
  "file_search_title": "Panagsapul ti File .",
  "searching_from": "Panagsapul manipud iti .",
  "files_found": "Dagiti Nasarakan a File .",
  "file_not_found_explicit": "File '{Name}.{Ext}' Saan a Nasarakan iti '{Path}'.",
  "file_not_found_any": "Awan ti file a napanaganan iti '{Name}' a nasarakan iti '{Path}'.",
  "file_ambiguous": "Adu a file a napanaganan iti '{Name}' ti nakasarak: {Types}. Ibaga ti kita wenno usaren ti Strict=False.",
  "unsupported_file_type": "Saan a nasuportaran a kita ti file: {EXT}",
  "t": "Isubli ti lokal a teksto para iti naited a tulbek a naibatay iti napili a pagsasao.",
  "show_gui_popup_description": "Ipakita ti maysa a tawa ti popup nga addaan iti linaon ti teksto ken opsional a panagbuya.\nAgpada a mangasikaso kadagiti aglawlaw ti kuaderno ti CLI ken Jupyter.\n\nDagiti ladawan:\n- Kopiaen/Idulin dagiti panagbalbaliw ti panagandar a naibatay iti Active Tab .\n- Umiso a panagtengngel ti pigura iti Jupyter .\n- Nadalus a panagpatingga ti tawa .\n\nArgs:\n    Titulo (str): Titulo ti tawa .\n    Linaon (str): Teksto a linaon a maiparang .\n    Fig (matplotlib.figure.Pigura, Opsional): Nasakbay a Naparsua a Pigura .\n    plot_function (maayab, opsional): function a mangpataud iti pigura .\n    plot_args (dict, opsional): Dagiti argumento para iti plot_function .",
  "warning": "Pakdaar",
  "translations_not_found_warning": "Saan a nasarakan dagiti patarus.json .",
  "load_user_translations_error": "Saan a makaikarga ti user lang.json: {Error}",
  "missing_translation_key": "missing: {key}",
  "semantic_analysis_failed": "Semantic analysis failed: {msg}",
  "redundant_true": "Redundant comparison with True, use the value directly",
  "redundant_false": "Redundant comparison with False, use 'not' instead",
  "none_comparison": "Comparison with None should use 'is' instead of '=='",
  "not_true_recommendation": "Using '!= True' is not recommended, consider simplifying the condition",
  "not_false_recommendation": "Using '!= False' is not recommended, consider using a positive condition",
  "function": "function",
  "class": "class",
  "help_usage": "Use help('function_name') for details about a specific function",
  "help_error": "Error: Function '{}' does not exist or has no documentation",
  "save": "Save",
  "content": "Content",
  "preview": "Preview",
  "light_theme": "Light Theme",
  "dark_theme": "Dark Theme",
  "settings": "Settings",
  "error_in_gui": "Error in GUI",
  "example": "Example",
  "preview_error": "Preview Error",
  "help_available_functions": "Available functions:",
  "function_preview_title": "Preview of {function}",
  "non_graph_preview_available": "Non-graphical preview available",
  "preview_error_message": "Error in preview:\n{error}",
  "async_preview_not_available": "Async example cannot be shown in sync preview.\nUse 'await AsyncSwitch(...)' in async environment.",
  "switch_preview_positive": "Positive (Switch example)",
  "switch_preview_zero": "Zero (Switch example)",
  "scatter_description": "Creates a scatter plot to visualize the relationship between two continuous variables.",
  "lineplot_description": "Creates a line plot ideal for time series or ordered categorical data.",
  "kdeplot_description": "Creates a smoothed histogram using kernel density estimation.",
  "violinplot_description": "Shows the distribution of quantitative data across several categories.",
  "pairplot_description": "Creates pairwise relationships in a dataset showing both joint and marginal distributions.",
  "countplot_description": "A bar plot that shows the frequency of categorical data.",
  "lmplot_description": "Plots data and a linear regression model fit with confidence intervals.",
  "jointplot_description": "Combines scatter plot with histograms or KDE plots on the margins.",
  "swarmplot_description": "Shows all observations along with representation of the underlying distribution.",
  "regplot_description": "Plots data and a regression model fit with optional polynomial order.",
  "barplot_description": "Shows point estimates and confidence intervals as rectangular bars.",
  "stripplot_description": "A scatter plot where one variable is categorical with jitter to avoid overlap.",
  "large_plot_note": "Note: This plot may take a moment to render due to its size",
  "preview_not_available": "Interactive preview not available for this function",
  "description": "description",
  "get_moda_description": "Calculates the mode (most frequent value) of a dataset. Can return the value with its frequency count.",
  "get_media_description": "Calculates the arithmetic mean (average) of a dataset. Handles NaN values optionally.",
  "get_median_description": "Calculates the median (middle value) of a dataset. Handles NaN values optionally.",
  "get_rank_description": "Calculates the range (difference between max and min) of a DataFrame column.",
  "get_var_description": "Calculates the variance of a DataFrame column.",
  "get_desv_description": "Calculates the standard deviation of a DataFrame column.",
  "disp_description": "Returns dispersion measures (range, variance, standard deviation) for a DataFrame column.",
  "call_description": "Searches for and reads files of different formats (CSV, JSON, XML) with flexible search options.",
  "check_syntax_description": "Analyzes Python code for syntax errors, undefined names, and style issues.",
  "createDB_description": "Factory function to create a database connection instance.",
  "exportData_description": "Exports data from database tables to various formats (CSV, JSON, XML, SQL, Excel, etc.).",
  "addTable_description": "Adds a new table to the database with specified columns and constraints.",
  "mergeTable_description": "Merges multiple tables using SQL logic with different join types.",
  "join_description": "Performs SQL joins between tables with various join types.",
  "drop_description": "Drops tables from the database, optionally with cascade.",
  "cascadeDelete_description": "Performs cascade deletion based on a condition, handling dependencies.",
  "recursiveQuery_description": "Executes recursive queries using Common Table Expressions (CTE).",
  "windowFunction_description": "Applies window functions (ROW_NUMBER, RANK, etc.) to table data.",
  "executeRawSQL_description": "Executes raw SQL queries directly on the database.",
  "show_description": "Displays database tables and data in a graphical interface.",
  "hbar_description": "Creates a horizontal bar chart with customizable labels and colors.",
  "vbar_description": "Creates a vertical bar chart with customizable labels and colors.",
  "pie_description": "Creates a pie chart with customizable labels, colors, and percentage formatting.",
  "boxplot_description": "Creates a box plot to visualize distribution of data across categories.",
  "histo_description": "Creates a histogram to visualize distribution of a numeric variable.",
  "heatmap_description": "Creates a heatmap to visualize matrix-like data with color coding.",
  "table_description": "Creates a table visualization from data arrays or DataFrames.",
  "normalize_description": "Normalizes an array between 0 and 1 using min-max scaling.",
  "conditional_description": "Applies logical conditions to generate a new column in a DataFrame.",
  "convert_file_description": "Converts files between different formats (SHP, DBF, XML, etc.) to CSV.",
  "Switch_description": "Synchronous switch implementation with multiple pattern matching formats.",
  "switch_description": "Wrapper function for natural syntax usage of the synchronous switch.",
  "AsyncSwitch_description": "Asynchronous switch implementation with multiple pattern matching formats.",
  "async_switch_description": "Wrapper function for natural syntax usage of the asynchronous switch.",
  "config_description": "Global configuration dictionary for module settings.",
  "fig_to_img_description": "Converts a matplotlib figure to an image array for use in other visualizations.",
  "format_number_description": "Formats numbers with customizable decimal places and percentage formatting.",
  "load_user_translations_description": "Loads user-defined translation files to extend or override default translations.",
  "register_description": "Decorator to register functions or classes in the global REGISTRY.",
  "set_language_description": "Sets the current language for translations.",
  "t_description": "Translation function that returns the translated string for a given key in the current language."
}