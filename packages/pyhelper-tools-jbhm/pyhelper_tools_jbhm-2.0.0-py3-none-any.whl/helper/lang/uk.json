{
  "ERROR_EMPTY_DATA": "Error: Empty data provided",
  "ERROR_COLUMN_NOT_FOUND": "Error: Column '{}' not found in DataFrame",
  "ERROR_PLOT_GENERATION": "Error generating plot: {}",
  "ERROR_INVALID_DATA": "Error: Invalid data provided",
  "ERROR_MODA": "Error calculating mode",
  "ERROR_MEDIA": "Error calculating mean",
  "ERROR_MEDIANA": "Error calculating median",
  "ERROR_RANGO": "Error calculating range",
  "ERROR_VARIANZA": "Error calculating variance",
  "ERROR_DESVIACION": "Error calculating standard deviation",
  "ERROR_DISPERSION": "Error calculating dispersion measures",
  "ERROR_COLUMNA_NO_EXISTE": "Column '{}' does not exist in the DataFrame",
  "error_type": "The input must be of type string.",
  "not_found": "No function named \"{name}\" found.\\n\\nAvailable options are:\\n\\n{options}",
  "title_all": "Helper Documentation",
  "title_not_found": "Function Not Found",
  "copy": "Copy to Clipboard",
  "close": "Close",
  "call": "call(name, type=None, path=None, timeout=5, strict=True)\nSearches for a file by name (and optionally type) in a given folder (or from cwd) recursively downwards and then upwards,\nand loads it depending on its type automatically.\n\nParameters:\n    name (str): Base name of the file, without extension.\n    type (str, optional): Expected extension ('csv', 'json', 'xml').\n    path (str, optional): Initial path to search from.\n    timeout (int, optional): Maximum search time in seconds.\n    strict (bool, optional): If True, raises error if multiple files with the same name are found.\n\nReturns: the content of the found file or None.",
  "load_user_translations": "load_user_translations(lang_path=\"lang.json\")\nLoads user-defined translations from a JSON file and merges them with the default translations.\n\nParameters:\n    lang_path (str, optional): Path to the user translations file. Defaults to \"lang.json\".\n\nBehavior:\n    - If the file exists and is valid JSON, merges its contents with default translations\n    - If the file doesn't exist, keeps only default translations\n    - Shows a warning popup if the file exists but can't be loaded\n    - Updates the global _translations dictionary\n\nNote: This function must be called before using the t() function for user translations to take effect.",
  "switch": "Enhanced Switch-case system for Python. Supports:\n- Multiple matching keys per case\n- Match by value, type, regex, lambda function, or class\n- Pandas and NumPy data structure support\n- Optional async execution of cases\n- Match-all mode for executing multiple matching cases\n- Debug mode to log matching cases",
  "async_switch": "Wrapper to instantiate Switch in async mode. Parameters:\n- value: The value to match against the defined cases.\n- **kwargs: Optional keyword arguments passed directly to the Switch class. These can include:\n  - match_all (bool): Execute all matching cases instead of stopping at the first.\n  - debug (bool): Print which case matched and what executed.\n  - async_mode (bool): Should NOT be passed manually here (always forced to True).\nExample: AsyncSwitch('hello', match_all=True, debug=True)(...)",
  "file_not_found": "File not found: {file_path}",
  "encoding_error": "File encoding error (not UTF-8)",
  "syntax_error": "Syntax error: {msg}",
  "undefined_name": "Undefined name: '{name}'",
  "syntax_check_title": "Syntax Check",
  "no_errors_found": "No syntax errors found!",
  "errors_found": "Found {count} error(s) in {file_path}:",
  "error_line": "Line {line}: {message}",
  "error_context": "    Context: {context}",
  "syntax_errors_title": "Syntax Errors",
  "multiple_errors": "Found multiple errors",
  "error_types_found": "Error types found: {types}",
  "multiple_errors_title": "Found multiple types of errors",
  "syntax_analysis": "Syntax Analysis",
  "semantic_analysis": "Semantic Analysis",
  "provide_file_path": "Please provide a file path to check",
  "file_search_title": "File Search",
  "searching_from": "Searching from",
  "files_found": "Files found",
  "file_not_found_explicit": "File '{name}.{ext}' not found in '{path}'",
  "file_not_found_any": "No file named '{name}' found in '{path}'",
  "file_ambiguous": "Multiple files named '{name}' found: {types}. Specify the type or use strict=False.",
  "unsupported_file_type": "Unsupported file type: {ext}",
  "t": "Returns the localized text for a given key based on the selected language.",
  "show_gui_popup_description": "Displays a popup window with text content and optional visualization.\nHandles both CLI and Jupyter Notebook environments.\n\nFeatures:\n- Copy/Save functionality changes based on active tab\n- Proper figure handling in Jupyter\n- Clean window termination\n\nArgs:\n    title (str): Window title\n    content (str): Text content to display\n    fig (matplotlib.figure.Figure, optional): Pre-created figure\n    plot_function (callable, optional): Function that generates a figure\n    plot_args (dict, optional): Arguments for plot_function",
  "warning": "Warning",
  "translations_not_found_warning": "translations.json not found",
  "load_user_translations_error": "Could not load user lang.json: {error}",
  "missing_translation_key": "missing: {key}",
  "semantic_analysis_failed": "Semantic analysis failed: {msg}",
  "redundant_true": "Redundant comparison with True, use the value directly",
  "redundant_false": "Redundant comparison with False, use 'not' instead",
  "none_comparison": "Comparison with None should use 'is' instead of '=='",
  "not_true_recommendation": "Using '!= True' is not recommended, consider simplifying the condition",
  "not_false_recommendation": "Using '!= False' is not recommended, consider using a positive condition",
  "function": "function",
  "class": "class",
  "help_usage": "Use help('function_name') for details about a specific function",
  "help_error": "Error: Function '{}' does not exist or has no documentation",
  "save": "Save",
  "content": "Content",
  "preview": "Preview",
  "light_theme": "Light Theme",
  "dark_theme": "Dark Theme",
  "settings": "Settings",
  "error_in_gui": "Error in GUI",
  "example": "Example",
  "preview_error": "Preview Error",
  "help_available_functions": "Available functions:",
  "function_preview_title": "Preview of {function}",
  "non_graph_preview_available": "Non-graphical preview available",
  "preview_error_message": "Error in preview:\n{error}",
  "async_preview_not_available": "Async example cannot be shown in sync preview.\nUse 'await AsyncSwitch(...)' in async environment.",
  "switch_preview_positive": "Positive (Switch example)",
  "switch_preview_zero": "Zero (Switch example)",
  "scatter_description": "Creates a scatter plot to visualize the relationship between two continuous variables.",
  "lineplot_description": "Creates a line plot ideal for time series or ordered categorical data.",
  "kdeplot_description": "Creates a smoothed histogram using kernel density estimation.",
  "violinplot_description": "Shows the distribution of quantitative data across several categories.",
  "pairplot_description": "Creates pairwise relationships in a dataset showing both joint and marginal distributions.",
  "countplot_description": "A bar plot that shows the frequency of categorical data.",
  "lmplot_description": "Plots data and a linear regression model fit with confidence intervals.",
  "jointplot_description": "Combines scatter plot with histograms or KDE plots on the margins.",
  "swarmplot_description": "Shows all observations along with representation of the underlying distribution.",
  "regplot_description": "Plots data and a regression model fit with optional polynomial order.",
  "barplot_description": "Shows point estimates and confidence intervals as rectangular bars.",
  "stripplot_description": "A scatter plot where one variable is categorical with jitter to avoid overlap.",
  "large_plot_note": "Note: This plot may take a moment to render due to its size",
  "preview_not_available": "Interactive preview not available for this function",
  "description": "description",
  "get_moda_description": "Calculates the mode (most frequent value) of a dataset. Can return the value with its frequency count.",
  "get_media_description": "Calculates the arithmetic mean (average) of a dataset. Handles NaN values optionally.",
  "get_median_description": "Calculates the median (middle value) of a dataset. Handles NaN values optionally.",
  "get_rank_description": "Calculates the range (difference between max and min) of a DataFrame column.",
  "get_var_description": "Calculates the variance of a DataFrame column.",
  "get_desv_description": "Calculates the standard deviation of a DataFrame column.",
  "disp_description": "Returns dispersion measures (range, variance, standard deviation) for a DataFrame column.",
  "call_description": "Searches for and reads files of different formats (CSV, JSON, XML) with flexible search options.",
  "check_syntax_description": "Analyzes Python code for syntax errors, undefined names, and style issues.",
  "createDB_description": "Factory function to create a database connection instance.",
  "exportData_description": "Exports data from database tables to various formats (CSV, JSON, XML, SQL, Excel, etc.).",
  "addTable_description": "Adds a new table to the database with specified columns and constraints.",
  "mergeTable_description": "Merges multiple tables using SQL logic with different join types.",
  "join_description": "Performs SQL joins between tables with various join types.",
  "drop_description": "Drops tables from the database, optionally with cascade.",
  "cascadeDelete_description": "Performs cascade deletion based on a condition, handling dependencies.",
  "recursiveQuery_description": "Executes recursive queries using Common Table Expressions (CTE).",
  "windowFunction_description": "Applies window functions (ROW_NUMBER, RANK, etc.) to table data.",
  "executeRawSQL_description": "Executes raw SQL queries directly on the database.",
  "show_description": "Displays database tables and data in a graphical interface.",
  "hbar_description": "Creates a horizontal bar chart with customizable labels and colors.",
  "vbar_description": "Creates a vertical bar chart with customizable labels and colors.",
  "pie_description": "Creates a pie chart with customizable labels, colors, and percentage formatting.",
  "boxplot_description": "Creates a box plot to visualize distribution of data across categories.",
  "histo_description": "Creates a histogram to visualize distribution of a numeric variable.",
  "heatmap_description": "Creates a heatmap to visualize matrix-like data with color coding.",
  "table_description": "Creates a table visualization from data arrays or DataFrames.",
  "normalize_description": "Normalizes an array between 0 and 1 using min-max scaling.",
  "conditional_description": "Applies logical conditions to generate a new column in a DataFrame.",
  "convert_file_description": "Converts files between different formats (SHP, DBF, XML, etc.) to CSV.",
  "Switch_description": "Synchronous switch implementation with multiple pattern matching formats.",
  "switch_description": "Wrapper function for natural syntax usage of the synchronous switch.",
  "AsyncSwitch_description": "Asynchronous switch implementation with multiple pattern matching formats.",
  "async_switch_description": "Wrapper function for natural syntax usage of the asynchronous switch.",
  "config_description": "Global configuration dictionary for module settings.",
  "fig_to_img_description": "Converts a matplotlib figure to an image array for use in other visualizations.",
  "format_number_description": "Formats numbers with customizable decimal places and percentage formatting.",
  "load_user_translations_description": "Loads user-defined translation files to extend or override default translations.",
  "register_description": "Decorator to register functions or classes in the global REGISTRY.",
  "set_language_description": "Sets the current language for translations.",
  "t_description": "Translation function that returns the translated string for a given key in the current language."
}