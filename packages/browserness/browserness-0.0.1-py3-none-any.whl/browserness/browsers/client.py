# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.browser_create_request import BrowserCreateRequest
from ..types.browser_list_response import BrowserListResponse
from ..types.browser_response_model import BrowserResponseModel
from ..types.delete_response import DeleteResponse
from ..types.principal import Principal
from .raw_client import AsyncRawBrowsersClient, RawBrowsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BrowsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBrowsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBrowsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBrowsersClient
        """
        return self._raw_client

    def list_browsers(self, *, request_options: typing.Optional[RequestOptions] = None) -> BrowserListResponse:
        """
        List all browser instances from database (single source of truth).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserListResponse
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness()
        client.browsers.list_browsers()
        """
        _response = self._raw_client.list_browsers(request_options=request_options)
        return _response.data

    def create_browser(
        self,
        *,
        request: typing.Optional[BrowserCreateRequest] = OMIT,
        principal: typing.Optional[Principal] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BrowserResponseModel:
        """
        Create a new browser instance.

        Parameters
        ----------
        request : typing.Optional[BrowserCreateRequest]

        principal : typing.Optional[Principal]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserResponseModel
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness()
        client.browsers.create_browser()
        """
        _response = self._raw_client.create_browser(
            request=request, principal=principal, request_options=request_options
        )
        return _response.data

    def get_browser(
        self, browser_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BrowserResponseModel:
        """
        Get a specific browser instance from database.

        Parameters
        ----------
        browser_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserResponseModel
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness()
        client.browsers.get_browser(
            browser_id="browser_id",
        )
        """
        _response = self._raw_client.get_browser(browser_id, request_options=request_options)
        return _response.data

    def delete_browser(
        self,
        browser_id: str,
        *,
        request: typing.Optional[Principal] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteResponse:
        """
        Delete a browser instance.

        Parameters
        ----------
        browser_id : str

        request : typing.Optional[Principal]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteResponse
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness()
        client.browsers.delete_browser(
            browser_id="browser_id",
        )
        """
        _response = self._raw_client.delete_browser(browser_id, request=request, request_options=request_options)
        return _response.data


class AsyncBrowsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBrowsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBrowsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBrowsersClient
        """
        return self._raw_client

    async def list_browsers(self, *, request_options: typing.Optional[RequestOptions] = None) -> BrowserListResponse:
        """
        List all browser instances from database (single source of truth).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness()


        async def main() -> None:
            await client.browsers.list_browsers()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_browsers(request_options=request_options)
        return _response.data

    async def create_browser(
        self,
        *,
        request: typing.Optional[BrowserCreateRequest] = OMIT,
        principal: typing.Optional[Principal] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BrowserResponseModel:
        """
        Create a new browser instance.

        Parameters
        ----------
        request : typing.Optional[BrowserCreateRequest]

        principal : typing.Optional[Principal]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness()


        async def main() -> None:
            await client.browsers.create_browser()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_browser(
            request=request, principal=principal, request_options=request_options
        )
        return _response.data

    async def get_browser(
        self, browser_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BrowserResponseModel:
        """
        Get a specific browser instance from database.

        Parameters
        ----------
        browser_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrowserResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness()


        async def main() -> None:
            await client.browsers.get_browser(
                browser_id="browser_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_browser(browser_id, request_options=request_options)
        return _response.data

    async def delete_browser(
        self,
        browser_id: str,
        *,
        request: typing.Optional[Principal] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteResponse:
        """
        Delete a browser instance.

        Parameters
        ----------
        browser_id : str

        request : typing.Optional[Principal]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness()


        async def main() -> None:
            await client.browsers.delete_browser(
                browser_id="browser_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_browser(browser_id, request=request, request_options=request_options)
        return _response.data
