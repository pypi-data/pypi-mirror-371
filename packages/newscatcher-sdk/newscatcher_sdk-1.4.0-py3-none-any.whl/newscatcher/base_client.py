# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .aggregation.client import AggregationClient, AsyncAggregationClient
from .authors.client import AsyncAuthorsClient, AuthorsClient
from .breaking_news.client import AsyncBreakingNewsClient, BreakingNewsClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import NewscatcherApiEnvironment
from .latestheadlines.client import AsyncLatestheadlinesClient, LatestheadlinesClient
from .search.client import AsyncSearchClient, SearchClient
from .search_link.client import AsyncSearchLinkClient, SearchLinkClient
from .searchsimilar.client import AsyncSearchsimilarClient, SearchsimilarClient
from .sources.client import AsyncSourcesClient, SourcesClient
from .subscription.client import AsyncSubscriptionClient, SubscriptionClient


class BaseNewscatcherApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : NewscatcherApiEnvironment
        The environment to use for requests from the client. from .environment import NewscatcherApiEnvironment



        Defaults to NewscatcherApiEnvironment.DEFAULT



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from newscatcher import NewscatcherApi

    client = NewscatcherApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: NewscatcherApiEnvironment = NewscatcherApiEnvironment.DEFAULT,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.search = SearchClient(client_wrapper=self._client_wrapper)
        self.latestheadlines = LatestheadlinesClient(client_wrapper=self._client_wrapper)
        self.breaking_news = BreakingNewsClient(client_wrapper=self._client_wrapper)
        self.authors = AuthorsClient(client_wrapper=self._client_wrapper)
        self.search_link = SearchLinkClient(client_wrapper=self._client_wrapper)
        self.searchsimilar = SearchsimilarClient(client_wrapper=self._client_wrapper)
        self.sources = SourcesClient(client_wrapper=self._client_wrapper)
        self.aggregation = AggregationClient(client_wrapper=self._client_wrapper)
        self.subscription = SubscriptionClient(client_wrapper=self._client_wrapper)


class AsyncBaseNewscatcherApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : NewscatcherApiEnvironment
        The environment to use for requests from the client. from .environment import NewscatcherApiEnvironment



        Defaults to NewscatcherApiEnvironment.DEFAULT



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from newscatcher import AsyncNewscatcherApi

    client = AsyncNewscatcherApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: NewscatcherApiEnvironment = NewscatcherApiEnvironment.DEFAULT,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.search = AsyncSearchClient(client_wrapper=self._client_wrapper)
        self.latestheadlines = AsyncLatestheadlinesClient(client_wrapper=self._client_wrapper)
        self.breaking_news = AsyncBreakingNewsClient(client_wrapper=self._client_wrapper)
        self.authors = AsyncAuthorsClient(client_wrapper=self._client_wrapper)
        self.search_link = AsyncSearchLinkClient(client_wrapper=self._client_wrapper)
        self.searchsimilar = AsyncSearchsimilarClient(client_wrapper=self._client_wrapper)
        self.sources = AsyncSourcesClient(client_wrapper=self._client_wrapper)
        self.aggregation = AsyncAggregationClient(client_wrapper=self._client_wrapper)
        self.subscription = AsyncSubscriptionClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: NewscatcherApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
