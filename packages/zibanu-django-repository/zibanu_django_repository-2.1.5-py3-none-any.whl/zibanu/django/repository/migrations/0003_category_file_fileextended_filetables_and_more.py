#  Developed by CQ Inversiones SAS. Copyright ©. 2019-2025. All rights reserved.
#  Desarrollado por CQ Inversiones SAS. Copyright ©. 2019-2025. Todos los derechos reservados.

# Generated by Django 5.1.5 on 2025-02-21 00:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('zb_repository', '0002_document_description'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of category', max_length=150, verbose_name='Name')),
                ('level', models.IntegerField(default=0, editable=False, help_text='Level of category.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='Level')),
                ('gen_thumb', models.BooleanField(default=False, help_text='Generate thumbnails for this category if file type is compatible.', verbose_name='Generate thumbnails')),
                ('gen_ml', models.BooleanField(default=False, help_text='Generate ML files for this category. Only for image files.', verbose_name='Generate ML files')),
                ('extract_metadata', models.BooleanField(default=False, help_text='Generate metadata for this category if file type is compatible.', verbose_name='Generate metadata')),
                ('extract_tables', models.BooleanField(default=False, help_text='Extract tables for this category. Only for pdf files.', verbose_name='Extract tables')),
                ('file_types', models.CharField(blank=True, help_text='File types allowed for this category.', max_length=150, null=True, validators=[django.core.validators.RegexValidator('^(?:[a-z0-9]{2,6})(?:\\s*,\\s*[a-z0-9]{2,6})*$')], verbose_name='File types allowed')),
                ('enabled', models.BooleanField(default=True, help_text='Enable this category', verbose_name='Enabled')),
                ('published', models.BooleanField(default=True, help_text='Publish this category', verbose_name='Published')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category', null=True, on_delete=django.db.models.deletion.CASCADE, to='zb_repository.category', verbose_name='Parent category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Validation Code')),
                ('uuid', models.UUIDField(default=uuid.uuid4, verbose_name='UUID File')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('description', models.CharField(default='', max_length=150, verbose_name='Description')),
                ('file_type', models.CharField(default='pdf', max_length=6, verbose_name='File Type')),
                ('checksum', models.CharField(blank=True, editable=False, max_length=64, null=True, verbose_name='Checksum')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
            },
        ),
        migrations.CreateModel(
            name='FileExtended',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('title', models.CharField(help_text='The title of the file', max_length=255, verbose_name='Title')),
                ('metadata', models.JSONField(default=dict, editable=False)),
                ('access_type', models.IntegerField(choices=[(0, 'Public'), (1, 'Read only'), (2, 'Authenticated')], default=0, help_text='The access type of the file', verbose_name='Access type')),
                ('published', models.BooleanField(default=False, help_text='The published status of the file', verbose_name='Published')),
                ('category', models.ForeignKey(help_text='The category of the file', on_delete=django.db.models.deletion.CASCADE, to='zb_repository.category', verbose_name='Category')),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='file_extended', related_query_name='file_extended', to='zb_repository.file')),
            ],
            options={
                'verbose_name': 'File Extended Properties',
                'verbose_name_plural': 'File Extended Properties',
            },
        ),
        migrations.CreateModel(
            name='FileTables',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tables', models.JSONField(default=dict, editable=False)),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='file_tables', related_query_name='file_tables', to='zb_repository.file')),
            ],
            options={
                'verbose_name': 'File tables',
                'verbose_name_plural': 'File tables',
            },
        ),
        migrations.DeleteModel(
            name='Document',
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(fields=('code',), name='UNQ_files_code'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(fields=('uuid',), name='UNQ_files_uuid'),
        ),
    ]
