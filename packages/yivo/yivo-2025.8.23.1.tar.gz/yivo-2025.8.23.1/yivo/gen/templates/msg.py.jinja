# Do not edit, this is autogenerated
# {{ license_notice }}
###############################################################################
from enum import IntEnum
from collections import namedtuple
from dataclasses import dataclass
{# from base import FixedArray #}
{# {% for inc in includes %}
from {{ inc }} import *
{% endfor %} #}

yivo_info = namedtuple("yivo_info","id fmt size name")

{%- if enums|length > 0 %}
{%- for enum in enums %}
class {{ enum.name }}(IntEnum):
{%- for val in enum.fields %}
    {{ val.name|upper }} = {{ val.value }} {%- if val.comment != None %} # {{ val.comment }} {% endif %}
{%- endfor %}
{% endfor %}
{% endif %}

ids2names = {
{% for msg in messages -%}
{%- if msg.id != 0 %}
    {{ msg.id }}: "{{ msg.name|lower }}",
{%- endif -%}
{% endfor %}
}

names2ids = {
{% for msg in messages -%}
{%- if msg.id != 0 %}
    "{{ msg.name|lower }}": {{ msg.id }},
{%- endif -%}
{% endfor %}
}

def id2str(id):
    return ids2names[id]

def name2id(name):
    return names2ids[name]

class Base:
    def flatten(self, data):
        """
        (0, (1, 2, 3), (4, 5, 6)) -> (0, 1, 2, 3, 4, 5, 6)
        """
        if isinstance(data, tuple):
            for x in data:
                yield from self.flatten(x)
        else:
            yield data

    def to_tuple(self):
        return tuple(self.flatten(self.astuple()))


# def fmt(a):
#    return a.__yivo__()[0]

# def sizeof(a):
#    return a.__yivo__()[1]

# def cls(a):
#    {# return a.__yivo__()[2] #}
#    return a.__class__

# def msg_id(a):
#    return a.__yivo__()[2]



{% for msg in messages %}
{# @dataclass #}
class {{ msg.name }} (Base):
  """
  {{ msg.name }}
  {% for comm in msg.comments -%}
  {{ comm }}
  {% endfor -%}
  """

  {# {%- for var in msg.fields %}
  {{ var.name }}: {{var.pytype}} ={% if var.default %}{{ var.default }}{% else %} {{ var.pytype}}() {% endif %}
  {%- endfor %}

  id = {{ msg.id }}
  fmt = "{{ msg.fmt }}"
  size = {{ msg.size }}
  name = "{{ msg.name }}" #}

  def __init__(self):
    {%- for var in msg.fields %}
    self.{{ var.name }} ={% if var.default %}{{ var.default }}{% else %} {{ var.pytype}}() {% endif %}
    {%- endfor %}

    self.id = {{ msg.id }}
    self.fmt = "{{ msg.fmt }}"
    self.size = {{ msg.size }}
    self.name = "{{ msg.name }}"

  def astuple(self):
    return ({%- for var in msg.fields %}self.{{ var.name }}, {%- endfor %})

  def get_info(self):
    return yivo_info({{ msg.id }}, "{{ msg.fmt }}", {{ msg.size }}, "{{ msg.name }}")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  {# def __yivo__(self): #}
    {# # (fmt, size, name, id) #}
    {# # name_t.__class__ already has name, do I need it again? #}
    {# return ("{{ format }}", {{ msg_size }}, {{ name }}, {{ msgid }}) #}
    {# return ("{{ msg.fmt }}", {{ msg.size }}, {{ msg.id }}) #}
{% endfor %}