"""Extract character-level features, like character ngrams."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/85_chars.ipynb.

# %% ../nbs/85_chars.ipynb 4
from __future__ import annotations
from sklearn.base import BaseEstimator, TransformerMixin
from fastcore.basics import patch
from .store import TextFeatureStore
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer

# %% auto 0
__all__ = ['CharNgramVectorizer']

# %% ../nbs/85_chars.ipynb 5
class CharNgramVectorizer(BaseEstimator, TransformerMixin):
	""" Sci-kit Learn pipeline component to extract character ngram features. """
	def __init__(self, 
			  feature_store:TextFeatureStore = None, # (not implemented currently)
			  vectorizer_type:str = 'count', # the type of vectorizer to use - 'count' for CountVectorizer or 'tfidf' for TfidfVectorizer
			  ngram_range:tuple = (2, 2), # the ngram range to use (min_n, max_n) - passed to CountVectorizer or TfidfVectorizer
			  lowercase:bool = False, # whether to lowercase the character ngrams - passed to CountVectorizer or TfidfVectorizer 
			  min_df:float|int = 1, # the minimum document frequency to use - passed to CountVectorizer or TfidfVectorizer
			  max_df:float|int = 1.0, # the maximum document frequency to use - passed to CountVectorizer or TfidfVectorizer
			  max_features:int = 5000, # the maximum number of features to use, setting a default to avoid memory issues - passed to CountVectorizer or TfidfVectorizer
			  vocabulary:list|None = None, # list of tokens to use - passed to CountVectorizer or TfidfVectorizer
			  analyzer:str = 'char', # the analyzer to use - 'char' or 'char_wb - passed to CountVectorizer or TfidfVectorizer
			  encoding:str = 'utf-8', # the encoding to use - passed to CountVectorizer or TfidfVectorizer 
			  decode_error:str = 'ignore' # what to do if there is an error decoding 'strict', 'ignore', 'replace' - passed to CountVectorizer or TfidfVectorizer
			  ):
		
		self.feature_store = feature_store
		self.vectorizer_type = vectorizer_type
		self.ngram_range = ngram_range
		self.lowercase = lowercase
		self.min_df = min_df
		self.max_df = max_df
		self.max_features = max_features
		self.vocabulary = vocabulary
		self.analyzer = analyzer
		self.encoding = encoding
		self.decode_error = decode_error


# %% ../nbs/85_chars.ipynb 6
@patch
def fit(self:CharNgramVectorizer, X, y=None):
	""" Fit the vectorizer. """
	if self.vectorizer_type == 'tfidf':
		self.vectorizer_ = TfidfVectorizer(analyzer = self.analyzer, lowercase=self.lowercase, min_df=self.min_df, max_df=self.max_df, max_features=self.max_features, ngram_range=self.ngram_range, vocabulary= self.vocabulary, encoding=self.encoding, decode_error=self.decode_error)
	elif self.vectorizer_type == 'count':
		self.vectorizer_ = CountVectorizer(analyzer = self.analyzer, lowercase=self.lowercase, min_df=self.min_df, max_df=self.max_df, max_features=self.max_features, ngram_range=self.ngram_range, vocabulary= self.vocabulary, encoding=self.encoding, decode_error=self.decode_error)
	else:
		raise ValueError("Invalid vectorizer_type. Use 'tfidf' or 'count'.")
	self.vectorizer_.fit(X, y)
	return self

# %% ../nbs/85_chars.ipynb 7
@patch
def transform(self:CharNgramVectorizer, X):
	""" Transform the texts to a matrix of counts or tf-idf scores. """
	return self.vectorizer_.transform(X)



# %% ../nbs/85_chars.ipynb 8
@patch
def get_feature_names_out(self:CharNgramVectorizer, input_features=None):
	""" Get the feature names out from the model. """
	return self.vectorizer_.get_feature_names_out(input_features)
