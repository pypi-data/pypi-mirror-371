"""Clean text data before feature extraction."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_clean.ipynb.

# %% ../nbs/05_clean.ipynb 3
from __future__ import annotations
from lxml import html
from sklearn.base import BaseEstimator, TransformerMixin
from fastcore.basics import patch

# %% auto 0
__all__ = ['TextCleaner']

# %% ../nbs/05_clean.ipynb 4
class TextCleaner(BaseEstimator, TransformerMixin):
	""" A component for a Sci-kit learn pipeline to clean clean text data, including normalizing characters and whitespace, stripping whitespace before and after text, and removing html tags, . """
	def __init__(self, 
			  character_replacements:dict = None, # character replacements for character normalization - a dict with key as the character to replace and value as the replacement character
			  remove_html:bool = False, # whether to remove html tags
			  strip_whitespace:bool = False, # whether to remove whitespace from the start and end of the text
			  normalize_whitespace:bool = False # whether to replace one or more whitespace characters with a single space
			  ):
		self.character_replacements = character_replacements
		self.remove_html = remove_html
		self.strip_whitespace = strip_whitespace
		self.normalize_whitespace = normalize_whitespace

		if self.character_replacements is not None:
			self._character_replacement_translator(self.character_replacements)

# %% ../nbs/05_clean.ipynb 5
@patch
def _character_replacement_translator(self:TextCleaner, 
									character_replacements:dict = None # character replacements for character normalization - a dict with key as the character to replace and value as the replacement character
									):
	""" Prepare a translation table for character replacements """
	self.character_replacements_translator_ = str.maketrans(character_replacements)

# %% ../nbs/05_clean.ipynb 6
@patch
def _normalize_characters(self:TextCleaner,
						text:str # the text to normalize 
						) -> str:
	""" Normalize characters in a text using a translation table of replacements """
	return text.translate(self.character_replacements_translator_)

# %% ../nbs/05_clean.ipynb 7
@patch
def _remove_html_from_string(self:TextCleaner, 
							text:str # the string to remove html from
							) -> str:
	""" Remove html tags from a string """
	tree = html.fromstring(text)
	return tree.text_content()

# %% ../nbs/05_clean.ipynb 8
@patch
def _strip_whitespace(self:TextCleaner,
					text:str # the text to strip whitespace from
					) -> str:
	""" Strip whitespace from before and after text """
	return text.strip()


# %% ../nbs/05_clean.ipynb 9
@patch
def _normalize_whitespace(self:TextCleaner,
						text:str # the text to normalize whitespace in
						) -> str:
	""" Normalize whitespace in a text by replacing one or more consecutive whitespace characters with a single space """
	return ' '.join(text.split())


# %% ../nbs/05_clean.ipynb 10
@patch
def fit(self:TextCleaner, X, y=None):
	""" Fit is implemented, but does nothing. """
	return self


# %% ../nbs/05_clean.ipynb 11
@patch
def transform(self:TextCleaner, 
				X:list, # the text to transform
				) -> list: # the transformed text
	""" Apply transformations to the text data."""
	transformations = []

	if self.character_replacements is not None:
		self._character_replacement_translator(self.character_replacements)
		transformations.append(self._normalize_characters)

	if self.remove_html:
		transformations.append(self._remove_html_from_string)

	if self.strip_whitespace:
		transformations.append(self._strip_whitespace)

	if self.normalize_whitespace:
		transformations.append(self._normalize_whitespace)
	
	if len(transformations) > 0:
		return [self.apply_transformations(text, transformations) for text in X]
	else:
		return X


# %% ../nbs/05_clean.ipynb 12
@patch
def apply_transformations(self:TextCleaner,
							text: str, # the text to transform 
							transformations:list # a list of transformation methods to apply
							) -> str: # the transformed text
	""" Apply a series of transformations to a text. """
	for method in transformations:
		text = method(text)
	return text

# %% ../nbs/05_clean.ipynb 13
@patch
def is_text_handler(self:TextCleaner
					) -> bool: # always returns True
	""" This is used by preview_pipeline_features to detect if receives and returns text. """
	return True
