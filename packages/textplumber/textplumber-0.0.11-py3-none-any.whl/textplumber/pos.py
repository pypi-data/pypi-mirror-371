"""Extract parts of speech features."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/30_pos.ipynb.

# %% ../nbs/30_pos.ipynb 3
from __future__ import annotations
from sklearn.base import BaseEstimator, TransformerMixin
from .store import TextFeatureStore
from .core import pass_tokens
from sklearn.feature_extraction.text import CountVectorizer
from fastcore.basics import patch

# %% auto 0
__all__ = ['POSVectorizer']

# %% ../nbs/30_pos.ipynb 4
class POSVectorizer(BaseEstimator, TransformerMixin):
	""" Sci-kit Learn pipeline component to extract parts of speech tag features. This component should be used after the SpacyPreprocessor component with the same feature store.
		The component gets the tokens from the feature store and returns a matrix of counts (via CountVectorizer). """
	
	def __init__(self, 
				feature_store:TextFeatureStore, # the feature store to use - this should be the same feature store used in the SpacyPreprocessor component
				ngram_range:tuple = (1, 1), # the ngram range to use (min_n, max_n) - passed to CountVectorizer
				vocabulary:list|None = None, # list of tokens to use - passed to CountVectorizer
				# scale: bool = False, # whether to normalize the counts - not implemented yet
				):
		self.feature_store = feature_store
		self.ngram_range = ngram_range
		self.vocabulary = vocabulary
		# self.scale = scale



# %% ../nbs/30_pos.ipynb 5
@patch
def fit(self:POSVectorizer, X, y=None):
	self.vectorizer_ = CountVectorizer(tokenizer=pass_tokens,
								lowercase=False, 
								stop_words=None, 
								token_pattern=None, 
								min_df=1,
								max_df=1.0,
								max_features=None,
								ngram_range=self.ngram_range,
								vocabulary= self.vocabulary)
	self.vectorizer_.fit(self.feature_store.get_pos_from_texts(X), y)
	# self.scaler_ = Normalizer(norm='l1')
	return self

# %% ../nbs/30_pos.ipynb 6
@patch
def transform(self:POSVectorizer, X):
	docs_pos = self.feature_store.get_pos_from_texts(X)
	docs_pos = self.vectorizer_.transform(docs_pos)
	#if self.scale:
	#	docs_pos = self.scaler_.transform(docs_pos)
	return docs_pos

# %% ../nbs/30_pos.ipynb 7
@patch
def get_feature_names_out(self:POSVectorizer, input_features=None):
	return self.vectorizer_.get_feature_names_out(input_features)	
