"""Extract document-level statistics as features."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/40_textstats.ipynb.

# %% ../nbs/40_textstats.ipynb 3
from __future__ import annotations
from sklearn.base import BaseEstimator, TransformerMixin
from .store import TextFeatureStore
from fastcore.basics import patch

# %% auto 0
__all__ = ['TextstatsTransformer']

# %% ../nbs/40_textstats.ipynb 4
class TextstatsTransformer(BaseEstimator, TransformerMixin):
	""" Sci-kit Learn pipeline component to extract document-level text statistics based on the textstat library and pre-computed counts. 
		This component should be used after the SpacyPreprocessor component with the same feature store. """
	def __init__(self, 
			  	feature_store:TextFeatureStore, # the feature store to use
				columns:list = ['tokens_count', 'sentences_count', 'characters_count', 'monosyllabic_words_relfreq', 'polysyllabic_words_relfreq', 'unique_tokens_relfreq', 'average_characters_per_token', 'average_tokens_per_sentence', 'characters_proportion_letters',  'characters_proportion_uppercase', 'hapax_legomena_count', 'hapax_legomena_to_unique'] # the textstats to use
				#scale: bool = True, # whether to scale the features - not implemented yet
				):
		self.feature_store = feature_store
		#self.scale = scale
		# check that passed columns matches these ...
		possible_columns = ['tokens_count', 'sentences_count', 'characters_count', 'monosyllabic_words_relfreq', 'polysyllabic_words_relfreq', 'unique_tokens_relfreq', 'average_characters_per_token', 'average_tokens_per_sentence', 'characters_proportion_letters',  'characters_proportion_uppercase', 'hapax_legomena_count', 'hapax_legomena_to_unique']
		for col in columns:
			if col not in possible_columns:
				raise ValueError(f"Invalid column name: {col}. Possible columns are: {possible_columns}")
		self.columns = columns

# %% ../nbs/40_textstats.ipynb 5
@patch
def fit(self:TextstatsTransformer, X, y=None):
	""" Fit is implemented but does nothing. """
	#if self.scale:        
	#	self.scaler_ = StandardScaler()
	#	self.scaler_.fit(self.feature_store.get_textstats_from_texts(X, self.columns))
	return self

# %% ../nbs/40_textstats.ipynb 6
@patch
def transform(self:TextstatsTransformer, X):
	""" Transforms the texts to a matrix of text statistics. """
	textstats = self.feature_store.get_textstats_from_texts(X, self.columns)
	#if self.scale:
	#	textstats = self.scaler_.transform(textstats)
	return textstats

# %% ../nbs/40_textstats.ipynb 7
@patch
def get_feature_names_out(self:TextstatsTransformer, input_features=None):
	""" Get the feature names out from the text statistics. """
	return self.columns
