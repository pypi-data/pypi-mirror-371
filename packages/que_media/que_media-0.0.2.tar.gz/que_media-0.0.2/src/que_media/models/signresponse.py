"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from que_media.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from typing_extensions import NotRequired, TypedDict


class EvidenceTypedDict(TypedDict):
    r"""Metadata about the signature that was applied."""


class Evidence(BaseModel):
    r"""Metadata about the signature that was applied."""


class SignResponseTypedDict(TypedDict):
    r"""The result of a successful signing operation, including the signed asset."""

    assurance: str
    r"""The level of assurance provided by the signing process."""
    evidence: EvidenceTypedDict
    r"""Metadata about the signature that was applied."""
    asset_b64: NotRequired[Nullable[str]]
    r"""The Base64-encoded signed asset. This field is populated if the resulting asset is 3MB or less. If larger, this will be null."""
    asset_s3_uri: NotRequired[Nullable[str]]
    r"""An S3 URI for the signed asset. This field is populated if the resulting asset is larger than 3MB. If the asset is inlined in `asset_b64`, this will be null."""


class SignResponse(BaseModel):
    r"""The result of a successful signing operation, including the signed asset."""

    assurance: str
    r"""The level of assurance provided by the signing process."""

    evidence: Evidence
    r"""Metadata about the signature that was applied."""

    asset_b64: OptionalNullable[str] = UNSET
    r"""The Base64-encoded signed asset. This field is populated if the resulting asset is 3MB or less. If larger, this will be null."""

    asset_s3_uri: OptionalNullable[str] = UNSET
    r"""An S3 URI for the signed asset. This field is populated if the resulting asset is larger than 3MB. If the asset is inlined in `asset_b64`, this will be null."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["asset_b64", "asset_s3_uri"]
        nullable_fields = ["asset_b64", "asset_s3_uri"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
