[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stac-sample-maker"
version = "0.0.2"
description = "Generate synthetic STAC (SpatioTemporal Asset Catalog) items with realistic metadata"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "David Bitner", email = "bitner@dbspatial.com" },
]
keywords = ["stac", "geospatial", "satellite", "remote-sensing", "synthetic-data"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.10"
dependencies = [
    "Faker>=19",
]

[project.optional-dependencies]
validation = [
    "stac-validator>=3.0.0",
]

[project.scripts]
stac-sample-maker = "stac_sample_maker.cli:main"

[project.urls]
Homepage = "https://github.com/developmentseed/stac-sample-maker"
Repository = "https://github.com/developmentseed/stac-sample-maker"
Issues = "https://github.com/developmentseed/stac-sample-maker/issues"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by ruff format
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "faker.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "stac_validator.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=stac_sample_maker --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["stac_sample_maker"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "stac-validator>=3.10.1",
]
