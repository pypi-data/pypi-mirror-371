name: Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run lint checks
      run: |
        uv run ruff check .
    
    - name: Check code formatting
      run: |
        uv run ruff format --check .

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run unit tests
      run: |
        rm -f .coverage* coverage.xml
        uv run python -m pytest tests/ -v -m "unit or not integration" --cov=coda --cov-report=xml --cov-report=term-missing
    
    - name: Run agent tests
      run: |
        # Clean any lingering coverage data to avoid combination errors
        rm -f .coverage*
        uv run python -m pytest tests/agents/ tests/tools/ -v --cov=coda --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

  integration-test:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[integration]'))
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run integration tests
      env:
        OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
        RUN_INTEGRATION_TESTS: "true"
      run: |
        if [ -n "$OCI_COMPARTMENT_ID" ]; then
          uv run python -m pytest tests/ -v -m integration
        else
          echo "::warning::Integration tests skipped - OCI secrets not configured"
        fi

  web-ui-unit-tests:
    runs-on: ubuntu-latest
    needs: test
    if: |
      contains(github.event.head_commit.message, '[web]') ||
      contains(github.event.head_commit.message, 'web') ||
      contains(fromJSON('["coda/apps/web/**", "tests/web/**", ".github/workflows/test.yml"]'), github.event.head_commit.modified[0]) ||
      github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        # Install additional dependencies for web testing
        uv pip install pytest-cov pytest-timeout
    
    - name: Run Web UI Unit Tests
      run: |
        uv run python -m pytest tests/web/unit/ -v --cov=coda.apps.web --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: web-unit-tests
        name: web-unit-coverage

  web-ui-browser-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox]
        test-type: [integration, functional]
    needs: web-ui-unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        # Install additional dependencies for web testing
        uv pip install selenium pytest-selenium pytest-timeout
    
    - name: Setup Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
    
    - name: Setup Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@v1
      with:
        firefox-version: latest
    
    - name: Install ChromeDriver
      if: matrix.browser == 'chrome'
      uses: nanasess/setup-chromedriver@v2
    
    - name: Install GeckoDriver
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-geckodriver@latest
    
    - name: Start Streamlit Server
      run: |
        uv run streamlit run coda/apps/web/app.py --server.headless true --server.port 8501 &
        echo "SERVER_PID=$!" >> $GITHUB_ENV
        
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -s http://localhost:8501 > /dev/null; do sleep 1; done'
    
    - name: Run Browser Tests
      env:
        BROWSER: ${{ matrix.browser }}
      run: |
        uv run python -m pytest tests/web/${{ matrix.test-type }}/ \
          -v \
          --browser=${{ matrix.browser }} \
          --headless \
          --junit-xml=test-results-${{ matrix.browser }}-${{ matrix.test-type }}.xml
    
    - name: Stop Server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: web-ui-test-results-${{ matrix.browser }}-${{ matrix.test-type }}
        path: |
          test-results-*.xml
          tests/web/screenshots/
          tests/web/logs/