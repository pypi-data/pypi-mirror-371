# The PEP 484 type hints stub file for the QtMultimedia module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QtVideo(PyQt6.sip.simplewrapper):
    class Rotation(enum.Enum):
        None_ = ...
        Clockwise90 = ...
        Clockwise180 = ...
        Clockwise270 = ...

class QAudio(PyQt6.sip.simplewrapper):
    class VolumeScale(enum.Enum):
        LinearVolumeScale = ...
        CubicVolumeScale = ...
        LogarithmicVolumeScale = ...
        DecibelVolumeScale = ...

    class State(enum.Enum):
        ActiveState = ...
        SuspendedState = ...
        StoppedState = ...
        IdleState = ...

    class Error(enum.Enum):
        NoError = ...
        OpenError = ...
        IOError = ...
        UnderrunError = ...
        FatalError = ...

    def convertVolume(
        self, volume: float, from_: QAudio.VolumeScale, to: QAudio.VolumeScale
    ) -> float: ...

class QAudioBuffer(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        format: QAudioFormat,
        startTime: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, numFrames: int, format: QAudioFormat, startTime: int = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QAudioBuffer) -> None: ...
    def data(self) -> PyQt6.sip.voidptr: ...
    def constData(self) -> PyQt6.sip.voidptr: ...
    def detach(self) -> None: ...
    def swap(self, other: QAudioBuffer) -> None: ...
    def startTime(self) -> int: ...
    def duration(self) -> int: ...
    def byteCount(self) -> int: ...
    def sampleCount(self) -> int: ...
    def frameCount(self) -> int: ...
    def format(self) -> QAudioFormat: ...
    def isValid(self) -> bool: ...

class QAudioBufferInput(QtCore.QObject):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, format: QAudioFormat, parent: QtCore.QObject | None = ...
    ) -> None: ...

    readyToSendAudioBuffer: typing.ClassVar[QtCore.pyqtSignal]
    def sendAudioBuffer(self, audioBuffer: QAudioBuffer) -> bool: ...
    def format(self) -> QAudioFormat: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...

class QAudioBufferOutput(QtCore.QObject):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, format: QAudioFormat, parent: QtCore.QObject | None = ...
    ) -> None: ...

    audioBufferReceived: typing.ClassVar[QtCore.pyqtSignal]
    def format(self) -> QAudioFormat: ...

class QAudioDecoder(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        ResourceError = ...
        FormatError = ...
        AccessDeniedError = ...
        NotSupportedError = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    formatChanged: typing.ClassVar[QtCore.pyqtSignal]
    durationChanged: typing.ClassVar[QtCore.pyqtSignal]
    positionChanged: typing.ClassVar[QtCore.pyqtSignal]
    sourceChanged: typing.ClassVar[QtCore.pyqtSignal]
    isDecodingChanged: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    bufferReady: typing.ClassVar[QtCore.pyqtSignal]
    bufferAvailableChanged: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def setAudioFormat(self, format: QAudioFormat) -> None: ...
    def audioFormat(self) -> QAudioFormat: ...
    def duration(self) -> int: ...
    def position(self) -> int: ...
    def bufferAvailable(self) -> bool: ...
    def read(self) -> QAudioBuffer: ...
    def errorString(self) -> str: ...
    error: typing.ClassVar[QtCore.pyqtSignal]
    def setSourceDevice(self, device: QtCore.QIODevice | None) -> None: ...
    def sourceDevice(self) -> QtCore.QIODevice | None: ...
    def setSource(self, fileName: QtCore.QUrl) -> None: ...
    def source(self) -> QtCore.QUrl: ...
    def isDecoding(self) -> bool: ...
    def isSupported(self) -> bool: ...

class QAudioDevice(PyQt6.sip.simplewrapper):
    class Mode(enum.Enum):
        Null = ...
        Input = ...
        Output = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QAudioDevice) -> None: ...
    def channelConfiguration(self) -> QAudioFormat.ChannelConfig: ...
    def supportedSampleFormats(self) -> list[QAudioFormat.SampleFormat]: ...
    def maximumChannelCount(self) -> int: ...
    def minimumChannelCount(self) -> int: ...
    def maximumSampleRate(self) -> int: ...
    def minimumSampleRate(self) -> int: ...
    def preferredFormat(self) -> QAudioFormat: ...
    def isFormatSupported(self, format: QAudioFormat) -> bool: ...
    def mode(self) -> QAudioDevice.Mode: ...
    def isDefault(self) -> bool: ...
    def description(self) -> str: ...
    def id(self) -> QtCore.QByteArray: ...
    def isNull(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def swap(self, other: QAudioDevice) -> None: ...

class QAudioFormat(PyQt6.sip.simplewrapper):
    class SampleFormat(enum.Enum):
        Unknown = ...
        UInt8 = ...
        Int16 = ...
        Int32 = ...
        Float = ...

    class ChannelConfig(enum.Enum):
        ChannelConfigUnknown = ...
        ChannelConfigMono = ...
        ChannelConfigStereo = ...
        ChannelConfig2Dot1 = ...
        ChannelConfigSurround5Dot0 = ...
        ChannelConfigSurround5Dot1 = ...
        ChannelConfigSurround7Dot0 = ...
        ChannelConfigSurround7Dot1 = ...
        ChannelConfig3Dot0 = ...
        ChannelConfig3Dot1 = ...

    class AudioChannelPosition(enum.Enum):
        UnknownPosition = ...
        FrontLeft = ...
        FrontRight = ...
        FrontCenter = ...
        LFE = ...
        BackLeft = ...
        BackRight = ...
        FrontLeftOfCenter = ...
        FrontRightOfCenter = ...
        BackCenter = ...
        LFE2 = ...
        SideLeft = ...
        SideRight = ...
        TopFrontLeft = ...
        TopFrontRight = ...
        TopFrontCenter = ...
        TopCenter = ...
        TopBackLeft = ...
        TopBackRight = ...
        TopSideLeft = ...
        TopSideRight = ...
        TopBackCenter = ...
        BottomFrontCenter = ...
        BottomFrontLeft = ...
        BottomFrontRight = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QAudioFormat) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def defaultChannelConfigForChannelCount(
        channelCount: int,
    ) -> QAudioFormat.ChannelConfig: ...
    def normalizedSampleValue(
        self, sample: PyQt6.sip.voidptr | None
    ) -> float: ...
    def bytesPerSample(self) -> int: ...
    def sampleFormat(self) -> QAudioFormat.SampleFormat: ...
    def setSampleFormat(self, f: QAudioFormat.SampleFormat) -> None: ...
    def channelOffset(
        self, channel: QAudioFormat.AudioChannelPosition
    ) -> int: ...
    def channelConfig(self) -> QAudioFormat.ChannelConfig: ...
    def setChannelConfig(self, config: QAudioFormat.ChannelConfig) -> None: ...
    def bytesPerFrame(self) -> int: ...
    def durationForFrames(self, frameCount: int) -> int: ...
    def framesForDuration(self, duration: int) -> int: ...
    def framesForBytes(self, byteCount: int) -> int: ...
    def bytesForFrames(self, frameCount: int) -> int: ...
    def durationForBytes(self, byteCount: int) -> int: ...
    def bytesForDuration(self, duration: int) -> int: ...
    def channelCount(self) -> int: ...
    def setChannelCount(self, channelCount: int) -> None: ...
    def sampleRate(self) -> int: ...
    def setSampleRate(self, sampleRate: int) -> None: ...
    def isValid(self) -> bool: ...

class QAudioInput(QtCore.QObject):
    @typing.overload
    def __init__(
        self, deviceInfo: QAudioDevice, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    mutedChanged: typing.ClassVar[QtCore.pyqtSignal]
    volumeChanged: typing.ClassVar[QtCore.pyqtSignal]
    deviceChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setVolume(self, volume: float) -> None: ...
    def setMuted(self, muted: bool) -> None: ...
    def setDevice(self, device: QAudioDevice) -> None: ...
    def isMuted(self) -> bool: ...
    def volume(self) -> float: ...
    def device(self) -> QAudioDevice: ...

class QAudioOutput(QtCore.QObject):
    @typing.overload
    def __init__(
        self, device: QAudioDevice, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    mutedChanged: typing.ClassVar[QtCore.pyqtSignal]
    volumeChanged: typing.ClassVar[QtCore.pyqtSignal]
    deviceChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setMuted(self, muted: bool) -> None: ...
    def setVolume(self, volume: float) -> None: ...
    def setDevice(self, device: QAudioDevice) -> None: ...
    def isMuted(self) -> bool: ...
    def device(self) -> QAudioDevice: ...
    def volume(self) -> float: ...

class QAudioSink(QtCore.QObject):
    @typing.overload
    def __init__(
        self,
        audioDeviceInfo: QAudioDevice,
        format: QAudioFormat = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, format: QAudioFormat = ..., parent: QtCore.QObject | None = ...
    ) -> None: ...

    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def volume(self) -> float: ...
    def setVolume(self, a0: float) -> None: ...
    def state(self) -> QAudio.State: ...
    def error(self) -> QAudio.Error: ...
    def elapsedUSecs(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def bytesFree(self) -> int: ...
    def bufferSize(self) -> int: ...
    def setBufferSize(self, bytes: int) -> None: ...
    def resume(self) -> None: ...
    def suspend(self) -> None: ...
    def reset(self) -> None: ...
    def stop(self) -> None: ...
    @typing.overload
    def start(self, device: QtCore.QIODevice | None) -> None: ...
    @typing.overload
    def start(self) -> QtCore.QIODevice | None: ...
    def format(self) -> QAudioFormat: ...

class QAudioSource(QtCore.QObject):
    @typing.overload
    def __init__(
        self,
        audioDeviceInfo: QAudioDevice,
        format: QAudioFormat = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, format: QAudioFormat = ..., parent: QtCore.QObject | None = ...
    ) -> None: ...

    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def state(self) -> QAudio.State: ...
    def error(self) -> QAudio.Error: ...
    def elapsedUSecs(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def volume(self) -> float: ...
    def setVolume(self, volume: float) -> None: ...
    def bytesAvailable(self) -> int: ...
    def bufferSize(self) -> int: ...
    def setBufferSize(self, bytes: int) -> None: ...
    def resume(self) -> None: ...
    def suspend(self) -> None: ...
    def reset(self) -> None: ...
    def stop(self) -> None: ...
    @typing.overload
    def start(self, device: QtCore.QIODevice | None) -> None: ...
    @typing.overload
    def start(self) -> QtCore.QIODevice | None: ...
    def format(self) -> QAudioFormat: ...

class QCamera(QtCore.QObject):
    class Feature(enum.Enum):
        ColorTemperature = ...
        ExposureCompensation = ...
        IsoSensitivity = ...
        ManualExposureTime = ...
        CustomFocusPoint = ...
        FocusDistance = ...

    class WhiteBalanceMode(enum.Enum):
        WhiteBalanceAuto = ...
        WhiteBalanceManual = ...
        WhiteBalanceSunlight = ...
        WhiteBalanceCloudy = ...
        WhiteBalanceShade = ...
        WhiteBalanceTungsten = ...
        WhiteBalanceFluorescent = ...
        WhiteBalanceFlash = ...
        WhiteBalanceSunset = ...

    class ExposureMode(enum.Enum):
        ExposureAuto = ...
        ExposureManual = ...
        ExposurePortrait = ...
        ExposureNight = ...
        ExposureSports = ...
        ExposureSnow = ...
        ExposureBeach = ...
        ExposureAction = ...
        ExposureLandscape = ...
        ExposureNightPortrait = ...
        ExposureTheatre = ...
        ExposureSunset = ...
        ExposureSteadyPhoto = ...
        ExposureFireworks = ...
        ExposureParty = ...
        ExposureCandlelight = ...
        ExposureBarcode = ...

    class TorchMode(enum.Enum):
        TorchOff = ...
        TorchOn = ...
        TorchAuto = ...

    class FlashMode(enum.Enum):
        FlashOff = ...
        FlashOn = ...
        FlashAuto = ...

    class FocusMode(enum.Enum):
        FocusModeAuto = ...
        FocusModeAutoNear = ...
        FocusModeAutoFar = ...
        FocusModeHyperfocal = ...
        FocusModeInfinity = ...
        FocusModeManual = ...

    class Error(enum.Enum):
        NoError = ...
        CameraError = ...

    @typing.overload
    def __init__(
        self, cameraDevice: QCameraDevice, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        position: QCameraDevice.Position,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    manualIsoSensitivityChanged: typing.ClassVar[QtCore.pyqtSignal]
    manualExposureTimeChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusPointChanged: typing.ClassVar[QtCore.pyqtSignal]
    colorTemperatureChanged: typing.ClassVar[QtCore.pyqtSignal]
    whiteBalanceModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    exposureModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    exposureCompensationChanged: typing.ClassVar[QtCore.pyqtSignal]
    isoSensitivityChanged: typing.ClassVar[QtCore.pyqtSignal]
    exposureTimeChanged: typing.ClassVar[QtCore.pyqtSignal]
    torchModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    flashModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    flashReady: typing.ClassVar[QtCore.pyqtSignal]
    customFocusPointChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusDistanceChanged: typing.ClassVar[QtCore.pyqtSignal]
    maximumZoomFactorChanged: typing.ClassVar[QtCore.pyqtSignal]
    minimumZoomFactorChanged: typing.ClassVar[QtCore.pyqtSignal]
    zoomFactorChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    supportedFeaturesChanged: typing.ClassVar[QtCore.pyqtSignal]
    cameraFormatChanged: typing.ClassVar[QtCore.pyqtSignal]
    cameraDeviceChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setColorTemperature(self, colorTemperature: int) -> None: ...
    def setWhiteBalanceMode(self, mode: QCamera.WhiteBalanceMode) -> None: ...
    def setAutoExposureTime(self) -> None: ...
    def setManualExposureTime(self, seconds: float) -> None: ...
    def setAutoIsoSensitivity(self) -> None: ...
    def setManualIsoSensitivity(self, iso: int) -> None: ...
    def setExposureCompensation(self, ev: float) -> None: ...
    def setExposureMode(self, mode: QCamera.ExposureMode) -> None: ...
    def setTorchMode(self, mode: QCamera.TorchMode) -> None: ...
    def setFlashMode(self, mode: QCamera.FlashMode) -> None: ...
    def zoomTo(self, zoom: float, rate: float) -> None: ...
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def setActive(self, active: bool) -> None: ...
    def colorTemperature(self) -> int: ...
    def isWhiteBalanceModeSupported(
        self, mode: QCamera.WhiteBalanceMode
    ) -> bool: ...
    def whiteBalanceMode(self) -> QCamera.WhiteBalanceMode: ...
    def maximumExposureTime(self) -> float: ...
    def minimumExposureTime(self) -> float: ...
    def maximumIsoSensitivity(self) -> int: ...
    def minimumIsoSensitivity(self) -> int: ...
    def manualExposureTime(self) -> float: ...
    def exposureTime(self) -> float: ...
    def manualIsoSensitivity(self) -> int: ...
    def isoSensitivity(self) -> int: ...
    def exposureCompensation(self) -> float: ...
    def isExposureModeSupported(self, mode: QCamera.ExposureMode) -> bool: ...
    def exposureMode(self) -> QCamera.ExposureMode: ...
    def isTorchModeSupported(self, mode: QCamera.TorchMode) -> bool: ...
    def torchMode(self) -> QCamera.TorchMode: ...
    def isFlashReady(self) -> bool: ...
    def isFlashModeSupported(self, mode: QCamera.FlashMode) -> bool: ...
    def flashMode(self) -> QCamera.FlashMode: ...
    def setZoomFactor(self, factor: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def maximumZoomFactor(self) -> float: ...
    def minimumZoomFactor(self) -> float: ...
    def focusDistance(self) -> float: ...
    def setFocusDistance(self, d: float) -> None: ...
    def setCustomFocusPoint(self, point: QtCore.QPointF) -> None: ...
    def customFocusPoint(self) -> QtCore.QPointF: ...
    def focusPoint(self) -> QtCore.QPointF: ...
    def isFocusModeSupported(self, mode: QCamera.FocusMode) -> bool: ...
    def setFocusMode(self, mode: QCamera.FocusMode) -> None: ...
    def focusMode(self) -> QCamera.FocusMode: ...
    def supportedFeatures(self) -> QCamera.Feature: ...
    def errorString(self) -> str: ...
    def error(self) -> QCamera.Error: ...
    def setCameraFormat(self, format: QCameraFormat) -> None: ...
    def cameraFormat(self) -> QCameraFormat: ...
    def setCameraDevice(self, cameraDevice: QCameraDevice) -> None: ...
    def cameraDevice(self) -> QCameraDevice: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...
    def isActive(self) -> bool: ...
    def isAvailable(self) -> bool: ...

class QCameraFormat(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QCameraFormat) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isNull(self) -> bool: ...
    def maxFrameRate(self) -> float: ...
    def minFrameRate(self) -> float: ...
    def resolution(self) -> QtCore.QSize: ...
    def pixelFormat(self) -> QVideoFrameFormat.PixelFormat: ...

class QCameraDevice(PyQt6.sip.simplewrapper):
    class Position(enum.Enum):
        UnspecifiedPosition = ...
        BackFace = ...
        FrontFace = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QCameraDevice) -> None: ...
    def correctionAngle(self) -> QtVideo.Rotation: ...
    def videoFormats(self) -> list[QCameraFormat]: ...
    def photoResolutions(self) -> list[QtCore.QSize]: ...
    def position(self) -> QCameraDevice.Position: ...
    def isDefault(self) -> bool: ...
    def description(self) -> str: ...
    def id(self) -> QtCore.QByteArray: ...
    def isNull(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QCapturableWindow(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QCapturableWindow) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def description(self) -> str: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QCapturableWindow) -> None: ...

class QImageCapture(QtCore.QObject):
    class FileFormat(enum.Enum):
        UnspecifiedFormat = ...
        JPEG = ...
        PNG = ...
        WebP = ...
        Tiff = ...

    class Quality(enum.Enum):
        VeryLowQuality = ...
        LowQuality = ...
        NormalQuality = ...
        HighQuality = ...
        VeryHighQuality = ...

    class Error(enum.Enum):
        NoError = ...
        NotReadyError = ...
        ResourceError = ...
        OutOfSpaceError = ...
        NotSupportedFeatureError = ...
        FormatError = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    imageSaved: typing.ClassVar[QtCore.pyqtSignal]
    imageAvailable: typing.ClassVar[QtCore.pyqtSignal]
    imageCaptured: typing.ClassVar[QtCore.pyqtSignal]
    imageExposed: typing.ClassVar[QtCore.pyqtSignal]
    resolutionChanged: typing.ClassVar[QtCore.pyqtSignal]
    qualityChanged: typing.ClassVar[QtCore.pyqtSignal]
    fileFormatChanged: typing.ClassVar[QtCore.pyqtSignal]
    metaDataChanged: typing.ClassVar[QtCore.pyqtSignal]
    readyForCaptureChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    def capture(self) -> int: ...
    def captureToFile(self, location: str | None = ...) -> int: ...
    def addMetaData(self, metaData: QMediaMetaData) -> None: ...
    def setMetaData(self, metaData: QMediaMetaData) -> None: ...
    def metaData(self) -> QMediaMetaData: ...
    def setQuality(self, quality: QImageCapture.Quality) -> None: ...
    def quality(self) -> QImageCapture.Quality: ...
    @typing.overload
    def setResolution(self, a0: QtCore.QSize) -> None: ...
    @typing.overload
    def setResolution(self, width: int, height: int) -> None: ...
    def resolution(self) -> QtCore.QSize: ...
    @staticmethod
    def fileFormatDescription(c: QImageCapture.FileFormat) -> str: ...
    @staticmethod
    def fileFormatName(c: QImageCapture.FileFormat) -> str: ...
    @staticmethod
    def supportedFormats() -> list[QImageCapture.FileFormat]: ...
    def setFileFormat(self, format: QImageCapture.FileFormat) -> None: ...
    def fileFormat(self) -> QImageCapture.FileFormat: ...
    def isReadyForCapture(self) -> bool: ...
    def errorString(self) -> str: ...
    def error(self) -> QImageCapture.Error: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...
    def isAvailable(self) -> bool: ...

class QMediaCaptureSession(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    videoFrameInputChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioBufferInputChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setVideoFrameInput(self, input: QVideoFrameInput | None) -> None: ...
    def videoFrameInput(self) -> QVideoFrameInput | None: ...
    def setAudioBufferInput(self, input: QAudioBufferInput | None) -> None: ...
    def audioBufferInput(self) -> QAudioBufferInput | None: ...
    windowCaptureChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setWindowCapture(
        self, windowCapture: QWindowCapture | None
    ) -> None: ...
    def windowCapture(self) -> QWindowCapture | None: ...
    screenCaptureChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setScreenCapture(
        self, screenCapture: QScreenCapture | None
    ) -> None: ...
    def screenCapture(self) -> QScreenCapture | None: ...
    audioOutputChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoOutputChanged: typing.ClassVar[QtCore.pyqtSignal]
    recorderChanged: typing.ClassVar[QtCore.pyqtSignal]
    imageCaptureChanged: typing.ClassVar[QtCore.pyqtSignal]
    cameraChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioInputChanged: typing.ClassVar[QtCore.pyqtSignal]
    def audioOutput(self) -> QAudioOutput | None: ...
    def setAudioOutput(self, output: QAudioOutput | None) -> None: ...
    def videoSink(self) -> QVideoSink | None: ...
    def setVideoSink(self, sink: QVideoSink | None) -> None: ...
    def videoOutput(self) -> QtCore.QObject | None: ...
    def setVideoOutput(self, output: QtCore.QObject | None) -> None: ...
    def setRecorder(self, recorder: QMediaRecorder | None) -> None: ...
    def recorder(self) -> QMediaRecorder | None: ...
    def setImageCapture(self, imageCapture: QImageCapture | None) -> None: ...
    def imageCapture(self) -> QImageCapture | None: ...
    def setCamera(self, camera: QCamera | None) -> None: ...
    def camera(self) -> QCamera | None: ...
    def setAudioInput(self, device: QAudioInput | None) -> None: ...
    def audioInput(self) -> QAudioInput | None: ...

class QMediaDevices(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    videoInputsChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioOutputsChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioInputsChanged: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def defaultVideoInput() -> QCameraDevice: ...
    @staticmethod
    def defaultAudioOutput() -> QAudioDevice: ...
    @staticmethod
    def defaultAudioInput() -> QAudioDevice: ...
    @staticmethod
    def videoInputs() -> list[QCameraDevice]: ...
    @staticmethod
    def audioOutputs() -> list[QAudioDevice]: ...
    @staticmethod
    def audioInputs() -> list[QAudioDevice]: ...

class QMediaFormat(PyQt6.sip.simplewrapper):
    class ResolveFlags(enum.Enum):
        NoFlags = ...
        RequiresVideo = ...

    class ConversionMode(enum.Enum):
        Encode = ...
        Decode = ...

    class VideoCodec(enum.Enum):
        Unspecified = ...
        MPEG1 = ...
        MPEG2 = ...
        MPEG4 = ...
        H264 = ...
        H265 = ...
        VP8 = ...
        VP9 = ...
        AV1 = ...
        Theora = ...
        WMV = ...
        MotionJPEG = ...

    class AudioCodec(enum.Enum):
        Unspecified = ...
        MP3 = ...
        AAC = ...
        AC3 = ...
        EAC3 = ...
        FLAC = ...
        DolbyTrueHD = ...
        Opus = ...
        Vorbis = ...
        Wave = ...
        WMA = ...
        ALAC = ...

    class FileFormat(enum.Enum):
        UnspecifiedFormat = ...
        WMV = ...
        AVI = ...
        Matroska = ...
        MPEG4 = ...
        Ogg = ...
        QuickTime = ...
        WebM = ...
        Mpeg4Audio = ...
        AAC = ...
        WMA = ...
        MP3 = ...
        FLAC = ...
        Wave = ...

    @typing.overload
    def __init__(self, format: QMediaFormat.FileFormat = ...) -> None: ...
    @typing.overload
    def __init__(self, other: QMediaFormat) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def resolveForEncoding(self, flags: QMediaFormat.ResolveFlags) -> None: ...
    @staticmethod
    def videoCodecDescription(c: QMediaFormat.VideoCodec) -> str: ...
    @staticmethod
    def audioCodecDescription(c: QMediaFormat.AudioCodec) -> str: ...
    @staticmethod
    def fileFormatDescription(c: QMediaFormat.FileFormat) -> str: ...
    @staticmethod
    def videoCodecName(c: QMediaFormat.VideoCodec) -> str: ...
    @staticmethod
    def audioCodecName(c: QMediaFormat.AudioCodec) -> str: ...
    @staticmethod
    def fileFormatName(c: QMediaFormat.FileFormat) -> str: ...
    def supportedAudioCodecs(
        self, m: QMediaFormat.ConversionMode
    ) -> list[QMediaFormat.AudioCodec]: ...
    def supportedVideoCodecs(
        self, m: QMediaFormat.ConversionMode
    ) -> list[QMediaFormat.VideoCodec]: ...
    def supportedFileFormats(
        self, m: QMediaFormat.ConversionMode
    ) -> list[QMediaFormat.FileFormat]: ...
    def mimeType(self) -> QtCore.QMimeType: ...
    def isSupported(self, mode: QMediaFormat.ConversionMode) -> bool: ...
    def audioCodec(self) -> QMediaFormat.AudioCodec: ...
    def setAudioCodec(self, codec: QMediaFormat.AudioCodec) -> None: ...
    def videoCodec(self) -> QMediaFormat.VideoCodec: ...
    def setVideoCodec(self, codec: QMediaFormat.VideoCodec) -> None: ...
    def setFileFormat(self, f: QMediaFormat.FileFormat) -> None: ...
    def fileFormat(self) -> QMediaFormat.FileFormat: ...
    def swap(self, other: QMediaFormat) -> None: ...

class QMediaMetaData(PyQt6.sip.simplewrapper):
    class Key(enum.Enum):
        Title = ...
        Author = ...
        Comment = ...
        Description = ...
        Genre = ...
        Date = ...
        Language = ...
        Publisher = ...
        Copyright = ...
        Url = ...
        Duration = ...
        MediaType = ...
        FileFormat = ...
        AudioBitRate = ...
        AudioCodec = ...
        VideoBitRate = ...
        VideoCodec = ...
        VideoFrameRate = ...
        AlbumTitle = ...
        AlbumArtist = ...
        ContributingArtist = ...
        TrackNumber = ...
        Composer = ...
        LeadPerformer = ...
        ThumbnailImage = ...
        CoverArtImage = ...
        Orientation = ...
        Resolution = ...
        HasHdrContent = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMediaMetaData) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def keyType(key: QMediaMetaData.Key) -> QtCore.QMetaType: ...
    @staticmethod
    def metaDataKeyToString(k: QMediaMetaData.Key) -> str: ...
    def stringValue(self, k: QMediaMetaData.Key) -> str: ...
    def keys(self) -> list[QMediaMetaData.Key]: ...
    def insert(self, k: QMediaMetaData.Key, value: typing.Any) -> None: ...
    def value(self, k: QMediaMetaData.Key) -> typing.Any: ...

class QMediaPlayer(QtCore.QObject):
    class Loops(enum.IntEnum):
        Infinite = ...
        Once = ...

    class Error(enum.Enum):
        NoError = ...
        ResourceError = ...
        FormatError = ...
        NetworkError = ...
        AccessDeniedError = ...

    class MediaStatus(enum.Enum):
        NoMedia = ...
        LoadingMedia = ...
        LoadedMedia = ...
        StalledMedia = ...
        BufferingMedia = ...
        BufferedMedia = ...
        EndOfMedia = ...
        InvalidMedia = ...

    class PlaybackState(enum.Enum):
        StoppedState = ...
        PlayingState = ...
        PausedState = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    audioBufferOutputChanged: typing.ClassVar[QtCore.pyqtSignal]
    def audioBufferOutput(self) -> QAudioBufferOutput | None: ...
    def setAudioBufferOutput(
        self, output: QAudioBufferOutput | None
    ) -> None: ...
    playingChanged: typing.ClassVar[QtCore.pyqtSignal]
    def isPlaying(self) -> bool: ...
    loopsChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setLoops(self, loops: int) -> None: ...
    def loops(self) -> int: ...
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeTracksChanged: typing.ClassVar[QtCore.pyqtSignal]
    tracksChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioOutputChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoOutputChanged: typing.ClassVar[QtCore.pyqtSignal]
    metaDataChanged: typing.ClassVar[QtCore.pyqtSignal]
    playbackRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    seekableChanged: typing.ClassVar[QtCore.pyqtSignal]
    bufferProgressChanged: typing.ClassVar[QtCore.pyqtSignal]
    hasVideoChanged: typing.ClassVar[QtCore.pyqtSignal]
    hasAudioChanged: typing.ClassVar[QtCore.pyqtSignal]
    positionChanged: typing.ClassVar[QtCore.pyqtSignal]
    durationChanged: typing.ClassVar[QtCore.pyqtSignal]
    mediaStatusChanged: typing.ClassVar[QtCore.pyqtSignal]
    playbackStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    sourceChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setSourceDevice(
        self, device: QtCore.QIODevice | None, sourceUrl: QtCore.QUrl = ...
    ) -> None: ...
    def setSource(self, source: QtCore.QUrl) -> None: ...
    def setPlaybackRate(self, rate: float) -> None: ...
    def setPosition(self, position: int) -> None: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def metaData(self) -> QMediaMetaData: ...
    def isAvailable(self) -> bool: ...
    def errorString(self) -> str: ...
    def error(self) -> QMediaPlayer.Error: ...
    def playbackRate(self) -> float: ...
    def isSeekable(self) -> bool: ...
    def bufferedTimeRange(self) -> QMediaTimeRange: ...
    def bufferProgress(self) -> float: ...
    def hasVideo(self) -> bool: ...
    def hasAudio(self) -> bool: ...
    def position(self) -> int: ...
    def duration(self) -> int: ...
    def mediaStatus(self) -> QMediaPlayer.MediaStatus: ...
    def playbackState(self) -> QMediaPlayer.PlaybackState: ...
    def sourceDevice(self) -> QtCore.QIODevice | None: ...
    def source(self) -> QtCore.QUrl: ...
    def videoSink(self) -> QVideoSink | None: ...
    def setVideoSink(self, sink: QVideoSink | None) -> None: ...
    def videoOutput(self) -> QtCore.QObject | None: ...
    def setVideoOutput(self, a0: QtCore.QObject | None) -> None: ...
    def audioOutput(self) -> QAudioOutput | None: ...
    def setAudioOutput(self, output: QAudioOutput | None) -> None: ...
    def setActiveSubtitleTrack(self, index: int) -> None: ...
    def setActiveVideoTrack(self, index: int) -> None: ...
    def setActiveAudioTrack(self, index: int) -> None: ...
    def activeSubtitleTrack(self) -> int: ...
    def activeVideoTrack(self) -> int: ...
    def activeAudioTrack(self) -> int: ...
    def subtitleTracks(self) -> list[QMediaMetaData]: ...
    def videoTracks(self) -> list[QMediaMetaData]: ...
    def audioTracks(self) -> list[QMediaMetaData]: ...

class QMediaRecorder(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        ResourceError = ...
        FormatError = ...
        OutOfSpaceError = ...
        LocationNotWritable = ...

    class RecorderState(enum.Enum):
        StoppedState = ...
        RecordingState = ...
        PausedState = ...

    class EncodingMode(enum.Enum):
        ConstantQualityEncoding = ...
        ConstantBitRateEncoding = ...
        AverageBitRateEncoding = ...
        TwoPassEncoding = ...

    class Quality(enum.Enum):
        VeryLowQuality = ...
        LowQuality = ...
        NormalQuality = ...
        HighQuality = ...
        VeryHighQuality = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    autoStopChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setAutoStop(self, autoStop: bool) -> None: ...
    def autoStop(self) -> bool: ...
    def outputDevice(self) -> QtCore.QIODevice | None: ...
    def setOutputDevice(self, device: QtCore.QIODevice | None) -> None: ...
    audioSampleRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioChannelCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioBitRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoBitRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoFrameRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoResolutionChanged: typing.ClassVar[QtCore.pyqtSignal]
    qualityChanged: typing.ClassVar[QtCore.pyqtSignal]
    encodingModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    mediaFormatChanged: typing.ClassVar[QtCore.pyqtSignal]
    metaDataChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    actualLocationChanged: typing.ClassVar[QtCore.pyqtSignal]
    durationChanged: typing.ClassVar[QtCore.pyqtSignal]
    recorderStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def record(self) -> None: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...
    def setMetaData(self, metaData: QMediaMetaData) -> None: ...
    def metaData(self) -> QMediaMetaData: ...
    def setAudioSampleRate(self, sampleRate: int) -> None: ...
    def audioSampleRate(self) -> int: ...
    def setAudioChannelCount(self, channels: int) -> None: ...
    def audioChannelCount(self) -> int: ...
    def setAudioBitRate(self, bitRate: int) -> None: ...
    def audioBitRate(self) -> int: ...
    def setVideoBitRate(self, bitRate: int) -> None: ...
    def videoBitRate(self) -> int: ...
    def setVideoFrameRate(self, frameRate: float) -> None: ...
    def videoFrameRate(self) -> float: ...
    @typing.overload
    def setVideoResolution(self, a0: QtCore.QSize) -> None: ...
    @typing.overload
    def setVideoResolution(self, width: int, height: int) -> None: ...
    def videoResolution(self) -> QtCore.QSize: ...
    def setQuality(self, quality: QMediaRecorder.Quality) -> None: ...
    def quality(self) -> QMediaRecorder.Quality: ...
    def setEncodingMode(self, a0: QMediaRecorder.EncodingMode) -> None: ...
    def encodingMode(self) -> QMediaRecorder.EncodingMode: ...
    def setMediaFormat(self, format: QMediaFormat) -> None: ...
    def mediaFormat(self) -> QMediaFormat: ...
    def duration(self) -> int: ...
    def errorString(self) -> str: ...
    def error(self) -> QMediaRecorder.Error: ...
    def recorderState(self) -> QMediaRecorder.RecorderState: ...
    def actualLocation(self) -> QtCore.QUrl: ...
    def setOutputLocation(self, location: QtCore.QUrl) -> None: ...
    def outputLocation(self) -> QtCore.QUrl: ...
    def isAvailable(self) -> bool: ...

class QMediaTimeRange(PyQt6.sip.simplewrapper):
    class Interval(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self, start: int, end: int) -> None: ...
        @typing.overload
        def __init__(self, a0: QMediaTimeRange.Interval) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def translated(self, offset: int) -> QMediaTimeRange.Interval: ...
        def normalized(self) -> QMediaTimeRange.Interval: ...
        def isNormal(self) -> bool: ...
        def contains(self, time: int) -> bool: ...
        def end(self) -> int: ...
        def start(self) -> int: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMediaTimeRange.Interval) -> None: ...
    @typing.overload
    def __init__(self, start: int, end: int) -> None: ...
    @typing.overload
    def __init__(self, range: QMediaTimeRange) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, a0: QMediaTimeRange) -> QMediaTimeRange: ...
    def __sub__(self, a0: QMediaTimeRange) -> QMediaTimeRange: ...
    def clear(self) -> None: ...
    @typing.overload
    def __isub__(self, a0: QMediaTimeRange.Interval) -> QMediaTimeRange: ...
    @typing.overload
    def __isub__(self, a0: QMediaTimeRange) -> QMediaTimeRange: ...
    @typing.overload
    def __iadd__(self, a0: QMediaTimeRange.Interval) -> QMediaTimeRange: ...
    @typing.overload
    def __iadd__(self, a0: QMediaTimeRange) -> QMediaTimeRange: ...
    def removeTimeRange(self, a0: QMediaTimeRange) -> None: ...
    @typing.overload
    def removeInterval(self, interval: QMediaTimeRange.Interval) -> None: ...
    @typing.overload
    def removeInterval(self, start: int, end: int) -> None: ...
    def addTimeRange(self, a0: QMediaTimeRange) -> None: ...
    @typing.overload
    def addInterval(self, interval: QMediaTimeRange.Interval) -> None: ...
    @typing.overload
    def addInterval(self, start: int, end: int) -> None: ...
    def contains(self, time: int) -> bool: ...
    def isContinuous(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def intervals(self) -> list[QMediaTimeRange.Interval]: ...
    def latestTime(self) -> int: ...
    def earliestTime(self) -> int: ...

class QScreenCapture(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        InternalError = ...
        CapturingNotSupported = ...
        CaptureFailed = ...
        NotFound = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    screenChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def setActive(self, active: bool) -> None: ...
    def errorString(self) -> str: ...
    def error(self) -> QScreenCapture.Error: ...
    def isActive(self) -> bool: ...
    def screen(self) -> QtGui.QScreen | None: ...
    def setScreen(self, screen: QtGui.QScreen | None) -> None: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...

class QSoundEffect(QtCore.QObject):
    class Status(enum.Enum):
        Null = ...
        Loading = ...
        Ready = ...
        Error = ...

    class Loop(enum.Enum):
        Infinite = ...

    @typing.overload
    def __init__(
        self, audioDevice: QAudioDevice, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    statusChanged: typing.ClassVar[QtCore.pyqtSignal]
    playingChanged: typing.ClassVar[QtCore.pyqtSignal]
    loadedChanged: typing.ClassVar[QtCore.pyqtSignal]
    mutedChanged: typing.ClassVar[QtCore.pyqtSignal]
    volumeChanged: typing.ClassVar[QtCore.pyqtSignal]
    loopsRemainingChanged: typing.ClassVar[QtCore.pyqtSignal]
    loopCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    sourceChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioDeviceChanged: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    def play(self) -> None: ...
    def status(self) -> QSoundEffect.Status: ...
    def isPlaying(self) -> bool: ...
    def isLoaded(self) -> bool: ...
    def setMuted(self, muted: bool) -> None: ...
    def isMuted(self) -> bool: ...
    def setVolume(self, volume: float) -> None: ...
    def volume(self) -> float: ...
    def setLoopCount(self, loopCount: int) -> None: ...
    def loopsRemaining(self) -> int: ...
    def loopCount(self) -> int: ...
    def setSource(self, url: QtCore.QUrl) -> None: ...
    def source(self) -> QtCore.QUrl: ...
    def setAudioDevice(self, device: QAudioDevice) -> None: ...
    def audioDevice(self) -> QAudioDevice: ...
    @staticmethod
    def supportedMimeTypes() -> list[str]: ...

class QVideoFrame(PyQt6.sip.simplewrapper):
    class RotationAngle(enum.Enum):
        Rotation0 = ...
        Rotation90 = ...
        Rotation180 = ...
        Rotation270 = ...

    class MapMode(enum.Enum):
        NotMapped = ...
        ReadOnly = ...
        WriteOnly = ...
        ReadWrite = ...

    class HandleType(enum.Enum):
        NoHandle = ...
        RhiTextureHandle = ...

    class PaintOptions(PyQt6.sip.simplewrapper):
        class PaintFlag(enum.Flag):
            DontDrawSubtitles = ...

        aspectRatioMode: QtCore.Qt.AspectRatioMode = ...
        backgroundColor: QtGui.QColor | QtCore.Qt.GlobalColor | int = ...
        paintFlags: QVideoFrame.PaintOptions.PaintFlag = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QVideoFrame.PaintOptions) -> None: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, format: QVideoFrameFormat) -> None: ...
    @typing.overload
    def __init__(self, image: QtGui.QImage) -> None: ...
    @typing.overload
    def __init__(self, other: QVideoFrame) -> None: ...
    def streamFrameRate(self) -> float: ...
    def setStreamFrameRate(self, rate: float) -> None: ...
    def rotation(self) -> QtVideo.Rotation: ...
    def setRotation(self, angle: QtVideo.Rotation) -> None: ...
    def mirrored(self) -> bool: ...
    def setMirrored(self, a0: bool) -> None: ...
    def rotationAngle(self) -> QVideoFrame.RotationAngle: ...
    def setRotationAngle(self, a0: QVideoFrame.RotationAngle) -> None: ...
    def paint(
        self,
        painter: QtGui.QPainter | None,
        rect: QtCore.QRectF,
        options: QVideoFrame.PaintOptions,
    ) -> None: ...
    def setSubtitleText(self, text: str | None) -> None: ...
    def subtitleText(self) -> str: ...
    def toImage(self) -> QtGui.QImage: ...
    def surfaceFormat(self) -> QVideoFrameFormat: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def planeCount(self) -> int: ...
    def setEndTime(self, time: int) -> None: ...
    def endTime(self) -> int: ...
    def setStartTime(self, time: int) -> None: ...
    def startTime(self) -> int: ...
    def mappedBytes(self, plane: int) -> int: ...
    def bits(self, plane: int) -> PyQt6.sip.voidptr | None: ...
    def bytesPerLine(self, plane: int) -> int: ...
    def unmap(self) -> None: ...
    def map(self, mode: QVideoFrame.MapMode) -> bool: ...
    def mapMode(self) -> QVideoFrame.MapMode: ...
    def isWritable(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isMapped(self) -> bool: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def size(self) -> QtCore.QSize: ...
    def handleType(self) -> QVideoFrame.HandleType: ...
    def pixelFormat(self) -> QVideoFrameFormat.PixelFormat: ...
    def isValid(self) -> bool: ...

class QVideoFrameFormat(PyQt6.sip.simplewrapper):
    class ColorRange(enum.Enum):
        ColorRange_Unknown = ...
        ColorRange_Video = ...
        ColorRange_Full = ...

    class ColorTransfer(enum.Enum):
        ColorTransfer_Unknown = ...
        ColorTransfer_BT709 = ...
        ColorTransfer_BT601 = ...
        ColorTransfer_Linear = ...
        ColorTransfer_Gamma22 = ...
        ColorTransfer_Gamma28 = ...
        ColorTransfer_ST2084 = ...
        ColorTransfer_STD_B67 = ...

    class ColorSpace(enum.Enum):
        ColorSpace_Undefined = ...
        ColorSpace_BT601 = ...
        ColorSpace_BT709 = ...
        ColorSpace_AdobeRgb = ...
        ColorSpace_BT2020 = ...

    class YCbCrColorSpace(enum.Enum):
        YCbCr_Undefined = ...
        YCbCr_BT601 = ...
        YCbCr_BT709 = ...
        YCbCr_xvYCC601 = ...
        YCbCr_xvYCC709 = ...
        YCbCr_JPEG = ...
        YCbCr_BT2020 = ...

    class Direction(enum.Enum):
        TopToBottom = ...
        BottomToTop = ...

    class PixelFormat(enum.Enum):
        Format_Invalid = ...
        Format_YUV420P = ...
        Format_YUV422P = ...
        Format_YUV420P10 = ...
        Format_YV12 = ...
        Format_UYVY = ...
        Format_YUYV = ...
        Format_NV12 = ...
        Format_NV21 = ...
        Format_IMC1 = ...
        Format_IMC2 = ...
        Format_IMC3 = ...
        Format_IMC4 = ...
        Format_Y8 = ...
        Format_Y16 = ...
        Format_P010 = ...
        Format_P016 = ...
        Format_Jpeg = ...
        Format_SamplerExternalOES = ...
        Format_ARGB8888 = ...
        Format_ARGB8888_Premultiplied = ...
        Format_XRGB8888 = ...
        Format_BGRA8888 = ...
        Format_BGRA8888_Premultiplied = ...
        Format_BGRX8888 = ...
        Format_ABGR8888 = ...
        Format_XBGR8888 = ...
        Format_RGBA8888 = ...
        Format_RGBX8888 = ...
        Format_AYUV = ...
        Format_AYUV_Premultiplied = ...
        Format_SamplerRect = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, size: QtCore.QSize, pixelFormat: QVideoFrameFormat.PixelFormat
    ) -> None: ...
    @typing.overload
    def __init__(self, format: QVideoFrameFormat) -> None: ...
    def setRotation(self, rotation: QtVideo.Rotation) -> None: ...
    def rotation(self) -> QtVideo.Rotation: ...
    def setStreamFrameRate(self, rate: float) -> None: ...
    def streamFrameRate(self) -> float: ...
    def setColorRange(self, range: QVideoFrameFormat.ColorRange) -> None: ...
    def colorRange(self) -> QVideoFrameFormat.ColorRange: ...
    def setColorTransfer(
        self, colorTransfer: QVideoFrameFormat.ColorTransfer
    ) -> None: ...
    def colorTransfer(self) -> QVideoFrameFormat.ColorTransfer: ...
    def setColorSpace(
        self, colorSpace: QVideoFrameFormat.ColorSpace
    ) -> None: ...
    def colorSpace(self) -> QVideoFrameFormat.ColorSpace: ...
    @staticmethod
    def pixelFormatToString(
        pixelFormat: QVideoFrameFormat.PixelFormat,
    ) -> str: ...
    @staticmethod
    def imageFormatFromPixelFormat(
        format: QVideoFrameFormat.PixelFormat,
    ) -> QtGui.QImage.Format: ...
    @staticmethod
    def pixelFormatFromImageFormat(
        format: QtGui.QImage.Format,
    ) -> QVideoFrameFormat.PixelFormat: ...
    def setMirrored(self, mirrored: bool) -> None: ...
    def isMirrored(self) -> bool: ...
    def setYCbCrColorSpace(
        self, colorSpace: QVideoFrameFormat.YCbCrColorSpace
    ) -> None: ...
    def yCbCrColorSpace(self) -> QVideoFrameFormat.YCbCrColorSpace: ...
    def setFrameRate(self, rate: float) -> None: ...
    def frameRate(self) -> float: ...
    def setScanLineDirection(
        self, direction: QVideoFrameFormat.Direction
    ) -> None: ...
    def scanLineDirection(self) -> QVideoFrameFormat.Direction: ...
    def setViewport(self, viewport: QtCore.QRect) -> None: ...
    def viewport(self) -> QtCore.QRect: ...
    def planeCount(self) -> int: ...
    def frameHeight(self) -> int: ...
    def frameWidth(self) -> int: ...
    @typing.overload
    def setFrameSize(self, size: QtCore.QSize) -> None: ...
    @typing.overload
    def setFrameSize(self, width: int, height: int) -> None: ...
    def frameSize(self) -> QtCore.QSize: ...
    def pixelFormat(self) -> QVideoFrameFormat.PixelFormat: ...
    def isValid(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QVideoFrameInput(QtCore.QObject):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, format: QVideoFrameFormat, parent: QtCore.QObject | None = ...
    ) -> None: ...

    readyToSendVideoFrame: typing.ClassVar[QtCore.pyqtSignal]
    def sendVideoFrame(self, frame: QVideoFrame) -> bool: ...
    def format(self) -> QVideoFrameFormat: ...
    def captureSession(self) -> QMediaCaptureSession | None: ...

class QVideoSink(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    videoSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    subtitleTextChanged: typing.ClassVar[QtCore.pyqtSignal]
    videoFrameChanged: typing.ClassVar[QtCore.pyqtSignal]
    def videoFrame(self) -> QVideoFrame: ...
    def setVideoFrame(self, frame: QVideoFrame) -> None: ...
    def setSubtitleText(self, subtitle: str | None) -> None: ...
    def subtitleText(self) -> str: ...
    def videoSize(self) -> QtCore.QSize: ...

class QWindowCapture(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        InternalError = ...
        CapturingNotSupported = ...
        CaptureFailed = ...
        NotFound = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    errorChanged: typing.ClassVar[QtCore.pyqtSignal]
    windowChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def setActive(self, active: bool) -> None: ...
    def errorString(self) -> str: ...
    def error(self) -> QWindowCapture.Error: ...
    def isActive(self) -> bool: ...
    def window(self) -> QCapturableWindow: ...
    def setWindow(self, window: QCapturableWindow) -> None: ...
    @staticmethod
    def capturableWindows() -> list[QCapturableWindow]: ...
