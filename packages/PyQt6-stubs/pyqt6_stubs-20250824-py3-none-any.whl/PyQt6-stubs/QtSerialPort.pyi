# The PEP 484 type hints stub file for the QtSerialPort module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QSerialPort(QtCore.QIODevice):
    class SerialPortError(enum.Enum):
        NoError = ...
        DeviceNotFoundError = ...
        PermissionError = ...
        OpenError = ...
        WriteError = ...
        ReadError = ...
        ResourceError = ...
        UnsupportedOperationError = ...
        TimeoutError = ...
        NotOpenError = ...
        UnknownError = ...

    class PinoutSignal(enum.Flag):
        NoSignal = ...
        DataTerminalReadySignal = ...
        DataCarrierDetectSignal = ...
        DataSetReadySignal = ...
        RingIndicatorSignal = ...
        RequestToSendSignal = ...
        ClearToSendSignal = ...
        SecondaryTransmittedDataSignal = ...
        SecondaryReceivedDataSignal = ...

    class FlowControl(enum.Enum):
        NoFlowControl = ...
        HardwareControl = ...
        SoftwareControl = ...

    class StopBits(enum.Enum):
        OneStop = ...
        OneAndHalfStop = ...
        TwoStop = ...

    class Parity(enum.Enum):
        NoParity = ...
        EvenParity = ...
        OddParity = ...
        SpaceParity = ...
        MarkParity = ...

    class DataBits(enum.Enum):
        Data5 = ...
        Data6 = ...
        Data7 = ...
        Data8 = ...

    class BaudRate(enum.Enum):
        Baud1200 = ...
        Baud2400 = ...
        Baud4800 = ...
        Baud9600 = ...
        Baud19200 = ...
        Baud38400 = ...
        Baud57600 = ...
        Baud115200 = ...

    class Direction(enum.Flag):
        Input = ...
        Output = ...
        AllDirections = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, name: str | None, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, info: QSerialPortInfo, parent: QtCore.QObject | None = ...
    ) -> None: ...

    settingsRestoredOnCloseChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setSettingsRestoredOnClose(self, restore: bool) -> None: ...
    def settingsRestoredOnClose(self) -> bool: ...
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    breakEnabledChanged: typing.ClassVar[QtCore.pyqtSignal]
    def isBreakEnabled(self) -> bool: ...
    def handle(self) -> int: ...
    def writeData(self, data: PyQt6.sip.array[bytes] | None) -> int: ...
    def readLineData(self, maxlen: int) -> bytes: ...
    def readData(self, maxlen: int) -> bytes: ...
    requestToSendChanged: typing.ClassVar[QtCore.pyqtSignal]
    dataTerminalReadyChanged: typing.ClassVar[QtCore.pyqtSignal]
    flowControlChanged: typing.ClassVar[QtCore.pyqtSignal]
    stopBitsChanged: typing.ClassVar[QtCore.pyqtSignal]
    parityChanged: typing.ClassVar[QtCore.pyqtSignal]
    dataBitsChanged: typing.ClassVar[QtCore.pyqtSignal]
    baudRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setBreakEnabled(self, enabled: bool = ...) -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def canReadLine(self) -> bool: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def isSequential(self) -> bool: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def readBufferSize(self) -> int: ...
    def clearError(self) -> None: ...
    def error(self) -> QSerialPort.SerialPortError: ...
    def clear(self, dir: QSerialPort.Direction = ...) -> bool: ...
    def flush(self) -> bool: ...
    def pinoutSignals(self) -> QSerialPort.PinoutSignal: ...
    def isRequestToSend(self) -> bool: ...
    def setRequestToSend(self, set: bool) -> bool: ...
    def isDataTerminalReady(self) -> bool: ...
    def setDataTerminalReady(self, set: bool) -> bool: ...
    def flowControl(self) -> QSerialPort.FlowControl: ...
    def setFlowControl(self, flow: QSerialPort.FlowControl) -> bool: ...
    def stopBits(self) -> QSerialPort.StopBits: ...
    def setStopBits(self, stopBits: QSerialPort.StopBits) -> bool: ...
    def parity(self) -> QSerialPort.Parity: ...
    def setParity(self, parity: QSerialPort.Parity) -> bool: ...
    def dataBits(self) -> QSerialPort.DataBits: ...
    def setDataBits(self, dataBits: QSerialPort.DataBits) -> bool: ...
    def baudRate(self, dir: QSerialPort.Direction = ...) -> int: ...
    def setBaudRate(
        self, baudRate: int, dir: QSerialPort.Direction = ...
    ) -> bool: ...
    def close(self) -> None: ...
    def open(self, mode: QtCore.QIODeviceBase.OpenModeFlag) -> bool: ...
    def setPort(self, info: QSerialPortInfo) -> None: ...
    def portName(self) -> str: ...
    def setPortName(self, name: str | None) -> None: ...

class QSerialPortInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, port: QSerialPort) -> None: ...
    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(self, other: QSerialPortInfo) -> None: ...
    def serialNumber(self) -> str: ...
    def isNull(self) -> bool: ...
    @staticmethod
    def availablePorts() -> list[QSerialPortInfo]: ...
    @staticmethod
    def standardBaudRates() -> list[int]: ...
    def hasProductIdentifier(self) -> bool: ...
    def hasVendorIdentifier(self) -> bool: ...
    def productIdentifier(self) -> int: ...
    def vendorIdentifier(self) -> int: ...
    def manufacturer(self) -> str: ...
    def description(self) -> str: ...
    def systemLocation(self) -> str: ...
    def portName(self) -> str: ...
    def swap(self, other: QSerialPortInfo) -> None: ...
