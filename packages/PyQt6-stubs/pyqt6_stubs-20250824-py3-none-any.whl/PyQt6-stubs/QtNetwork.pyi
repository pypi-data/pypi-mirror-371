# The PEP 484 type hints stub file for the QtNetwork module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc

# Support for QDate, QDateTime and QTime.
import datetime
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QOcspRevocationReason(enum.Enum):
    None_ = ...
    Unspecified = ...
    KeyCompromise = ...
    CACompromise = ...
    AffiliationChanged = ...
    Superseded = ...
    CessationOfOperation = ...
    CertificateHold = ...
    RemoveFromCRL = ...

class QOcspCertificateStatus(enum.Enum):
    Good = ...
    Revoked = ...
    Unknown = ...

class QNetworkCacheMetaData(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkCacheMetaData) -> None: ...
    def setHeaders(self, headers: QHttpHeaders) -> None: ...
    def headers(self) -> QHttpHeaders: ...
    def swap(self, other: QNetworkCacheMetaData) -> None: ...
    def setAttributes(
        self, attributes: dict[QNetworkRequest.Attribute, typing.Any]
    ) -> None: ...
    def attributes(self) -> dict[QNetworkRequest.Attribute, typing.Any]: ...
    def setSaveToDisk(self, allow: bool) -> None: ...
    def saveToDisk(self) -> bool: ...
    def setExpirationDate(
        self, dateTime: QtCore.QDateTime | datetime.datetime
    ) -> None: ...
    def expirationDate(self) -> QtCore.QDateTime: ...
    def setLastModified(
        self, dateTime: QtCore.QDateTime | datetime.datetime
    ) -> None: ...
    def lastModified(self) -> QtCore.QDateTime: ...
    def setRawHeaders(
        self,
        headers: collections.abc.Iterable[
            tuple[
                QtCore.QByteArray | bytes | bytearray | memoryview,
                QtCore.QByteArray | bytes | bytearray | memoryview,
            ]
        ],
    ) -> None: ...
    def rawHeaders(
        self,
    ) -> list[tuple[QtCore.QByteArray, QtCore.QByteArray]]: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def isValid(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QAbstractNetworkCache(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def clear(self) -> None: ...
    def insert(self, device: QtCore.QIODevice | None) -> None: ...
    def prepare(
        self, metaData: QNetworkCacheMetaData
    ) -> QtCore.QIODevice | None: ...
    def cacheSize(self) -> int: ...
    def remove(self, url: QtCore.QUrl) -> bool: ...
    def data(self, url: QtCore.QUrl) -> QtCore.QIODevice | None: ...
    def updateMetaData(self, metaData: QNetworkCacheMetaData) -> None: ...
    def metaData(self, url: QtCore.QUrl) -> QNetworkCacheMetaData: ...

class QAbstractSocket(QtCore.QIODevice):
    class PauseMode(enum.Flag):
        PauseNever = ...
        PauseOnSslErrors = ...

    class BindFlag(enum.Flag):
        DefaultForPlatform = ...
        ShareAddress = ...
        DontShareAddress = ...
        ReuseAddressHint = ...

    class SocketOption(enum.Enum):
        LowDelayOption = ...
        KeepAliveOption = ...
        MulticastTtlOption = ...
        MulticastLoopbackOption = ...
        TypeOfServiceOption = ...
        SendBufferSizeSocketOption = ...
        ReceiveBufferSizeSocketOption = ...
        PathMtuSocketOption = ...

    class SocketState(enum.Enum):
        UnconnectedState = ...
        HostLookupState = ...
        ConnectingState = ...
        ConnectedState = ...
        BoundState = ...
        ListeningState = ...
        ClosingState = ...

    class SocketError(enum.Enum):
        ConnectionRefusedError = ...
        RemoteHostClosedError = ...
        HostNotFoundError = ...
        SocketAccessError = ...
        SocketResourceError = ...
        SocketTimeoutError = ...
        DatagramTooLargeError = ...
        NetworkError = ...
        AddressInUseError = ...
        SocketAddressNotAvailableError = ...
        UnsupportedSocketOperationError = ...
        UnfinishedSocketOperationError = ...
        ProxyAuthenticationRequiredError = ...
        SslHandshakeFailedError = ...
        ProxyConnectionRefusedError = ...
        ProxyConnectionClosedError = ...
        ProxyConnectionTimeoutError = ...
        ProxyNotFoundError = ...
        ProxyProtocolError = ...
        OperationError = ...
        SslInternalError = ...
        SslInvalidUserDataError = ...
        TemporaryError = ...
        UnknownSocketError = ...

    class NetworkLayerProtocol(enum.Enum):
        IPv4Protocol = ...
        IPv6Protocol = ...
        AnyIPProtocol = ...
        UnknownNetworkLayerProtocol = ...

    class SocketType(enum.Enum):
        TcpSocket = ...
        UdpSocket = ...
        SctpSocket = ...
        UnknownSocketType = ...

    def __init__(
        self,
        socketType: QAbstractSocket.SocketType,
        parent: QtCore.QObject | None,
    ) -> None: ...
    def setProtocolTag(self, tag: str | None) -> None: ...
    def protocolTag(self) -> str: ...
    @typing.overload
    def bind(
        self,
        address: QHostAddress | QHostAddress.SpecialAddress,
        port: int = ...,
        mode: QAbstractSocket.BindFlag = ...,
    ) -> bool: ...
    @typing.overload
    def bind(
        self, port: int = ..., mode: QAbstractSocket.BindFlag = ...
    ) -> bool: ...
    def setPauseMode(self, pauseMode: QAbstractSocket.PauseMode) -> None: ...
    def pauseMode(self) -> QAbstractSocket.PauseMode: ...
    def resume(self) -> None: ...
    def socketOption(
        self, option: QAbstractSocket.SocketOption
    ) -> typing.Any: ...
    def setSocketOption(
        self, option: QAbstractSocket.SocketOption, value: typing.Any
    ) -> None: ...
    def setPeerName(self, name: str | None) -> None: ...
    def setPeerAddress(
        self, address: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def setPeerPort(self, port: int) -> None: ...
    def setLocalAddress(
        self, address: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def setLocalPort(self, port: int) -> None: ...
    def setSocketError(
        self, socketError: QAbstractSocket.SocketError
    ) -> None: ...
    def setSocketState(self, state: QAbstractSocket.SocketState) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readLineData(self, maxlen: int) -> bytes: ...
    def readData(self, maxlen: int) -> bytes: ...
    proxyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    disconnected: typing.ClassVar[QtCore.pyqtSignal]
    connected: typing.ClassVar[QtCore.pyqtSignal]
    hostFound: typing.ClassVar[QtCore.pyqtSignal]
    def proxy(self) -> QNetworkProxy: ...
    def setProxy(self, networkProxy: QNetworkProxy) -> None: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def flush(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def close(self) -> None: ...
    def error(self) -> QAbstractSocket.SocketError: ...
    def state(self) -> QAbstractSocket.SocketState: ...
    def socketType(self) -> QAbstractSocket.SocketType: ...
    def socketDescriptor(self) -> PyQt6.sip.voidptr: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: PyQt6.sip.voidptr,
        state: QAbstractSocket.SocketState = ...,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def abort(self) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def readBufferSize(self) -> int: ...
    def peerName(self) -> str: ...
    def peerAddress(self) -> QHostAddress: ...
    def peerPort(self) -> int: ...
    def localAddress(self) -> QHostAddress: ...
    def localPort(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def isValid(self) -> bool: ...
    def disconnectFromHost(self) -> None: ...
    @typing.overload
    def connectToHost(
        self,
        hostName: str | None,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    @typing.overload
    def connectToHost(
        self,
        address: QHostAddress | QHostAddress.SpecialAddress,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...

class QAuthenticator(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QAuthenticator) -> None: ...
    def setOption(self, opt: str | None, value: typing.Any) -> None: ...
    def options(self) -> dict[str, typing.Any]: ...
    def option(self, opt: str | None) -> typing.Any: ...
    def isNull(self) -> bool: ...
    def realm(self) -> str: ...
    def setPassword(self, password: str | None) -> None: ...
    def password(self) -> str: ...
    def setUser(self, user: str | None) -> None: ...
    def user(self) -> str: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QDnsDomainNameRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsDomainNameRecord) -> None: ...
    def value(self) -> str: ...
    def timeToLive(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsDomainNameRecord) -> None: ...

class QDnsHostAddressRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsHostAddressRecord) -> None: ...
    def value(self) -> QHostAddress: ...
    def timeToLive(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsHostAddressRecord) -> None: ...

class QDnsMailExchangeRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsMailExchangeRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def preference(self) -> int: ...
    def name(self) -> str: ...
    def exchange(self) -> str: ...
    def swap(self, other: QDnsMailExchangeRecord) -> None: ...

class QDnsServiceRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsServiceRecord) -> None: ...
    def weight(self) -> int: ...
    def timeToLive(self) -> int: ...
    def target(self) -> str: ...
    def priority(self) -> int: ...
    def port(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsServiceRecord) -> None: ...

class QDnsTextRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsTextRecord) -> None: ...
    def values(self) -> list[QtCore.QByteArray]: ...
    def timeToLive(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsTextRecord) -> None: ...

class QDnsTlsAssociationRecord(PyQt6.sip.simplewrapper):
    class MatchingType(enum.Enum):
        Exact = ...
        Sha256 = ...
        Sha512 = ...
        PrivateUse = ...
        PrivMatch = ...

    class Selector(enum.Enum):
        FullCertificate = ...
        SubjectPublicKeyInfo = ...
        PrivateUse = ...
        Cert = ...
        SPKI = ...
        PrivSel = ...

    class CertificateUsage(enum.Enum):
        CertificateAuthorityConstrait = ...
        ServiceCertificateConstraint = ...
        TrustAnchorAssertion = ...
        DomainIssuedCertificate = ...
        PrivateUse = ...
        PKIX_TA = ...
        PKIX_EE = ...
        DANE_TA = ...
        DANE_EE = ...
        PrivCert = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDnsTlsAssociationRecord) -> None: ...
    def value(self) -> QtCore.QByteArray: ...
    def matchType(self) -> QDnsTlsAssociationRecord.MatchingType: ...
    def selector(self) -> QDnsTlsAssociationRecord.Selector: ...
    def usage(self) -> QDnsTlsAssociationRecord.CertificateUsage: ...
    def timeToLive(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsTlsAssociationRecord) -> None: ...

class QDnsLookup(QtCore.QObject):
    class Type(enum.Enum):
        A = ...
        AAAA = ...
        ANY = ...
        CNAME = ...
        MX = ...
        NS = ...
        PTR = ...
        SRV = ...
        TXT = ...
        TLSA = ...

    class Protocol(enum.Enum):
        Standard = ...
        DnsOverTls = ...

    class Error(enum.Enum):
        NoError = ...
        ResolverError = ...
        OperationCancelledError = ...
        InvalidRequestError = ...
        InvalidReplyError = ...
        ServerFailureError = ...
        ServerRefusedError = ...
        NotFoundError = ...
        TimeoutError = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QDnsLookup.Type,
        name: str | None,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QDnsLookup.Type,
        name: str | None,
        nameserver: QHostAddress | QHostAddress.SpecialAddress,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QDnsLookup.Type,
        name: str | None,
        nameserver: QHostAddress | QHostAddress.SpecialAddress,
        port: int,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QDnsLookup.Type,
        name: str | None,
        protocol: QDnsLookup.Protocol,
        nameserver: QHostAddress | QHostAddress.SpecialAddress,
        port: int = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...

    nameserverProtocolChanged: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def defaultPortForProtocol(protocol: QDnsLookup.Protocol) -> int: ...
    @staticmethod
    def isProtocolSupported(protocol: QDnsLookup.Protocol) -> bool: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def setSslConfiguration(
        self, sslConfiguration: QSslConfiguration
    ) -> None: ...
    def tlsAssociationRecords(self) -> list[QDnsTlsAssociationRecord]: ...
    def setNameserverProtocol(self, protocol: QDnsLookup.Protocol) -> None: ...
    def nameserverProtocol(self) -> QDnsLookup.Protocol: ...
    def isAuthenticData(self) -> bool: ...
    nameserverPortChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setNameserverPort(self, port: int) -> None: ...
    def nameserverPort(self) -> int: ...
    nameserverChanged: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def setNameserver(
        self, nameserver: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    @typing.overload
    def setNameserver(
        self, nameserver: QHostAddress | QHostAddress.SpecialAddress, port: int
    ) -> None: ...
    @typing.overload
    def setNameserver(
        self,
        protocol: QDnsLookup.Protocol,
        nameserver: QHostAddress | QHostAddress.SpecialAddress,
        port: int = ...,
    ) -> None: ...
    def nameserver(self) -> QHostAddress: ...
    typeChanged: typing.ClassVar[QtCore.pyqtSignal]
    nameChanged: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    def lookup(self) -> None: ...
    def abort(self) -> None: ...
    def textRecords(self) -> list[QDnsTextRecord]: ...
    def serviceRecords(self) -> list[QDnsServiceRecord]: ...
    def pointerRecords(self) -> list[QDnsDomainNameRecord]: ...
    def nameServerRecords(self) -> list[QDnsDomainNameRecord]: ...
    def mailExchangeRecords(self) -> list[QDnsMailExchangeRecord]: ...
    def hostAddressRecords(self) -> list[QDnsHostAddressRecord]: ...
    def canonicalNameRecords(self) -> list[QDnsDomainNameRecord]: ...
    def setType(self, a0: QDnsLookup.Type) -> None: ...
    def type(self) -> QDnsLookup.Type: ...
    def setName(self, name: str | None) -> None: ...
    def name(self) -> str: ...
    def isFinished(self) -> bool: ...
    def errorString(self) -> str: ...
    def error(self) -> QDnsLookup.Error: ...

class QFormDataPartBuilder(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QFormDataPartBuilder) -> None: ...
    def swap(self, other: QFormDataPartBuilder) -> None: ...
    def setHeaders(self, headers: QHttpHeaders) -> QFormDataPartBuilder: ...
    def setBodyDevice(
        self,
        body: QtCore.QIODevice | None,
        fileName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None = ...,
        mimeType: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None = ...,
    ) -> QFormDataPartBuilder: ...
    def setBody(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        fileName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None = ...,
        mimeType: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None = ...,
    ) -> QFormDataPartBuilder: ...

class QFormDataBuilder(PyQt6.sip.simplewrapper):
    class Option(enum.Enum):
        Default = ...
        OmitRfc8187EncodedFilename = ...
        UseRfc7578PercentEncodedFilename = ...
        PreferLatin1EncodedFilename = ...
        StrictRfc7578 = ...

    def __init__(self) -> None: ...
    def buildMultiPart(
        self, options: QFormDataBuilder.Option = ...
    ) -> QHttpMultiPart | None: ...
    def part(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QFormDataPartBuilder: ...
    def swap(self, other: QFormDataBuilder) -> None: ...

class QHostAddress(PyQt6.sip.simplewrapper):
    class ConversionModeFlag(enum.Flag):
        ConvertV4MappedToIPv4 = ...
        ConvertV4CompatToIPv4 = ...
        ConvertUnspecifiedAddress = ...
        ConvertLocalHost = ...
        TolerantConversion = ...
        StrictConversion = ...

    class SpecialAddress(enum.Enum):
        Null = ...
        Broadcast = ...
        LocalHost = ...
        LocalHostIPv6 = ...
        AnyIPv4 = ...
        AnyIPv6 = ...
        Any = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, address: QHostAddress.SpecialAddress) -> None: ...
    @typing.overload
    def __init__(self, ip4Addr: int) -> None: ...
    @typing.overload
    def __init__(self, address: str | None) -> None: ...
    @typing.overload
    def __init__(
        self,
        ip6Addr: tuple[
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
        ],
    ) -> None: ...
    @typing.overload
    def __init__(
        self, copy: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def isPrivateUse(self) -> bool: ...
    def isBroadcast(self) -> bool: ...
    def isUniqueLocalUnicast(self) -> bool: ...
    def isSiteLocal(self) -> bool: ...
    def isLinkLocal(self) -> bool: ...
    def isGlobal(self) -> bool: ...
    def isEqual(
        self,
        address: QHostAddress | QHostAddress.SpecialAddress,
        mode: QHostAddress.ConversionModeFlag = ...,
    ) -> bool: ...
    def isMulticast(self) -> bool: ...
    def swap(self, other: QHostAddress) -> None: ...
    @staticmethod
    def parseSubnet(subnet: str | None) -> tuple[QHostAddress, int]: ...
    def isLoopback(self) -> bool: ...
    @typing.overload
    def isInSubnet(
        self, subnet: QHostAddress | QHostAddress.SpecialAddress, netmask: int
    ) -> bool: ...
    @typing.overload
    def isInSubnet(
        self, subnet: tuple[QHostAddress | QHostAddress.SpecialAddress, int]
    ) -> bool: ...
    def __hash__(self) -> int: ...
    def clear(self) -> None: ...
    def isNull(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setScopeId(self, id: str | None) -> None: ...
    def scopeId(self) -> str: ...
    def toString(self) -> str: ...
    def toIPv6Address(
        self,
    ) -> tuple[
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
    ]: ...
    def toIPv4Address(self) -> tuple[int, bool | None]: ...
    def protocol(self) -> QAbstractSocket.NetworkLayerProtocol: ...
    @typing.overload
    def setAddress(self, address: QHostAddress.SpecialAddress) -> None: ...
    @typing.overload
    def setAddress(self, ip4Addr: int) -> None: ...
    @typing.overload
    def setAddress(self, address: str | None) -> bool: ...
    @typing.overload
    def setAddress(
        self,
        ip6Addr: tuple[
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
        ],
    ) -> None: ...

class QHostInfo(PyQt6.sip.simplewrapper):
    class HostInfoError(enum.Enum):
        NoError = ...
        HostNotFound = ...
        UnknownError = ...

    @typing.overload
    def __init__(self, id: int = ...) -> None: ...
    @typing.overload
    def __init__(self, d: QHostInfo) -> None: ...
    def swap(self, other: QHostInfo) -> None: ...
    @staticmethod
    def localDomainName() -> str: ...
    @staticmethod
    def localHostName() -> str: ...
    @staticmethod
    def fromName(name: str | None) -> QHostInfo: ...
    @staticmethod
    def abortHostLookup(lookupId: int) -> None: ...
    @staticmethod
    def lookupHost(name: str | None, slot: PYQT_SLOT) -> int: ...
    def lookupId(self) -> int: ...
    def setLookupId(self, id: int) -> None: ...
    def setErrorString(self, errorString: str | None) -> None: ...
    def errorString(self) -> str: ...
    def setError(self, error: QHostInfo.HostInfoError) -> None: ...
    def error(self) -> QHostInfo.HostInfoError: ...
    def setAddresses(
        self,
        addresses: collections.abc.Iterable[
            QHostAddress | QHostAddress.SpecialAddress
        ],
    ) -> None: ...
    def addresses(self) -> list[QHostAddress]: ...
    def setHostName(self, name: str | None) -> None: ...
    def hostName(self) -> str: ...

class QHstsPolicy(PyQt6.sip.simplewrapper):
    class PolicyFlag(enum.Flag):
        IncludeSubDomains = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        expiry: QtCore.QDateTime | datetime.datetime,
        flags: QHstsPolicy.PolicyFlag,
        host: str | None,
        mode: QtCore.QUrl.ParsingMode = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, rhs: QHstsPolicy) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isExpired(self) -> bool: ...
    def includesSubDomains(self) -> bool: ...
    def setIncludesSubDomains(self, include: bool) -> None: ...
    def expiry(self) -> QtCore.QDateTime: ...
    def setExpiry(
        self, expiry: QtCore.QDateTime | datetime.datetime
    ) -> None: ...
    def host(
        self, options: QtCore.QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setHost(
        self, host: str | None, mode: QtCore.QUrl.ParsingMode = ...
    ) -> None: ...
    def swap(self, other: QHstsPolicy) -> None: ...

class QHttp1Configuration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QHttp1Configuration) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def swap(self, other: QHttp1Configuration) -> None: ...
    def numberOfConnectionsPerHost(self) -> int: ...
    def setNumberOfConnectionsPerHost(self, amount: int) -> None: ...

class QHttp2Configuration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QHttp2Configuration) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def maxConcurrentStreams(self) -> int: ...
    def setMaxConcurrentStreams(self, value: int) -> None: ...
    def swap(self, other: QHttp2Configuration) -> None: ...
    def maxFrameSize(self) -> int: ...
    def setMaxFrameSize(self, size: int) -> bool: ...
    def streamReceiveWindowSize(self) -> int: ...
    def setStreamReceiveWindowSize(self, size: int) -> bool: ...
    def sessionReceiveWindowSize(self) -> int: ...
    def setSessionReceiveWindowSize(self, size: int) -> bool: ...
    def huffmanCompressionEnabled(self) -> bool: ...
    def setHuffmanCompressionEnabled(self, enable: bool) -> None: ...
    def serverPushEnabled(self) -> bool: ...
    def setServerPushEnabled(self, enable: bool) -> None: ...

class QHttpHeaders(PyQt6.sip.simplewrapper):
    class WellKnownHeader(enum.Enum):
        AIM = ...
        Accept = ...
        AcceptAdditions = ...
        AcceptCH = ...
        AcceptDatetime = ...
        AcceptEncoding = ...
        AcceptFeatures = ...
        AcceptLanguage = ...
        AcceptPatch = ...
        AcceptPost = ...
        AcceptRanges = ...
        AcceptSignature = ...
        AccessControlAllowCredentials = ...
        AccessControlAllowHeaders = ...
        AccessControlAllowMethods = ...
        AccessControlAllowOrigin = ...
        AccessControlExposeHeaders = ...
        AccessControlMaxAge = ...
        AccessControlRequestHeaders = ...
        AccessControlRequestMethod = ...
        Age = ...
        Allow = ...
        ALPN = ...
        AltSvc = ...
        AltUsed = ...
        Alternates = ...
        ApplyToRedirectRef = ...
        AuthenticationControl = ...
        AuthenticationInfo = ...
        Authorization = ...
        CacheControl = ...
        CacheStatus = ...
        CalManagedID = ...
        CalDAVTimezones = ...
        CapsuleProtocol = ...
        CDNCacheControl = ...
        CDNLoop = ...
        CertNotAfter = ...
        CertNotBefore = ...
        ClearSiteData = ...
        ClientCert = ...
        ClientCertChain = ...
        Close = ...
        Connection = ...
        ContentDigest = ...
        ContentDisposition = ...
        ContentEncoding = ...
        ContentID = ...
        ContentLanguage = ...
        ContentLength = ...
        ContentLocation = ...
        ContentRange = ...
        ContentSecurityPolicy = ...
        ContentSecurityPolicyReportOnly = ...
        ContentType = ...
        Cookie = ...
        CrossOriginEmbedderPolicy = ...
        CrossOriginEmbedderPolicyReportOnly = ...
        CrossOriginOpenerPolicy = ...
        CrossOriginOpenerPolicyReportOnly = ...
        CrossOriginResourcePolicy = ...
        DASL = ...
        Date = ...
        DAV = ...
        DeltaBase = ...
        Depth = ...
        Destination = ...
        DifferentialID = ...
        DPoP = ...
        DPoPNonce = ...
        EarlyData = ...
        ETag = ...
        Expect = ...
        ExpectCT = ...
        Expires = ...
        Forwarded = ...
        From = ...
        Hobareg = ...
        Host = ...
        If = ...
        IfMatch = ...
        IfModifiedSince = ...
        IfNoneMatch = ...
        IfRange = ...
        IfScheduleTagMatch = ...
        IfUnmodifiedSince = ...
        IM = ...
        IncludeReferredTokenBindingID = ...
        KeepAlive = ...
        Label = ...
        LastEventID = ...
        LastModified = ...
        Link = ...
        Location = ...
        LockToken = ...
        MaxForwards = ...
        MementoDatetime = ...
        Meter = ...
        MIMEVersion = ...
        Negotiate = ...
        NEL = ...
        ODataEntityId = ...
        ODataIsolation = ...
        ODataMaxVersion = ...
        ODataVersion = ...
        OptionalWWWAuthenticate = ...
        OrderingType = ...
        Origin = ...
        OriginAgentCluster = ...
        OSCORE = ...
        OSLCCoreVersion = ...
        Overwrite = ...
        PingFrom = ...
        PingTo = ...
        Position = ...
        Prefer = ...
        PreferenceApplied = ...
        Priority = ...
        ProxyAuthenticate = ...
        ProxyAuthenticationInfo = ...
        ProxyAuthorization = ...
        ProxyStatus = ...
        PublicKeyPins = ...
        PublicKeyPinsReportOnly = ...
        Range = ...
        RedirectRef = ...
        Referer = ...
        Refresh = ...
        ReplayNonce = ...
        ReprDigest = ...
        RetryAfter = ...
        ScheduleReply = ...
        ScheduleTag = ...
        SecPurpose = ...
        SecTokenBinding = ...
        SecWebSocketAccept = ...
        SecWebSocketExtensions = ...
        SecWebSocketKey = ...
        SecWebSocketProtocol = ...
        SecWebSocketVersion = ...
        Server = ...
        ServerTiming = ...
        SetCookie = ...
        Signature = ...
        SignatureInput = ...
        SLUG = ...
        SoapAction = ...
        StatusURI = ...
        StrictTransportSecurity = ...
        Sunset = ...
        SurrogateCapability = ...
        SurrogateControl = ...
        TCN = ...
        TE = ...
        Timeout = ...
        Topic = ...
        Traceparent = ...
        Tracestate = ...
        Trailer = ...
        TransferEncoding = ...
        TTL = ...
        Upgrade = ...
        Urgency = ...
        UserAgent = ...
        VariantVary = ...
        Vary = ...
        Via = ...
        WantContentDigest = ...
        WantReprDigest = ...
        WWWAuthenticate = ...
        XContentTypeOptions = ...
        XFrameOptions = ...
        AcceptCharset = ...
        CPEPInfo = ...
        Pragma = ...
        ProtocolInfo = ...
        ProtocolQuery = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QHttpHeaders) -> None: ...
    @typing.overload
    def replaceOrAppend(
        self,
        name: QHttpHeaders.WellKnownHeader,
        newValue: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    @typing.overload
    def replaceOrAppend(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        newValue: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    def toListOfPairs(
        self,
    ) -> list[tuple[QtCore.QByteArray, QtCore.QByteArray]]: ...
    @staticmethod
    def fromListOfPairs(
        headers: collections.abc.Iterable[
            tuple[
                QtCore.QByteArray | bytes | bytearray | memoryview,
                QtCore.QByteArray | bytes | bytearray | memoryview,
            ]
        ],
    ) -> QHttpHeaders: ...
    @staticmethod
    def wellKnownHeaderName(
        name: QHttpHeaders.WellKnownHeader,
    ) -> QtCore.QByteArray: ...
    def isEmpty(self) -> bool: ...
    def reserve(self, size: int) -> None: ...
    def size(self) -> int: ...
    @typing.overload
    def combinedValue(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QtCore.QByteArray: ...
    @typing.overload
    def combinedValue(
        self, name: QHttpHeaders.WellKnownHeader
    ) -> QtCore.QByteArray: ...
    def nameAt(self, i: int) -> str: ...
    def valueAt(self, i: int) -> QtCore.QByteArray: ...
    @typing.overload
    def values(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> list[QtCore.QByteArray]: ...
    @typing.overload
    def values(
        self, name: QHttpHeaders.WellKnownHeader
    ) -> list[QtCore.QByteArray]: ...
    @typing.overload
    def value(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        defaultValue: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> QtCore.QByteArray: ...
    @typing.overload
    def value(
        self,
        name: QHttpHeaders.WellKnownHeader,
        defaultValue: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> QtCore.QByteArray: ...
    def removeAt(self, i: int) -> None: ...
    @typing.overload
    def removeAll(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def removeAll(self, name: QHttpHeaders.WellKnownHeader) -> None: ...
    def clear(self) -> None: ...
    @typing.overload
    def contains(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def contains(self, name: QHttpHeaders.WellKnownHeader) -> bool: ...
    @typing.overload
    def replace(
        self,
        i: int,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        newValue: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    @typing.overload
    def replace(
        self,
        i: int,
        name: QHttpHeaders.WellKnownHeader,
        newValue: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    @typing.overload
    def insert(
        self,
        i: int,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        value: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def insert(
        self,
        i: int,
        name: QHttpHeaders.WellKnownHeader,
        value: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def append(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        value: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def append(
        self,
        name: QHttpHeaders.WellKnownHeader,
        value: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    def swap(self, other: QHttpHeaders) -> None: ...

class QHttpPart(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QHttpPart) -> None: ...
    def swap(self, other: QHttpPart) -> None: ...
    def setBodyDevice(self, device: QtCore.QIODevice | None) -> None: ...
    def setBody(
        self, body: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def setRawHeader(
        self,
        headerName: QtCore.QByteArray | bytes | bytearray | memoryview,
        headerValue: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def setHeader(
        self, header: QNetworkRequest.KnownHeaders, value: typing.Any
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QHttpMultiPart(QtCore.QObject):
    class ContentType(enum.Enum):
        MixedType = ...
        RelatedType = ...
        FormDataType = ...
        AlternativeType = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        contentType: QHttpMultiPart.ContentType,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    def setBoundary(
        self, boundary: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def boundary(self) -> QtCore.QByteArray: ...
    def setContentType(
        self, contentType: QHttpMultiPart.ContentType
    ) -> None: ...
    def append(self, httpPart: QHttpPart) -> None: ...

class QLocalServer(QtCore.QObject):
    class SocketOption(enum.Flag):
        UserAccessOption = ...
        GroupAccessOption = ...
        OtherAccessOption = ...
        WorldAccessOption = ...
        AbstractNamespaceOption = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def listenBacklogSize(self) -> int: ...
    def setListenBacklogSize(self, size: int) -> None: ...
    def socketDescriptor(self) -> PyQt6.sip.voidptr: ...
    def socketOptions(self) -> QLocalServer.SocketOption: ...
    def setSocketOptions(self, options: QLocalServer.SocketOption) -> None: ...
    def addPendingConnection(self, socket: QLocalSocket | None) -> None: ...
    def incomingConnection(
        self, socketDescriptor: PyQt6.sip.voidptr
    ) -> None: ...
    newConnection: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def removeServer(name: str | None) -> bool: ...
    def waitForNewConnection(
        self, msecs: int = ...
    ) -> tuple[bool, bool | None]: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def serverError(self) -> QAbstractSocket.SocketError: ...
    def fullServerName(self) -> str: ...
    def serverName(self) -> str: ...
    def nextPendingConnection(self) -> QLocalSocket | None: ...
    def maxPendingConnections(self) -> int: ...
    @typing.overload
    def listen(self, name: str | None) -> bool: ...
    @typing.overload
    def listen(self, socketDescriptor: PyQt6.sip.voidptr) -> bool: ...
    def isListening(self) -> bool: ...
    def hasPendingConnections(self) -> bool: ...
    def errorString(self) -> str: ...
    def close(self) -> None: ...

class QLocalSocket(QtCore.QIODevice):
    class SocketOption(enum.Flag):
        NoOptions = ...
        AbstractNamespaceOption = ...

    class LocalSocketState(enum.Enum):
        UnconnectedState = ...
        ConnectingState = ...
        ConnectedState = ...
        ClosingState = ...

    class LocalSocketError(enum.Enum):
        ConnectionRefusedError = ...
        PeerClosedError = ...
        ServerNotFoundError = ...
        SocketAccessError = ...
        SocketResourceError = ...
        SocketTimeoutError = ...
        DatagramTooLargeError = ...
        ConnectionError = ...
        UnsupportedSocketOperationError = ...
        OperationError = ...
        UnknownSocketError = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def readLineData(self, maxlen: int) -> bytes: ...
    def socketOptions(self) -> QLocalSocket.SocketOption: ...
    def setSocketOptions(self, option: QLocalSocket.SocketOption) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readData(self, maxlen: int) -> bytes: ...
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    disconnected: typing.ClassVar[QtCore.pyqtSignal]
    connected: typing.ClassVar[QtCore.pyqtSignal]
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def state(self) -> QLocalSocket.LocalSocketState: ...
    def socketDescriptor(self) -> PyQt6.sip.voidptr: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: PyQt6.sip.voidptr,
        state: QLocalSocket.LocalSocketState = ...,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def readBufferSize(self) -> int: ...
    def isValid(self) -> bool: ...
    def flush(self) -> bool: ...
    def error(self) -> QLocalSocket.LocalSocketError: ...
    def close(self) -> None: ...
    def canReadLine(self) -> bool: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def isSequential(self) -> bool: ...
    def abort(self) -> None: ...
    def fullServerName(self) -> str: ...
    def setServerName(self, name: str | None) -> None: ...
    def serverName(self) -> str: ...
    def open(self, mode: QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def disconnectFromServer(self) -> None: ...
    @typing.overload
    def connectToServer(
        self, name: str | None, mode: QtCore.QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    @typing.overload
    def connectToServer(
        self, mode: QtCore.QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...

class QNetworkAccessManager(QtCore.QObject):
    class Operation(enum.Enum):
        HeadOperation = ...
        GetOperation = ...
        PutOperation = ...
        PostOperation = ...
        DeleteOperation = ...
        CustomOperation = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def transferTimeout(self) -> int: ...
    def setAutoDeleteReplies(self, autoDelete: bool) -> None: ...
    def autoDeleteReplies(self) -> bool: ...
    def isStrictTransportSecurityStoreEnabled(self) -> bool: ...
    def enableStrictTransportSecurityStore(
        self, enabled: bool, storeDir: str | None = ...
    ) -> None: ...
    def redirectPolicy(self) -> QNetworkRequest.RedirectPolicy: ...
    def setRedirectPolicy(
        self, policy: QNetworkRequest.RedirectPolicy
    ) -> None: ...
    def strictTransportSecurityHosts(self) -> list[QHstsPolicy]: ...
    def addStrictTransportSecurityHosts(
        self, knownHosts: collections.abc.Iterable[QHstsPolicy]
    ) -> None: ...
    def isStrictTransportSecurityEnabled(self) -> bool: ...
    def setStrictTransportSecurityEnabled(self, enabled: bool) -> None: ...
    def clearConnectionCache(self) -> None: ...
    def supportedSchemesImplementation(self) -> list[str]: ...
    def connectToHost(self, hostName: str | None, port: int = ...) -> None: ...
    @typing.overload
    def connectToHostEncrypted(
        self,
        hostName: str | None,
        port: int = ...,
        sslConfiguration: QSslConfiguration = ...,
    ) -> None: ...
    @typing.overload
    def connectToHostEncrypted(
        self,
        hostName: str | None,
        port: int,
        sslConfiguration: QSslConfiguration,
        peerName: str | None,
    ) -> None: ...
    def supportedSchemes(self) -> list[str]: ...
    def clearAccessCache(self) -> None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        verb: QtCore.QByteArray | bytes | bytearray | memoryview,
        data: QtCore.QIODevice | None = ...,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        verb: QtCore.QByteArray | bytes | bytearray | memoryview,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        verb: QtCore.QByteArray | bytes | bytearray | memoryview,
        multiPart: QHttpMultiPart | None,
    ) -> QNetworkReply | None: ...
    def deleteResource(
        self, request: QNetworkRequest
    ) -> QNetworkReply | None: ...
    def setCache(self, cache: QAbstractNetworkCache | None) -> None: ...
    def cache(self) -> QAbstractNetworkCache | None: ...
    def setProxyFactory(
        self, factory: QNetworkProxyFactory | None
    ) -> None: ...
    def proxyFactory(self) -> QNetworkProxyFactory | None: ...
    def createRequest(
        self,
        op: QNetworkAccessManager.Operation,
        request: QNetworkRequest,
        device: QtCore.QIODevice | None = ...,
    ) -> QNetworkReply: ...
    preSharedKeyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    sslErrors: typing.ClassVar[QtCore.pyqtSignal]
    encrypted: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    authenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    proxyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def put(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self, request: QNetworkRequest, multiPart: QHttpMultiPart | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, multiPart: QHttpMultiPart | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def get(self, request: QNetworkRequest) -> QNetworkReply | None: ...
    @typing.overload
    def get(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def get(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    def head(self, request: QNetworkRequest) -> QNetworkReply | None: ...
    def setCookieJar(self, cookieJar: QNetworkCookieJar | None) -> None: ...
    def cookieJar(self) -> QNetworkCookieJar | None: ...
    def setProxy(self, proxy: QNetworkProxy) -> None: ...
    def proxy(self) -> QNetworkProxy: ...

class QNetworkCookie(PyQt6.sip.simplewrapper):
    class SameSite(enum.Enum):
        Default = ...
        None_ = ...
        Lax = ...
        Strict = ...

    class RawForm(enum.Enum):
        NameAndValueOnly = ...
        Full = ...

    @typing.overload
    def __init__(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
        value: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkCookie) -> None: ...
    def setSameSitePolicy(self, sameSite: QNetworkCookie.SameSite) -> None: ...
    def sameSitePolicy(self) -> QNetworkCookie.SameSite: ...
    def normalize(self, url: QtCore.QUrl) -> None: ...
    def hasSameIdentifier(self, other: QNetworkCookie) -> bool: ...
    def swap(self, other: QNetworkCookie) -> None: ...
    def setHttpOnly(self, enable: bool) -> None: ...
    def isHttpOnly(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def parseCookies(
        cookieString: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> list[QNetworkCookie]: ...
    def toRawForm(
        self, form: QNetworkCookie.RawForm = ...
    ) -> QtCore.QByteArray: ...
    def setValue(
        self, value: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def value(self) -> QtCore.QByteArray: ...
    def setName(
        self, cookieName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def name(self) -> QtCore.QByteArray: ...
    def setPath(self, path: str | None) -> None: ...
    def path(self) -> str: ...
    def setDomain(self, domain: str | None) -> None: ...
    def domain(self) -> str: ...
    def setExpirationDate(
        self, date: QtCore.QDateTime | datetime.datetime
    ) -> None: ...
    def expirationDate(self) -> QtCore.QDateTime: ...
    def isSessionCookie(self) -> bool: ...
    def setSecure(self, enable: bool) -> None: ...
    def isSecure(self) -> bool: ...

class QNetworkCookieJar(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def validateCookie(
        self, cookie: QNetworkCookie, url: QtCore.QUrl
    ) -> bool: ...
    def allCookies(self) -> list[QNetworkCookie]: ...
    def setAllCookies(
        self, cookieList: collections.abc.Iterable[QNetworkCookie]
    ) -> None: ...
    def deleteCookie(self, cookie: QNetworkCookie) -> bool: ...
    def updateCookie(self, cookie: QNetworkCookie) -> bool: ...
    def insertCookie(self, cookie: QNetworkCookie) -> bool: ...
    def setCookiesFromUrl(
        self,
        cookieList: collections.abc.Iterable[QNetworkCookie],
        url: QtCore.QUrl,
    ) -> bool: ...
    def cookiesForUrl(self, url: QtCore.QUrl) -> list[QNetworkCookie]: ...

class QNetworkDatagram(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        destinationAddress: QHostAddress | QHostAddress.SpecialAddress = ...,
        port: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkDatagram) -> None: ...
    def makeReply(
        self, payload: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> QNetworkDatagram: ...
    def setData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def data(self) -> QtCore.QByteArray: ...
    def setHopLimit(self, count: int) -> None: ...
    def hopLimit(self) -> int: ...
    def setDestination(
        self, address: QHostAddress | QHostAddress.SpecialAddress, port: int
    ) -> None: ...
    def setSender(
        self,
        address: QHostAddress | QHostAddress.SpecialAddress,
        port: int = ...,
    ) -> None: ...
    def destinationPort(self) -> int: ...
    def senderPort(self) -> int: ...
    def destinationAddress(self) -> QHostAddress: ...
    def senderAddress(self) -> QHostAddress: ...
    def setInterfaceIndex(self, index: int) -> None: ...
    def interfaceIndex(self) -> int: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def clear(self) -> None: ...
    def swap(self, other: QNetworkDatagram) -> None: ...

class QNetworkDiskCache(QAbstractNetworkCache):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def expire(self) -> int: ...
    def clear(self) -> None: ...
    def fileMetaData(self, fileName: str | None) -> QNetworkCacheMetaData: ...
    def insert(self, device: QtCore.QIODevice | None) -> None: ...
    def prepare(
        self, metaData: QNetworkCacheMetaData
    ) -> QtCore.QIODevice | None: ...
    def remove(self, url: QtCore.QUrl) -> bool: ...
    def data(self, url: QtCore.QUrl) -> QtCore.QIODevice | None: ...
    def updateMetaData(self, metaData: QNetworkCacheMetaData) -> None: ...
    def metaData(self, url: QtCore.QUrl) -> QNetworkCacheMetaData: ...
    def cacheSize(self) -> int: ...
    def setMaximumCacheSize(self, size: int) -> None: ...
    def maximumCacheSize(self) -> int: ...
    def setCacheDirectory(self, cacheDir: str | None) -> None: ...
    def cacheDirectory(self) -> str: ...

class QNetworkInformation(QtCore.QObject):
    class TransportMedium(enum.Enum):
        Unknown = ...
        Ethernet = ...
        Cellular = ...
        WiFi = ...
        Bluetooth = ...

    class Feature(enum.Enum):
        Reachability = ...
        CaptivePortal = ...
        TransportMedium = ...
        Metered = ...

    class Reachability(enum.Enum):
        Unknown = ...
        Disconnected = ...
        Local = ...
        Site = ...
        Online = ...

    @staticmethod
    def loadBackendByFeatures(
        features: QNetworkInformation.Feature,
    ) -> bool: ...
    @staticmethod
    def loadBackendByName(backend: str) -> bool: ...
    isMeteredChanged: typing.ClassVar[QtCore.pyqtSignal]
    transportMediumChanged: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def loadDefaultBackend() -> bool: ...
    def supportedFeatures(self) -> QNetworkInformation.Feature: ...
    def isMetered(self) -> bool: ...
    def transportMedium(self) -> QNetworkInformation.TransportMedium: ...
    isBehindCaptivePortalChanged: typing.ClassVar[QtCore.pyqtSignal]
    def isBehindCaptivePortal(self) -> bool: ...
    reachabilityChanged: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def instance() -> QNetworkInformation | None: ...
    @staticmethod
    def availableBackends() -> list[str]: ...
    @typing.overload
    @staticmethod
    def load(backend: str) -> bool: ...
    @typing.overload
    @staticmethod
    def load(features: QNetworkInformation.Feature) -> bool: ...
    def supports(self, features: QNetworkInformation.Feature) -> bool: ...
    def backendName(self) -> str: ...
    def reachability(self) -> QNetworkInformation.Reachability: ...

class QNetworkAddressEntry(PyQt6.sip.simplewrapper):
    class DnsEligibilityStatus(enum.Enum):
        DnsEligibilityUnknown = ...
        DnsIneligible = ...
        DnsEligible = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkAddressEntry) -> None: ...
    def isTemporary(self) -> bool: ...
    def isPermanent(self) -> bool: ...
    def clearAddressLifetime(self) -> None: ...
    def setAddressLifetime(
        self, preferred: QtCore.QDeadlineTimer, validity: QtCore.QDeadlineTimer
    ) -> None: ...
    def validityLifetime(self) -> QtCore.QDeadlineTimer: ...
    def preferredLifetime(self) -> QtCore.QDeadlineTimer: ...
    def isLifetimeKnown(self) -> bool: ...
    def setDnsEligibility(
        self, status: QNetworkAddressEntry.DnsEligibilityStatus
    ) -> None: ...
    def dnsEligibility(self) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
    def swap(self, other: QNetworkAddressEntry) -> None: ...
    def setPrefixLength(self, length: int) -> None: ...
    def prefixLength(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setBroadcast(
        self, newBroadcast: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def broadcast(self) -> QHostAddress: ...
    def setNetmask(
        self, newNetmask: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def netmask(self) -> QHostAddress: ...
    def setIp(
        self, newIp: QHostAddress | QHostAddress.SpecialAddress
    ) -> None: ...
    def ip(self) -> QHostAddress: ...

class QNetworkInterface(PyQt6.sip.simplewrapper):
    class InterfaceType(enum.Enum):
        Unknown = ...
        Loopback = ...
        Virtual = ...
        Ethernet = ...
        Slip = ...
        CanBus = ...
        Ppp = ...
        Fddi = ...
        Wifi = ...
        Ieee80211 = ...
        Phonet = ...
        Ieee802154 = ...
        SixLoWPAN = ...
        Ieee80216 = ...
        Ieee1394 = ...

    class InterfaceFlag(enum.Flag):
        IsUp = ...
        IsRunning = ...
        CanBroadcast = ...
        IsLoopBack = ...
        IsPointToPoint = ...
        CanMulticast = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkInterface) -> None: ...
    def maximumTransmissionUnit(self) -> int: ...
    def type(self) -> QNetworkInterface.InterfaceType: ...
    @staticmethod
    def interfaceNameFromIndex(index: int) -> str: ...
    @staticmethod
    def interfaceIndexFromName(name: str | None) -> int: ...
    def swap(self, other: QNetworkInterface) -> None: ...
    def humanReadableName(self) -> str: ...
    def index(self) -> int: ...
    @staticmethod
    def allAddresses() -> list[QHostAddress]: ...
    @staticmethod
    def allInterfaces() -> list[QNetworkInterface]: ...
    @staticmethod
    def interfaceFromIndex(index: int) -> QNetworkInterface: ...
    @staticmethod
    def interfaceFromName(name: str | None) -> QNetworkInterface: ...
    def addressEntries(self) -> list[QNetworkAddressEntry]: ...
    def hardwareAddress(self) -> str: ...
    def flags(self) -> QNetworkInterface.InterfaceFlag: ...
    def name(self) -> str: ...
    def isValid(self) -> bool: ...

class QNetworkProxy(PyQt6.sip.simplewrapper):
    class Capability(enum.Flag):
        TunnelingCapability = ...
        ListeningCapability = ...
        UdpTunnelingCapability = ...
        CachingCapability = ...
        HostNameLookupCapability = ...
        SctpTunnelingCapability = ...
        SctpListeningCapability = ...

    class ProxyType(enum.Enum):
        DefaultProxy = ...
        Socks5Proxy = ...
        NoProxy = ...
        HttpProxy = ...
        HttpCachingProxy = ...
        FtpCachingProxy = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QNetworkProxy.ProxyType,
        hostName: str | None = ...,
        port: int = ...,
        user: str | None = ...,
        password: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkProxy) -> None: ...
    def setHeaders(self, newHeaders: QHttpHeaders) -> None: ...
    def headers(self) -> QHttpHeaders: ...
    def setRawHeader(
        self,
        headerName: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def rawHeader(
        self, headerName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> list[QtCore.QByteArray]: ...
    def hasRawHeader(
        self, headerName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def setHeader(
        self, header: QNetworkRequest.KnownHeaders, value: typing.Any
    ) -> None: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    def swap(self, other: QNetworkProxy) -> None: ...
    def capabilities(self) -> QNetworkProxy.Capability: ...
    def setCapabilities(self, capab: QNetworkProxy.Capability) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isTransparentProxy(self) -> bool: ...
    def isCachingProxy(self) -> bool: ...
    @staticmethod
    def applicationProxy() -> QNetworkProxy: ...
    @staticmethod
    def setApplicationProxy(proxy: QNetworkProxy) -> None: ...
    def port(self) -> int: ...
    def setPort(self, port: int) -> None: ...
    def hostName(self) -> str: ...
    def setHostName(self, hostName: str | None) -> None: ...
    def password(self) -> str: ...
    def setPassword(self, password: str | None) -> None: ...
    def user(self) -> str: ...
    def setUser(self, userName: str | None) -> None: ...
    def type(self) -> QNetworkProxy.ProxyType: ...
    def setType(self, type: QNetworkProxy.ProxyType) -> None: ...

class QNetworkProxyQuery(PyQt6.sip.simplewrapper):
    class QueryType(enum.Enum):
        TcpSocket = ...
        UdpSocket = ...
        TcpServer = ...
        UrlRequest = ...
        SctpSocket = ...
        SctpServer = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, requestUrl: QtCore.QUrl, type: QNetworkProxyQuery.QueryType = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        hostname: str | None,
        port: int,
        protocolTag: str | None = ...,
        type: QNetworkProxyQuery.QueryType = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        bindPort: int,
        protocolTag: str | None = ...,
        type: QNetworkProxyQuery.QueryType = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkProxyQuery) -> None: ...
    def swap(self, other: QNetworkProxyQuery) -> None: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def setProtocolTag(self, protocolTag: str | None) -> None: ...
    def protocolTag(self) -> str: ...
    def setLocalPort(self, port: int) -> None: ...
    def localPort(self) -> int: ...
    def setPeerHostName(self, hostname: str | None) -> None: ...
    def peerHostName(self) -> str: ...
    def setPeerPort(self, port: int) -> None: ...
    def peerPort(self) -> int: ...
    def setQueryType(self, type: QNetworkProxyQuery.QueryType) -> None: ...
    def queryType(self) -> QNetworkProxyQuery.QueryType: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QNetworkProxyFactory(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QNetworkProxyFactory) -> None: ...
    @staticmethod
    def usesSystemConfiguration() -> bool: ...
    @staticmethod
    def setUseSystemConfiguration(enable: bool) -> None: ...
    @staticmethod
    def systemProxyForQuery(
        query: QNetworkProxyQuery = ...,
    ) -> list[QNetworkProxy]: ...
    @staticmethod
    def proxyForQuery(query: QNetworkProxyQuery) -> list[QNetworkProxy]: ...
    @staticmethod
    def setApplicationProxyFactory(
        factory: QNetworkProxyFactory | None,
    ) -> None: ...
    def queryProxy(
        self, query: QNetworkProxyQuery = ...
    ) -> list[QNetworkProxy]: ...

class QNetworkReply(QtCore.QIODevice):
    class NetworkError(enum.Enum):
        NoError = ...
        ConnectionRefusedError = ...
        RemoteHostClosedError = ...
        HostNotFoundError = ...
        TimeoutError = ...
        OperationCanceledError = ...
        SslHandshakeFailedError = ...
        UnknownNetworkError = ...
        ProxyConnectionRefusedError = ...
        ProxyConnectionClosedError = ...
        ProxyNotFoundError = ...
        ProxyTimeoutError = ...
        ProxyAuthenticationRequiredError = ...
        UnknownProxyError = ...
        ContentAccessDenied = ...
        ContentOperationNotPermittedError = ...
        ContentNotFoundError = ...
        AuthenticationRequiredError = ...
        UnknownContentError = ...
        ProtocolUnknownError = ...
        ProtocolInvalidOperationError = ...
        ProtocolFailure = ...
        ContentReSendError = ...
        TemporaryNetworkFailureError = ...
        NetworkSessionFailedError = ...
        BackgroundRequestNotAllowedError = ...
        ContentConflictError = ...
        ContentGoneError = ...
        InternalServerError = ...
        OperationNotImplementedError = ...
        ServiceUnavailableError = ...
        UnknownServerError = ...
        TooManyRedirectsError = ...
        InsecureRedirectError = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def setWellKnownHeader(
        self,
        name: QHttpHeaders.WellKnownHeader,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def setHeaders(self, newHeaders: QHttpHeaders) -> None: ...
    def headers(self) -> QHttpHeaders: ...
    requestSent: typing.ClassVar[QtCore.pyqtSignal]
    socketStartedConnecting: typing.ClassVar[QtCore.pyqtSignal]
    def ignoreSslErrorsImplementation(
        self, a0: collections.abc.Iterable[QSslError]
    ) -> None: ...
    def setSslConfigurationImplementation(
        self, a0: QSslConfiguration
    ) -> None: ...
    def sslConfigurationImplementation(
        self, a0: QSslConfiguration
    ) -> None: ...
    def rawHeaderPairs(
        self,
    ) -> list[tuple[QtCore.QByteArray, QtCore.QByteArray]]: ...
    def isRunning(self) -> bool: ...
    def isFinished(self) -> bool: ...
    def setFinished(self, finished: bool) -> None: ...
    def setAttribute(
        self, code: QNetworkRequest.Attribute, value: typing.Any
    ) -> None: ...
    def setRawHeader(
        self,
        headerName: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def setHeader(
        self, header: QNetworkRequest.KnownHeaders, value: typing.Any
    ) -> None: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def setError(
        self, errorCode: QNetworkReply.NetworkError, errorString: str | None
    ) -> None: ...
    def setRequest(self, request: QNetworkRequest) -> None: ...
    def setOperation(
        self, operation: QNetworkAccessManager.Operation
    ) -> None: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    redirectAllowed: typing.ClassVar[QtCore.pyqtSignal]
    redirected: typing.ClassVar[QtCore.pyqtSignal]
    preSharedKeyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    downloadProgress: typing.ClassVar[QtCore.pyqtSignal]
    uploadProgress: typing.ClassVar[QtCore.pyqtSignal]
    sslErrors: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    encrypted: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    metaDataChanged: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def ignoreSslErrors(self) -> None: ...
    @typing.overload
    def ignoreSslErrors(
        self, errors: collections.abc.Iterable[QSslError]
    ) -> None: ...
    def setSslConfiguration(
        self, configuration: QSslConfiguration
    ) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def attribute(self, code: QNetworkRequest.Attribute) -> typing.Any: ...
    def rawHeader(
        self,
        headerName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> list[QtCore.QByteArray]: ...
    def hasRawHeader(
        self,
        headerName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    def url(self) -> QtCore.QUrl: ...
    def error(self) -> QNetworkReply.NetworkError: ...
    def request(self) -> QNetworkRequest: ...
    def operation(self) -> QNetworkAccessManager.Operation: ...
    def manager(self) -> QNetworkAccessManager | None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def readBufferSize(self) -> int: ...
    def isSequential(self) -> bool: ...
    def close(self) -> None: ...
    def abort(self) -> None: ...

class QNetworkRequest(PyQt6.sip.simplewrapper):
    class TransferTimeoutConstant(enum.Enum):
        DefaultTransferTimeoutConstant = ...

    class RedirectPolicy(enum.Enum):
        ManualRedirectPolicy = ...
        NoLessSafeRedirectPolicy = ...
        SameOriginRedirectPolicy = ...
        UserVerifiedRedirectPolicy = ...

    class Priority(enum.Enum):
        HighPriority = ...
        NormalPriority = ...
        LowPriority = ...

    class LoadControl(enum.Enum):
        Automatic = ...
        Manual = ...

    class CacheLoadControl(enum.Enum):
        AlwaysNetwork = ...
        PreferNetwork = ...
        PreferCache = ...
        AlwaysCache = ...

    class Attribute(enum.Enum):
        HttpStatusCodeAttribute = ...
        HttpReasonPhraseAttribute = ...
        RedirectionTargetAttribute = ...
        ConnectionEncryptedAttribute = ...
        CacheLoadControlAttribute = ...
        CacheSaveControlAttribute = ...
        SourceIsFromCacheAttribute = ...
        DoNotBufferUploadDataAttribute = ...
        HttpPipeliningAllowedAttribute = ...
        HttpPipeliningWasUsedAttribute = ...
        CustomVerbAttribute = ...
        CookieLoadControlAttribute = ...
        AuthenticationReuseAttribute = ...
        CookieSaveControlAttribute = ...
        BackgroundRequestAttribute = ...
        EmitAllUploadProgressSignalsAttribute = ...
        Http2AllowedAttribute = ...
        Http2WasUsedAttribute = ...
        OriginalContentLengthAttribute = ...
        RedirectPolicyAttribute = ...
        Http2DirectAttribute = ...
        AutoDeleteReplyOnFinishAttribute = ...
        ConnectionCacheExpiryTimeoutSecondsAttribute = ...
        Http2CleartextAllowedAttribute = ...
        UseCredentialsAttribute = ...
        FullLocalServerNameAttribute = ...
        User = ...
        UserMax = ...

    class KnownHeaders(enum.Enum):
        ContentTypeHeader = ...
        ContentLengthHeader = ...
        LocationHeader = ...
        LastModifiedHeader = ...
        CookieHeader = ...
        SetCookieHeader = ...
        ContentDispositionHeader = ...
        UserAgentHeader = ...
        ServerHeader = ...
        IfModifiedSinceHeader = ...
        ETagHeader = ...
        IfMatchHeader = ...
        IfNoneMatchHeader = ...

    @typing.overload
    def __init__(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkRequest) -> None: ...
    def setHeaders(self, newHeaders: QHttpHeaders) -> None: ...
    def headers(self) -> QHttpHeaders: ...
    def setDecompressedSafetyCheckThreshold(self, threshold: int) -> None: ...
    def decompressedSafetyCheckThreshold(self) -> int: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def transferTimeout(self) -> int: ...
    def setHttp2Configuration(
        self, configuration: QHttp2Configuration
    ) -> None: ...
    def setHttp1Configuration(
        self, configuration: QHttp1Configuration
    ) -> None: ...
    def http2Configuration(self) -> QHttp2Configuration: ...
    def http1Configuration(self) -> QHttp1Configuration: ...
    def setPeerVerifyName(self, peerName: str | None) -> None: ...
    def peerVerifyName(self) -> str: ...
    def setMaximumRedirectsAllowed(
        self, maximumRedirectsAllowed: int
    ) -> None: ...
    def maximumRedirectsAllowed(self) -> int: ...
    def swap(self, other: QNetworkRequest) -> None: ...
    def setPriority(self, priority: QNetworkRequest.Priority) -> None: ...
    def priority(self) -> QNetworkRequest.Priority: ...
    def originatingObject(self) -> QtCore.QObject | None: ...
    def setOriginatingObject(self, object: QtCore.QObject | None) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setSslConfiguration(
        self, configuration: QSslConfiguration
    ) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def setAttribute(
        self, code: QNetworkRequest.Attribute, value: typing.Any
    ) -> None: ...
    def attribute(
        self, code: QNetworkRequest.Attribute, defaultValue: typing.Any = ...
    ) -> typing.Any: ...
    def setRawHeader(
        self,
        headerName: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def rawHeader(
        self,
        headerName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> QtCore.QByteArray: ...
    def rawHeaderList(self) -> list[QtCore.QByteArray]: ...
    def hasRawHeader(
        self,
        headerName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    def setHeader(
        self, header: QNetworkRequest.KnownHeaders, value: typing.Any
    ) -> None: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...

class QNetworkRequestFactory(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, baseUrl: QtCore.QUrl) -> None: ...
    @typing.overload
    def __init__(self, other: QNetworkRequestFactory) -> None: ...
    def clearAttributes(self) -> None: ...
    def clearAttribute(self, attribute: QNetworkRequest.Attribute) -> None: ...
    def setAttribute(
        self, attribute: QNetworkRequest.Attribute, value: typing.Any
    ) -> None: ...
    @typing.overload
    def attribute(
        self, attribute: QNetworkRequest.Attribute
    ) -> typing.Any: ...
    @typing.overload
    def attribute(
        self, attribute: QNetworkRequest.Attribute, defaultValue: typing.Any
    ) -> typing.Any: ...
    def priority(self) -> QNetworkRequest.Priority: ...
    def setPriority(self, priority: QNetworkRequest.Priority) -> None: ...
    def clearQueryParameters(self) -> None: ...
    def setQueryParameters(self, query: QtCore.QUrlQuery) -> None: ...
    def queryParameters(self) -> QtCore.QUrlQuery: ...
    def transferTimeout(self) -> int: ...
    def setTransferTimeout(self, timeout: int) -> None: ...
    def clearPassword(self) -> None: ...
    def setPassword(self, password: str | None) -> None: ...
    def password(self) -> str: ...
    def clearUserName(self) -> None: ...
    def setUserName(self, userName: str | None) -> None: ...
    def userName(self) -> str: ...
    def clearBearerToken(self) -> None: ...
    def setBearerToken(
        self, token: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def bearerToken(self) -> QtCore.QByteArray: ...
    def clearCommonHeaders(self) -> None: ...
    def commonHeaders(self) -> QHttpHeaders: ...
    def setCommonHeaders(self, headers: QHttpHeaders) -> None: ...
    @typing.overload
    def createRequest(self) -> QNetworkRequest: ...
    @typing.overload
    def createRequest(self, query: QtCore.QUrlQuery) -> QNetworkRequest: ...
    @typing.overload
    def createRequest(self, path: str | None) -> QNetworkRequest: ...
    @typing.overload
    def createRequest(
        self, path: str | None, query: QtCore.QUrlQuery
    ) -> QNetworkRequest: ...
    def setSslConfiguration(
        self, configuration: QSslConfiguration
    ) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def setBaseUrl(self, url: QtCore.QUrl) -> None: ...
    def baseUrl(self) -> QtCore.QUrl: ...
    def swap(self, other: QNetworkRequestFactory) -> None: ...

class QOcspResponse(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QOcspResponse) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def swap(self, other: QOcspResponse) -> None: ...
    def subject(self) -> QSslCertificate: ...
    def responder(self) -> QSslCertificate: ...
    def revocationReason(self) -> QOcspRevocationReason: ...
    def certificateStatus(self) -> QOcspCertificateStatus: ...

class QPasswordDigestor(PyQt6.sip.simplewrapper):
    def deriveKeyPbkdf2(
        self,
        algorithm: QtCore.QCryptographicHash.Algorithm,
        password: QtCore.QByteArray | bytes | bytearray | memoryview,
        salt: QtCore.QByteArray | bytes | bytearray | memoryview,
        iterations: int,
        dkLen: int,
    ) -> QtCore.QByteArray: ...
    def deriveKeyPbkdf1(
        self,
        algorithm: QtCore.QCryptographicHash.Algorithm,
        password: QtCore.QByteArray | bytes | bytearray | memoryview,
        salt: QtCore.QByteArray | bytes | bytearray | memoryview,
        iterations: int,
        dkLen: int,
    ) -> QtCore.QByteArray: ...

class QRestAccessManager(QtCore.QObject):
    def __init__(
        self,
        manager: QNetworkAccessManager | None,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        method: QtCore.QByteArray | bytes | bytearray | memoryview,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        method: QtCore.QByteArray | bytes | bytearray | memoryview,
        data: QtCore.QIODevice | None,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def sendCustomRequest(
        self,
        request: QNetworkRequest,
        method: QtCore.QByteArray | bytes | bytearray | memoryview,
        data: QHttpMultiPart | None,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def patch(
        self, request: QNetworkRequest, data: QtCore.QJsonDocument
    ) -> QNetworkReply | None: ...
    @typing.overload
    def patch(
        self, request: QNetworkRequest, data: dict[str | None, typing.Any]
    ) -> QNetworkReply | None: ...
    @typing.overload
    def patch(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def patch(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self, request: QNetworkRequest, data: QtCore.QJsonDocument
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self, request: QNetworkRequest, data: dict[str | None, typing.Any]
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self, request: QNetworkRequest, data: QHttpMultiPart | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def put(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, data: QtCore.QJsonDocument
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, data: dict[str | None, typing.Any]
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, data: QHttpMultiPart | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def post(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    @typing.overload
    def get(self, request: QNetworkRequest) -> QNetworkReply | None: ...
    @typing.overload
    def get(
        self,
        request: QNetworkRequest,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QNetworkReply | None: ...
    @typing.overload
    def get(
        self, request: QNetworkRequest, data: QtCore.QJsonDocument
    ) -> QNetworkReply | None: ...
    @typing.overload
    def get(
        self, request: QNetworkRequest, data: QtCore.QIODevice | None
    ) -> QNetworkReply | None: ...
    def head(self, request: QNetworkRequest) -> QNetworkReply | None: ...
    def deleteResource(
        self, request: QNetworkRequest
    ) -> QNetworkReply | None: ...
    def networkAccessManager(self) -> QNetworkAccessManager | None: ...

class QRestReply(PyQt6.sip.simplewrapper):
    def __init__(self, reply: QNetworkReply | None) -> None: ...
    def errorString(self) -> str: ...
    def error(self) -> QNetworkReply.NetworkError: ...
    def hasError(self) -> bool: ...
    def isHttpStatusSuccess(self) -> bool: ...
    def httpStatus(self) -> int: ...
    def isSuccess(self) -> bool: ...
    def readText(self) -> str: ...
    def readBody(self) -> QtCore.QByteArray: ...
    def readJson(
        self, error: QtCore.QJsonParseError | None = ...
    ) -> QtCore.QJsonDocument | None: ...
    def networkReply(self) -> QNetworkReply | None: ...
    def swap(self, other: QRestReply) -> None: ...

class QSsl(PyQt6.sip.simplewrapper):
    class SupportedFeature(enum.Enum):
        CertificateVerification = ...
        ClientSideAlpn = ...
        ServerSideAlpn = ...
        Ocsp = ...
        Psk = ...
        SessionTicket = ...
        Alerts = ...

    class ImplementedClass(enum.Enum):
        Key = ...
        Certificate = ...
        Socket = ...
        DiffieHellman = ...
        EllipticCurve = ...
        Dtls = ...
        DtlsCookie = ...

    class AlertType(enum.Enum):
        CloseNotify = ...
        UnexpectedMessage = ...
        BadRecordMac = ...
        RecordOverflow = ...
        DecompressionFailure = ...
        HandshakeFailure = ...
        NoCertificate = ...
        BadCertificate = ...
        UnsupportedCertificate = ...
        CertificateRevoked = ...
        CertificateExpired = ...
        CertificateUnknown = ...
        IllegalParameter = ...
        UnknownCa = ...
        AccessDenied = ...
        DecodeError = ...
        DecryptError = ...
        ExportRestriction = ...
        ProtocolVersion = ...
        InsufficientSecurity = ...
        InternalError = ...
        InappropriateFallback = ...
        UserCancelled = ...
        NoRenegotiation = ...
        MissingExtension = ...
        UnsupportedExtension = ...
        CertificateUnobtainable = ...
        UnrecognizedName = ...
        BadCertificateStatusResponse = ...
        BadCertificateHashValue = ...
        UnknownPskIdentity = ...
        CertificateRequired = ...
        NoApplicationProtocol = ...
        UnknownAlertMessage = ...

    class AlertLevel(enum.Enum):
        Warning = ...
        Fatal = ...
        Unknown = ...

    class SslOption(enum.Flag):
        SslOptionDisableEmptyFragments = ...
        SslOptionDisableSessionTickets = ...
        SslOptionDisableCompression = ...
        SslOptionDisableServerNameIndication = ...
        SslOptionDisableLegacyRenegotiation = ...
        SslOptionDisableSessionSharing = ...
        SslOptionDisableSessionPersistence = ...
        SslOptionDisableServerCipherPreference = ...

    class SslProtocol(enum.Enum):
        UnknownProtocol = ...
        TlsV1_0 = ...
        TlsV1_0OrLater = ...
        TlsV1_1 = ...
        TlsV1_1OrLater = ...
        TlsV1_2 = ...
        TlsV1_2OrLater = ...
        AnyProtocol = ...
        SecureProtocols = ...
        DtlsV1_0 = ...
        DtlsV1_0OrLater = ...
        DtlsV1_2 = ...
        DtlsV1_2OrLater = ...
        TlsV1_3 = ...
        TlsV1_3OrLater = ...

    class AlternativeNameEntryType(enum.Enum):
        EmailEntry = ...
        DnsEntry = ...
        IpAddressEntry = ...

    class KeyAlgorithm(enum.Enum):
        Opaque = ...
        Rsa = ...
        Dsa = ...
        Ec = ...
        Dh = ...

    class EncodingFormat(enum.Enum):
        Pem = ...
        Der = ...

    class KeyType(enum.Enum):
        PrivateKey = ...
        PublicKey = ...

class QSslCertificate(PyQt6.sip.simplewrapper):
    class PatternSyntax(enum.Enum):
        RegularExpression = ...
        Wildcard = ...
        FixedString = ...

    class SubjectInfo(enum.Enum):
        Organization = ...
        CommonName = ...
        LocalityName = ...
        OrganizationalUnitName = ...
        CountryName = ...
        StateOrProvinceName = ...
        DistinguishedNameQualifier = ...
        SerialNumber = ...
        EmailAddress = ...

    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        format: QSsl.EncodingFormat = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
        format: QSsl.EncodingFormat = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSslCertificate) -> None: ...
    def subjectDisplayName(self) -> str: ...
    def issuerDisplayName(self) -> str: ...
    @staticmethod
    def importPkcs12(
        device: QtCore.QIODevice | None,
        key: QSslKey | None,
        certificate: QSslCertificate | None,
        caCertificates: collections.abc.Iterable[QSslCertificate] | None = ...,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> bool: ...
    def __hash__(self) -> int: ...
    def isSelfSigned(self) -> bool: ...
    @staticmethod
    def verify(
        certificateChain: collections.abc.Iterable[QSslCertificate],
        hostName: str | None = ...,
    ) -> list[QSslError]: ...
    def toText(self) -> str: ...
    def extensions(self) -> list[QSslCertificateExtension]: ...
    def issuerInfoAttributes(self) -> list[QtCore.QByteArray]: ...
    def subjectInfoAttributes(self) -> list[QtCore.QByteArray]: ...
    def isBlacklisted(self) -> bool: ...
    def swap(self, other: QSslCertificate) -> None: ...
    def handle(self) -> PyQt6.sip.voidptr | None: ...
    @staticmethod
    def fromData(
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        format: QSsl.EncodingFormat = ...,
    ) -> list[QSslCertificate]: ...
    @staticmethod
    def fromDevice(
        device: QtCore.QIODevice | None, format: QSsl.EncodingFormat = ...
    ) -> list[QSslCertificate]: ...
    @staticmethod
    def fromPath(
        path: str | None,
        format: QSsl.EncodingFormat = ...,
        syntax: QSslCertificate.PatternSyntax = ...,
    ) -> list[QSslCertificate]: ...
    def toDer(self) -> QtCore.QByteArray: ...
    def toPem(self) -> QtCore.QByteArray: ...
    def publicKey(self) -> QSslKey: ...
    def expiryDate(self) -> QtCore.QDateTime: ...
    def effectiveDate(self) -> QtCore.QDateTime: ...
    def subjectAlternativeNames(
        self,
    ) -> dict[QSsl.AlternativeNameEntryType, list[str]]: ...
    @typing.overload
    def subjectInfo(self, info: QSslCertificate.SubjectInfo) -> list[str]: ...
    @typing.overload
    def subjectInfo(
        self, attribute: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> list[str]: ...
    @typing.overload
    def issuerInfo(self, info: QSslCertificate.SubjectInfo) -> list[str]: ...
    @typing.overload
    def issuerInfo(
        self, attribute: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> list[str]: ...
    def digest(
        self, algorithm: QtCore.QCryptographicHash.Algorithm = ...
    ) -> QtCore.QByteArray: ...
    def serialNumber(self) -> QtCore.QByteArray: ...
    def version(self) -> QtCore.QByteArray: ...
    def clear(self) -> None: ...
    def isNull(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QSslCertificateExtension(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QSslCertificateExtension) -> None: ...
    def isSupported(self) -> bool: ...
    def isCritical(self) -> bool: ...
    def value(self) -> typing.Any: ...
    def name(self) -> str: ...
    def oid(self) -> str: ...
    def swap(self, other: QSslCertificateExtension) -> None: ...

class QSslCipher(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(
        self, name: str | None, protocol: QSsl.SslProtocol
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSslCipher) -> None: ...
    def swap(self, other: QSslCipher) -> None: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def protocolString(self) -> str: ...
    def encryptionMethod(self) -> str: ...
    def authenticationMethod(self) -> str: ...
    def keyExchangeMethod(self) -> str: ...
    def usedBits(self) -> int: ...
    def supportedBits(self) -> int: ...
    def name(self) -> str: ...
    def isNull(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QSslConfiguration(PyQt6.sip.simplewrapper):
    class NextProtocolNegotiationStatus(enum.Enum):
        NextProtocolNegotiationNone = ...
        NextProtocolNegotiationNegotiated = ...
        NextProtocolNegotiationUnsupported = ...

    NextProtocolHttp1_1: bytes = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QSslConfiguration) -> None: ...
    @staticmethod
    def setDefaultDtlsConfiguration(
        configuration: QSslConfiguration,
    ) -> None: ...
    @staticmethod
    def defaultDtlsConfiguration() -> QSslConfiguration: ...
    def setDtlsCookieVerificationEnabled(self, enable: bool) -> None: ...
    def dtlsCookieVerificationEnabled(self) -> bool: ...
    def setMissingCertificateIsFatal(self, cannotRecover: bool) -> None: ...
    def missingCertificateIsFatal(self) -> bool: ...
    def setHandshakeMustInterruptOnError(self, interrupt: bool) -> None: ...
    def handshakeMustInterruptOnError(self) -> bool: ...
    @typing.overload
    def addCaCertificates(
        self,
        path: str | None,
        format: QSsl.EncodingFormat = ...,
        syntax: QSslCertificate.PatternSyntax = ...,
    ) -> bool: ...
    @typing.overload
    def addCaCertificates(
        self, certificates: collections.abc.Iterable[QSslCertificate]
    ) -> None: ...
    def addCaCertificate(self, certificate: QSslCertificate) -> None: ...
    def ocspStaplingEnabled(self) -> bool: ...
    def setOcspStaplingEnabled(self, enable: bool) -> None: ...
    def setBackendConfiguration(
        self,
        backendConfiguration: dict[
            QtCore.QByteArray | bytes | bytearray | memoryview, typing.Any
        ] = ...,
    ) -> None: ...
    def setBackendConfigurationOption(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: typing.Any,
    ) -> None: ...
    def backendConfiguration(self) -> dict[QtCore.QByteArray, typing.Any]: ...
    def setDiffieHellmanParameters(
        self, dhparams: QSslDiffieHellmanParameters
    ) -> None: ...
    def diffieHellmanParameters(self) -> QSslDiffieHellmanParameters: ...
    def setPreSharedKeyIdentityHint(
        self, hint: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def preSharedKeyIdentityHint(self) -> QtCore.QByteArray: ...
    def ephemeralServerKey(self) -> QSslKey: ...
    @staticmethod
    def supportedEllipticCurves() -> list[QSslEllipticCurve]: ...
    def setEllipticCurves(
        self, curves: collections.abc.Iterable[QSslEllipticCurve]
    ) -> None: ...
    def ellipticCurves(self) -> list[QSslEllipticCurve]: ...
    @staticmethod
    def systemCaCertificates() -> list[QSslCertificate]: ...
    @staticmethod
    def supportedCiphers() -> list[QSslCipher]: ...
    def sessionProtocol(self) -> QSsl.SslProtocol: ...
    def nextProtocolNegotiationStatus(
        self,
    ) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
    def nextNegotiatedProtocol(self) -> QtCore.QByteArray: ...
    def allowedNextProtocols(self) -> list[QtCore.QByteArray]: ...
    def setAllowedNextProtocols(
        self,
        protocols: collections.abc.Iterable[
            QtCore.QByteArray | bytes | bytearray | memoryview
        ],
    ) -> None: ...
    def sessionTicketLifeTimeHint(self) -> int: ...
    def setSessionTicket(
        self, sessionTicket: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def sessionTicket(self) -> QtCore.QByteArray: ...
    def setLocalCertificateChain(
        self, localChain: collections.abc.Iterable[QSslCertificate]
    ) -> None: ...
    def localCertificateChain(self) -> list[QSslCertificate]: ...
    def swap(self, other: QSslConfiguration) -> None: ...
    def testSslOption(self, option: QSsl.SslOption) -> bool: ...
    def setSslOption(self, option: QSsl.SslOption, on: bool) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def setDefaultConfiguration(configuration: QSslConfiguration) -> None: ...
    @staticmethod
    def defaultConfiguration() -> QSslConfiguration: ...
    def setCaCertificates(
        self, certificates: collections.abc.Iterable[QSslCertificate]
    ) -> None: ...
    def caCertificates(self) -> list[QSslCertificate]: ...
    @typing.overload
    def setCiphers(self, ciphers: str | None) -> None: ...
    @typing.overload
    def setCiphers(
        self, ciphers: collections.abc.Iterable[QSslCipher]
    ) -> None: ...
    def ciphers(self) -> list[QSslCipher]: ...
    def setPrivateKey(self, key: QSslKey) -> None: ...
    def privateKey(self) -> QSslKey: ...
    def sessionCipher(self) -> QSslCipher: ...
    def peerCertificateChain(self) -> list[QSslCertificate]: ...
    def peerCertificate(self) -> QSslCertificate: ...
    def setLocalCertificate(self, certificate: QSslCertificate) -> None: ...
    def localCertificate(self) -> QSslCertificate: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def peerVerifyDepth(self) -> int: ...
    def setPeerVerifyMode(self, mode: QSslSocket.PeerVerifyMode) -> None: ...
    def peerVerifyMode(self) -> QSslSocket.PeerVerifyMode: ...
    def setProtocol(self, protocol: QSsl.SslProtocol) -> None: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def isNull(self) -> bool: ...

class QSslDiffieHellmanParameters(PyQt6.sip.simplewrapper):
    class Error(enum.Enum):
        NoError = ...
        InvalidInputDataError = ...
        UnsafeParametersError = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QSslDiffieHellmanParameters) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def errorString(self) -> str: ...
    def error(self) -> QSslDiffieHellmanParameters.Error: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    @typing.overload
    @staticmethod
    def fromEncoded(
        encoded: QtCore.QByteArray | bytes | bytearray | memoryview,
        encoding: QSsl.EncodingFormat = ...,
    ) -> QSslDiffieHellmanParameters: ...
    @typing.overload
    @staticmethod
    def fromEncoded(
        device: QtCore.QIODevice | None, encoding: QSsl.EncodingFormat = ...
    ) -> QSslDiffieHellmanParameters: ...
    @staticmethod
    def defaultParameters() -> QSslDiffieHellmanParameters: ...
    def swap(self, other: QSslDiffieHellmanParameters) -> None: ...

class QSslEllipticCurve(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QSslEllipticCurve) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def isTlsNamedCurve(self) -> bool: ...
    def isValid(self) -> bool: ...
    def longName(self) -> str: ...
    def shortName(self) -> str: ...
    @staticmethod
    def fromLongName(name: str | None) -> QSslEllipticCurve: ...
    @staticmethod
    def fromShortName(name: str | None) -> QSslEllipticCurve: ...

class QSslError(PyQt6.sip.simplewrapper):
    class SslError(enum.Enum):
        UnspecifiedError = ...
        NoError = ...
        UnableToGetIssuerCertificate = ...
        UnableToDecryptCertificateSignature = ...
        UnableToDecodeIssuerPublicKey = ...
        CertificateSignatureFailed = ...
        CertificateNotYetValid = ...
        CertificateExpired = ...
        InvalidNotBeforeField = ...
        InvalidNotAfterField = ...
        SelfSignedCertificate = ...
        SelfSignedCertificateInChain = ...
        UnableToGetLocalIssuerCertificate = ...
        UnableToVerifyFirstCertificate = ...
        CertificateRevoked = ...
        InvalidCaCertificate = ...
        PathLengthExceeded = ...
        InvalidPurpose = ...
        CertificateUntrusted = ...
        CertificateRejected = ...
        SubjectIssuerMismatch = ...
        AuthorityIssuerSerialNumberMismatch = ...
        NoPeerCertificate = ...
        HostNameMismatch = ...
        NoSslSupport = ...
        CertificateBlacklisted = ...
        CertificateStatusUnknown = ...
        OcspNoResponseFound = ...
        OcspMalformedRequest = ...
        OcspMalformedResponse = ...
        OcspInternalError = ...
        OcspTryLater = ...
        OcspSigRequred = ...
        OcspUnauthorized = ...
        OcspResponseCannotBeTrusted = ...
        OcspResponseCertIdUnknown = ...
        OcspResponseExpired = ...
        OcspStatusUnknown = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, error: QSslError.SslError) -> None: ...
    @typing.overload
    def __init__(
        self, error: QSslError.SslError, certificate: QSslCertificate
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSslError) -> None: ...
    def __hash__(self) -> int: ...
    def swap(self, other: QSslError) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def certificate(self) -> QSslCertificate: ...
    def errorString(self) -> str: ...
    def error(self) -> QSslError.SslError: ...

class QSslKey(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        encoded: QtCore.QByteArray | bytes | bytearray | memoryview,
        algorithm: QSsl.KeyAlgorithm,
        encoding: QSsl.EncodingFormat = ...,
        type: QSsl.KeyType = ...,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        algorithm: QSsl.KeyAlgorithm,
        encoding: QSsl.EncodingFormat = ...,
        type: QSsl.KeyType = ...,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, handle: PyQt6.sip.voidptr | None, type: QSsl.KeyType = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSslKey) -> None: ...
    def swap(self, other: QSslKey) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def handle(self) -> PyQt6.sip.voidptr | None: ...
    def toDer(
        self,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> QtCore.QByteArray: ...
    def toPem(
        self,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> QtCore.QByteArray: ...
    def algorithm(self) -> QSsl.KeyAlgorithm: ...
    def type(self) -> QSsl.KeyType: ...
    def length(self) -> int: ...
    def clear(self) -> None: ...
    def isNull(self) -> bool: ...

class QSslPreSharedKeyAuthenticator(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, authenticator: QSslPreSharedKeyAuthenticator
    ) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def maximumPreSharedKeyLength(self) -> int: ...
    def preSharedKey(self) -> QtCore.QByteArray: ...
    def setPreSharedKey(
        self, preSharedKey: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def maximumIdentityLength(self) -> int: ...
    def identity(self) -> QtCore.QByteArray: ...
    def setIdentity(
        self, identity: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def identityHint(self) -> QtCore.QByteArray: ...
    def swap(self, authenticator: QSslPreSharedKeyAuthenticator) -> None: ...

class QTcpServer(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    pendingConnectionAvailable: typing.ClassVar[QtCore.pyqtSignal]
    def listenBacklogSize(self) -> int: ...
    def setListenBacklogSize(self, size: int) -> None: ...
    acceptError: typing.ClassVar[QtCore.pyqtSignal]
    newConnection: typing.ClassVar[QtCore.pyqtSignal]
    def addPendingConnection(self, socket: QTcpSocket | None) -> None: ...
    def incomingConnection(self, handle: PyQt6.sip.voidptr) -> None: ...
    def resumeAccepting(self) -> None: ...
    def pauseAccepting(self) -> None: ...
    def proxy(self) -> QNetworkProxy: ...
    def setProxy(self, networkProxy: QNetworkProxy) -> None: ...
    def errorString(self) -> str: ...
    def serverError(self) -> QAbstractSocket.SocketError: ...
    def nextPendingConnection(self) -> QTcpSocket | None: ...
    def hasPendingConnections(self) -> bool: ...
    def waitForNewConnection(
        self, msecs: int = ...
    ) -> tuple[bool, bool | None]: ...
    def setSocketDescriptor(
        self, socketDescriptor: PyQt6.sip.voidptr
    ) -> bool: ...
    def socketDescriptor(self) -> PyQt6.sip.voidptr: ...
    def serverAddress(self) -> QHostAddress: ...
    def serverPort(self) -> int: ...
    def maxPendingConnections(self) -> int: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def isListening(self) -> bool: ...
    def close(self) -> None: ...
    def listen(
        self,
        address: QHostAddress | QHostAddress.SpecialAddress = ...,
        port: int = ...,
    ) -> bool: ...

class QSslServer(QTcpServer):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def incomingConnection(self, socket: PyQt6.sip.voidptr) -> None: ...
    startedEncryptionHandshake: typing.ClassVar[QtCore.pyqtSignal]
    handshakeInterruptedOnError: typing.ClassVar[QtCore.pyqtSignal]
    alertReceived: typing.ClassVar[QtCore.pyqtSignal]
    alertSent: typing.ClassVar[QtCore.pyqtSignal]
    preSharedKeyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    peerVerifyError: typing.ClassVar[QtCore.pyqtSignal]
    sslErrors: typing.ClassVar[QtCore.pyqtSignal]
    def handshakeTimeout(self) -> int: ...
    def setHandshakeTimeout(self, timeout: int) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def setSslConfiguration(
        self, sslConfiguration: QSslConfiguration
    ) -> None: ...

class QTcpSocket(QAbstractSocket):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

class QSslSocket(QTcpSocket):
    class PeerVerifyMode(enum.Enum):
        VerifyNone = ...
        QueryPeer = ...
        VerifyPeer = ...
        AutoVerifyPeer = ...

    class SslMode(enum.Enum):
        UnencryptedMode = ...
        SslClientMode = ...
        SslServerMode = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @staticmethod
    def isFeatureSupported(
        feat: QSsl.SupportedFeature, backendName: str | None = ...
    ) -> bool: ...
    @staticmethod
    def supportedFeatures(
        backendName: str | None = ...,
    ) -> list[QSsl.SupportedFeature]: ...
    @staticmethod
    def isClassImplemented(
        cl: QSsl.ImplementedClass, backendName: str | None = ...
    ) -> bool: ...
    @staticmethod
    def implementedClasses(
        backendName: str | None = ...,
    ) -> list[QSsl.ImplementedClass]: ...
    @staticmethod
    def isProtocolSupported(
        protocol: QSsl.SslProtocol, backendName: str | None = ...
    ) -> bool: ...
    @staticmethod
    def supportedProtocols(
        backendName: str | None = ...,
    ) -> list[QSsl.SslProtocol]: ...
    @staticmethod
    def setActiveBackend(backendName: str | None) -> bool: ...
    @staticmethod
    def activeBackend() -> str: ...
    @staticmethod
    def availableBackends() -> list[str]: ...
    handshakeInterruptedOnError: typing.ClassVar[QtCore.pyqtSignal]
    alertReceived: typing.ClassVar[QtCore.pyqtSignal]
    alertSent: typing.ClassVar[QtCore.pyqtSignal]
    def continueInterruptedHandshake(self) -> None: ...
    def sslHandshakeErrors(self) -> list[QSslError]: ...
    def ocspResponses(self) -> list[QOcspResponse]: ...
    @staticmethod
    def sslLibraryBuildVersionString() -> str: ...
    @staticmethod
    def sslLibraryBuildVersionNumber() -> int: ...
    def sessionProtocol(self) -> QSsl.SslProtocol: ...
    def localCertificateChain(self) -> list[QSslCertificate]: ...
    def setLocalCertificateChain(
        self, localChain: collections.abc.Iterable[QSslCertificate]
    ) -> None: ...
    @staticmethod
    def sslLibraryVersionString() -> str: ...
    @staticmethod
    def sslLibraryVersionNumber() -> int: ...
    def disconnectFromHost(self) -> None: ...
    def connectToHost(
        self,
        hostName: str | None,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    def resume(self) -> None: ...
    def setPeerVerifyName(self, hostName: str | None) -> None: ...
    def peerVerifyName(self) -> str: ...
    def socketOption(
        self, option: QAbstractSocket.SocketOption
    ) -> typing.Any: ...
    def setSocketOption(
        self, option: QAbstractSocket.SocketOption, value: typing.Any
    ) -> None: ...
    newSessionTicketReceived: typing.ClassVar[QtCore.pyqtSignal]
    encryptedBytesWritten: typing.ClassVar[QtCore.pyqtSignal]
    peerVerifyError: typing.ClassVar[QtCore.pyqtSignal]
    def setSslConfiguration(self, config: QSslConfiguration) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def encryptedBytesToWrite(self) -> int: ...
    def encryptedBytesAvailable(self) -> int: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def peerVerifyDepth(self) -> int: ...
    def setPeerVerifyMode(self, mode: QSslSocket.PeerVerifyMode) -> None: ...
    def peerVerifyMode(self) -> QSslSocket.PeerVerifyMode: ...
    def skipData(self, maxSize: int) -> int: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readData(self, maxlen: int) -> bytes: ...
    preSharedKeyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    modeChanged: typing.ClassVar[QtCore.pyqtSignal]
    sslErrors: typing.ClassVar[QtCore.pyqtSignal]
    encrypted: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def ignoreSslErrors(self) -> None: ...
    @typing.overload
    def ignoreSslErrors(
        self, errors: collections.abc.Iterable[QSslError]
    ) -> None: ...
    def startServerEncryption(self) -> None: ...
    def startClientEncryption(self) -> None: ...
    @staticmethod
    def supportsSsl() -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def waitForEncrypted(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def privateKey(self) -> QSslKey: ...
    @typing.overload
    def setPrivateKey(self, key: QSslKey) -> None: ...
    @typing.overload
    def setPrivateKey(
        self,
        fileName: str | None,
        algorithm: QSsl.KeyAlgorithm = ...,
        format: QSsl.EncodingFormat = ...,
        passPhrase: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    def sessionCipher(self) -> QSslCipher: ...
    def peerCertificateChain(self) -> list[QSslCertificate]: ...
    def peerCertificate(self) -> QSslCertificate: ...
    def localCertificate(self) -> QSslCertificate: ...
    @typing.overload
    def setLocalCertificate(self, certificate: QSslCertificate) -> None: ...
    @typing.overload
    def setLocalCertificate(
        self, path: str | None, format: QSsl.EncodingFormat = ...
    ) -> None: ...
    def atEnd(self) -> bool: ...
    def close(self) -> None: ...
    def canReadLine(self) -> bool: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def setProtocol(self, protocol: QSsl.SslProtocol) -> None: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def isEncrypted(self) -> bool: ...
    def mode(self) -> QSslSocket.SslMode: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: PyQt6.sip.voidptr,
        state: QAbstractSocket.SocketState = ...,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    @typing.overload
    def connectToHostEncrypted(
        self,
        hostName: str | None,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...
    @typing.overload
    def connectToHostEncrypted(
        self,
        hostName: str | None,
        port: int,
        sslPeerName: str | None,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
        protocol: QAbstractSocket.NetworkLayerProtocol = ...,
    ) -> None: ...

class QUdpSocket(QAbstractSocket):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def setMulticastInterface(self, iface: QNetworkInterface) -> None: ...
    def multicastInterface(self) -> QNetworkInterface: ...
    @typing.overload
    def leaveMulticastGroup(
        self, groupAddress: QHostAddress | QHostAddress.SpecialAddress
    ) -> bool: ...
    @typing.overload
    def leaveMulticastGroup(
        self,
        groupAddress: QHostAddress | QHostAddress.SpecialAddress,
        iface: QNetworkInterface,
    ) -> bool: ...
    @typing.overload
    def joinMulticastGroup(
        self, groupAddress: QHostAddress | QHostAddress.SpecialAddress
    ) -> bool: ...
    @typing.overload
    def joinMulticastGroup(
        self,
        groupAddress: QHostAddress | QHostAddress.SpecialAddress,
        iface: QNetworkInterface,
    ) -> bool: ...
    @typing.overload
    def writeDatagram(
        self,
        a0: PyQt6.sip.Buffer,
        a1: QHostAddress | QHostAddress.SpecialAddress,
        a2: int,
    ) -> int: ...
    @typing.overload
    def writeDatagram(self, datagram: QNetworkDatagram) -> int: ...
    def receiveDatagram(self, maxSize: int = ...) -> QNetworkDatagram: ...
    def readDatagram(
        self, maxlen: int
    ) -> tuple[bytes, QHostAddress | None, int | None]: ...
    def pendingDatagramSize(self) -> int: ...
    def hasPendingDatagrams(self) -> bool: ...
