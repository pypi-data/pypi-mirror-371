# The PEP 484 type hints stub file for the Qsci module.
#
# Generated by SIP 6.7.9
#
# Copyright (c) 2023 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of QScintilla.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections.abc

# Support for QDate, QDateTime and QTime.
import enum
import typing

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtPrintSupport, QtWidgets

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., None] | QtCore.pyqtBoundSignal

class QsciScintillaBase(QtWidgets.QAbstractScrollArea):
    SC_ORDER_PRESORTED: int = ...
    SC_ORDER_PERFORMSORT: int = ...
    SC_ORDER_CUSTOM: int = ...

    SC_AUTOMATICFOLD_SHOW: int = ...
    SC_AUTOMATICFOLD_CLICK: int = ...
    SC_AUTOMATICFOLD_CHANGE: int = ...

    SC_FOLDACTION_CONTRACT: int = ...
    SC_FOLDACTION_EXPAND: int = ...
    SC_FOLDACTION_TOGGLE: int = ...

    SC_FONT_SIZE_MULTIPLIER: int = ...

    SC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE: int = ...
    SC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE: int = ...

    SC_TECHNOLOGY_DEFAULT: int = ...
    SC_TECHNOLOGY_DIRECTWRITE: int = ...
    SC_TECHNOLOGY_DIRECTWRITERETAIN: int = ...
    SC_TECHNOLOGY_DIRECTWRITEDC: int = ...

    SC_WEIGHT_NORMAL: int = ...
    SC_WEIGHT_SEMIBOLD: int = ...
    SC_WEIGHT_BOLD: int = ...

    SCLEX_CONTAINER: int = ...
    SCLEX_NULL: int = ...
    SCLEX_PYTHON: int = ...
    SCLEX_CPP: int = ...
    SCLEX_HTML: int = ...
    SCLEX_XML: int = ...
    SCLEX_PERL: int = ...
    SCLEX_SQL: int = ...
    SCLEX_VB: int = ...
    SCLEX_PROPERTIES: int = ...
    SCLEX_ERRORLIST: int = ...
    SCLEX_MAKEFILE: int = ...
    SCLEX_BATCH: int = ...
    SCLEX_LATEX: int = ...
    SCLEX_LUA: int = ...
    SCLEX_DIFF: int = ...
    SCLEX_CONF: int = ...
    SCLEX_PASCAL: int = ...
    SCLEX_AVE: int = ...
    SCLEX_ADA: int = ...
    SCLEX_LISP: int = ...
    SCLEX_RUBY: int = ...
    SCLEX_EIFFEL: int = ...
    SCLEX_EIFFELKW: int = ...
    SCLEX_TCL: int = ...
    SCLEX_NNCRONTAB: int = ...
    SCLEX_BULLANT: int = ...
    SCLEX_VBSCRIPT: int = ...
    SCLEX_ASP: int = ...
    SCLEX_PHP: int = ...
    SCLEX_BAAN: int = ...
    SCLEX_MATLAB: int = ...
    SCLEX_SCRIPTOL: int = ...
    SCLEX_ASM: int = ...
    SCLEX_CPPNOCASE: int = ...
    SCLEX_FORTRAN: int = ...
    SCLEX_F77: int = ...
    SCLEX_CSS: int = ...
    SCLEX_POV: int = ...
    SCLEX_LOUT: int = ...
    SCLEX_ESCRIPT: int = ...
    SCLEX_PS: int = ...
    SCLEX_NSIS: int = ...
    SCLEX_MMIXAL: int = ...
    SCLEX_CLW: int = ...
    SCLEX_CLWNOCASE: int = ...
    SCLEX_LOT: int = ...
    SCLEX_YAML: int = ...
    SCLEX_TEX: int = ...
    SCLEX_METAPOST: int = ...
    SCLEX_POWERBASIC: int = ...
    SCLEX_FORTH: int = ...
    SCLEX_ERLANG: int = ...
    SCLEX_OCTAVE: int = ...
    SCLEX_MSSQL: int = ...
    SCLEX_VERILOG: int = ...
    SCLEX_KIX: int = ...
    SCLEX_GUI4CLI: int = ...
    SCLEX_SPECMAN: int = ...
    SCLEX_AU3: int = ...
    SCLEX_APDL: int = ...
    SCLEX_BASH: int = ...
    SCLEX_ASN1: int = ...
    SCLEX_VHDL: int = ...
    SCLEX_CAML: int = ...
    SCLEX_BLITZBASIC: int = ...
    SCLEX_PUREBASIC: int = ...
    SCLEX_HASKELL: int = ...
    SCLEX_PHPSCRIPT: int = ...
    SCLEX_TADS3: int = ...
    SCLEX_REBOL: int = ...
    SCLEX_SMALLTALK: int = ...
    SCLEX_FLAGSHIP: int = ...
    SCLEX_CSOUND: int = ...
    SCLEX_FREEBASIC: int = ...
    SCLEX_INNOSETUP: int = ...
    SCLEX_OPAL: int = ...
    SCLEX_SPICE: int = ...
    SCLEX_D: int = ...
    SCLEX_CMAKE: int = ...
    SCLEX_GAP: int = ...
    SCLEX_PLM: int = ...
    SCLEX_PROGRESS: int = ...
    SCLEX_ABAQUS: int = ...
    SCLEX_ASYMPTOTE: int = ...
    SCLEX_R: int = ...
    SCLEX_MAGIK: int = ...
    SCLEX_POWERSHELL: int = ...
    SCLEX_MYSQL: int = ...
    SCLEX_PO: int = ...
    SCLEX_TAL: int = ...
    SCLEX_COBOL: int = ...
    SCLEX_TACL: int = ...
    SCLEX_SORCUS: int = ...
    SCLEX_POWERPRO: int = ...
    SCLEX_NIMROD: int = ...
    SCLEX_SML: int = ...
    SCLEX_MARKDOWN: int = ...
    SCLEX_TXT2TAGS: int = ...
    SCLEX_A68K: int = ...
    SCLEX_MODULA: int = ...
    SCLEX_COFFEESCRIPT: int = ...
    SCLEX_TCMD: int = ...
    SCLEX_AVS: int = ...
    SCLEX_ECL: int = ...
    SCLEX_OSCRIPT: int = ...
    SCLEX_VISUALPROLOG: int = ...
    SCLEX_LITERATEHASKELL: int = ...
    SCLEX_STTXT: int = ...
    SCLEX_KVIRC: int = ...
    SCLEX_RUST: int = ...
    SCLEX_DMAP: int = ...
    SCLEX_AS: int = ...
    SCLEX_DMIS: int = ...
    SCLEX_REGISTRY: int = ...
    SCLEX_BIBTEX: int = ...
    SCLEX_SREC: int = ...
    SCLEX_IHEX: int = ...
    SCLEX_TEHEX: int = ...
    SCLEX_JSON: int = ...
    SCLEX_EDIFACT: int = ...
    SCLEX_INDENT: int = ...
    SCLEX_MAXIMA: int = ...
    SCLEX_STATA: int = ...
    SCLEX_SAS: int = ...

    SCMOD_NORM: int = ...
    SCMOD_SHIFT: int = ...
    SCMOD_CTRL: int = ...
    SCMOD_ALT: int = ...
    SCMOD_SUPER: int = ...
    SCMOD_META: int = ...

    SCK_DOWN: int = ...
    SCK_UP: int = ...
    SCK_LEFT: int = ...
    SCK_RIGHT: int = ...
    SCK_HOME: int = ...
    SCK_END: int = ...
    SCK_PRIOR: int = ...
    SCK_NEXT: int = ...
    SCK_DELETE: int = ...
    SCK_INSERT: int = ...
    SCK_ESCAPE: int = ...
    SCK_BACK: int = ...
    SCK_TAB: int = ...
    SCK_RETURN: int = ...
    SCK_ADD: int = ...
    SCK_SUBTRACT: int = ...
    SCK_DIVIDE: int = ...
    SCK_WIN: int = ...
    SCK_RWIN: int = ...
    SCK_MENU: int = ...

    SC_MOD_INSERTTEXT: int = ...
    SC_MOD_DELETETEXT: int = ...
    SC_MOD_CHANGESTYLE: int = ...
    SC_MOD_CHANGEFOLD: int = ...
    SC_PERFORMED_USER: int = ...
    SC_PERFORMED_UNDO: int = ...
    SC_PERFORMED_REDO: int = ...
    SC_MULTISTEPUNDOREDO: int = ...
    SC_LASTSTEPINUNDOREDO: int = ...
    SC_MOD_CHANGEMARKER: int = ...
    SC_MOD_BEFOREINSERT: int = ...
    SC_MOD_BEFOREDELETE: int = ...
    SC_MULTILINEUNDOREDO: int = ...
    SC_STARTACTION: int = ...
    SC_MOD_CHANGEINDICATOR: int = ...
    SC_MOD_CHANGELINESTATE: int = ...
    SC_MOD_CHANGEMARGIN: int = ...
    SC_MOD_CHANGEANNOTATION: int = ...
    SC_MOD_CONTAINER: int = ...
    SC_MOD_LEXERSTATE: int = ...
    SC_MOD_INSERTCHECK: int = ...
    SC_MOD_CHANGETABSTOPS: int = ...
    SC_MODEVENTMASKALL: int = ...

    CARETSTYLE_INVISIBLE: int = ...
    CARETSTYLE_LINE: int = ...
    CARETSTYLE_BLOCK: int = ...

    CARET_SLOP: int = ...
    CARET_STRICT: int = ...
    CARET_JUMPS: int = ...
    CARET_EVEN: int = ...

    VISIBLE_SLOP: int = ...
    VISIBLE_STRICT: int = ...

    UNDO_MAY_COALESCE: int = ...

    SC_CURSORNORMAL: int = ...
    SC_CURSORARROW: int = ...
    SC_CURSORWAIT: int = ...
    SC_CURSORREVERSEARROW: int = ...

    EDGE_NONE: int = ...
    EDGE_LINE: int = ...
    EDGE_BACKGROUND: int = ...
    EDGE_MULTILINE: int = ...

    ANNOTATION_HIDDEN: int = ...
    ANNOTATION_STANDARD: int = ...
    ANNOTATION_BOXED: int = ...
    ANNOTATION_INDENTED: int = ...

    SC_PHASES_ONE: int = ...
    SC_PHASES_TWO: int = ...
    SC_PHASES_MULTIPLE: int = ...

    SC_CACHE_NONE: int = ...
    SC_CACHE_CARET: int = ...
    SC_CACHE_PAGE: int = ...
    SC_CACHE_DOCUMENT: int = ...

    SC_WRAPINDENT_FIXED: int = ...
    SC_WRAPINDENT_SAME: int = ...
    SC_WRAPINDENT_INDENT: int = ...
    SC_WRAPINDENT_DEEPINDENT: int = ...

    SC_WRAP_NONE: int = ...
    SC_WRAP_WORD: int = ...
    SC_WRAP_CHAR: int = ...
    SC_WRAP_WHITESPACE: int = ...

    SC_TIME_FOREVER: int = ...

    SC_LINE_END_TYPE_DEFAULT: int = ...
    SC_LINE_END_TYPE_UNICODE: int = ...

    SC_FOLDFLAG_LINEBEFORE_EXPANDED: int = ...
    SC_FOLDFLAG_LINEBEFORE_CONTRACTED: int = ...
    SC_FOLDFLAG_LINEAFTER_EXPANDED: int = ...
    SC_FOLDFLAG_LINEAFTER_CONTRACTED: int = ...
    SC_FOLDFLAG_LEVELNUMBERS: int = ...
    SC_FOLDFLAG_LINESTATE: int = ...

    SC_FOLDLEVELBASE: int = ...
    SC_FOLDLEVELWHITEFLAG: int = ...
    SC_FOLDLEVELHEADERFLAG: int = ...
    SC_FOLDLEVELNUMBERMASK: int = ...

    SC_FOLDDISPLAYTEXT_HIDDEN: int = ...
    SC_FOLDDISPLAYTEXT_STANDARD: int = ...
    SC_FOLDDISPLAYTEXT_BOXED: int = ...

    SCFIND_WHOLEWORD: int = ...
    SCFIND_MATCHCASE: int = ...
    SCFIND_WORDSTART: int = ...
    SCFIND_REGEXP: int = ...
    SCFIND_POSIX: int = ...
    SCFIND_CXX11REGEX: int = ...

    SC_PRINT_NORMAL: int = ...
    SC_PRINT_INVERTLIGHT: int = ...
    SC_PRINT_BLACKONWHITE: int = ...
    SC_PRINT_COLOURONWHITE: int = ...
    SC_PRINT_COLOURONWHITEDEFAULTBG: int = ...
    SC_PRINT_SCREENCOLOURS: int = ...

    INDIC_PLAIN: int = ...
    INDIC_SQUIGGLE: int = ...
    INDIC_TT: int = ...
    INDIC_DIAGONAL: int = ...
    INDIC_STRIKE: int = ...
    INDIC_HIDDEN: int = ...
    INDIC_BOX: int = ...
    INDIC_ROUNDBOX: int = ...
    INDIC_STRAIGHTBOX: int = ...
    INDIC_DASH: int = ...
    INDIC_DOTS: int = ...
    INDIC_SQUIGGLELOW: int = ...
    INDIC_DOTBOX: int = ...
    INDIC_SQUIGGLEPIXMAP: int = ...
    INDIC_COMPOSITIONTHICK: int = ...
    INDIC_COMPOSITIONTHIN: int = ...
    INDIC_FULLBOX: int = ...
    INDIC_TEXTFORE: int = ...
    INDIC_POINT: int = ...
    INDIC_POINTCHARACTER: int = ...
    INDIC_GRADIENT: int = ...
    INDIC_GRADIENTCENTRE: int = ...
    INDIC_IME: int = ...
    INDIC_IME_MAX: int = ...
    INDIC_CONTAINER: int = ...
    INDIC_MAX: int = ...
    INDIC0_MASK: int = ...
    INDIC1_MASK: int = ...
    INDIC2_MASK: int = ...
    INDICS_MASK: int = ...
    SC_INDICVALUEBIT: int = ...
    SC_INDICVALUEMASK: int = ...
    SC_INDICFLAG_VALUEBEFORE: int = ...

    SC_IV_NONE: int = ...
    SC_IV_REAL: int = ...
    SC_IV_LOOKFORWARD: int = ...
    SC_IV_LOOKBOTH: int = ...

    SC_CASE_MIXED: int = ...
    SC_CASE_UPPER: int = ...
    SC_CASE_LOWER: int = ...
    SC_CASE_CAMEL: int = ...

    SC_CHARSET_ANSI: int = ...
    SC_CHARSET_DEFAULT: int = ...
    SC_CHARSET_BALTIC: int = ...
    SC_CHARSET_CHINESEBIG5: int = ...
    SC_CHARSET_EASTEUROPE: int = ...
    SC_CHARSET_GB2312: int = ...
    SC_CHARSET_GREEK: int = ...
    SC_CHARSET_HANGUL: int = ...
    SC_CHARSET_MAC: int = ...
    SC_CHARSET_OEM: int = ...
    SC_CHARSET_RUSSIAN: int = ...
    SC_CHARSET_OEM866: int = ...
    SC_CHARSET_CYRILLIC: int = ...
    SC_CHARSET_SHIFTJIS: int = ...
    SC_CHARSET_SYMBOL: int = ...
    SC_CHARSET_TURKISH: int = ...
    SC_CHARSET_JOHAB: int = ...
    SC_CHARSET_HEBREW: int = ...
    SC_CHARSET_ARABIC: int = ...
    SC_CHARSET_VIETNAMESE: int = ...
    SC_CHARSET_THAI: int = ...
    SC_CHARSET_8859_15: int = ...

    STYLE_DEFAULT: int = ...
    STYLE_LINENUMBER: int = ...
    STYLE_BRACELIGHT: int = ...
    STYLE_BRACEBAD: int = ...
    STYLE_CONTROLCHAR: int = ...
    STYLE_INDENTGUIDE: int = ...
    STYLE_CALLTIP: int = ...
    STYLE_FOLDDISPLAYTEXT: int = ...
    STYLE_LASTPREDEFINED: int = ...
    STYLE_MAX: int = ...

    SC_MARGIN_SYMBOL: int = ...
    SC_MARGIN_NUMBER: int = ...
    SC_MARGIN_BACK: int = ...
    SC_MARGIN_FORE: int = ...
    SC_MARGIN_TEXT: int = ...
    SC_MARGIN_RTEXT: int = ...
    SC_MARGIN_COLOUR: int = ...

    SC_MARKNUM_FOLDEREND: int = ...
    SC_MARKNUM_FOLDEROPENMID: int = ...
    SC_MARKNUM_FOLDERMIDTAIL: int = ...
    SC_MARKNUM_FOLDERTAIL: int = ...
    SC_MARKNUM_FOLDERSUB: int = ...
    SC_MARKNUM_FOLDER: int = ...
    SC_MARKNUM_FOLDEROPEN: int = ...
    SC_MASK_FOLDERS: int = ...

    SC_MARK_CIRCLE: int = ...
    SC_MARK_ROUNDRECT: int = ...
    SC_MARK_ARROW: int = ...
    SC_MARK_SMALLRECT: int = ...
    SC_MARK_SHORTARROW: int = ...
    SC_MARK_EMPTY: int = ...
    SC_MARK_ARROWDOWN: int = ...
    SC_MARK_MINUS: int = ...
    SC_MARK_PLUS: int = ...
    SC_MARK_VLINE: int = ...
    SC_MARK_LCORNER: int = ...
    SC_MARK_TCORNER: int = ...
    SC_MARK_BOXPLUS: int = ...
    SC_MARK_BOXPLUSCONNECTED: int = ...
    SC_MARK_BOXMINUS: int = ...
    SC_MARK_BOXMINUSCONNECTED: int = ...
    SC_MARK_LCORNERCURVE: int = ...
    SC_MARK_TCORNERCURVE: int = ...
    SC_MARK_CIRCLEPLUS: int = ...
    SC_MARK_CIRCLEPLUSCONNECTED: int = ...
    SC_MARK_CIRCLEMINUS: int = ...
    SC_MARK_CIRCLEMINUSCONNECTED: int = ...
    SC_MARK_BACKGROUND: int = ...
    SC_MARK_DOTDOTDOT: int = ...
    SC_MARK_ARROWS: int = ...
    SC_MARK_PIXMAP: int = ...
    SC_MARK_FULLRECT: int = ...
    SC_MARK_LEFTRECT: int = ...
    SC_MARK_AVAILABLE: int = ...
    SC_MARK_UNDERLINE: int = ...
    SC_MARK_RGBAIMAGE: int = ...
    SC_MARK_BOOKMARK: int = ...
    SC_MARK_CHARACTER: int = ...

    SC_CP_DBCS: int = ...
    SC_CP_UTF8: int = ...

    SC_EOL_CRLF: int = ...
    SC_EOL_CR: int = ...
    SC_EOL_LF: int = ...

    SCWS_INVISIBLE: int = ...
    SCWS_VISIBLEALWAYS: int = ...
    SCWS_VISIBLEAFTERINDENT: int = ...
    SCWS_VISIBLEONLYININDENT: int = ...

    SCVS_NONE: int = ...
    SCVS_RECTANGULARSELECTION: int = ...
    SCVS_USERACCESSIBLE: int = ...
    SCVS_NOWRAPLINESTART: int = ...

    SCTD_LONGARROW: int = ...
    SCTD_STRIKEOUT: int = ...

    SC_WRAPVISUALFLAGLOC_DEFAULT: int = ...
    SC_WRAPVISUALFLAGLOC_END_BY_TEXT: int = ...
    SC_WRAPVISUALFLAGLOC_START_BY_TEXT: int = ...

    SC_WRAPVISUALFLAG_NONE: int = ...
    SC_WRAPVISUALFLAG_END: int = ...
    SC_WRAPVISUALFLAG_START: int = ...
    SC_WRAPVISUALFLAG_MARGIN: int = ...

    SC_UPDATE_CONTENT: int = ...
    SC_UPDATE_SELECTION: int = ...
    SC_UPDATE_V_SCROLL: int = ...
    SC_UPDATE_H_SCROLL: int = ...

    SC_TYPE_BOOLEAN: int = ...
    SC_TYPE_INTEGER: int = ...
    SC_TYPE_STRING: int = ...

    SC_STATUS_OK: int = ...
    SC_STATUS_FAILURE: int = ...
    SC_STATUS_BADALLOC: int = ...
    SC_STATUS_WARN_START: int = ...
    SC_STATUS_WARNREGEX: int = ...

    SC_SEL_STREAM: int = ...
    SC_SEL_RECTANGLE: int = ...
    SC_SEL_LINES: int = ...
    SC_SEL_THIN: int = ...

    SC_POPUP_NEVER: int = ...
    SC_POPUP_ALL: int = ...
    SC_POPUP_TEXT: int = ...

    SC_MULTIPASTE_ONCE: int = ...
    SC_MULTIPASTE_EACH: int = ...

    SC_MULTIAUTOC_ONCE: int = ...
    SC_MULTIAUTOC_EACH: int = ...

    SC_MARGINOPTION_NONE: int = ...
    SC_MARGINOPTION_SUBLINESELECT: int = ...

    SC_LINECHARACTERINDEX_NONE: int = ...
    SC_LINECHARACTERINDEX_UTF32: int = ...
    SC_LINECHARACTERINDEX_UTF16: int = ...

    SC_IME_WINDOWED: int = ...
    SC_IME_INLINE: int = ...

    SC_IDLESTYLING_NONE: int = ...
    SC_IDLESTYLING_TOVISIBLE: int = ...
    SC_IDLESTYLING_AFTERVISIBLE: int = ...
    SC_IDLESTYLING_ALL: int = ...

    SC_EFF_QUALITY_MASK: int = ...
    SC_EFF_QUALITY_DEFAULT: int = ...
    SC_EFF_QUALITY_NON_ANTIALIASED: int = ...
    SC_EFF_QUALITY_ANTIALIASED: int = ...
    SC_EFF_QUALITY_LCD_OPTIMIZED: int = ...

    SC_DOCUMENTOPTION_DEFAULT: int = ...
    SC_DOCUMENTOPTION_STYLES_NONE: int = ...
    SC_DOCUMENTOPTION_TEXT_LARGE: int = ...

    SC_CARETSTICKY_OFF: int = ...
    SC_CARETSTICKY_ON: int = ...
    SC_CARETSTICKY_WHITESPACE: int = ...

    SC_ALPHA_TRANSPARENT: int = ...
    SC_ALPHA_OPAQUE: int = ...
    SC_ALPHA_NOALPHA: int = ...

    SC_AC_FILLUP: int = ...
    SC_AC_DOUBLECLICK: int = ...
    SC_AC_TAB: int = ...
    SC_AC_NEWLINE: int = ...
    SC_AC_COMMAND: int = ...

    SCI_START: int = ...
    SCI_OPTIONAL_START: int = ...
    SCI_LEXER_START: int = ...
    SCI_ADDTEXT: int = ...
    SCI_ADDSTYLEDTEXT: int = ...
    SCI_INSERTTEXT: int = ...
    SCI_CLEARALL: int = ...
    SCI_CLEARDOCUMENTSTYLE: int = ...
    SCI_GETLENGTH: int = ...
    SCI_GETCHARAT: int = ...
    SCI_GETCURRENTPOS: int = ...
    SCI_GETANCHOR: int = ...
    SCI_GETSTYLEAT: int = ...
    SCI_REDO: int = ...
    SCI_SETUNDOCOLLECTION: int = ...
    SCI_SELECTALL: int = ...
    SCI_SETSAVEPOINT: int = ...
    SCI_GETSTYLEDTEXT: int = ...
    SCI_CANREDO: int = ...
    SCI_MARKERLINEFROMHANDLE: int = ...
    SCI_MARKERDELETEHANDLE: int = ...
    SCI_GETUNDOCOLLECTION: int = ...
    SCI_GETVIEWWS: int = ...
    SCI_SETVIEWWS: int = ...
    SCI_POSITIONFROMPOINT: int = ...
    SCI_POSITIONFROMPOINTCLOSE: int = ...
    SCI_GOTOLINE: int = ...
    SCI_GOTOPOS: int = ...
    SCI_SETANCHOR: int = ...
    SCI_GETCURLINE: int = ...
    SCI_GETENDSTYLED: int = ...
    SCI_CONVERTEOLS: int = ...
    SCI_GETEOLMODE: int = ...
    SCI_SETEOLMODE: int = ...
    SCI_STARTSTYLING: int = ...
    SCI_SETSTYLING: int = ...
    SCI_GETBUFFEREDDRAW: int = ...
    SCI_SETBUFFEREDDRAW: int = ...
    SCI_SETTABWIDTH: int = ...
    SCI_GETTABWIDTH: int = ...
    SCI_SETCODEPAGE: int = ...
    SCI_MARKERDEFINE: int = ...
    SCI_MARKERSETFORE: int = ...
    SCI_MARKERSETBACK: int = ...
    SCI_MARKERADD: int = ...
    SCI_MARKERDELETE: int = ...
    SCI_MARKERDELETEALL: int = ...
    SCI_MARKERGET: int = ...
    SCI_MARKERNEXT: int = ...
    SCI_MARKERPREVIOUS: int = ...
    SCI_MARKERDEFINEPIXMAP: int = ...
    SCI_SETMARGINTYPEN: int = ...
    SCI_GETMARGINTYPEN: int = ...
    SCI_SETMARGINWIDTHN: int = ...
    SCI_GETMARGINWIDTHN: int = ...
    SCI_SETMARGINMASKN: int = ...
    SCI_GETMARGINMASKN: int = ...
    SCI_SETMARGINSENSITIVEN: int = ...
    SCI_GETMARGINSENSITIVEN: int = ...
    SCI_SETMARGINCURSORN: int = ...
    SCI_GETMARGINCURSORN: int = ...
    SCI_STYLECLEARALL: int = ...
    SCI_STYLESETFORE: int = ...
    SCI_STYLESETBACK: int = ...
    SCI_STYLESETBOLD: int = ...
    SCI_STYLESETITALIC: int = ...
    SCI_STYLESETSIZE: int = ...
    SCI_STYLESETFONT: int = ...
    SCI_STYLESETEOLFILLED: int = ...
    SCI_STYLERESETDEFAULT: int = ...
    SCI_STYLESETUNDERLINE: int = ...
    SCI_STYLESETCASE: int = ...
    SCI_STYLESETCHARACTERSET: int = ...
    SCI_SETSELFORE: int = ...
    SCI_SETSELBACK: int = ...
    SCI_SETCARETFORE: int = ...
    SCI_ASSIGNCMDKEY: int = ...
    SCI_CLEARCMDKEY: int = ...
    SCI_CLEARALLCMDKEYS: int = ...
    SCI_SETSTYLINGEX: int = ...
    SCI_STYLESETVISIBLE: int = ...
    SCI_GETCARETPERIOD: int = ...
    SCI_SETCARETPERIOD: int = ...
    SCI_SETWORDCHARS: int = ...
    SCI_BEGINUNDOACTION: int = ...
    SCI_ENDUNDOACTION: int = ...
    SCI_INDICSETSTYLE: int = ...
    SCI_INDICGETSTYLE: int = ...
    SCI_INDICSETFORE: int = ...
    SCI_INDICGETFORE: int = ...
    SCI_SETWHITESPACEFORE: int = ...
    SCI_SETWHITESPACEBACK: int = ...
    SCI_SETWHITESPACESIZE: int = ...
    SCI_GETWHITESPACESIZE: int = ...
    SCI_SETSTYLEBITS: int = ...
    SCI_GETSTYLEBITS: int = ...
    SCI_SETLINESTATE: int = ...
    SCI_GETLINESTATE: int = ...
    SCI_GETMAXLINESTATE: int = ...
    SCI_GETCARETLINEVISIBLE: int = ...
    SCI_SETCARETLINEVISIBLE: int = ...
    SCI_GETCARETLINEBACK: int = ...
    SCI_SETCARETLINEBACK: int = ...
    SCI_STYLESETCHANGEABLE: int = ...
    SCI_AUTOCSHOW: int = ...
    SCI_AUTOCCANCEL: int = ...
    SCI_AUTOCACTIVE: int = ...
    SCI_AUTOCPOSSTART: int = ...
    SCI_AUTOCCOMPLETE: int = ...
    SCI_AUTOCSTOPS: int = ...
    SCI_AUTOCSETSEPARATOR: int = ...
    SCI_AUTOCGETSEPARATOR: int = ...
    SCI_AUTOCSELECT: int = ...
    SCI_AUTOCSETCANCELATSTART: int = ...
    SCI_AUTOCGETCANCELATSTART: int = ...
    SCI_AUTOCSETFILLUPS: int = ...
    SCI_AUTOCSETCHOOSESINGLE: int = ...
    SCI_AUTOCGETCHOOSESINGLE: int = ...
    SCI_AUTOCSETIGNORECASE: int = ...
    SCI_AUTOCGETIGNORECASE: int = ...
    SCI_USERLISTSHOW: int = ...
    SCI_AUTOCSETAUTOHIDE: int = ...
    SCI_AUTOCGETAUTOHIDE: int = ...
    SCI_AUTOCSETDROPRESTOFWORD: int = ...
    SCI_AUTOCGETDROPRESTOFWORD: int = ...
    SCI_SETINDENT: int = ...
    SCI_GETINDENT: int = ...
    SCI_SETUSETABS: int = ...
    SCI_GETUSETABS: int = ...
    SCI_SETLINEINDENTATION: int = ...
    SCI_GETLINEINDENTATION: int = ...
    SCI_GETLINEINDENTPOSITION: int = ...
    SCI_GETCOLUMN: int = ...
    SCI_SETHSCROLLBAR: int = ...
    SCI_GETHSCROLLBAR: int = ...
    SCI_SETINDENTATIONGUIDES: int = ...
    SCI_GETINDENTATIONGUIDES: int = ...
    SCI_SETHIGHLIGHTGUIDE: int = ...
    SCI_GETHIGHLIGHTGUIDE: int = ...
    SCI_GETLINEENDPOSITION: int = ...
    SCI_GETCODEPAGE: int = ...
    SCI_GETCARETFORE: int = ...
    SCI_GETREADONLY: int = ...
    SCI_SETCURRENTPOS: int = ...
    SCI_SETSELECTIONSTART: int = ...
    SCI_GETSELECTIONSTART: int = ...
    SCI_SETSELECTIONEND: int = ...
    SCI_GETSELECTIONEND: int = ...
    SCI_SETPRINTMAGNIFICATION: int = ...
    SCI_GETPRINTMAGNIFICATION: int = ...
    SCI_SETPRINTCOLOURMODE: int = ...
    SCI_GETPRINTCOLOURMODE: int = ...
    SCI_FINDTEXT: int = ...
    SCI_FORMATRANGE: int = ...
    SCI_GETFIRSTVISIBLELINE: int = ...
    SCI_GETLINE: int = ...
    SCI_GETLINECOUNT: int = ...
    SCI_SETMARGINLEFT: int = ...
    SCI_GETMARGINLEFT: int = ...
    SCI_SETMARGINRIGHT: int = ...
    SCI_GETMARGINRIGHT: int = ...
    SCI_GETMODIFY: int = ...
    SCI_SETSEL: int = ...
    SCI_GETSELTEXT: int = ...
    SCI_GETTEXTRANGE: int = ...
    SCI_HIDESELECTION: int = ...
    SCI_POINTXFROMPOSITION: int = ...
    SCI_POINTYFROMPOSITION: int = ...
    SCI_LINEFROMPOSITION: int = ...
    SCI_POSITIONFROMLINE: int = ...
    SCI_LINESCROLL: int = ...
    SCI_SCROLLCARET: int = ...
    SCI_REPLACESEL: int = ...
    SCI_SETREADONLY: int = ...
    SCI_NULL: int = ...
    SCI_CANPASTE: int = ...
    SCI_CANUNDO: int = ...
    SCI_EMPTYUNDOBUFFER: int = ...
    SCI_UNDO: int = ...
    SCI_CUT: int = ...
    SCI_COPY: int = ...
    SCI_PASTE: int = ...
    SCI_CLEAR: int = ...
    SCI_SETTEXT: int = ...
    SCI_GETTEXT: int = ...
    SCI_GETTEXTLENGTH: int = ...
    SCI_GETDIRECTFUNCTION: int = ...
    SCI_GETDIRECTPOINTER: int = ...
    SCI_SETOVERTYPE: int = ...
    SCI_GETOVERTYPE: int = ...
    SCI_SETCARETWIDTH: int = ...
    SCI_GETCARETWIDTH: int = ...
    SCI_SETTARGETSTART: int = ...
    SCI_GETTARGETSTART: int = ...
    SCI_SETTARGETEND: int = ...
    SCI_GETTARGETEND: int = ...
    SCI_REPLACETARGET: int = ...
    SCI_REPLACETARGETRE: int = ...
    SCI_SEARCHINTARGET: int = ...
    SCI_SETSEARCHFLAGS: int = ...
    SCI_GETSEARCHFLAGS: int = ...
    SCI_CALLTIPSHOW: int = ...
    SCI_CALLTIPCANCEL: int = ...
    SCI_CALLTIPACTIVE: int = ...
    SCI_CALLTIPPOSSTART: int = ...
    SCI_CALLTIPSETHLT: int = ...
    SCI_CALLTIPSETBACK: int = ...
    SCI_CALLTIPSETFORE: int = ...
    SCI_CALLTIPSETFOREHLT: int = ...
    SCI_AUTOCSETMAXWIDTH: int = ...
    SCI_AUTOCGETMAXWIDTH: int = ...
    SCI_AUTOCSETMAXHEIGHT: int = ...
    SCI_AUTOCGETMAXHEIGHT: int = ...
    SCI_CALLTIPUSESTYLE: int = ...
    SCI_VISIBLEFROMDOCLINE: int = ...
    SCI_DOCLINEFROMVISIBLE: int = ...
    SCI_SETFOLDLEVEL: int = ...
    SCI_GETFOLDLEVEL: int = ...
    SCI_GETLASTCHILD: int = ...
    SCI_GETFOLDPARENT: int = ...
    SCI_SHOWLINES: int = ...
    SCI_HIDELINES: int = ...
    SCI_GETLINEVISIBLE: int = ...
    SCI_SETFOLDEXPANDED: int = ...
    SCI_GETFOLDEXPANDED: int = ...
    SCI_TOGGLEFOLD: int = ...
    SCI_ENSUREVISIBLE: int = ...
    SCI_SETFOLDFLAGS: int = ...
    SCI_ENSUREVISIBLEENFORCEPOLICY: int = ...
    SCI_WRAPCOUNT: int = ...
    SCI_SETTABINDENTS: int = ...
    SCI_GETTABINDENTS: int = ...
    SCI_SETBACKSPACEUNINDENTS: int = ...
    SCI_GETBACKSPACEUNINDENTS: int = ...
    SCI_SETMOUSEDWELLTIME: int = ...
    SCI_GETMOUSEDWELLTIME: int = ...
    SCI_WORDSTARTPOSITION: int = ...
    SCI_WORDENDPOSITION: int = ...
    SCI_SETWRAPMODE: int = ...
    SCI_GETWRAPMODE: int = ...
    SCI_SETLAYOUTCACHE: int = ...
    SCI_GETLAYOUTCACHE: int = ...
    SCI_SETSCROLLWIDTH: int = ...
    SCI_GETSCROLLWIDTH: int = ...
    SCI_TEXTWIDTH: int = ...
    SCI_SETENDATLASTLINE: int = ...
    SCI_GETENDATLASTLINE: int = ...
    SCI_TEXTHEIGHT: int = ...
    SCI_SETVSCROLLBAR: int = ...
    SCI_GETVSCROLLBAR: int = ...
    SCI_APPENDTEXT: int = ...
    SCI_GETTWOPHASEDRAW: int = ...
    SCI_SETTWOPHASEDRAW: int = ...
    SCI_AUTOCGETTYPESEPARATOR: int = ...
    SCI_AUTOCSETTYPESEPARATOR: int = ...
    SCI_TARGETFROMSELECTION: int = ...
    SCI_LINESJOIN: int = ...
    SCI_LINESSPLIT: int = ...
    SCI_SETFOLDMARGINCOLOUR: int = ...
    SCI_SETFOLDMARGINHICOLOUR: int = ...
    SCI_MARKERSETBACKSELECTED: int = ...
    SCI_MARKERENABLEHIGHLIGHT: int = ...
    SCI_LINEDOWN: int = ...
    SCI_LINEDOWNEXTEND: int = ...
    SCI_LINEUP: int = ...
    SCI_LINEUPEXTEND: int = ...
    SCI_CHARLEFT: int = ...
    SCI_CHARLEFTEXTEND: int = ...
    SCI_CHARRIGHT: int = ...
    SCI_CHARRIGHTEXTEND: int = ...
    SCI_WORDLEFT: int = ...
    SCI_WORDLEFTEXTEND: int = ...
    SCI_WORDRIGHT: int = ...
    SCI_WORDRIGHTEXTEND: int = ...
    SCI_HOME: int = ...
    SCI_HOMEEXTEND: int = ...
    SCI_LINEEND: int = ...
    SCI_LINEENDEXTEND: int = ...
    SCI_DOCUMENTSTART: int = ...
    SCI_DOCUMENTSTARTEXTEND: int = ...
    SCI_DOCUMENTEND: int = ...
    SCI_DOCUMENTENDEXTEND: int = ...
    SCI_PAGEUP: int = ...
    SCI_PAGEUPEXTEND: int = ...
    SCI_PAGEDOWN: int = ...
    SCI_PAGEDOWNEXTEND: int = ...
    SCI_EDITTOGGLEOVERTYPE: int = ...
    SCI_CANCEL: int = ...
    SCI_DELETEBACK: int = ...
    SCI_TAB: int = ...
    SCI_BACKTAB: int = ...
    SCI_NEWLINE: int = ...
    SCI_FORMFEED: int = ...
    SCI_VCHOME: int = ...
    SCI_VCHOMEEXTEND: int = ...
    SCI_ZOOMIN: int = ...
    SCI_ZOOMOUT: int = ...
    SCI_DELWORDLEFT: int = ...
    SCI_DELWORDRIGHT: int = ...
    SCI_LINECUT: int = ...
    SCI_LINEDELETE: int = ...
    SCI_LINETRANSPOSE: int = ...
    SCI_LOWERCASE: int = ...
    SCI_UPPERCASE: int = ...
    SCI_LINESCROLLDOWN: int = ...
    SCI_LINESCROLLUP: int = ...
    SCI_DELETEBACKNOTLINE: int = ...
    SCI_HOMEDISPLAY: int = ...
    SCI_HOMEDISPLAYEXTEND: int = ...
    SCI_LINEENDDISPLAY: int = ...
    SCI_LINEENDDISPLAYEXTEND: int = ...
    SCI_MOVECARETINSIDEVIEW: int = ...
    SCI_LINELENGTH: int = ...
    SCI_BRACEHIGHLIGHT: int = ...
    SCI_BRACEBADLIGHT: int = ...
    SCI_BRACEMATCH: int = ...
    SCI_GETVIEWEOL: int = ...
    SCI_SETVIEWEOL: int = ...
    SCI_GETDOCPOINTER: int = ...
    SCI_SETDOCPOINTER: int = ...
    SCI_SETMODEVENTMASK: int = ...
    SCI_GETEDGECOLUMN: int = ...
    SCI_SETEDGECOLUMN: int = ...
    SCI_GETEDGEMODE: int = ...
    SCI_SETEDGEMODE: int = ...
    SCI_GETEDGECOLOUR: int = ...
    SCI_SETEDGECOLOUR: int = ...
    SCI_SEARCHANCHOR: int = ...
    SCI_SEARCHNEXT: int = ...
    SCI_SEARCHPREV: int = ...
    SCI_LINESONSCREEN: int = ...
    SCI_USEPOPUP: int = ...
    SCI_SELECTIONISRECTANGLE: int = ...
    SCI_SETZOOM: int = ...
    SCI_GETZOOM: int = ...
    SCI_CREATEDOCUMENT: int = ...
    SCI_ADDREFDOCUMENT: int = ...
    SCI_RELEASEDOCUMENT: int = ...
    SCI_GETMODEVENTMASK: int = ...
    SCI_SETFOCUS: int = ...
    SCI_GETFOCUS: int = ...
    SCI_SETSTATUS: int = ...
    SCI_GETSTATUS: int = ...
    SCI_SETMOUSEDOWNCAPTURES: int = ...
    SCI_GETMOUSEDOWNCAPTURES: int = ...
    SCI_SETCURSOR: int = ...
    SCI_GETCURSOR: int = ...
    SCI_SETCONTROLCHARSYMBOL: int = ...
    SCI_GETCONTROLCHARSYMBOL: int = ...
    SCI_WORDPARTLEFT: int = ...
    SCI_WORDPARTLEFTEXTEND: int = ...
    SCI_WORDPARTRIGHT: int = ...
    SCI_WORDPARTRIGHTEXTEND: int = ...
    SCI_SETVISIBLEPOLICY: int = ...
    SCI_DELLINELEFT: int = ...
    SCI_DELLINERIGHT: int = ...
    SCI_SETXOFFSET: int = ...
    SCI_GETXOFFSET: int = ...
    SCI_CHOOSECARETX: int = ...
    SCI_GRABFOCUS: int = ...
    SCI_SETXCARETPOLICY: int = ...
    SCI_SETYCARETPOLICY: int = ...
    SCI_LINEDUPLICATE: int = ...
    SCI_REGISTERIMAGE: int = ...
    SCI_SETPRINTWRAPMODE: int = ...
    SCI_GETPRINTWRAPMODE: int = ...
    SCI_CLEARREGISTEREDIMAGES: int = ...
    SCI_STYLESETHOTSPOT: int = ...
    SCI_SETHOTSPOTACTIVEFORE: int = ...
    SCI_SETHOTSPOTACTIVEBACK: int = ...
    SCI_SETHOTSPOTACTIVEUNDERLINE: int = ...
    SCI_SETHOTSPOTSINGLELINE: int = ...
    SCI_PARADOWN: int = ...
    SCI_PARADOWNEXTEND: int = ...
    SCI_PARAUP: int = ...
    SCI_PARAUPEXTEND: int = ...
    SCI_POSITIONBEFORE: int = ...
    SCI_POSITIONAFTER: int = ...
    SCI_COPYRANGE: int = ...
    SCI_COPYTEXT: int = ...
    SCI_SETSELECTIONMODE: int = ...
    SCI_GETSELECTIONMODE: int = ...
    SCI_GETLINESELSTARTPOSITION: int = ...
    SCI_GETLINESELENDPOSITION: int = ...
    SCI_LINEDOWNRECTEXTEND: int = ...
    SCI_LINEUPRECTEXTEND: int = ...
    SCI_CHARLEFTRECTEXTEND: int = ...
    SCI_CHARRIGHTRECTEXTEND: int = ...
    SCI_HOMERECTEXTEND: int = ...
    SCI_VCHOMERECTEXTEND: int = ...
    SCI_LINEENDRECTEXTEND: int = ...
    SCI_PAGEUPRECTEXTEND: int = ...
    SCI_PAGEDOWNRECTEXTEND: int = ...
    SCI_STUTTEREDPAGEUP: int = ...
    SCI_STUTTEREDPAGEUPEXTEND: int = ...
    SCI_STUTTEREDPAGEDOWN: int = ...
    SCI_STUTTEREDPAGEDOWNEXTEND: int = ...
    SCI_WORDLEFTEND: int = ...
    SCI_WORDLEFTENDEXTEND: int = ...
    SCI_WORDRIGHTEND: int = ...
    SCI_WORDRIGHTENDEXTEND: int = ...
    SCI_SETWHITESPACECHARS: int = ...
    SCI_SETCHARSDEFAULT: int = ...
    SCI_AUTOCGETCURRENT: int = ...
    SCI_ALLOCATE: int = ...
    SCI_HOMEWRAP: int = ...
    SCI_HOMEWRAPEXTEND: int = ...
    SCI_LINEENDWRAP: int = ...
    SCI_LINEENDWRAPEXTEND: int = ...
    SCI_VCHOMEWRAP: int = ...
    SCI_VCHOMEWRAPEXTEND: int = ...
    SCI_LINECOPY: int = ...
    SCI_FINDCOLUMN: int = ...
    SCI_GETCARETSTICKY: int = ...
    SCI_SETCARETSTICKY: int = ...
    SCI_TOGGLECARETSTICKY: int = ...
    SCI_SETWRAPVISUALFLAGS: int = ...
    SCI_GETWRAPVISUALFLAGS: int = ...
    SCI_SETWRAPVISUALFLAGSLOCATION: int = ...
    SCI_GETWRAPVISUALFLAGSLOCATION: int = ...
    SCI_SETWRAPSTARTINDENT: int = ...
    SCI_GETWRAPSTARTINDENT: int = ...
    SCI_MARKERADDSET: int = ...
    SCI_SETPASTECONVERTENDINGS: int = ...
    SCI_GETPASTECONVERTENDINGS: int = ...
    SCI_SELECTIONDUPLICATE: int = ...
    SCI_SETCARETLINEBACKALPHA: int = ...
    SCI_GETCARETLINEBACKALPHA: int = ...
    SCI_SETWRAPINDENTMODE: int = ...
    SCI_GETWRAPINDENTMODE: int = ...
    SCI_MARKERSETALPHA: int = ...
    SCI_GETSELALPHA: int = ...
    SCI_SETSELALPHA: int = ...
    SCI_GETSELEOLFILLED: int = ...
    SCI_SETSELEOLFILLED: int = ...
    SCI_STYLEGETFORE: int = ...
    SCI_STYLEGETBACK: int = ...
    SCI_STYLEGETBOLD: int = ...
    SCI_STYLEGETITALIC: int = ...
    SCI_STYLEGETSIZE: int = ...
    SCI_STYLEGETFONT: int = ...
    SCI_STYLEGETEOLFILLED: int = ...
    SCI_STYLEGETUNDERLINE: int = ...
    SCI_STYLEGETCASE: int = ...
    SCI_STYLEGETCHARACTERSET: int = ...
    SCI_STYLEGETVISIBLE: int = ...
    SCI_STYLEGETCHANGEABLE: int = ...
    SCI_STYLEGETHOTSPOT: int = ...
    SCI_GETHOTSPOTACTIVEFORE: int = ...
    SCI_GETHOTSPOTACTIVEBACK: int = ...
    SCI_GETHOTSPOTACTIVEUNDERLINE: int = ...
    SCI_GETHOTSPOTSINGLELINE: int = ...
    SCI_BRACEHIGHLIGHTINDICATOR: int = ...
    SCI_BRACEBADLIGHTINDICATOR: int = ...
    SCI_SETINDICATORCURRENT: int = ...
    SCI_GETINDICATORCURRENT: int = ...
    SCI_SETINDICATORVALUE: int = ...
    SCI_GETINDICATORVALUE: int = ...
    SCI_INDICATORFILLRANGE: int = ...
    SCI_INDICATORCLEARRANGE: int = ...
    SCI_INDICATORALLONFOR: int = ...
    SCI_INDICATORVALUEAT: int = ...
    SCI_INDICATORSTART: int = ...
    SCI_INDICATOREND: int = ...
    SCI_INDICSETUNDER: int = ...
    SCI_INDICGETUNDER: int = ...
    SCI_SETCARETSTYLE: int = ...
    SCI_GETCARETSTYLE: int = ...
    SCI_SETPOSITIONCACHE: int = ...
    SCI_GETPOSITIONCACHE: int = ...
    SCI_SETSCROLLWIDTHTRACKING: int = ...
    SCI_GETSCROLLWIDTHTRACKING: int = ...
    SCI_DELWORDRIGHTEND: int = ...
    SCI_COPYALLOWLINE: int = ...
    SCI_GETCHARACTERPOINTER: int = ...
    SCI_INDICSETALPHA: int = ...
    SCI_INDICGETALPHA: int = ...
    SCI_SETEXTRAASCENT: int = ...
    SCI_GETEXTRAASCENT: int = ...
    SCI_SETEXTRADESCENT: int = ...
    SCI_GETEXTRADESCENT: int = ...
    SCI_MARKERSYMBOLDEFINED: int = ...
    SCI_MARGINSETTEXT: int = ...
    SCI_MARGINGETTEXT: int = ...
    SCI_MARGINSETSTYLE: int = ...
    SCI_MARGINGETSTYLE: int = ...
    SCI_MARGINSETSTYLES: int = ...
    SCI_MARGINGETSTYLES: int = ...
    SCI_MARGINTEXTCLEARALL: int = ...
    SCI_MARGINSETSTYLEOFFSET: int = ...
    SCI_MARGINGETSTYLEOFFSET: int = ...
    SCI_SETMARGINOPTIONS: int = ...
    SCI_ANNOTATIONSETTEXT: int = ...
    SCI_ANNOTATIONGETTEXT: int = ...
    SCI_ANNOTATIONSETSTYLE: int = ...
    SCI_ANNOTATIONGETSTYLE: int = ...
    SCI_ANNOTATIONSETSTYLES: int = ...
    SCI_ANNOTATIONGETSTYLES: int = ...
    SCI_ANNOTATIONGETLINES: int = ...
    SCI_ANNOTATIONCLEARALL: int = ...
    SCI_ANNOTATIONSETVISIBLE: int = ...
    SCI_ANNOTATIONGETVISIBLE: int = ...
    SCI_ANNOTATIONSETSTYLEOFFSET: int = ...
    SCI_ANNOTATIONGETSTYLEOFFSET: int = ...
    SCI_SETEMPTYSELECTION: int = ...
    SCI_GETMARGINOPTIONS: int = ...
    SCI_INDICSETOUTLINEALPHA: int = ...
    SCI_INDICGETOUTLINEALPHA: int = ...
    SCI_ADDUNDOACTION: int = ...
    SCI_CHARPOSITIONFROMPOINT: int = ...
    SCI_CHARPOSITIONFROMPOINTCLOSE: int = ...
    SCI_SETMULTIPLESELECTION: int = ...
    SCI_GETMULTIPLESELECTION: int = ...
    SCI_SETADDITIONALSELECTIONTYPING: int = ...
    SCI_GETADDITIONALSELECTIONTYPING: int = ...
    SCI_SETADDITIONALCARETSBLINK: int = ...
    SCI_GETADDITIONALCARETSBLINK: int = ...
    SCI_SCROLLRANGE: int = ...
    SCI_GETSELECTIONS: int = ...
    SCI_CLEARSELECTIONS: int = ...
    SCI_SETSELECTION: int = ...
    SCI_ADDSELECTION: int = ...
    SCI_SETMAINSELECTION: int = ...
    SCI_GETMAINSELECTION: int = ...
    SCI_SETSELECTIONNCARET: int = ...
    SCI_GETSELECTIONNCARET: int = ...
    SCI_SETSELECTIONNANCHOR: int = ...
    SCI_GETSELECTIONNANCHOR: int = ...
    SCI_SETSELECTIONNCARETVIRTUALSPACE: int = ...
    SCI_GETSELECTIONNCARETVIRTUALSPACE: int = ...
    SCI_SETSELECTIONNANCHORVIRTUALSPACE: int = ...
    SCI_GETSELECTIONNANCHORVIRTUALSPACE: int = ...
    SCI_SETSELECTIONNSTART: int = ...
    SCI_GETSELECTIONNSTART: int = ...
    SCI_SETSELECTIONNEND: int = ...
    SCI_GETSELECTIONNEND: int = ...
    SCI_SETRECTANGULARSELECTIONCARET: int = ...
    SCI_GETRECTANGULARSELECTIONCARET: int = ...
    SCI_SETRECTANGULARSELECTIONANCHOR: int = ...
    SCI_GETRECTANGULARSELECTIONANCHOR: int = ...
    SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE: int = ...
    SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE: int = ...
    SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE: int = ...
    SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE: int = ...
    SCI_SETVIRTUALSPACEOPTIONS: int = ...
    SCI_GETVIRTUALSPACEOPTIONS: int = ...
    SCI_SETRECTANGULARSELECTIONMODIFIER: int = ...
    SCI_GETRECTANGULARSELECTIONMODIFIER: int = ...
    SCI_SETADDITIONALSELFORE: int = ...
    SCI_SETADDITIONALSELBACK: int = ...
    SCI_SETADDITIONALSELALPHA: int = ...
    SCI_GETADDITIONALSELALPHA: int = ...
    SCI_SETADDITIONALCARETFORE: int = ...
    SCI_GETADDITIONALCARETFORE: int = ...
    SCI_ROTATESELECTION: int = ...
    SCI_SWAPMAINANCHORCARET: int = ...
    SCI_SETADDITIONALCARETSVISIBLE: int = ...
    SCI_GETADDITIONALCARETSVISIBLE: int = ...
    SCI_AUTOCGETCURRENTTEXT: int = ...
    SCI_SETFONTQUALITY: int = ...
    SCI_GETFONTQUALITY: int = ...
    SCI_SETFIRSTVISIBLELINE: int = ...
    SCI_SETMULTIPASTE: int = ...
    SCI_GETMULTIPASTE: int = ...
    SCI_GETTAG: int = ...
    SCI_CHANGELEXERSTATE: int = ...
    SCI_CONTRACTEDFOLDNEXT: int = ...
    SCI_VERTICALCENTRECARET: int = ...
    SCI_MOVESELECTEDLINESUP: int = ...
    SCI_MOVESELECTEDLINESDOWN: int = ...
    SCI_SETIDENTIFIER: int = ...
    SCI_GETIDENTIFIER: int = ...
    SCI_RGBAIMAGESETWIDTH: int = ...
    SCI_RGBAIMAGESETHEIGHT: int = ...
    SCI_MARKERDEFINERGBAIMAGE: int = ...
    SCI_REGISTERRGBAIMAGE: int = ...
    SCI_SCROLLTOSTART: int = ...
    SCI_SCROLLTOEND: int = ...
    SCI_STARTRECORD: int = ...
    SCI_STOPRECORD: int = ...
    SCI_SETLEXER: int = ...
    SCI_GETLEXER: int = ...
    SCI_COLOURISE: int = ...
    SCI_SETPROPERTY: int = ...
    SCI_SETKEYWORDS: int = ...
    SCI_SETLEXERLANGUAGE: int = ...
    SCI_LOADLEXERLIBRARY: int = ...
    SCI_GETPROPERTY: int = ...
    SCI_GETPROPERTYEXPANDED: int = ...
    SCI_GETPROPERTYINT: int = ...
    SCI_GETSTYLEBITSNEEDED: int = ...
    SCI_GETLEXERLANGUAGE: int = ...
    SCI_PRIVATELEXERCALL: int = ...
    SCI_PROPERTYNAMES: int = ...
    SCI_PROPERTYTYPE: int = ...
    SCI_DESCRIBEPROPERTY: int = ...
    SCI_DESCRIBEKEYWORDSETS: int = ...
    SCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR: int = ...
    SCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR: int = ...
    SCI_AUTOCSETMULTI: int = ...
    SCI_AUTOCGETMULTI: int = ...
    SCI_CALLTIPSETPOSITION: int = ...
    SCI_CALLTIPSETPOSSTART: int = ...
    SCI_COUNTCHARACTERS: int = ...
    SCI_CREATELOADER: int = ...
    SCI_DELETERANGE: int = ...
    SCI_FINDINDICATORFLASH: int = ...
    SCI_FINDINDICATORHIDE: int = ...
    SCI_FINDINDICATORSHOW: int = ...
    SCI_GETALLLINESVISIBLE: int = ...
    SCI_GETGAPPOSITION: int = ...
    SCI_GETPUNCTUATIONCHARS: int = ...
    SCI_GETRANGEPOINTER: int = ...
    SCI_GETSELECTIONEMPTY: int = ...
    SCI_GETTECHNOLOGY: int = ...
    SCI_GETWHITESPACECHARS: int = ...
    SCI_GETWORDCHARS: int = ...
    SCI_RGBAIMAGESETSCALE: int = ...
    SCI_SETPUNCTUATIONCHARS: int = ...
    SCI_SETTECHNOLOGY: int = ...
    SCI_STYLESETSIZEFRACTIONAL: int = ...
    SCI_STYLEGETSIZEFRACTIONAL: int = ...
    SCI_STYLESETWEIGHT: int = ...
    SCI_STYLEGETWEIGHT: int = ...
    SCI_FOLDLINE: int = ...
    SCI_FOLDCHILDREN: int = ...
    SCI_EXPANDCHILDREN: int = ...
    SCI_FOLDALL: int = ...
    SCI_SETAUTOMATICFOLD: int = ...
    SCI_GETAUTOMATICFOLD: int = ...
    SCI_AUTOCSETORDER: int = ...
    SCI_AUTOCGETORDER: int = ...
    SCI_POSITIONRELATIVE: int = ...
    SCI_DROPSELECTIONN: int = ...
    SCI_CHANGEINSERTION: int = ...
    SCI_GETPHASESDRAW: int = ...
    SCI_SETPHASESDRAW: int = ...
    SCI_CLEARTABSTOPS: int = ...
    SCI_ADDTABSTOP: int = ...
    SCI_GETNEXTTABSTOP: int = ...
    SCI_GETIMEINTERACTION: int = ...
    SCI_SETIMEINTERACTION: int = ...
    SCI_INDICSETHOVERSTYLE: int = ...
    SCI_INDICGETHOVERSTYLE: int = ...
    SCI_INDICSETHOVERFORE: int = ...
    SCI_INDICGETHOVERFORE: int = ...
    SCI_INDICSETFLAGS: int = ...
    SCI_INDICGETFLAGS: int = ...
    SCI_SETTARGETRANGE: int = ...
    SCI_GETTARGETTEXT: int = ...
    SCI_RELEASEALLEXTENDEDSTYLES: int = ...
    SCI_ALLOCATEEXTENDEDSTYLES: int = ...
    SCI_SETMOUSESELECTIONRECTANGULARSWITCH: int = ...
    SCI_GETMOUSESELECTIONRECTANGULARSWITCH: int = ...
    SCI_GETCARETLINEVISIBLEALWAYS: int = ...
    SCI_SETCARETLINEVISIBLEALWAYS: int = ...
    SCI_SETLINEENDTYPESALLOWED: int = ...
    SCI_GETLINEENDTYPESALLOWED: int = ...
    SCI_GETLINEENDTYPESACTIVE: int = ...
    SCI_SETREPRESENTATION: int = ...
    SCI_GETREPRESENTATION: int = ...
    SCI_CLEARREPRESENTATION: int = ...
    SCI_GETLINEENDTYPESSUPPORTED: int = ...
    SCI_ALLOCATESUBSTYLES: int = ...
    SCI_GETSUBSTYLESSTART: int = ...
    SCI_GETSUBSTYLESLENGTH: int = ...
    SCI_GETSTYLEFROMSUBSTYLE: int = ...
    SCI_GETPRIMARYSTYLEFROMSTYLE: int = ...
    SCI_FREESUBSTYLES: int = ...
    SCI_SETIDENTIFIERS: int = ...
    SCI_DISTANCETOSECONDARYSTYLES: int = ...
    SCI_GETSUBSTYLEBASES: int = ...
    SCI_GETLINECHARACTERINDEX: int = ...
    SCI_ALLOCATELINECHARACTERINDEX: int = ...
    SCI_RELEASELINECHARACTERINDEX: int = ...
    SCI_LINEFROMINDEXPOSITION: int = ...
    SCI_INDEXPOSITIONFROMLINE: int = ...
    SCI_COUNTCODEUNITS: int = ...
    SCI_POSITIONRELATIVECODEUNITS: int = ...
    SCI_GETNAMEDSTYLES: int = ...
    SCI_NAMEOFSTYLE: int = ...
    SCI_TAGSOFSTYLE: int = ...
    SCI_DESCRIPTIONOFSTYLE: int = ...
    SCI_GETMOVEEXTENDSSELECTION: int = ...
    SCI_SETCOMMANDEVENTS: int = ...
    SCI_GETCOMMANDEVENTS: int = ...
    SCI_GETDOCUMENTOPTIONS: int = ...
    SCI_SETIDLESTYLING: int = ...
    SCI_GETIDLESTYLING: int = ...
    SCI_SETMARGINBACKN: int = ...
    SCI_GETMARGINBACKN: int = ...
    SCI_SETMARGINS: int = ...
    SCI_GETMARGINS: int = ...
    SCI_SETMOUSEWHEELCAPTURES: int = ...
    SCI_GETMOUSEWHEELCAPTURES: int = ...
    SCI_GETTABDRAWMODE: int = ...
    SCI_SETTABDRAWMODE: int = ...
    SCI_ISRANGEWORD: int = ...
    SCI_TARGETWHOLEDOCUMENT: int = ...
    SCI_FOLDDISPLAYTEXTSETSTYLE: int = ...
    SCI_TOGGLEFOLDSHOWTEXT: int = ...
    SCI_MULTIEDGEADDLINE: int = ...
    SCI_MULTIEDGECLEARALL: int = ...
    SCI_MULTIPLESELECTADDNEXT: int = ...
    SCI_MULTIPLESELECTADDEACH: int = ...
    SCI_SETACCESSIBILITY: int = ...
    SCI_GETACCESSIBILITY: int = ...
    SCI_SETCARETLINEFRAME: int = ...
    SCI_GETCARETLINEFRAME: int = ...
    SCI_LINEREVERSE: int = ...

    def __init__(self, parent: QtWidgets.QWidget | None = ...) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def resizeEvent(self, e: QtGui.QResizeEvent) -> None: ...
    def paintEvent(self, e: QtGui.QPaintEvent) -> None: ...
    def mouseReleaseEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def mouseDoubleClickEvent(self, e: QtGui.QMouseEvent) -> None: ...
    def inputMethodQuery(
        self, query: QtCore.Qt.InputMethodQuery
    ) -> typing.Any: ...
    def inputMethodEvent(self, e: QtGui.QInputMethodEvent) -> None: ...
    def keyPressEvent(self, e: QtGui.QKeyEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, e: QtGui.QFocusEvent) -> None: ...
    def focusInEvent(self, e: QtGui.QFocusEvent) -> None: ...
    def dropEvent(self, e: QtGui.QDropEvent) -> None: ...
    def dragMoveEvent(self, e: QtGui.QDragMoveEvent) -> None: ...
    def dragLeaveEvent(self, e: QtGui.QDragLeaveEvent) -> None: ...
    def dragEnterEvent(self, e: QtGui.QDragEnterEvent) -> None: ...
    def contextMenuEvent(self, e: QtGui.QContextMenuEvent) -> None: ...
    def changeEvent(self, e: QtCore.QEvent) -> None: ...
    def toMimeData(
        self, text: QtCore.QByteArray, rectangular: bool
    ) -> QtCore.QMimeData: ...
    def fromMimeData(
        self, source: QtCore.QMimeData
    ) -> tuple[QtCore.QByteArray, bool]: ...
    def canInsertFromMimeData(self, source: QtCore.QMimeData) -> bool: ...
    SCN_ZOOM: typing.ClassVar[QtCore.pyqtSignal]
    SCN_USERLISTSELECTION: typing.ClassVar[QtCore.pyqtSignal]
    SCN_UPDATEUI: typing.ClassVar[QtCore.pyqtSignal]
    SCN_URIDROPPED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_STYLENEEDED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_SAVEPOINTREACHED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_SAVEPOINTLEFT: typing.ClassVar[QtCore.pyqtSignal]
    SCN_PAINTED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_NEEDSHOWN: typing.ClassVar[QtCore.pyqtSignal]
    SCN_MODIFYATTEMPTRO: typing.ClassVar[QtCore.pyqtSignal]
    SCN_MODIFIED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_MARGINRIGHTCLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_MARGINCLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_MACRORECORD: typing.ClassVar[QtCore.pyqtSignal]
    SCN_INDICATORRELEASE: typing.ClassVar[QtCore.pyqtSignal]
    SCN_INDICATORCLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_HOTSPOTRELEASECLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_HOTSPOTDOUBLECLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_HOTSPOTCLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_FOCUSOUT: typing.ClassVar[QtCore.pyqtSignal]
    SCN_FOCUSIN: typing.ClassVar[QtCore.pyqtSignal]
    SCN_DWELLSTART: typing.ClassVar[QtCore.pyqtSignal]
    SCN_DWELLEND: typing.ClassVar[QtCore.pyqtSignal]
    SCN_DOUBLECLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_CHARADDED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_CALLTIPCLICK: typing.ClassVar[QtCore.pyqtSignal]
    SCN_AUTOCSELECTIONCHANGE: typing.ClassVar[QtCore.pyqtSignal]
    SCN_AUTOCSELECTION: typing.ClassVar[QtCore.pyqtSignal]
    SCN_AUTOCCOMPLETED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_AUTOCCHARDELETED: typing.ClassVar[QtCore.pyqtSignal]
    SCN_AUTOCCANCELLED: typing.ClassVar[QtCore.pyqtSignal]
    SCEN_CHANGE: typing.ClassVar[QtCore.pyqtSignal]
    QSCN_SELCHANGED: typing.ClassVar[QtCore.pyqtSignal]
    def SendScintillaPtrResult(self, msg: int) -> PyQt6.sip.voidptr: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, wParam: typing.Any = ..., lParam: int = ...
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, wParam: int, lParam: PyQt6.sip.voidptr
    ) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: int, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(self, msg: int, wParam: bytes, lParam: bytes) -> int: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, cpMin: int, cpMax: int, lpstrText: bytes
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self,
        msg: int,
        wParam: int,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self,
        msg: int,
        wParam: int,
        hdc: QtGui.QPainter,
        rc: QtCore.QRect,
        cpMin: int,
        cpMax: int,
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, wParam: int, lParam: QtGui.QPixmap
    ) -> int: ...
    @typing.overload
    def SendScintilla(
        self, msg: int, wParam: int, lParam: QtGui.QImage
    ) -> int: ...
    def replaceVerticalScrollBar(
        self, scrollBar: QtWidgets.QScrollBar
    ) -> None: ...
    def replaceHorizontalScrollBar(
        self, scrollBar: QtWidgets.QScrollBar
    ) -> None: ...
    @staticmethod
    def pool() -> QsciScintillaBase: ...

class QsciScintilla(QsciScintillaBase):
    class WrapIndentMode(enum.Enum):
        WrapIndentFixed = ...
        WrapIndentSame = ...
        WrapIndentIndented = ...
        WrapIndentDeeplyIndented = ...

    class WrapVisualFlag(enum.Enum):
        WrapFlagNone = ...
        WrapFlagByText = ...
        WrapFlagByBorder = ...
        WrapFlagInMargin = ...

    class WrapMode(enum.Enum):
        WrapNone = ...
        WrapWord = ...
        WrapCharacter = ...
        WrapWhitespace = ...

    class WhitespaceVisibility(enum.Enum):
        WsInvisible = ...
        WsVisible = ...
        WsVisibleAfterIndent = ...
        WsVisibleOnlyInIndent = ...

    class TabDrawMode(enum.Enum):
        TabLongArrow = ...
        TabStrikeOut = ...

    class MarkerSymbol(enum.Enum):
        Circle = ...
        Rectangle = ...
        RightTriangle = ...
        SmallRectangle = ...
        RightArrow = ...
        Invisible = ...
        DownTriangle = ...
        Minus = ...
        Plus = ...
        VerticalLine = ...
        BottomLeftCorner = ...
        LeftSideSplitter = ...
        BoxedPlus = ...
        BoxedPlusConnected = ...
        BoxedMinus = ...
        BoxedMinusConnected = ...
        RoundedBottomLeftCorner = ...
        LeftSideRoundedSplitter = ...
        CircledPlus = ...
        CircledPlusConnected = ...
        CircledMinus = ...
        CircledMinusConnected = ...
        Background = ...
        ThreeDots = ...
        ThreeRightArrows = ...
        FullRectangle = ...
        LeftRectangle = ...
        Underline = ...
        Bookmark = ...

    class MarginType(enum.Enum):
        SymbolMargin = ...
        SymbolMarginDefaultForegroundColor = ...
        SymbolMarginDefaultBackgroundColor = ...
        NumberMargin = ...
        TextMargin = ...
        TextMarginRightJustified = ...
        SymbolMarginColor = ...

    MoNone: int = ...
    MoSublineSelect: int = ...

    class IndicatorStyle(enum.Enum):
        PlainIndicator = ...
        SquiggleIndicator = ...
        TTIndicator = ...
        DiagonalIndicator = ...
        StrikeIndicator = ...
        HiddenIndicator = ...
        BoxIndicator = ...
        RoundBoxIndicator = ...
        StraightBoxIndicator = ...
        FullBoxIndicator = ...
        DashesIndicator = ...
        DotsIndicator = ...
        SquiggleLowIndicator = ...
        DotBoxIndicator = ...
        SquigglePixmapIndicator = ...
        ThickCompositionIndicator = ...
        ThinCompositionIndicator = ...
        TextColorIndicator = ...
        TriangleIndicator = ...
        TriangleCharacterIndicator = ...
        GradientIndicator = ...
        CentreGradientIndicator = ...

    class FoldStyle(enum.Enum):
        NoFoldStyle = ...
        PlainFoldStyle = ...
        CircledFoldStyle = ...
        BoxedFoldStyle = ...
        CircledTreeFoldStyle = ...
        BoxedTreeFoldStyle = ...

    class EolMode(enum.Enum):
        EolWindows = ...
        EolUnix = ...
        EolMac = ...

    class EdgeMode(enum.Enum):
        EdgeNone = ...
        EdgeLine = ...
        EdgeBackground = ...
        EdgeMultipleLines = ...

    class CallTipsStyle(enum.Enum):
        CallTipsNone = ...
        CallTipsNoContext = ...
        CallTipsNoAutoCompletionContext = ...
        CallTipsContext = ...

    class CallTipsPosition(enum.Enum):
        CallTipsBelowText = ...
        CallTipsAboveText = ...

    class BraceMatch(enum.Enum):
        NoBraceMatch = ...
        StrictBraceMatch = ...
        SloppyBraceMatch = ...

    class AutoCompletionUseSingle(enum.Enum):
        AcusNever = ...
        AcusExplicit = ...
        AcusAlways = ...

    class AutoCompletionSource(enum.Enum):
        AcsNone = ...
        AcsAll = ...
        AcsDocument = ...
        AcsAPIs = ...

    class AnnotationDisplay(enum.Enum):
        AnnotationHidden = ...
        AnnotationStandard = ...
        AnnotationBoxed = ...
        AnnotationIndented = ...

    AiMaintain: int = ...
    AiOpening: int = ...
    AiClosing: int = ...

    def __init__(self, parent: QtWidgets.QWidget | None = ...) -> None: ...
    def wheelEvent(self, event: QtGui.QWheelEvent) -> None: ...
    def contextMenuEvent(self, event: QtGui.QContextMenuEvent) -> None: ...
    def changeEvent(self, event: QtCore.QEvent) -> None: ...
    def event(self, event: QtCore.QEvent) -> bool: ...
    userListActivated: typing.ClassVar[QtCore.pyqtSignal]
    textChanged: typing.ClassVar[QtCore.pyqtSignal]
    selectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    modificationChanged: typing.ClassVar[QtCore.pyqtSignal]
    modificationAttempted: typing.ClassVar[QtCore.pyqtSignal]
    marginRightClicked: typing.ClassVar[QtCore.pyqtSignal]
    marginClicked: typing.ClassVar[QtCore.pyqtSignal]
    linesChanged: typing.ClassVar[QtCore.pyqtSignal]
    indicatorReleased: typing.ClassVar[QtCore.pyqtSignal]
    indicatorClicked: typing.ClassVar[QtCore.pyqtSignal]
    copyAvailable: typing.ClassVar[QtCore.pyqtSignal]
    cursorPositionChanged: typing.ClassVar[QtCore.pyqtSignal]
    def zoomTo(self, size: int) -> None: ...
    @typing.overload
    def zoomOut(self, range: int) -> None: ...
    @typing.overload
    def zoomOut(self) -> None: ...
    @typing.overload
    def zoomIn(self, range: int) -> None: ...
    @typing.overload
    def zoomIn(self) -> None: ...
    def unindent(self, line: int) -> None: ...
    def undo(self) -> None: ...
    def setWrapMode(self, mode: QsciScintilla.WrapMode) -> None: ...
    def setWhitespaceVisibility(
        self, mode: QsciScintilla.WhitespaceVisibility
    ) -> None: ...
    def setUtf8(self, cp: bool) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTabWidth(self, width: int) -> None: ...
    def setTabIndents(self, indent: bool) -> None: ...
    def setSelectionForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setSelectionBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setSelection(
        self, lineFrom: int, indexFrom: int, lineTo: int, indexTo: int
    ) -> None: ...
    def setReadOnly(self, ro: bool) -> None: ...
    def setPaper(
        self, c: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setModified(self, m: bool) -> None: ...
    @typing.overload
    def setMarginWidth(self, margin: int, width: int) -> None: ...
    @typing.overload
    def setMarginWidth(self, margin: int, s: str) -> None: ...
    def setMarginSensitivity(self, margin: int, sens: bool) -> None: ...
    def setMarginMarkerMask(self, margin: int, mask: int) -> None: ...
    def setMarginLineNumbers(self, margin: int, lnrs: bool) -> None: ...
    def setMarginsForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setMarginsFont(self, f: QtGui.QFont) -> None: ...
    def setMarginsBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setLexer(self, lexer: QsciLexer | None = ...) -> None: ...
    def setIndentationWidth(self, width: int) -> None: ...
    def setIndentationsUseTabs(self, tabs: bool) -> None: ...
    def setIndentationGuidesForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setIndentationGuidesBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setIndentationGuides(self, enable: bool) -> None: ...
    def setIndentation(self, line: int, indentation: int) -> None: ...
    def clearFolds(self) -> None: ...
    def setFolding(
        self, fold: QsciScintilla.FoldStyle, margin: int = ...
    ) -> None: ...
    def setEolVisibility(self, visible: bool) -> None: ...
    def setEolMode(self, mode: QsciScintilla.EolMode) -> None: ...
    def setCursorPosition(self, line: int, index: int) -> None: ...
    def setColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setCaretWidth(self, width: int) -> None: ...
    def setCaretLineVisible(self, enable: bool) -> None: ...
    def setCaretLineFrameWidth(self, width: int) -> None: ...
    def setCaretLineBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setCaretForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setBackspaceUnindents(self, unindent: bool) -> None: ...
    def setBraceMatching(self, bm: QsciScintilla.BraceMatch) -> None: ...
    def setAutoIndent(self, autoindent: bool) -> None: ...
    def setAutoCompletionUseSingle(
        self, single: QsciScintilla.AutoCompletionUseSingle
    ) -> None: ...
    def setAutoCompletionThreshold(self, thresh: int) -> None: ...
    def setAutoCompletionSource(
        self, source: QsciScintilla.AutoCompletionSource
    ) -> None: ...
    def setAutoCompletionShowSingle(self, single: bool) -> None: ...
    def setAutoCompletionReplaceWord(self, replace: bool) -> None: ...
    def setAutoCompletionCaseSensitivity(self, cs: bool) -> None: ...
    def selectToMatchingBrace(self) -> None: ...
    def selectAll(self, select: bool = ...) -> None: ...
    def resetSelectionForegroundColor(self) -> None: ...
    def resetSelectionBackgroundColor(self) -> None: ...
    def replaceSelectedText(self, text: str) -> None: ...
    def removeSelectedText(self) -> None: ...
    def redo(self) -> None: ...
    def paste(self) -> None: ...
    def moveToMatchingBrace(self) -> None: ...
    def insertAt(self, text: str, line: int, index: int) -> None: ...
    def insert(self, text: str) -> None: ...
    def indent(self, line: int) -> None: ...
    def foldLine(self, line: int) -> None: ...
    def foldAll(self, children: bool = ...) -> None: ...
    def ensureLineVisible(self, line: int) -> None: ...
    def ensureCursorVisible(self) -> None: ...
    def cut(self) -> None: ...
    def copy(self) -> None: ...
    def clear(self) -> None: ...
    def callTip(self) -> None: ...
    def autoCompleteFromDocument(self) -> None: ...
    def autoCompleteFromAPIs(self) -> None: ...
    def autoCompleteFromAll(self) -> None: ...
    def append(self, text: str) -> None: ...
    def write(self, io: QtCore.QIODevice) -> bool: ...
    def wrapIndentMode(self) -> QsciScintilla.WrapIndentMode: ...
    def wrapMode(self) -> QsciScintilla.WrapMode: ...
    def wordCharacters(self) -> str: ...
    def wordAtPoint(self, point: QtCore.QPoint) -> str: ...
    def wordAtLineIndex(self, line: int, index: int) -> str: ...
    def whitespaceVisibility(self) -> QsciScintilla.WhitespaceVisibility: ...
    def whitespaceSize(self) -> int: ...
    def textHeight(self, linenr: int) -> int: ...
    @typing.overload
    def text(self) -> str: ...
    @typing.overload
    def text(self, line: int) -> str: ...
    @typing.overload
    def text(self, start: int, end: int) -> str: ...
    def tabWidth(self) -> int: ...
    def tabIndents(self) -> bool: ...
    def tabDrawMode(self) -> QsciScintilla.TabDrawMode: ...
    def setTabDrawMode(self, mode: QsciScintilla.TabDrawMode) -> None: ...
    def standardCommands(self) -> QsciCommandSet: ...
    def showUserList(
        self, id: int, list: collections.abc.Iterable[str]
    ) -> None: ...
    def setWrapIndentMode(
        self, mode: QsciScintilla.WrapIndentMode
    ) -> None: ...
    def setWhitespaceSize(self, size: int) -> None: ...
    def setWhitespaceForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setWhitespaceBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setOverwriteMode(self, overwrite: bool) -> None: ...
    def setExtraDescent(self, extra: int) -> None: ...
    def setExtraAscent(self, extra: int) -> None: ...
    def setSelectionToEol(self, filled: bool) -> None: ...
    def selectionToEol(self) -> bool: ...
    def selectedText(self) -> str: ...
    def setWrapVisualFlags(
        self,
        endFlag: QsciScintilla.WrapVisualFlag,
        startFlag: QsciScintilla.WrapVisualFlag = ...,
        indent: int = ...,
    ) -> None: ...
    def resetUnmatchedBraceIndicator(self) -> None: ...
    def setUnmatchedBraceIndicator(self, indicatorNumber: int) -> None: ...
    def setUnmatchedBraceForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setUnmatchedBraceBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def resetMatchedBraceIndicator(self) -> None: ...
    def setMatchedBraceIndicator(self, indicatorNumber: int) -> None: ...
    def setMatchedBraceForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setMatchedBraceBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setMarkerForegroundColor(
        self,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        markerNumber: int = ...,
    ) -> None: ...
    def setMarkerBackgroundColor(
        self,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        markerNumber: int = ...,
    ) -> None: ...
    def setMargins(self, margins: int) -> None: ...
    def clearMarginText(self, line: int = ...) -> None: ...
    def setMarginType(
        self, margin: int, type: QsciScintilla.MarginType
    ) -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: str, style: int) -> None: ...
    @typing.overload
    def setMarginText(
        self, line: int, text: str, style: QsciStyle
    ) -> None: ...
    @typing.overload
    def setMarginText(self, line: int, text: QsciStyledText) -> None: ...
    @typing.overload
    def setMarginText(
        self, line: int, text: collections.abc.Iterable[QsciStyledText]
    ) -> None: ...
    def setMarginOptions(self, options: int) -> None: ...
    def setMarginBackgroundColor(
        self, margin: int, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setIndicatorOutlineColor(
        self,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        indicatorNumber: int = ...,
    ) -> None: ...
    def setIndicatorHoverStyle(
        self, style: QsciScintilla.IndicatorStyle, indicatorNumber: int = ...
    ) -> None: ...
    def setIndicatorHoverForegroundColor(
        self,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        indicatorNumber: int = ...,
    ) -> None: ...
    def setIndicatorForegroundColor(
        self,
        col: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        indicatorNumber: int = ...,
    ) -> None: ...
    def setIndicatorDrawUnder(
        self, under: bool, indicatorNumber: int = ...
    ) -> None: ...
    def setHotspotWrap(self, enable: bool) -> None: ...
    def setHotspotUnderline(self, enable: bool) -> None: ...
    def setHotspotForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setHotspotBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setFont(self, f: QtGui.QFont) -> None: ...
    def setFirstVisibleLine(self, linenr: int) -> None: ...
    def setEdgeMode(self, mode: QsciScintilla.EdgeMode) -> None: ...
    def setEdgeColumn(self, colnr: int) -> None: ...
    def setEdgeColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def clearEdgeColumns(self) -> None: ...
    def addEdgeColumn(
        self, colnr: int, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setDocument(self, document: QsciDocument) -> None: ...
    def setContractedFolds(
        self, folds: collections.abc.Iterable[int]
    ) -> None: ...
    def setCallTipsVisible(self, nr: int) -> None: ...
    def setCallTipsStyle(self, style: QsciScintilla.CallTipsStyle) -> None: ...
    def setCallTipsPosition(
        self, position: QsciScintilla.CallTipsPosition
    ) -> None: ...
    def setCallTipsHighlightColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setCallTipsForegroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setCallTipsBackgroundColor(
        self, col: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setAutoCompletionWordSeparators(
        self, separators: collections.abc.Iterable[str]
    ) -> None: ...
    def setAutoCompletionFillups(self, fillups: str) -> None: ...
    def setAutoCompletionFillupsEnabled(self, enabled: bool) -> None: ...
    def setAnnotationDisplay(
        self, display: QsciScintilla.AnnotationDisplay
    ) -> None: ...
    def setFoldMarginColors(
        self,
        fore: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        back: QtGui.QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    def setScrollWidthTracking(self, enabled: bool) -> None: ...
    def scrollWidthTracking(self) -> bool: ...
    def setScrollWidth(self, pixelWidth: int) -> None: ...
    def scrollWidth(self) -> int: ...
    def resetHotspotForegroundColor(self) -> None: ...
    def resetHotspotBackgroundColor(self) -> None: ...
    def resetFoldMarginColors(self) -> None: ...
    def replace(self, replaceStr: str) -> None: ...
    @typing.overload
    def registerImage(self, id: int, pm: QtGui.QPixmap) -> None: ...
    @typing.overload
    def registerImage(self, id: int, im: QtGui.QImage) -> None: ...
    def recolor(self, start: int = ..., end: int = ...) -> None: ...
    def read(self, io: QtCore.QIODevice) -> bool: ...
    def positionFromLineIndex(self, line: int, index: int) -> int: ...
    def paper(self) -> QtGui.QColor: ...
    def overwriteMode(self) -> bool: ...
    def markerFindPrevious(self, linenr: int, mask: int) -> int: ...
    def markerFindNext(self, linenr: int, mask: int) -> int: ...
    def markerLine(self, mhandle: int) -> int: ...
    def markerDeleteHandle(self, mhandle: int) -> None: ...
    def markerDeleteAll(self, markerNumber: int = ...) -> None: ...
    def markerDelete(self, linenr: int, markerNumber: int = ...) -> None: ...
    def markersAtLine(self, linenr: int) -> int: ...
    def markerAdd(self, linenr: int, markerNumber: int) -> int: ...
    @typing.overload
    def markerDefine(
        self, sym: QsciScintilla.MarkerSymbol, markerNumber: int = ...
    ) -> int: ...
    @typing.overload
    def markerDefine(self, ch: str, markerNumber: int = ...) -> int: ...
    @typing.overload
    def markerDefine(
        self, pm: QtGui.QPixmap, markerNumber: int = ...
    ) -> int: ...
    @typing.overload
    def markerDefine(
        self, im: QtGui.QImage, markerNumber: int = ...
    ) -> int: ...
    def margins(self) -> int: ...
    def marginWidth(self, margin: int) -> int: ...
    def marginType(self, margin: int) -> QsciScintilla.MarginType: ...
    def marginSensitivity(self, margin: int) -> bool: ...
    def marginOptions(self) -> int: ...
    def marginMarkerMask(self, margin: int) -> int: ...
    def marginLineNumbers(self, margin: int) -> bool: ...
    def marginBackgroundColor(self, margin: int) -> QtGui.QColor: ...
    def lexer(self) -> QsciLexer: ...
    def length(self) -> int: ...
    def lines(self) -> int: ...
    def lineLength(self, line: int) -> int: ...
    def lineIndexFromPosition(self, position: int) -> tuple[int, int]: ...
    def lineAt(self, pos: QtCore.QPoint) -> int: ...
    def isWordCharacter(self, ch: str) -> bool: ...
    def isUtf8(self) -> bool: ...
    def isUndoAvailable(self) -> bool: ...
    def isRedoAvailable(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isModified(self) -> bool: ...
    def isListActive(self) -> bool: ...
    def isCallTipActive(self) -> bool: ...
    def indicatorDrawUnder(self, indicatorNumber: int) -> bool: ...
    def indicatorDefine(
        self, style: QsciScintilla.IndicatorStyle, indicatorNumber: int = ...
    ) -> int: ...
    def fillIndicatorRange(
        self,
        lineFrom: int,
        indexFrom: int,
        lineTo: int,
        indexTo: int,
        indicatorNumber: int,
    ) -> None: ...
    def clearIndicatorRange(
        self,
        lineFrom: int,
        indexFrom: int,
        lineTo: int,
        indexTo: int,
        indicatorNumber: int,
    ) -> None: ...
    def indentationWidth(self) -> int: ...
    def indentationsUseTabs(self) -> bool: ...
    def indentationGuides(self) -> bool: ...
    def indentation(self, line: int) -> int: ...
    def hasSelectedText(self) -> bool: ...
    def getSelection(self) -> tuple[int, int, int, int]: ...
    def getCursorPosition(self) -> tuple[int, int]: ...
    def folding(self) -> QsciScintilla.FoldStyle: ...
    def firstVisibleLine(self) -> int: ...
    def findMatchingBrace(
        self, mode: QsciScintilla.BraceMatch
    ) -> tuple[bool, int, int]: ...
    def findNext(self) -> bool: ...
    def findFirstInSelection(
        self,
        expr: str,
        re: bool,
        cs: bool,
        wo: bool,
        forward: bool = ...,
        show: bool = ...,
        posix: bool = ...,
        cxx11: bool = ...,
    ) -> bool: ...
    def findFirst(
        self,
        expr: str,
        re: bool,
        cs: bool,
        wo: bool,
        wrap: bool,
        forward: bool = ...,
        line: int = ...,
        index: int = ...,
        show: bool = ...,
        posix: bool = ...,
        cxx11: bool = ...,
    ) -> bool: ...
    def extraDescent(self) -> int: ...
    def extraAscent(self) -> int: ...
    def eolVisibility(self) -> bool: ...
    def eolMode(self) -> QsciScintilla.EolMode: ...
    def edgeMode(self) -> QsciScintilla.EdgeMode: ...
    def edgeColumn(self) -> int: ...
    def edgeColor(self) -> QtGui.QColor: ...
    def endUndoAction(self) -> None: ...
    def document(self) -> QsciDocument: ...
    def createStandardContextMenu(self) -> QtWidgets.QMenu: ...
    def convertEols(self, mode: QsciScintilla.EolMode) -> None: ...
    def contractedFolds(self) -> list[int]: ...
    def color(self) -> QtGui.QColor: ...
    def clearRegisteredImages(self) -> None: ...
    def caseSensitive(self) -> bool: ...
    def cancelList(self) -> None: ...
    def cancelFind(self) -> None: ...
    def callTipsVisible(self) -> int: ...
    def callTipsStyle(self) -> QsciScintilla.CallTipsStyle: ...
    def callTipsPosition(self) -> QsciScintilla.CallTipsPosition: ...
    def bytes(self, start: int, end: int) -> QtCore.QByteArray: ...
    def braceMatching(self) -> QsciScintilla.BraceMatch: ...
    def beginUndoAction(self) -> None: ...
    def backspaceUnindents(self) -> bool: ...
    def autoIndent(self) -> bool: ...
    def autoCompletionUseSingle(
        self,
    ) -> QsciScintilla.AutoCompletionUseSingle: ...
    def autoCompletionThreshold(self) -> int: ...
    def autoCompletionSource(self) -> QsciScintilla.AutoCompletionSource: ...
    def autoCompletionShowSingle(self) -> bool: ...
    def autoCompletionReplaceWord(self) -> bool: ...
    def autoCompletionFillupsEnabled(self) -> bool: ...
    def autoCompletionCaseSensitivity(self) -> bool: ...
    def clearAnnotations(self, line: int = ...) -> None: ...
    def annotationDisplay(self) -> QsciScintilla.AnnotationDisplay: ...
    def annotation(self, line: int) -> str: ...
    @typing.overload
    def annotate(self, line: int, text: str, style: int) -> None: ...
    @typing.overload
    def annotate(self, line: int, text: str, style: QsciStyle) -> None: ...
    @typing.overload
    def annotate(self, line: int, text: QsciStyledText) -> None: ...
    @typing.overload
    def annotate(
        self, line: int, text: collections.abc.Iterable[QsciStyledText]
    ) -> None: ...
    def apiContext(self, pos: int) -> tuple[list[str], int, int]: ...

class QsciAbstractAPIs(QtCore.QObject):
    def __init__(self, lexer: QsciLexer) -> None: ...
    def callTips(
        self,
        context: collections.abc.Iterable[str],
        commas: int,
        style: QsciScintilla.CallTipsStyle,
        shifts: collections.abc.Iterable[int],
    ) -> list[str]: ...
    def autoCompletionSelected(self, selection: str) -> None: ...
    def updateAutoCompletionList(
        self,
        context: collections.abc.Iterable[str],
        list: collections.abc.Iterable[str],
    ) -> list[str]: ...
    def lexer(self) -> QsciLexer: ...

class QsciAPIs(QsciAbstractAPIs):
    def __init__(self, lexer: QsciLexer) -> None: ...

    apiPreparationFinished: typing.ClassVar[QtCore.pyqtSignal]
    apiPreparationStarted: typing.ClassVar[QtCore.pyqtSignal]
    apiPreparationCancelled: typing.ClassVar[QtCore.pyqtSignal]
    def callTips(
        self,
        context: collections.abc.Iterable[str],
        commas: int,
        style: QsciScintilla.CallTipsStyle,
        shifts: collections.abc.Iterable[int],
    ) -> list[str]: ...
    def autoCompletionSelected(self, selection: str) -> None: ...
    def updateAutoCompletionList(
        self,
        context: collections.abc.Iterable[str],
        list: collections.abc.Iterable[str],
    ) -> list[str]: ...
    def installedAPIFiles(self) -> list[str]: ...
    def event(self, e: QtCore.QEvent) -> bool: ...
    def savePrepared(self, filename: str = ...) -> bool: ...
    def loadPrepared(self, filename: str = ...) -> bool: ...
    def isPrepared(self, filename: str = ...) -> bool: ...
    def defaultPreparedName(self) -> str: ...
    def cancelPreparation(self) -> None: ...
    def prepare(self) -> None: ...
    def remove(self, entry: str) -> None: ...
    def load(self, fname: str) -> bool: ...
    def clear(self) -> None: ...
    def add(self, entry: str) -> None: ...

class QsciCommand(PyQt6.sip.wrapper):
    class Command(enum.Enum):
        LineDown = ...
        LineDownExtend = ...
        LineDownRectExtend = ...
        LineScrollDown = ...
        LineUp = ...
        LineUpExtend = ...
        LineUpRectExtend = ...
        LineScrollUp = ...
        ScrollToStart = ...
        ScrollToEnd = ...
        VerticalCentreCaret = ...
        ParaDown = ...
        ParaDownExtend = ...
        ParaUp = ...
        ParaUpExtend = ...
        CharLeft = ...
        CharLeftExtend = ...
        CharLeftRectExtend = ...
        CharRight = ...
        CharRightExtend = ...
        CharRightRectExtend = ...
        WordLeft = ...
        WordLeftExtend = ...
        WordRight = ...
        WordRightExtend = ...
        WordLeftEnd = ...
        WordLeftEndExtend = ...
        WordRightEnd = ...
        WordRightEndExtend = ...
        WordPartLeft = ...
        WordPartLeftExtend = ...
        WordPartRight = ...
        WordPartRightExtend = ...
        Home = ...
        HomeExtend = ...
        HomeRectExtend = ...
        HomeDisplay = ...
        HomeDisplayExtend = ...
        HomeWrap = ...
        HomeWrapExtend = ...
        VCHome = ...
        VCHomeExtend = ...
        VCHomeRectExtend = ...
        VCHomeWrap = ...
        VCHomeWrapExtend = ...
        LineEnd = ...
        LineEndExtend = ...
        LineEndRectExtend = ...
        LineEndDisplay = ...
        LineEndDisplayExtend = ...
        LineEndWrap = ...
        LineEndWrapExtend = ...
        DocumentStart = ...
        DocumentStartExtend = ...
        DocumentEnd = ...
        DocumentEndExtend = ...
        PageUp = ...
        PageUpExtend = ...
        PageUpRectExtend = ...
        PageDown = ...
        PageDownExtend = ...
        PageDownRectExtend = ...
        StutteredPageUp = ...
        StutteredPageUpExtend = ...
        StutteredPageDown = ...
        StutteredPageDownExtend = ...
        Delete = ...
        DeleteBack = ...
        DeleteBackNotLine = ...
        DeleteWordLeft = ...
        DeleteWordRight = ...
        DeleteWordRightEnd = ...
        DeleteLineLeft = ...
        DeleteLineRight = ...
        LineDelete = ...
        LineCut = ...
        LineCopy = ...
        LineTranspose = ...
        LineDuplicate = ...
        SelectAll = ...
        MoveSelectedLinesUp = ...
        MoveSelectedLinesDown = ...
        SelectionDuplicate = ...
        SelectionLowerCase = ...
        SelectionUpperCase = ...
        SelectionCut = ...
        SelectionCopy = ...
        Paste = ...
        EditToggleOvertype = ...
        Newline = ...
        Formfeed = ...
        Tab = ...
        Backtab = ...
        Cancel = ...
        Undo = ...
        Redo = ...
        ZoomIn = ...
        ZoomOut = ...
        ReverseLines = ...

    def description(self) -> str: ...
    @staticmethod
    def validKey(key: int) -> bool: ...
    def alternateKey(self) -> int: ...
    def key(self) -> int: ...
    def setAlternateKey(self, altkey: int) -> None: ...
    def setKey(self, key: int) -> None: ...
    def execute(self) -> None: ...
    def command(self) -> QsciCommand.Command: ...

class QsciCommandSet(PyQt6.sip.wrapper):
    def find(self, command: QsciCommand.Command) -> QsciCommand: ...
    def boundTo(self, key: int) -> QsciCommand: ...
    def clearAlternateKeys(self) -> None: ...
    def clearKeys(self) -> None: ...
    def commands(self) -> list[QsciCommand]: ...
    def writeSettings(
        self, qs: QtCore.QSettings, prefix: str | None = ...
    ) -> bool: ...
    def readSettings(
        self, qs: QtCore.QSettings, prefix: str | None = ...
    ) -> bool: ...

class QsciDocument(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QsciDocument) -> None: ...

class QsciLexer(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    propertyChanged: typing.ClassVar[QtCore.pyqtSignal]
    paperChanged: typing.ClassVar[QtCore.pyqtSignal]
    fontChanged: typing.ClassVar[QtCore.pyqtSignal]
    eolFillChanged: typing.ClassVar[QtCore.pyqtSignal]
    colorChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setPaper(
        self, c: QtGui.QColor | QtCore.Qt.GlobalColor | int, style: int = ...
    ) -> None: ...
    def setFont(self, f: QtGui.QFont, style: int = ...) -> None: ...
    def setEolFill(self, eolfill: bool, style: int = ...) -> None: ...
    def setColor(
        self, c: QtGui.QColor | QtCore.Qt.GlobalColor | int, style: int = ...
    ) -> None: ...
    def setAutoIndentStyle(self, autoindentstyle: int) -> None: ...
    def writeSettings(
        self, qs: QtCore.QSettings, prefix: str | None = ...
    ) -> bool: ...
    def readSettings(
        self, qs: QtCore.QSettings, prefix: str | None = ...
    ) -> bool: ...
    def wordCharacters(self) -> str: ...
    def styleBitsNeeded(self) -> int: ...
    def setDefaultPaper(
        self, c: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setDefaultFont(self, f: QtGui.QFont) -> None: ...
    def setDefaultColor(
        self, c: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setAPIs(self, apis: QsciAbstractAPIs) -> None: ...
    def refreshProperties(self) -> None: ...
    def editor(self) -> QsciScintilla: ...
    def defaultStyle(self) -> int: ...
    @typing.overload
    def defaultPaper(self) -> QtGui.QColor: ...
    @typing.overload
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    @typing.overload
    def defaultFont(self) -> QtGui.QFont: ...
    @typing.overload
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    @typing.overload
    def defaultColor(self) -> QtGui.QColor: ...
    @typing.overload
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def paper(self, style: int) -> QtGui.QColor: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def indentationGuideView(self) -> int: ...
    def font(self, style: int) -> QtGui.QFont: ...
    def eolFill(self, style: int) -> bool: ...
    def color(self, style: int) -> QtGui.QColor: ...
    def caseSensitive(self) -> bool: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockLookback(self) -> int: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoIndentStyle(self) -> int: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def autoCompletionFillups(self) -> bytes: ...
    def apis(self) -> QsciAbstractAPIs: ...
    def lexerId(self) -> int: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerAsm(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Number: int = ...
    DoubleQuotedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    CPUInstruction: int = ...
    FPUInstruction: int = ...
    Register: int = ...
    Directive: int = ...
    DirectiveOperand: int = ...
    BlockComment: int = ...
    SingleQuotedString: int = ...
    UnclosedString: int = ...
    ExtendedInstruction: int = ...
    CommentDirective: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldSyntaxBased(self, syntax_based: bool) -> None: ...
    def setCommentDelimiter(self, delimeter: str) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldSyntaxBased(self) -> bool: ...
    def commentDelimiter(self) -> str: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...

class QsciLexerAVS(QsciLexer):
    Default: int = ...
    BlockComment: int = ...
    NestedBlockComment: int = ...
    LineComment: int = ...
    Number: int = ...
    Operator: int = ...
    Identifier: int = ...
    String: int = ...
    TripleString: int = ...
    Keyword: int = ...
    Filter: int = ...
    Plugin: int = ...
    Function: int = ...
    ClipProperty: int = ...
    KeywordSet6: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerBash(QsciLexer):
    Default: int = ...
    Error: int = ...
    Comment: int = ...
    Number: int = ...
    Keyword: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    Scalar: int = ...
    ParameterExpansion: int = ...
    Backticks: int = ...
    HereDocumentDelimiter: int = ...
    SingleQuotedHereDocument: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerBatch(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Keyword: int = ...
    Label: int = ...
    HideCommandChar: int = ...
    ExternalCommand: int = ...
    Variable: int = ...
    Operator: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def caseSensitive(self) -> bool: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerCMake(QsciLexer):
    Default: int = ...
    Comment: int = ...
    String: int = ...
    StringLeftQuote: int = ...
    StringRightQuote: int = ...
    Function: int = ...
    Variable: int = ...
    Label: int = ...
    KeywordSet3: int = ...
    BlockWhile: int = ...
    BlockForeach: int = ...
    BlockIf: int = ...
    BlockMacro: int = ...
    StringVariable: int = ...
    Number: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerCoffeeScript(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    CommentDoc: int = ...
    Number: int = ...
    Keyword: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    UUID: int = ...
    PreProcessor: int = ...
    Operator: int = ...
    Identifier: int = ...
    UnclosedString: int = ...
    VerbatimString: int = ...
    Regex: int = ...
    CommentLineDoc: int = ...
    KeywordSet2: int = ...
    CommentDocKeyword: int = ...
    CommentDocKeywordError: int = ...
    GlobalClass: int = ...
    CommentBlock: int = ...
    BlockRegex: int = ...
    BlockRegexComment: int = ...
    InstanceProperty: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setStylePreprocessor(self, style: bool) -> None: ...
    def stylePreprocessor(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setDollarsAllowed(self, allowed: bool) -> None: ...
    def dollarsAllowed(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerCPP(QsciLexer):
    Default: int = ...
    InactiveDefault: int = ...
    Comment: int = ...
    InactiveComment: int = ...
    CommentLine: int = ...
    InactiveCommentLine: int = ...
    CommentDoc: int = ...
    InactiveCommentDoc: int = ...
    Number: int = ...
    InactiveNumber: int = ...
    Keyword: int = ...
    InactiveKeyword: int = ...
    DoubleQuotedString: int = ...
    InactiveDoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    InactiveSingleQuotedString: int = ...
    UUID: int = ...
    InactiveUUID: int = ...
    PreProcessor: int = ...
    InactivePreProcessor: int = ...
    Operator: int = ...
    InactiveOperator: int = ...
    Identifier: int = ...
    InactiveIdentifier: int = ...
    UnclosedString: int = ...
    InactiveUnclosedString: int = ...
    VerbatimString: int = ...
    InactiveVerbatimString: int = ...
    Regex: int = ...
    InactiveRegex: int = ...
    CommentLineDoc: int = ...
    InactiveCommentLineDoc: int = ...
    KeywordSet2: int = ...
    InactiveKeywordSet2: int = ...
    CommentDocKeyword: int = ...
    InactiveCommentDocKeyword: int = ...
    CommentDocKeywordError: int = ...
    InactiveCommentDocKeywordError: int = ...
    GlobalClass: int = ...
    InactiveGlobalClass: int = ...
    RawString: int = ...
    InactiveRawString: int = ...
    TripleQuotedVerbatimString: int = ...
    InactiveTripleQuotedVerbatimString: int = ...
    HashQuotedString: int = ...
    InactiveHashQuotedString: int = ...
    PreProcessorComment: int = ...
    InactivePreProcessorComment: int = ...
    PreProcessorCommentLineDoc: int = ...
    InactivePreProcessorCommentLineDoc: int = ...
    UserLiteral: int = ...
    InactiveUserLiteral: int = ...
    TaskMarker: int = ...
    InactiveTaskMarker: int = ...
    EscapeSequence: int = ...
    InactiveEscapeSequence: int = ...

    def __init__(
        self,
        parent: QtCore.QObject | None = ...,
        caseInsensitiveKeywords: bool = ...,
    ) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setStylePreprocessor(self, style: bool) -> None: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def verbatimStringEscapeSequencesAllowed(self) -> bool: ...
    def setVerbatimStringEscapeSequencesAllowed(
        self, allowed: bool
    ) -> None: ...
    def highlightEscapeSequences(self) -> bool: ...
    def setHighlightEscapeSequences(self, enabled: bool) -> None: ...
    def highlightBackQuotedStrings(self) -> bool: ...
    def setHighlightBackQuotedStrings(self, enabled: bool) -> None: ...
    def highlightHashQuotedStrings(self) -> bool: ...
    def setHighlightHashQuotedStrings(self, enable: bool) -> None: ...
    def highlightTripleQuotedStrings(self) -> bool: ...
    def setHighlightTripleQuotedStrings(self, enable: bool) -> None: ...
    def dollarsAllowed(self) -> bool: ...
    def setDollarsAllowed(self, allowed: bool) -> None: ...
    def stylePreprocessor(self) -> bool: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerCSharp(QsciLexerCPP):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...

class QsciLexerCSS(QsciLexer):
    Default: int = ...
    Tag: int = ...
    ClassSelector: int = ...
    PseudoClass: int = ...
    UnknownPseudoClass: int = ...
    Operator: int = ...
    CSS1Property: int = ...
    UnknownProperty: int = ...
    Value: int = ...
    Comment: int = ...
    IDSelector: int = ...
    Important: int = ...
    AtRule: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    CSS2Property: int = ...
    Attribute: int = ...
    CSS3Property: int = ...
    PseudoElement: int = ...
    ExtendedCSSProperty: int = ...
    ExtendedPseudoClass: int = ...
    ExtendedPseudoElement: int = ...
    MediaRule: int = ...
    Variable: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def SCSSLanguage(self) -> bool: ...
    def setSCSSLanguage(self, enable: bool) -> None: ...
    def LessLanguage(self) -> bool: ...
    def setLessLanguage(self, enable: bool) -> None: ...
    def HSSLanguage(self) -> bool: ...
    def setHSSLanguage(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerCustom(QsciLexer):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def styleText(self, start: int, end: int) -> None: ...
    def startStyling(self, pos: int, styleBits: int = ...) -> None: ...
    @typing.overload
    def setStyling(self, length: int, style: int) -> None: ...
    @typing.overload
    def setStyling(self, length: int, style: QsciStyle) -> None: ...
    def styleBitsNeeded(self) -> int: ...
    def setEditor(self, editor: QsciScintilla) -> None: ...

class QsciLexerD(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    CommentDoc: int = ...
    CommentNested: int = ...
    Number: int = ...
    Keyword: int = ...
    KeywordSecondary: int = ...
    KeywordDoc: int = ...
    Typedefs: int = ...
    String: int = ...
    UnclosedString: int = ...
    Character: int = ...
    Operator: int = ...
    Identifier: int = ...
    CommentLineDoc: int = ...
    CommentDocKeyword: int = ...
    CommentDocKeywordError: int = ...
    BackquoteString: int = ...
    RawString: int = ...
    KeywordSet5: int = ...
    KeywordSet6: int = ...
    KeywordSet7: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerDiff(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Command: int = ...
    Header: int = ...
    Position: int = ...
    LineRemoved: int = ...
    LineAdded: int = ...
    LineChanged: int = ...
    AddingPatchAdded: int = ...
    RemovingPatchAdded: int = ...
    AddingPatchRemoved: int = ...
    RemovingPatchRemoved: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerFortran77(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Number: int = ...
    SingleQuotedString: int = ...
    DoubleQuotedString: int = ...
    UnclosedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    Keyword: int = ...
    IntrinsicFunction: int = ...
    ExtendedFunction: int = ...
    PreProcessor: int = ...
    DottedOperator: int = ...
    Label: int = ...
    Continuation: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerFortran(QsciLexerFortran77):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerHex(QsciLexer):
    Default: int = ...
    RecordStart: int = ...
    RecordType: int = ...
    UnknownRecordType: int = ...
    ByteCount: int = ...
    IncorrectByteCount: int = ...
    NoAddress: int = ...
    DataAddress: int = ...
    RecordCount: int = ...
    StartAddress: int = ...
    ExtendedAddress: int = ...
    OddData: int = ...
    EvenData: int = ...
    UnknownData: int = ...
    Checksum: int = ...
    IncorrectChecksum: int = ...
    TrailingGarbage: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...

class QsciLexerHTML(QsciLexer):
    Default: int = ...
    Tag: int = ...
    UnknownTag: int = ...
    Attribute: int = ...
    UnknownAttribute: int = ...
    HTMLNumber: int = ...
    HTMLDoubleQuotedString: int = ...
    HTMLSingleQuotedString: int = ...
    OtherInTag: int = ...
    HTMLComment: int = ...
    Entity: int = ...
    XMLTagEnd: int = ...
    XMLStart: int = ...
    XMLEnd: int = ...
    Script: int = ...
    ASPAtStart: int = ...
    ASPStart: int = ...
    CDATA: int = ...
    PHPStart: int = ...
    HTMLValue: int = ...
    ASPXCComment: int = ...
    SGMLDefault: int = ...
    SGMLCommand: int = ...
    SGMLParameter: int = ...
    SGMLDoubleQuotedString: int = ...
    SGMLSingleQuotedString: int = ...
    SGMLError: int = ...
    SGMLSpecial: int = ...
    SGMLEntity: int = ...
    SGMLComment: int = ...
    SGMLParameterComment: int = ...
    SGMLBlockDefault: int = ...
    JavaScriptStart: int = ...
    JavaScriptDefault: int = ...
    JavaScriptComment: int = ...
    JavaScriptCommentLine: int = ...
    JavaScriptCommentDoc: int = ...
    JavaScriptNumber: int = ...
    JavaScriptWord: int = ...
    JavaScriptKeyword: int = ...
    JavaScriptDoubleQuotedString: int = ...
    JavaScriptSingleQuotedString: int = ...
    JavaScriptSymbol: int = ...
    JavaScriptUnclosedString: int = ...
    JavaScriptRegex: int = ...
    ASPJavaScriptStart: int = ...
    ASPJavaScriptDefault: int = ...
    ASPJavaScriptComment: int = ...
    ASPJavaScriptCommentLine: int = ...
    ASPJavaScriptCommentDoc: int = ...
    ASPJavaScriptNumber: int = ...
    ASPJavaScriptWord: int = ...
    ASPJavaScriptKeyword: int = ...
    ASPJavaScriptDoubleQuotedString: int = ...
    ASPJavaScriptSingleQuotedString: int = ...
    ASPJavaScriptSymbol: int = ...
    ASPJavaScriptUnclosedString: int = ...
    ASPJavaScriptRegex: int = ...
    VBScriptStart: int = ...
    VBScriptDefault: int = ...
    VBScriptComment: int = ...
    VBScriptNumber: int = ...
    VBScriptKeyword: int = ...
    VBScriptString: int = ...
    VBScriptIdentifier: int = ...
    VBScriptUnclosedString: int = ...
    ASPVBScriptStart: int = ...
    ASPVBScriptDefault: int = ...
    ASPVBScriptComment: int = ...
    ASPVBScriptNumber: int = ...
    ASPVBScriptKeyword: int = ...
    ASPVBScriptString: int = ...
    ASPVBScriptIdentifier: int = ...
    ASPVBScriptUnclosedString: int = ...
    PythonStart: int = ...
    PythonDefault: int = ...
    PythonComment: int = ...
    PythonNumber: int = ...
    PythonDoubleQuotedString: int = ...
    PythonSingleQuotedString: int = ...
    PythonKeyword: int = ...
    PythonTripleSingleQuotedString: int = ...
    PythonTripleDoubleQuotedString: int = ...
    PythonClassName: int = ...
    PythonFunctionMethodName: int = ...
    PythonOperator: int = ...
    PythonIdentifier: int = ...
    ASPPythonStart: int = ...
    ASPPythonDefault: int = ...
    ASPPythonComment: int = ...
    ASPPythonNumber: int = ...
    ASPPythonDoubleQuotedString: int = ...
    ASPPythonSingleQuotedString: int = ...
    ASPPythonKeyword: int = ...
    ASPPythonTripleSingleQuotedString: int = ...
    ASPPythonTripleDoubleQuotedString: int = ...
    ASPPythonClassName: int = ...
    ASPPythonFunctionMethodName: int = ...
    ASPPythonOperator: int = ...
    ASPPythonIdentifier: int = ...
    PHPDefault: int = ...
    PHPDoubleQuotedString: int = ...
    PHPSingleQuotedString: int = ...
    PHPKeyword: int = ...
    PHPNumber: int = ...
    PHPVariable: int = ...
    PHPComment: int = ...
    PHPCommentLine: int = ...
    PHPDoubleQuotedVariable: int = ...
    PHPOperator: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setCaseSensitiveTags(self, sens: bool) -> None: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def makoTemplates(self) -> bool: ...
    def setMakoTemplates(self, enable: bool) -> None: ...
    def foldScriptHeredocs(self) -> bool: ...
    def setFoldScriptHeredocs(self, fold: bool) -> None: ...
    def foldScriptComments(self) -> bool: ...
    def setFoldScriptComments(self, fold: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def djangoTemplates(self) -> bool: ...
    def setDjangoTemplates(self, enable: bool) -> None: ...
    def caseSensitiveTags(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def caseSensitive(self) -> bool: ...
    def autoCompletionFillups(self) -> bytes: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerIDL(QsciLexerCPP):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...

class QsciLexerIntelHex(QsciLexerHex):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerJava(QsciLexerCPP):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def keywords(self, set: int) -> str: ...
    def language(self) -> str: ...

class QsciLexerJavaScript(QsciLexerCPP):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def language(self) -> str: ...

class QsciLexerJSON(QsciLexer):
    Default: int = ...
    Number: int = ...
    String: int = ...
    UnclosedString: int = ...
    Property: int = ...
    EscapeSequence: int = ...
    CommentLine: int = ...
    CommentBlock: int = ...
    Operator: int = ...
    IRI: int = ...
    IRICompact: int = ...
    Keyword: int = ...
    KeywordLD: int = ...
    Error: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def highlightEscapeSequences(self) -> bool: ...
    def setHighlightEscapeSequences(self, highlight: bool) -> None: ...
    def highlightComments(self) -> bool: ...
    def setHighlightComments(self, highlight: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerLua(QsciLexer):
    Default: int = ...
    Comment: int = ...
    LineComment: int = ...
    Number: int = ...
    Keyword: int = ...
    String: int = ...
    Character: int = ...
    LiteralString: int = ...
    Preprocessor: int = ...
    Operator: int = ...
    Identifier: int = ...
    UnclosedString: int = ...
    BasicFunctions: int = ...
    StringTableMathsFunctions: int = ...
    CoroutinesIOSystemFacilities: int = ...
    KeywordSet5: int = ...
    KeywordSet6: int = ...
    KeywordSet7: int = ...
    KeywordSet8: int = ...
    Label: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerMakefile(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Preprocessor: int = ...
    Variable: int = ...
    Operator: int = ...
    Target: int = ...
    Error: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerMarkdown(QsciLexer):
    Default: int = ...
    Special: int = ...
    StrongEmphasisAsterisks: int = ...
    StrongEmphasisUnderscores: int = ...
    EmphasisAsterisks: int = ...
    EmphasisUnderscores: int = ...
    Header1: int = ...
    Header2: int = ...
    Header3: int = ...
    Header4: int = ...
    Header5: int = ...
    Header6: int = ...
    Prechar: int = ...
    UnorderedListItem: int = ...
    OrderedListItem: int = ...
    BlockQuote: int = ...
    StrikeOut: int = ...
    HorizontalRule: int = ...
    Link: int = ...
    CodeBackticks: int = ...
    CodeDoubleBackticks: int = ...
    CodeBlock: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerMASM(QsciLexerAsm):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerMatlab(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Command: int = ...
    Number: int = ...
    Keyword: int = ...
    SingleQuotedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    DoubleQuotedString: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerNASM(QsciLexerAsm):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerOctave(QsciLexerMatlab):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPascal(QsciLexer):
    Default: int = ...
    Identifier: int = ...
    Comment: int = ...
    CommentParenthesis: int = ...
    CommentLine: int = ...
    PreProcessor: int = ...
    PreProcessorParenthesis: int = ...
    Number: int = ...
    HexNumber: int = ...
    Keyword: int = ...
    SingleQuotedString: int = ...
    UnclosedString: int = ...
    Character: int = ...
    Operator: int = ...
    Asm: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def smartHighlighting(self) -> bool: ...
    def setSmartHighlighting(self, enabled: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPerl(QsciLexer):
    Default: int = ...
    Error: int = ...
    Comment: int = ...
    POD: int = ...
    Number: int = ...
    Keyword: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    Scalar: int = ...
    Array: int = ...
    Hash: int = ...
    SymbolTable: int = ...
    Regex: int = ...
    Substitution: int = ...
    Backticks: int = ...
    DataSection: int = ...
    HereDocumentDelimiter: int = ...
    SingleQuotedHereDocument: int = ...
    DoubleQuotedHereDocument: int = ...
    BacktickHereDocument: int = ...
    QuotedStringQ: int = ...
    QuotedStringQQ: int = ...
    QuotedStringQX: int = ...
    QuotedStringQR: int = ...
    QuotedStringQW: int = ...
    PODVerbatim: int = ...
    SubroutinePrototype: int = ...
    FormatIdentifier: int = ...
    FormatBody: int = ...
    DoubleQuotedStringVar: int = ...
    Translation: int = ...
    RegexVar: int = ...
    SubstitutionVar: int = ...
    BackticksVar: int = ...
    DoubleQuotedHereDocumentVar: int = ...
    BacktickHereDocumentVar: int = ...
    QuotedStringQQVar: int = ...
    QuotedStringQXVar: int = ...
    QuotedStringQRVar: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldPODBlocks(self) -> bool: ...
    def setFoldPODBlocks(self, fold: bool) -> None: ...
    def foldPackages(self) -> bool: ...
    def setFoldPackages(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPostScript(QsciLexer):
    Default: int = ...
    Comment: int = ...
    DSCComment: int = ...
    DSCCommentValue: int = ...
    Number: int = ...
    Name: int = ...
    Keyword: int = ...
    Literal: int = ...
    ImmediateEvalLiteral: int = ...
    ArrayParenthesis: int = ...
    DictionaryParenthesis: int = ...
    ProcedureParenthesis: int = ...
    Text: int = ...
    HexString: int = ...
    Base85String: int = ...
    BadStringCharacter: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setLevel(self, level: int) -> None: ...
    def setTokenize(self, tokenize: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def level(self) -> int: ...
    def tokenize(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPO(QsciLexer):
    Default: int = ...
    Comment: int = ...
    MessageId: int = ...
    MessageIdText: int = ...
    MessageString: int = ...
    MessageStringText: int = ...
    MessageContext: int = ...
    MessageContextText: int = ...
    Fuzzy: int = ...
    ProgrammerComment: int = ...
    Reference: int = ...
    Flags: int = ...
    MessageIdTextEOL: int = ...
    MessageStringTextEOL: int = ...
    MessageContextTextEOL: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPOV(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    Number: int = ...
    Operator: int = ...
    Identifier: int = ...
    String: int = ...
    UnclosedString: int = ...
    Directive: int = ...
    BadDirective: int = ...
    ObjectsCSGAppearance: int = ...
    TypesModifiersItems: int = ...
    PredefinedIdentifiers: int = ...
    PredefinedFunctions: int = ...
    KeywordSet6: int = ...
    KeywordSet7: int = ...
    KeywordSet8: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldDirectives(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldDirectives(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerProperties(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Section: int = ...
    Assignment: int = ...
    DefaultValue: int = ...
    Key: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def initialSpaces(self) -> bool: ...
    def setInitialSpaces(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerPython(QsciLexer):
    class IndentationWarning(enum.Enum):
        NoWarning = ...
        Inconsistent = ...
        TabsAfterSpaces = ...
        Spaces = ...
        Tabs = ...

    Default: int = ...
    Comment: int = ...
    Number: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    Keyword: int = ...
    TripleSingleQuotedString: int = ...
    TripleDoubleQuotedString: int = ...
    ClassName: int = ...
    FunctionMethodName: int = ...
    Operator: int = ...
    Identifier: int = ...
    CommentBlock: int = ...
    UnclosedString: int = ...
    HighlightedIdentifier: int = ...
    Decorator: int = ...
    DoubleQuotedFString: int = ...
    SingleQuotedFString: int = ...
    TripleSingleQuotedFString: int = ...
    TripleDoubleQuotedFString: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setIndentationWarning(
        self, warn: QsciLexerPython.IndentationWarning
    ) -> None: ...
    def setFoldQuotes(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def v3BytesAllowed(self) -> bool: ...
    def setV3BytesAllowed(self, allowed: bool) -> None: ...
    def v3BinaryOctalAllowed(self) -> bool: ...
    def setV3BinaryOctalAllowed(self, allowed: bool) -> None: ...
    def v2UnicodeAllowed(self) -> bool: ...
    def setV2UnicodeAllowed(self, allowed: bool) -> None: ...
    def stringsOverNewlineAllowed(self) -> bool: ...
    def setStringsOverNewlineAllowed(self, allowed: bool) -> None: ...
    def highlightSubidentifiers(self) -> bool: ...
    def setHighlightSubidentifiers(self, enabled: bool) -> None: ...
    def indentationWarning(self) -> QsciLexerPython.IndentationWarning: ...
    def foldQuotes(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def indentationGuideView(self) -> int: ...
    def braceStyle(self) -> int: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockLookback(self) -> int: ...
    def autoCompletionWordSeparators(self) -> list[str]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerRuby(QsciLexer):
    Default: int = ...
    Error: int = ...
    Comment: int = ...
    POD: int = ...
    Number: int = ...
    Keyword: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    ClassName: int = ...
    FunctionMethodName: int = ...
    Operator: int = ...
    Identifier: int = ...
    Regex: int = ...
    Global: int = ...
    Symbol: int = ...
    ModuleName: int = ...
    InstanceVariable: int = ...
    ClassVariable: int = ...
    Backticks: int = ...
    DataSection: int = ...
    HereDocumentDelimiter: int = ...
    HereDocument: int = ...
    PercentStringq: int = ...
    PercentStringQ: int = ...
    PercentStringx: int = ...
    PercentStringr: int = ...
    PercentStringw: int = ...
    DemotedKeyword: int = ...
    Stdin: int = ...
    Stdout: int = ...
    Stderr: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def blockStartKeyword(self) -> tuple[bytes, int]: ...
    def blockStart(self) -> tuple[bytes, int]: ...
    def blockEnd(self) -> tuple[bytes, int]: ...
    def description(self, style: int) -> str: ...
    def keywords(self, a0: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerSpice(QsciLexer):
    Default: int = ...
    Identifier: int = ...
    Command: int = ...
    Function: int = ...
    Parameter: int = ...
    Number: int = ...
    Delimiter: int = ...
    Value: int = ...
    Comment: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def keywords(self, set: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerSQL(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    CommentDoc: int = ...
    Number: int = ...
    Keyword: int = ...
    DoubleQuotedString: int = ...
    SingleQuotedString: int = ...
    PlusKeyword: int = ...
    PlusPrompt: int = ...
    Operator: int = ...
    Identifier: int = ...
    PlusComment: int = ...
    CommentLineHash: int = ...
    CommentDocKeyword: int = ...
    CommentDocKeywordError: int = ...
    KeywordSet5: int = ...
    KeywordSet6: int = ...
    KeywordSet7: int = ...
    KeywordSet8: int = ...
    QuotedIdentifier: int = ...
    QuotedOperator: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def setBackslashEscapes(self, enable: bool) -> None: ...
    def quotedIdentifiers(self) -> bool: ...
    def setQuotedIdentifiers(self, enable: bool) -> None: ...
    def hashComments(self) -> bool: ...
    def setHashComments(self, enable: bool) -> None: ...
    def foldOnlyBegin(self) -> bool: ...
    def setFoldOnlyBegin(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def dottedWords(self) -> bool: ...
    def setDottedWords(self, enable: bool) -> None: ...
    def backslashEscapes(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerSRec(QsciLexerHex):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerTCL(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    Number: int = ...
    QuotedKeyword: int = ...
    QuotedString: int = ...
    Operator: int = ...
    Identifier: int = ...
    Substitution: int = ...
    SubstitutionBrace: int = ...
    Modifier: int = ...
    ExpandKeyword: int = ...
    TCLKeyword: int = ...
    TkKeyword: int = ...
    ITCLKeyword: int = ...
    TkCommand: int = ...
    KeywordSet6: int = ...
    KeywordSet7: int = ...
    KeywordSet8: int = ...
    KeywordSet9: int = ...
    CommentBox: int = ...
    CommentBlock: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerTekHex(QsciLexerHex):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def description(self, style: int) -> str: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerTeX(QsciLexer):
    Default: int = ...
    Special: int = ...
    Group: int = ...
    Symbol: int = ...
    Command: int = ...
    Text: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def processIf(self) -> bool: ...
    def setProcessIf(self, enable: bool) -> None: ...
    def processComments(self) -> bool: ...
    def setProcessComments(self, enable: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerVerilog(QsciLexer):
    Default: int = ...
    InactiveDefault: int = ...
    Comment: int = ...
    InactiveComment: int = ...
    CommentLine: int = ...
    InactiveCommentLine: int = ...
    CommentBang: int = ...
    InactiveCommentBang: int = ...
    Number: int = ...
    InactiveNumber: int = ...
    Keyword: int = ...
    InactiveKeyword: int = ...
    String: int = ...
    InactiveString: int = ...
    KeywordSet2: int = ...
    InactiveKeywordSet2: int = ...
    SystemTask: int = ...
    InactiveSystemTask: int = ...
    Preprocessor: int = ...
    InactivePreprocessor: int = ...
    Operator: int = ...
    InactiveOperator: int = ...
    Identifier: int = ...
    InactiveIdentifier: int = ...
    UnclosedString: int = ...
    InactiveUnclosedString: int = ...
    UserKeywordSet: int = ...
    InactiveUserKeywordSet: int = ...
    CommentKeyword: int = ...
    InactiveCommentKeyword: int = ...
    DeclareInputPort: int = ...
    InactiveDeclareInputPort: int = ...
    DeclareOutputPort: int = ...
    InactiveDeclareOutputPort: int = ...
    DeclareInputOutputPort: int = ...
    InactiveDeclareInputOutputPort: int = ...
    PortConnection: int = ...
    InactivePortConnection: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def foldAtModule(self) -> bool: ...
    def setFoldAtModule(self, fold: bool) -> None: ...
    def foldPreprocessor(self) -> bool: ...
    def setFoldPreprocessor(self, fold: bool) -> None: ...
    def foldCompact(self) -> bool: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldAtElse(self) -> bool: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def wordCharacters(self) -> str: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerVHDL(QsciLexer):
    Default: int = ...
    Comment: int = ...
    CommentLine: int = ...
    Number: int = ...
    String: int = ...
    Operator: int = ...
    Identifier: int = ...
    UnclosedString: int = ...
    Keyword: int = ...
    StandardOperator: int = ...
    Attribute: int = ...
    StandardFunction: int = ...
    StandardPackage: int = ...
    StandardType: int = ...
    KeywordSet7: int = ...
    CommentBlock: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldAtParenthesis(self, fold: bool) -> None: ...
    def setFoldAtBegin(self, fold: bool) -> None: ...
    def setFoldAtElse(self, fold: bool) -> None: ...
    def setFoldCompact(self, fold: bool) -> None: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldAtParenthesis(self) -> bool: ...
    def foldAtBegin(self) -> bool: ...
    def foldAtElse(self) -> bool: ...
    def foldCompact(self) -> bool: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def braceStyle(self) -> int: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerXML(QsciLexerHTML):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def scriptsStyled(self) -> bool: ...
    def setScriptsStyled(self, styled: bool) -> None: ...
    def refreshProperties(self) -> None: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciLexerYAML(QsciLexer):
    Default: int = ...
    Comment: int = ...
    Identifier: int = ...
    Keyword: int = ...
    Number: int = ...
    Reference: int = ...
    DocumentDelimiter: int = ...
    TextBlockMarker: int = ...
    SyntaxErrorMarker: int = ...
    Operator: int = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def writeProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def readProperties(self, qs: QtCore.QSettings, prefix: str) -> bool: ...
    def setFoldComments(self, fold: bool) -> None: ...
    def foldComments(self) -> bool: ...
    def refreshProperties(self) -> None: ...
    def description(self, style: int) -> str: ...
    def keywords(self, set: int) -> str: ...
    def defaultPaper(self, style: int) -> QtGui.QColor: ...
    def defaultFont(self, style: int) -> QtGui.QFont: ...
    def defaultEolFill(self, style: int) -> bool: ...
    def defaultColor(self, style: int) -> QtGui.QColor: ...
    def lexer(self) -> str: ...
    def language(self) -> str: ...

class QsciMacro(QtCore.QObject):
    @typing.overload
    def __init__(self, parent: QsciScintilla) -> None: ...
    @typing.overload
    def __init__(self, asc: str, parent: QsciScintilla) -> None: ...
    def endRecording(self) -> None: ...
    def startRecording(self) -> None: ...
    def play(self) -> None: ...
    def save(self) -> str: ...
    def load(self, asc: str) -> bool: ...
    def clear(self) -> None: ...

class QsciPrinter(QtPrintSupport.QPrinter):
    def __init__(
        self, mode: QtPrintSupport.QPrinter.PrinterMode = ...
    ) -> None: ...
    def setWrapMode(self, a0: QsciScintilla.WrapMode) -> None: ...
    def wrapMode(self) -> QsciScintilla.WrapMode: ...
    @typing.overload
    def printRange(
        self,
        qsb: QsciScintillaBase,
        painter: QtGui.QPainter,
        from_: int = ...,
        to: int = ...,
    ) -> int: ...
    @typing.overload
    def printRange(
        self, qsb: QsciScintillaBase, from_: int = ..., to: int = ...
    ) -> int: ...
    def setMagnification(self, magnification: int) -> None: ...
    def magnification(self) -> int: ...
    def formatPage(
        self,
        painter: QtGui.QPainter,
        drawing: bool,
        area: QtCore.QRect,
        pagenr: int,
    ) -> None: ...

class QsciStyle(PyQt6.sip.wrapper):
    class TextCase(enum.Enum):
        OriginalCase = ...
        UpperCase = ...
        LowerCase = ...

    @typing.overload
    def __init__(self, style: int = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        style: int,
        description: str,
        color: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        paper: QtGui.QColor | QtCore.Qt.GlobalColor | int,
        font: QtGui.QFont,
        eolFill: bool = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QsciStyle) -> None: ...
    def refresh(self) -> None: ...
    def hotspot(self) -> bool: ...
    def setHotspot(self, hotspot: bool) -> None: ...
    def changeable(self) -> bool: ...
    def setChangeable(self, changeable: bool) -> None: ...
    def visible(self) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def textCase(self) -> QsciStyle.TextCase: ...
    def setTextCase(self, text_case: QsciStyle.TextCase) -> None: ...
    def eolFill(self) -> bool: ...
    def setEolFill(self, fill: bool) -> None: ...
    def font(self) -> QtGui.QFont: ...
    def setFont(self, font: QtGui.QFont) -> None: ...
    def paper(self) -> QtGui.QColor: ...
    def setPaper(
        self, paper: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def description(self) -> str: ...
    def setDescription(self, description: str) -> None: ...
    def style(self) -> int: ...
    def setStyle(self, style: int) -> None: ...

class QsciStyledText(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self, text: str, style: int) -> None: ...
    @typing.overload
    def __init__(self, text: str, style: QsciStyle) -> None: ...
    @typing.overload
    def __init__(self, a0: QsciStyledText) -> None: ...
    def style(self) -> int: ...
    def text(self) -> str: ...

QSCINTILLA_VERSION: int = ...
QSCINTILLA_VERSION_STR: str = ...
