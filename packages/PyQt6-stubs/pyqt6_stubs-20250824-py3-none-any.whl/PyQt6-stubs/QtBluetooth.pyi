# The PEP 484 type hints stub file for the QtBluetooth module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QBluetooth(PyQt6.sip.simplewrapper):
    class AttAccessConstraint(enum.Flag):
        AttAuthorizationRequired = ...
        AttAuthenticationRequired = ...
        AttEncryptionRequired = ...

    class Security(enum.Flag):
        NoSecurity = ...
        Authorization = ...
        Authentication = ...
        Encryption = ...
        Secure = ...

class QBluetoothAddress(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, address: int) -> None: ...
    @typing.overload
    def __init__(self, address: str | None) -> None: ...
    @typing.overload
    def __init__(self, other: QBluetoothAddress) -> None: ...
    def __ge__(self, b: QBluetoothAddress) -> bool: ...
    def __lt__(self, b: QBluetoothAddress) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def toString(self) -> str: ...
    def toUInt64(self) -> int: ...
    def clear(self) -> None: ...
    def isNull(self) -> bool: ...

class QBluetoothDeviceDiscoveryAgent(QtCore.QObject):
    class DiscoveryMethod(enum.Flag):
        NoMethod = ...
        ClassicMethod = ...
        LowEnergyMethod = ...

    class Error(enum.Enum):
        NoError = ...
        InputOutputError = ...
        PoweredOffError = ...
        InvalidBluetoothAdapterError = ...
        UnsupportedPlatformError = ...
        UnsupportedDiscoveryMethod = ...
        LocationServiceTurnedOffError = ...
        MissingPermissionsError = ...
        UnknownError = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        deviceAdapter: QBluetoothAddress,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @staticmethod
    def supportedDiscoveryMethods() -> (
        QBluetoothDeviceDiscoveryAgent.DiscoveryMethod
    ): ...
    def lowEnergyDiscoveryTimeout(self) -> int: ...
    def setLowEnergyDiscoveryTimeout(self, msTimeout: int) -> None: ...
    deviceUpdated: typing.ClassVar[QtCore.pyqtSignal]
    canceled: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    deviceDiscovered: typing.ClassVar[QtCore.pyqtSignal]
    def stop(self) -> None: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    def start(
        self, method: QBluetoothDeviceDiscoveryAgent.DiscoveryMethod
    ) -> None: ...
    def discoveredDevices(self) -> list[QBluetoothDeviceInfo]: ...
    def errorString(self) -> str: ...
    def error(self) -> QBluetoothDeviceDiscoveryAgent.Error: ...
    def isActive(self) -> bool: ...

class QBluetoothDeviceInfo(PyQt6.sip.simplewrapper):
    class Field(enum.Flag):
        None_ = ...
        RSSI = ...
        ManufacturerData = ...
        ServiceData = ...
        All = ...

    class CoreConfiguration(enum.Flag):
        UnknownCoreConfiguration = ...
        LowEnergyCoreConfiguration = ...
        BaseRateCoreConfiguration = ...
        BaseRateAndLowEnergyCoreConfiguration = ...

    class ServiceClass(enum.Flag):
        NoService = ...
        PositioningService = ...
        NetworkingService = ...
        RenderingService = ...
        CapturingService = ...
        ObjectTransferService = ...
        AudioService = ...
        TelephonyService = ...
        InformationService = ...
        AllServices = ...

    class MinorHealthClass(enum.Enum):
        UncategorizedHealthDevice = ...
        HealthBloodPressureMonitor = ...
        HealthThermometer = ...
        HealthWeightScale = ...
        HealthGlucoseMeter = ...
        HealthPulseOximeter = ...
        HealthDataDisplay = ...
        HealthStepCounter = ...

    class MinorToyClass(enum.Enum):
        UncategorizedToy = ...
        ToyRobot = ...
        ToyVehicle = ...
        ToyDoll = ...
        ToyController = ...
        ToyGame = ...

    class MinorWearableClass(enum.Enum):
        UncategorizedWearableDevice = ...
        WearableWristWatch = ...
        WearablePager = ...
        WearableJacket = ...
        WearableHelmet = ...
        WearableGlasses = ...

    class MinorImagingClass(enum.Enum):
        UncategorizedImagingDevice = ...
        ImageDisplay = ...
        ImageCamera = ...
        ImageScanner = ...
        ImagePrinter = ...

    class MinorPeripheralClass(enum.Enum):
        UncategorizedPeripheral = ...
        KeyboardPeripheral = ...
        PointingDevicePeripheral = ...
        KeyboardWithPointingDevicePeripheral = ...
        JoystickPeripheral = ...
        GamepadPeripheral = ...
        RemoteControlPeripheral = ...
        SensingDevicePeripheral = ...
        DigitizerTabletPeripheral = ...
        CardReaderPeripheral = ...

    class MinorAudioVideoClass(enum.Enum):
        UncategorizedAudioVideoDevice = ...
        WearableHeadsetDevice = ...
        HandsFreeDevice = ...
        Microphone = ...
        Loudspeaker = ...
        Headphones = ...
        PortableAudioDevice = ...
        CarAudio = ...
        SetTopBox = ...
        HiFiAudioDevice = ...
        Vcr = ...
        VideoCamera = ...
        Camcorder = ...
        VideoMonitor = ...
        VideoDisplayAndLoudspeaker = ...
        VideoConferencing = ...
        GamingDevice = ...

    class MinorNetworkClass(enum.Enum):
        NetworkFullService = ...
        NetworkLoadFactorOne = ...
        NetworkLoadFactorTwo = ...
        NetworkLoadFactorThree = ...
        NetworkLoadFactorFour = ...
        NetworkLoadFactorFive = ...
        NetworkLoadFactorSix = ...
        NetworkNoService = ...

    class MinorPhoneClass(enum.Enum):
        UncategorizedPhone = ...
        CellularPhone = ...
        CordlessPhone = ...
        SmartPhone = ...
        WiredModemOrVoiceGatewayPhone = ...
        CommonIsdnAccessPhone = ...

    class MinorComputerClass(enum.Enum):
        UncategorizedComputer = ...
        DesktopComputer = ...
        ServerComputer = ...
        LaptopComputer = ...
        HandheldClamShellComputer = ...
        HandheldComputer = ...
        WearableComputer = ...

    class MinorMiscellaneousClass(enum.Enum):
        UncategorizedMiscellaneous = ...

    class MajorDeviceClass(enum.Enum):
        MiscellaneousDevice = ...
        ComputerDevice = ...
        PhoneDevice = ...
        NetworkDevice = ...
        AudioVideoDevice = ...
        PeripheralDevice = ...
        ImagingDevice = ...
        WearableDevice = ...
        ToyDevice = ...
        HealthDevice = ...
        UncategorizedDevice = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, address: QBluetoothAddress, name: str | None, classOfDevice: int
    ) -> None: ...
    @typing.overload
    def __init__(
        self, uuid: QBluetoothUuid, name: str | None, classOfDevice: int
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QBluetoothDeviceInfo) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def setServiceData(
        self,
        serviceId: QBluetoothUuid,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> bool: ...
    @typing.overload
    def serviceData(self) -> dict[QBluetoothUuid, QtCore.QByteArray]: ...
    @typing.overload
    def serviceData(self, serviceId: QBluetoothUuid) -> QtCore.QByteArray: ...
    def serviceIds(self) -> list[QBluetoothUuid]: ...
    def setName(self, name: str | None) -> None: ...
    def setManufacturerData(
        self,
        manufacturerId: int,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> bool: ...
    @typing.overload
    def manufacturerData(self) -> dict[int, QtCore.QByteArray]: ...
    @typing.overload
    def manufacturerData(self, manufacturerId: int) -> QtCore.QByteArray: ...
    def manufacturerIds(self) -> list[int]: ...
    def deviceUuid(self) -> QBluetoothUuid: ...
    def setDeviceUuid(self, uuid: QBluetoothUuid) -> None: ...
    def coreConfigurations(self) -> QBluetoothDeviceInfo.CoreConfiguration: ...
    def setCoreConfigurations(
        self, coreConfigs: QBluetoothDeviceInfo.CoreConfiguration
    ) -> None: ...
    def serviceUuids(self) -> list[QBluetoothUuid]: ...
    def setServiceUuids(
        self, uuids: collections.abc.Iterable[QBluetoothUuid]
    ) -> None: ...
    def setRssi(self, signal: int) -> None: ...
    def rssi(self) -> int: ...
    def minorDeviceClass(self) -> int: ...
    def majorDeviceClass(self) -> QBluetoothDeviceInfo.MajorDeviceClass: ...
    def serviceClasses(self) -> QBluetoothDeviceInfo.ServiceClass: ...
    def name(self) -> str: ...
    def address(self) -> QBluetoothAddress: ...
    def setCached(self, cached: bool) -> None: ...
    def isCached(self) -> bool: ...
    def isValid(self) -> bool: ...

class QBluetoothHostInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QBluetoothHostInfo) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def setName(self, name: str | None) -> None: ...
    def name(self) -> str: ...
    def setAddress(self, address: QBluetoothAddress) -> None: ...
    def address(self) -> QBluetoothAddress: ...

class QBluetoothLocalDevice(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        PairingError = ...
        MissingPermissionsError = ...
        UnknownError = ...

    class HostMode(enum.Enum):
        HostPoweredOff = ...
        HostConnectable = ...
        HostDiscoverable = ...
        HostDiscoverableLimitedInquiry = ...

    class Pairing(enum.Enum):
        Unpaired = ...
        Paired = ...
        AuthorizedPaired = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, address: QBluetoothAddress, parent: QtCore.QObject | None = ...
    ) -> None: ...

    deviceDisconnected: typing.ClassVar[QtCore.pyqtSignal]
    deviceConnected: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    pairingFinished: typing.ClassVar[QtCore.pyqtSignal]
    hostModeStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def connectedDevices(self) -> list[QBluetoothAddress]: ...
    @staticmethod
    def allDevices() -> list[QBluetoothHostInfo]: ...
    def address(self) -> QBluetoothAddress: ...
    def name(self) -> str: ...
    def powerOn(self) -> None: ...
    def hostMode(self) -> QBluetoothLocalDevice.HostMode: ...
    def setHostMode(self, mode: QBluetoothLocalDevice.HostMode) -> None: ...
    def pairingStatus(
        self, address: QBluetoothAddress
    ) -> QBluetoothLocalDevice.Pairing: ...
    def requestPairing(
        self,
        address: QBluetoothAddress,
        pairing: QBluetoothLocalDevice.Pairing,
    ) -> None: ...
    def isValid(self) -> bool: ...

class QBluetoothServer(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        UnknownError = ...
        PoweredOffError = ...
        InputOutputError = ...
        ServiceAlreadyRegisteredError = ...
        UnsupportedProtocolError = ...
        MissingPermissionsError = ...

    def __init__(
        self,
        serverType: QBluetoothServiceInfo.Protocol,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...

    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    newConnection: typing.ClassVar[QtCore.pyqtSignal]
    def error(self) -> QBluetoothServer.Error: ...
    def serverType(self) -> QBluetoothServiceInfo.Protocol: ...
    def securityFlags(self) -> QBluetooth.Security: ...
    def setSecurityFlags(self, security: QBluetooth.Security) -> None: ...
    def serverPort(self) -> int: ...
    def serverAddress(self) -> QBluetoothAddress: ...
    def nextPendingConnection(self) -> QBluetoothSocket | None: ...
    def hasPendingConnections(self) -> bool: ...
    def maxPendingConnections(self) -> int: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def isListening(self) -> bool: ...
    @typing.overload
    def listen(
        self, address: QBluetoothAddress = ..., port: int = ...
    ) -> bool: ...
    @typing.overload
    def listen(
        self, uuid: QBluetoothUuid, serviceName: str | None = ...
    ) -> QBluetoothServiceInfo: ...
    def close(self) -> None: ...

class QBluetoothServiceDiscoveryAgent(QtCore.QObject):
    class DiscoveryMode(enum.Enum):
        MinimalDiscovery = ...
        FullDiscovery = ...

    class Error(enum.Enum):
        NoError = ...
        InputOutputError = ...
        PoweredOffError = ...
        InvalidBluetoothAdapterError = ...
        MissingPermissionsError = ...
        UnknownError = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        deviceAdapter: QBluetoothAddress,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...

    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    canceled: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    serviceDiscovered: typing.ClassVar[QtCore.pyqtSignal]
    def clear(self) -> None: ...
    def stop(self) -> None: ...
    def start(
        self, mode: QBluetoothServiceDiscoveryAgent.DiscoveryMode = ...
    ) -> None: ...
    def remoteAddress(self) -> QBluetoothAddress: ...
    def setRemoteAddress(self, address: QBluetoothAddress) -> bool: ...
    def uuidFilter(self) -> list[QBluetoothUuid]: ...
    @typing.overload
    def setUuidFilter(
        self, uuids: collections.abc.Iterable[QBluetoothUuid]
    ) -> None: ...
    @typing.overload
    def setUuidFilter(self, uuid: QBluetoothUuid) -> None: ...
    def discoveredServices(self) -> list[QBluetoothServiceInfo]: ...
    def errorString(self) -> str: ...
    def error(self) -> QBluetoothServiceDiscoveryAgent.Error: ...
    def isActive(self) -> bool: ...

class QBluetoothServiceInfo(PyQt6.sip.simplewrapper):
    class Protocol(enum.Enum):
        UnknownProtocol = ...
        L2capProtocol = ...
        RfcommProtocol = ...

    class AttributeId(enum.Enum):
        ServiceRecordHandle = ...
        ServiceClassIds = ...
        ServiceRecordState = ...
        ServiceId = ...
        ProtocolDescriptorList = ...
        BrowseGroupList = ...
        LanguageBaseAttributeIdList = ...
        ServiceInfoTimeToLive = ...
        ServiceAvailability = ...
        BluetoothProfileDescriptorList = ...
        DocumentationUrl = ...
        ClientExecutableUrl = ...
        IconUrl = ...
        AdditionalProtocolDescriptorList = ...
        PrimaryLanguageBase = ...
        ServiceName = ...
        ServiceDescription = ...
        ServiceProvider = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QBluetoothServiceInfo) -> None: ...
    def serviceClassUuids(self) -> list[QBluetoothUuid]: ...
    def serviceUuid(self) -> QBluetoothUuid: ...
    def setServiceUuid(self, uuid: QBluetoothUuid) -> None: ...
    def serviceAvailability(self) -> int: ...
    def setServiceAvailability(self, availability: int) -> None: ...
    def serviceProvider(self) -> str: ...
    def setServiceProvider(self, provider: str | None) -> None: ...
    def serviceDescription(self) -> str: ...
    def setServiceDescription(self, description: str | None) -> None: ...
    def serviceName(self) -> str: ...
    def setServiceName(self, name: str | None) -> None: ...
    @typing.overload
    def setAttribute(
        self, attributeId: int, value: QBluetoothUuid
    ) -> None: ...
    @typing.overload
    def setAttribute(
        self, attributeId: int, value: collections.abc.Iterable[typing.Any]
    ) -> None: ...
    @typing.overload
    def setAttribute(self, attributeId: int, value: typing.Any) -> None: ...
    def unregisterService(self) -> bool: ...
    def registerService(
        self, localAdapter: QBluetoothAddress = ...
    ) -> bool: ...
    def isRegistered(self) -> bool: ...
    def protocolDescriptor(
        self, protocol: QBluetoothUuid.ProtocolUuid
    ) -> list[typing.Any]: ...
    def serverChannel(self) -> int: ...
    def protocolServiceMultiplexer(self) -> int: ...
    def socketProtocol(self) -> QBluetoothServiceInfo.Protocol: ...
    def removeAttribute(self, attributeId: int) -> None: ...
    def contains(self, attributeId: int) -> bool: ...
    def attributes(self) -> list[int]: ...
    def attribute(self, attributeId: int) -> typing.Any: ...
    def device(self) -> QBluetoothDeviceInfo: ...
    def setDevice(self, info: QBluetoothDeviceInfo) -> None: ...
    def isComplete(self) -> bool: ...
    def isValid(self) -> bool: ...

class QBluetoothSocket(QtCore.QIODevice):
    class SocketError(enum.Enum):
        NoSocketError = ...
        UnknownSocketError = ...
        RemoteHostClosedError = ...
        HostNotFoundError = ...
        ServiceNotFoundError = ...
        NetworkError = ...
        UnsupportedProtocolError = ...
        OperationError = ...
        MissingPermissionsError = ...

    class SocketState(enum.Enum):
        UnconnectedState = ...
        ServiceLookupState = ...
        ConnectingState = ...
        ConnectedState = ...
        BoundState = ...
        ClosingState = ...
        ListeningState = ...

    @typing.overload
    def __init__(
        self,
        socketType: QBluetoothServiceInfo.Protocol,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def preferredSecurityFlags(self) -> QBluetooth.Security: ...
    def setPreferredSecurityFlags(
        self, flags: QBluetooth.Security
    ) -> None: ...
    def doDeviceDiscovery(
        self,
        service: QBluetoothServiceInfo,
        openMode: QtCore.QIODeviceBase.OpenModeFlag,
    ) -> None: ...
    def setSocketError(self, error: QBluetoothSocket.SocketError) -> None: ...
    def setSocketState(self, state: QBluetoothSocket.SocketState) -> None: ...
    def writeData(self, data: PyQt6.sip.array[bytes] | None) -> int: ...
    def readData(self, maxlen: int) -> bytes: ...
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    disconnected: typing.ClassVar[QtCore.pyqtSignal]
    connected: typing.ClassVar[QtCore.pyqtSignal]
    def errorString(self) -> str: ...
    def error(self) -> QBluetoothSocket.SocketError: ...
    def state(self) -> QBluetoothSocket.SocketState: ...
    def socketType(self) -> QBluetoothServiceInfo.Protocol: ...
    def socketDescriptor(self) -> int: ...
    def setSocketDescriptor(
        self,
        socketDescriptor: int,
        socketType: QBluetoothServiceInfo.Protocol,
        state: QBluetoothSocket.SocketState = ...,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> bool: ...
    def peerPort(self) -> int: ...
    def peerAddress(self) -> QBluetoothAddress: ...
    def peerName(self) -> str: ...
    def localPort(self) -> int: ...
    def localAddress(self) -> QBluetoothAddress: ...
    def localName(self) -> str: ...
    def disconnectFromService(self) -> None: ...
    @typing.overload
    def connectToService(
        self,
        address: QBluetoothAddress,
        uuid: QBluetoothUuid.ServiceClassUuid,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @typing.overload
    def connectToService(
        self,
        address: QBluetoothAddress,
        port: int,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @typing.overload
    def connectToService(
        self,
        address: QBluetoothAddress,
        uuid: QBluetoothUuid,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @typing.overload
    def connectToService(
        self,
        service: QBluetoothServiceInfo,
        mode: QtCore.QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    def canReadLine(self) -> bool: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def isSequential(self) -> bool: ...
    def close(self) -> None: ...
    def abort(self) -> None: ...

class QBluetoothUuid(QtCore.QUuid):
    class DescriptorType(enum.Enum):
        UnknownDescriptorType = ...
        CharacteristicExtendedProperties = ...
        CharacteristicUserDescription = ...
        ClientCharacteristicConfiguration = ...
        ServerCharacteristicConfiguration = ...
        CharacteristicPresentationFormat = ...
        CharacteristicAggregateFormat = ...
        ValidRange = ...
        ExternalReportReference = ...
        ReportReference = ...
        EnvironmentalSensingConfiguration = ...
        EnvironmentalSensingMeasurement = ...
        EnvironmentalSensingTriggerSetting = ...

    class CharacteristicType(enum.Enum):
        DeviceName = ...
        Appearance = ...
        PeripheralPrivacyFlag = ...
        ReconnectionAddress = ...
        PeripheralPreferredConnectionParameters = ...
        ServiceChanged = ...
        AlertLevel = ...
        TxPowerLevel = ...
        DateTime = ...
        DayOfWeek = ...
        DayDateTime = ...
        ExactTime256 = ...
        DSTOffset = ...
        TimeZone = ...
        LocalTimeInformation = ...
        TimeWithDST = ...
        TimeAccuracy = ...
        TimeSource = ...
        ReferenceTimeInformation = ...
        TimeUpdateControlPoint = ...
        TimeUpdateState = ...
        GlucoseMeasurement = ...
        BatteryLevel = ...
        TemperatureMeasurement = ...
        TemperatureType = ...
        IntermediateTemperature = ...
        MeasurementInterval = ...
        BootKeyboardInputReport = ...
        SystemID = ...
        ModelNumberString = ...
        SerialNumberString = ...
        FirmwareRevisionString = ...
        HardwareRevisionString = ...
        SoftwareRevisionString = ...
        ManufacturerNameString = ...
        IEEE1107320601RegulatoryCertificationDataList = ...
        CurrentTime = ...
        MagneticDeclination = ...
        ScanRefresh = ...
        BootKeyboardOutputReport = ...
        BootMouseInputReport = ...
        GlucoseMeasurementContext = ...
        BloodPressureMeasurement = ...
        IntermediateCuffPressure = ...
        HeartRateMeasurement = ...
        BodySensorLocation = ...
        HeartRateControlPoint = ...
        AlertStatus = ...
        RingerControlPoint = ...
        RingerSetting = ...
        AlertCategoryIDBitMask = ...
        AlertCategoryID = ...
        AlertNotificationControlPoint = ...
        UnreadAlertStatus = ...
        NewAlert = ...
        SupportedNewAlertCategory = ...
        SupportedUnreadAlertCategory = ...
        BloodPressureFeature = ...
        HIDInformation = ...
        ReportMap = ...
        HIDControlPoint = ...
        Report = ...
        ProtocolMode = ...
        ScanIntervalWindow = ...
        PnPID = ...
        GlucoseFeature = ...
        RecordAccessControlPoint = ...
        RSCMeasurement = ...
        RSCFeature = ...
        SCControlPoint = ...
        CSCMeasurement = ...
        CSCFeature = ...
        SensorLocation = ...
        CyclingPowerMeasurement = ...
        CyclingPowerVector = ...
        CyclingPowerFeature = ...
        CyclingPowerControlPoint = ...
        LocationAndSpeed = ...
        Navigation = ...
        PositionQuality = ...
        LNFeature = ...
        LNControlPoint = ...
        Elevation = ...
        Pressure = ...
        Temperature = ...
        Humidity = ...
        TrueWindSpeed = ...
        TrueWindDirection = ...
        ApparentWindSpeed = ...
        ApparentWindDirection = ...
        GustFactor = ...
        PollenConcentration = ...
        UVIndex = ...
        Irradiance = ...
        Rainfall = ...
        WindChill = ...
        HeatIndex = ...
        DewPoint = ...
        DescriptorValueChanged = ...
        AerobicHeartRateLowerLimit = ...
        AerobicThreshold = ...
        Age = ...
        AnaerobicHeartRateLowerLimit = ...
        AnaerobicHeartRateUpperLimit = ...
        AnaerobicThreshold = ...
        AerobicHeartRateUpperLimit = ...
        DateOfBirth = ...
        DateOfThresholdAssessment = ...
        EmailAddress = ...
        FatBurnHeartRateLowerLimit = ...
        FatBurnHeartRateUpperLimit = ...
        FirstName = ...
        FiveZoneHeartRateLimits = ...
        Gender = ...
        HeartRateMax = ...
        Height = ...
        HipCircumference = ...
        LastName = ...
        MaximumRecommendedHeartRate = ...
        RestingHeartRate = ...
        SportTypeForAerobicAnaerobicThresholds = ...
        ThreeZoneHeartRateLimits = ...
        TwoZoneHeartRateLimits = ...
        VO2Max = ...
        WaistCircumference = ...
        Weight = ...
        DatabaseChangeIncrement = ...
        UserIndex = ...
        BodyCompositionFeature = ...
        BodyCompositionMeasurement = ...
        WeightMeasurement = ...
        WeightScaleFeature = ...
        UserControlPoint = ...
        MagneticFluxDensity2D = ...
        MagneticFluxDensity3D = ...
        Language = ...
        BarometricPressureTrend = ...

    class ServiceClassUuid(enum.Enum):
        ServiceDiscoveryServer = ...
        BrowseGroupDescriptor = ...
        PublicBrowseGroup = ...
        SerialPort = ...
        LANAccessUsingPPP = ...
        DialupNetworking = ...
        IrMCSync = ...
        ObexObjectPush = ...
        OBEXFileTransfer = ...
        IrMCSyncCommand = ...
        Headset = ...
        AudioSource = ...
        AudioSink = ...
        AV_RemoteControlTarget = ...
        AdvancedAudioDistribution = ...
        AV_RemoteControl = ...
        AV_RemoteControlController = ...
        HeadsetAG = ...
        PANU = ...
        NAP = ...
        GN = ...
        DirectPrinting = ...
        ReferencePrinting = ...
        BasicImage = ...
        ImagingResponder = ...
        ImagingAutomaticArchive = ...
        ImagingReferenceObjects = ...
        Handsfree = ...
        HandsfreeAudioGateway = ...
        DirectPrintingReferenceObjectsService = ...
        ReflectedUI = ...
        BasicPrinting = ...
        PrintingStatus = ...
        HumanInterfaceDeviceService = ...
        HardcopyCableReplacement = ...
        HCRPrint = ...
        HCRScan = ...
        SIMAccess = ...
        PhonebookAccessPCE = ...
        PhonebookAccessPSE = ...
        PhonebookAccess = ...
        HeadsetHS = ...
        MessageAccessServer = ...
        MessageNotificationServer = ...
        MessageAccessProfile = ...
        GNSS = ...
        GNSSServer = ...
        Display3D = ...
        Glasses3D = ...
        Synchronization3D = ...
        MPSProfile = ...
        MPSService = ...
        PnPInformation = ...
        GenericNetworking = ...
        GenericFileTransfer = ...
        GenericAudio = ...
        GenericTelephony = ...
        VideoSource = ...
        VideoSink = ...
        VideoDistribution = ...
        HDP = ...
        HDPSource = ...
        HDPSink = ...
        GenericAccess = ...
        GenericAttribute = ...
        ImmediateAlert = ...
        LinkLoss = ...
        TxPower = ...
        CurrentTimeService = ...
        ReferenceTimeUpdateService = ...
        NextDSTChangeService = ...
        Glucose = ...
        HealthThermometer = ...
        DeviceInformation = ...
        HeartRate = ...
        PhoneAlertStatusService = ...
        BatteryService = ...
        BloodPressure = ...
        AlertNotificationService = ...
        HumanInterfaceDevice = ...
        ScanParameters = ...
        RunningSpeedAndCadence = ...
        CyclingSpeedAndCadence = ...
        CyclingPower = ...
        LocationAndNavigation = ...
        EnvironmentalSensing = ...
        BodyComposition = ...
        UserData = ...
        WeightScale = ...
        BondManagement = ...
        ContinuousGlucoseMonitoring = ...

    class ProtocolUuid(enum.Enum):
        Sdp = ...
        Udp = ...
        Rfcomm = ...
        Tcp = ...
        TcsBin = ...
        TcsAt = ...
        Att = ...
        Obex = ...
        Ip = ...
        Ftp = ...
        Http = ...
        Wsp = ...
        Bnep = ...
        Upnp = ...
        Hidp = ...
        HardcopyControlChannel = ...
        HardcopyDataChannel = ...
        HardcopyNotification = ...
        Avctp = ...
        Avdtp = ...
        Cmtp = ...
        UdiCPlain = ...
        McapControlChannel = ...
        McapDataChannel = ...
        L2cap = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, uuid: QBluetoothUuid.ProtocolUuid) -> None: ...
    @typing.overload
    def __init__(self, uuid: QBluetoothUuid.ServiceClassUuid) -> None: ...
    @typing.overload
    def __init__(self, uuid: QBluetoothUuid.CharacteristicType) -> None: ...
    @typing.overload
    def __init__(self, uuid: QBluetoothUuid.DescriptorType) -> None: ...
    @typing.overload
    def __init__(self, uuid: int) -> None: ...
    @typing.overload
    def __init__(
        self,
        uuid: tuple[
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
        ],
        order: QtCore.QSysInfo.Endian = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, uuid: str | None) -> None: ...
    @typing.overload
    def __init__(self, uuid: QBluetoothUuid) -> None: ...
    @typing.overload
    def __init__(self, uuid: QtCore.QUuid) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def descriptorToString(uuid: QBluetoothUuid.DescriptorType) -> str: ...
    @staticmethod
    def characteristicToString(
        uuid: QBluetoothUuid.CharacteristicType,
    ) -> str: ...
    @staticmethod
    def protocolToString(uuid: QBluetoothUuid.ProtocolUuid) -> str: ...
    @staticmethod
    def serviceClassToString(uuid: QBluetoothUuid.ServiceClassUuid) -> str: ...
    def toUInt128(
        self,
    ) -> tuple[
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
        int,
    ]: ...
    def toUInt32(self) -> tuple[int, bool | None]: ...
    def toUInt16(self) -> tuple[int, bool | None]: ...
    def minimumSize(self) -> int: ...

class QLowEnergyAdvertisingData(PyQt6.sip.simplewrapper):
    class Discoverability(enum.Enum):
        DiscoverabilityNone = ...
        DiscoverabilityLimited = ...
        DiscoverabilityGeneral = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyAdvertisingData) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyAdvertisingData) -> None: ...
    def rawData(self) -> QtCore.QByteArray: ...
    def setRawData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def services(self) -> list[QBluetoothUuid]: ...
    def setServices(
        self, services: collections.abc.Iterable[QBluetoothUuid]
    ) -> None: ...
    def discoverability(self) -> QLowEnergyAdvertisingData.Discoverability: ...
    def setDiscoverability(
        self, mode: QLowEnergyAdvertisingData.Discoverability
    ) -> None: ...
    def includePowerLevel(self) -> bool: ...
    def setIncludePowerLevel(self, doInclude: bool) -> None: ...
    def manufacturerData(self) -> QtCore.QByteArray: ...
    def manufacturerId(self) -> int: ...
    def setManufacturerData(
        self, id: int, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @staticmethod
    def invalidManufacturerId() -> int: ...
    def localName(self) -> str: ...
    def setLocalName(self, name: str | None) -> None: ...

class QLowEnergyAdvertisingParameters(PyQt6.sip.simplewrapper):
    class FilterPolicy(enum.Enum):
        IgnoreWhiteList = ...
        UseWhiteListForScanning = ...
        UseWhiteListForConnecting = ...
        UseWhiteListForScanningAndConnecting = ...

    class Mode(enum.Enum):
        AdvInd = ...
        AdvScanInd = ...
        AdvNonConnInd = ...

    class AddressInfo(PyQt6.sip.simplewrapper):
        address: QBluetoothAddress = ...
        type: QLowEnergyController.RemoteAddressType = ...

        @typing.overload
        def __init__(
            self,
            addr: QBluetoothAddress,
            t: QLowEnergyController.RemoteAddressType,
        ) -> None: ...
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, a0: QLowEnergyAdvertisingParameters.AddressInfo
        ) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyAdvertisingParameters) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyAdvertisingParameters) -> None: ...
    def maximumInterval(self) -> int: ...
    def minimumInterval(self) -> int: ...
    def setInterval(self, minimum: int, maximum: int) -> None: ...
    def filterPolicy(self) -> QLowEnergyAdvertisingParameters.FilterPolicy: ...
    def whiteList(
        self,
    ) -> list[QLowEnergyAdvertisingParameters.AddressInfo]: ...
    def setWhiteList(
        self,
        whiteList: collections.abc.Iterable[
            QLowEnergyAdvertisingParameters.AddressInfo
        ],
        policy: QLowEnergyAdvertisingParameters.FilterPolicy,
    ) -> None: ...
    def mode(self) -> QLowEnergyAdvertisingParameters.Mode: ...
    def setMode(self, mode: QLowEnergyAdvertisingParameters.Mode) -> None: ...

class QLowEnergyCharacteristic(PyQt6.sip.simplewrapper):
    class PropertyType(enum.Flag):
        Unknown = ...
        Broadcasting = ...
        Read = ...
        WriteNoResponse = ...
        Write = ...
        Notify = ...
        Indicate = ...
        WriteSigned = ...
        ExtendedProperty = ...

    CCCDDisable: QtCore.QByteArray | bytes | bytearray | memoryview = ...
    CCCDEnableIndication: (
        QtCore.QByteArray | bytes | bytearray | memoryview
    ) = ...
    CCCDEnableNotification: (
        QtCore.QByteArray | bytes | bytearray | memoryview
    ) = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyCharacteristic) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def clientCharacteristicConfiguration(self) -> QLowEnergyDescriptor: ...
    def isValid(self) -> bool: ...
    def descriptors(self) -> list[QLowEnergyDescriptor]: ...
    def descriptor(self, uuid: QBluetoothUuid) -> QLowEnergyDescriptor: ...
    def properties(self) -> QLowEnergyCharacteristic.PropertyType: ...
    def value(self) -> QtCore.QByteArray: ...
    def uuid(self) -> QBluetoothUuid: ...
    def name(self) -> str: ...

class QLowEnergyCharacteristicData(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyCharacteristicData) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyCharacteristicData) -> None: ...
    def isValid(self) -> bool: ...
    def maximumValueLength(self) -> int: ...
    def minimumValueLength(self) -> int: ...
    def setValueLength(self, minimum: int, maximum: int) -> None: ...
    def writeConstraints(self) -> QBluetooth.AttAccessConstraint: ...
    def setWriteConstraints(
        self, constraints: QBluetooth.AttAccessConstraint
    ) -> None: ...
    def readConstraints(self) -> QBluetooth.AttAccessConstraint: ...
    def setReadConstraints(
        self, constraints: QBluetooth.AttAccessConstraint
    ) -> None: ...
    def addDescriptor(self, descriptor: QLowEnergyDescriptorData) -> None: ...
    def setDescriptors(
        self, descriptors: collections.abc.Iterable[QLowEnergyDescriptorData]
    ) -> None: ...
    def descriptors(self) -> list[QLowEnergyDescriptorData]: ...
    def setProperties(
        self, properties: QLowEnergyCharacteristic.PropertyType
    ) -> None: ...
    def properties(self) -> QLowEnergyCharacteristic.PropertyType: ...
    def setValue(
        self, value: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def value(self) -> QtCore.QByteArray: ...
    def setUuid(self, uuid: QBluetoothUuid) -> None: ...
    def uuid(self) -> QBluetoothUuid: ...

class QLowEnergyConnectionParameters(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyConnectionParameters) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyConnectionParameters) -> None: ...
    def supervisionTimeout(self) -> int: ...
    def setSupervisionTimeout(self, timeout: int) -> None: ...
    def latency(self) -> int: ...
    def setLatency(self, latency: int) -> None: ...
    def maximumInterval(self) -> float: ...
    def minimumInterval(self) -> float: ...
    def setIntervalRange(self, minimum: float, maximum: float) -> None: ...

class QLowEnergyController(QtCore.QObject):
    class Role(enum.Enum):
        CentralRole = ...
        PeripheralRole = ...

    class RemoteAddressType(enum.Enum):
        PublicAddress = ...
        RandomAddress = ...

    class ControllerState(enum.Enum):
        UnconnectedState = ...
        ConnectingState = ...
        ConnectedState = ...
        DiscoveringState = ...
        DiscoveredState = ...
        ClosingState = ...
        AdvertisingState = ...

    class Error(enum.Enum):
        NoError = ...
        UnknownError = ...
        UnknownRemoteDeviceError = ...
        NetworkError = ...
        InvalidBluetoothAdapterError = ...
        ConnectionError = ...
        AdvertisingError = ...
        RemoteHostClosedError = ...
        AuthorizationError = ...
        MissingPermissionsError = ...
        RssiReadError = ...

    rssiRead: typing.ClassVar[QtCore.pyqtSignal]
    def readRssi(self) -> None: ...
    def remoteDeviceUuid(self) -> QBluetoothUuid: ...
    def role(self) -> QLowEnergyController.Role: ...
    def requestConnectionUpdate(
        self, parameters: QLowEnergyConnectionParameters
    ) -> None: ...
    def addService(
        self,
        service: QLowEnergyServiceData,
        parent: QtCore.QObject | None = ...,
    ) -> QLowEnergyService | None: ...
    def stopAdvertising(self) -> None: ...
    def startAdvertising(
        self,
        parameters: QLowEnergyAdvertisingParameters,
        advertisingData: QLowEnergyAdvertisingData,
        scanResponseData: QLowEnergyAdvertisingData = ...,
    ) -> None: ...
    @typing.overload
    @staticmethod
    def createPeripheral(
        localDevice: QBluetoothAddress, parent: QtCore.QObject | None = ...
    ) -> QLowEnergyController | None: ...
    @typing.overload
    @staticmethod
    def createPeripheral(
        parent: QtCore.QObject | None = ...,
    ) -> QLowEnergyController | None: ...
    @typing.overload
    @staticmethod
    def createCentral(
        remoteDevice: QBluetoothDeviceInfo, parent: QtCore.QObject | None = ...
    ) -> QLowEnergyController | None: ...
    @typing.overload
    @staticmethod
    def createCentral(
        remoteDevice: QBluetoothDeviceInfo,
        localDevice: QBluetoothAddress,
        parent: QtCore.QObject | None = ...,
    ) -> QLowEnergyController | None: ...
    mtuChanged: typing.ClassVar[QtCore.pyqtSignal]
    connectionUpdated: typing.ClassVar[QtCore.pyqtSignal]
    discoveryFinished: typing.ClassVar[QtCore.pyqtSignal]
    serviceDiscovered: typing.ClassVar[QtCore.pyqtSignal]
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    disconnected: typing.ClassVar[QtCore.pyqtSignal]
    connected: typing.ClassVar[QtCore.pyqtSignal]
    def mtu(self) -> int: ...
    def remoteName(self) -> str: ...
    def errorString(self) -> str: ...
    def error(self) -> QLowEnergyController.Error: ...
    def createServiceObject(
        self, service: QBluetoothUuid, parent: QtCore.QObject | None = ...
    ) -> QLowEnergyService | None: ...
    def services(self) -> list[QBluetoothUuid]: ...
    def discoverServices(self) -> None: ...
    def disconnectFromDevice(self) -> None: ...
    def connectToDevice(self) -> None: ...
    def setRemoteAddressType(
        self, type: QLowEnergyController.RemoteAddressType
    ) -> None: ...
    def remoteAddressType(self) -> QLowEnergyController.RemoteAddressType: ...
    def state(self) -> QLowEnergyController.ControllerState: ...
    def remoteAddress(self) -> QBluetoothAddress: ...
    def localAddress(self) -> QBluetoothAddress: ...

class QLowEnergyDescriptor(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyDescriptor) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def type(self) -> QBluetoothUuid.DescriptorType: ...
    def name(self) -> str: ...
    def uuid(self) -> QBluetoothUuid: ...
    def value(self) -> QtCore.QByteArray: ...
    def isValid(self) -> bool: ...

class QLowEnergyDescriptorData(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        uuid: QBluetoothUuid,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyDescriptorData) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyDescriptorData) -> None: ...
    def writeConstraints(self) -> QBluetooth.AttAccessConstraint: ...
    def isWritable(self) -> bool: ...
    def setWritePermissions(
        self, writable: bool, constraints: QBluetooth.AttAccessConstraint = ...
    ) -> None: ...
    def readConstraints(self) -> QBluetooth.AttAccessConstraint: ...
    def isReadable(self) -> bool: ...
    def setReadPermissions(
        self, readable: bool, constraints: QBluetooth.AttAccessConstraint = ...
    ) -> None: ...
    def isValid(self) -> bool: ...
    def setUuid(self, uuid: QBluetoothUuid) -> None: ...
    def uuid(self) -> QBluetoothUuid: ...
    def setValue(
        self, value: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def value(self) -> QtCore.QByteArray: ...

class QLowEnergyService(QtCore.QObject):
    class WriteMode(enum.Enum):
        WriteWithResponse = ...
        WriteWithoutResponse = ...
        WriteSigned = ...

    class ServiceState(enum.Enum):
        InvalidService = ...
        DiscoveryRequired = ...
        ServiceDiscovered = ...
        LocalService = ...
        RemoteService = ...
        RemoteServiceDiscovering = ...
        RemoteServiceDiscovered = ...
        DiscoveringService = ...

    class ServiceError(enum.Enum):
        NoError = ...
        OperationError = ...
        CharacteristicWriteError = ...
        DescriptorWriteError = ...
        CharacteristicReadError = ...
        DescriptorReadError = ...
        UnknownError = ...

    class ServiceType(enum.Flag):
        PrimaryService = ...
        IncludedService = ...

    class DiscoveryMode(enum.Enum):
        FullDiscovery = ...
        SkipValueDiscovery = ...

    descriptorRead: typing.ClassVar[QtCore.pyqtSignal]
    characteristicRead: typing.ClassVar[QtCore.pyqtSignal]
    def readDescriptor(self, descriptor: QLowEnergyDescriptor) -> None: ...
    def readCharacteristic(
        self, characteristic: QLowEnergyCharacteristic
    ) -> None: ...
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    descriptorWritten: typing.ClassVar[QtCore.pyqtSignal]
    characteristicWritten: typing.ClassVar[QtCore.pyqtSignal]
    characteristicChanged: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def writeDescriptor(
        self,
        descriptor: QLowEnergyDescriptor,
        newValue: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def writeCharacteristic(
        self,
        characteristic: QLowEnergyCharacteristic,
        newValue: QtCore.QByteArray | bytes | bytearray | memoryview,
        mode: QLowEnergyService.WriteMode = ...,
    ) -> None: ...
    @typing.overload
    def contains(self, characteristic: QLowEnergyCharacteristic) -> bool: ...
    @typing.overload
    def contains(self, descriptor: QLowEnergyDescriptor) -> bool: ...
    def error(self) -> QLowEnergyService.ServiceError: ...
    def discoverDetails(
        self, mode: QLowEnergyService.DiscoveryMode = ...
    ) -> None: ...
    def serviceName(self) -> str: ...
    def serviceUuid(self) -> QBluetoothUuid: ...
    def characteristics(self) -> list[QLowEnergyCharacteristic]: ...
    def characteristic(
        self, uuid: QBluetoothUuid
    ) -> QLowEnergyCharacteristic: ...
    def state(self) -> QLowEnergyService.ServiceState: ...
    def type(self) -> QLowEnergyService.ServiceType: ...
    def includedServices(self) -> list[QBluetoothUuid]: ...

class QLowEnergyServiceData(PyQt6.sip.simplewrapper):
    class ServiceType(enum.Enum):
        ServiceTypePrimary = ...
        ServiceTypeSecondary = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLowEnergyServiceData) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QLowEnergyServiceData) -> None: ...
    def isValid(self) -> bool: ...
    def addCharacteristic(
        self, characteristic: QLowEnergyCharacteristicData
    ) -> None: ...
    def setCharacteristics(
        self,
        characteristics: collections.abc.Iterable[
            QLowEnergyCharacteristicData
        ],
    ) -> None: ...
    def characteristics(self) -> list[QLowEnergyCharacteristicData]: ...
    def addIncludedService(
        self, service: QLowEnergyService | None
    ) -> None: ...
    def setIncludedServices(
        self, services: collections.abc.Iterable[QLowEnergyService]
    ) -> None: ...
    def includedServices(self) -> list[QLowEnergyService]: ...
    def setUuid(self, uuid: QBluetoothUuid) -> None: ...
    def uuid(self) -> QBluetoothUuid: ...
    def setType(self, type: QLowEnergyServiceData.ServiceType) -> None: ...
    def type(self) -> QLowEnergyServiceData.ServiceType: ...
