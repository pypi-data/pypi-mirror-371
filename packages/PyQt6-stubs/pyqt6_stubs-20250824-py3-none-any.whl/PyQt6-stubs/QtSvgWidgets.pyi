# The PEP 484 type hints stub file for the QtSvgWidgets module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import typing
from typing import Any

from PyQt6 import QtCore, QtGui, QtSvg, QtWidgets

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QGraphicsSvgItem(QtWidgets.QGraphicsObject):
    @typing.overload
    def __init__(
        self, parent: QtWidgets.QGraphicsItem | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        parent: QtWidgets.QGraphicsItem | None = ...,
    ) -> None: ...
    def type(self) -> int: ...
    def paint(
        self,
        painter: QtGui.QPainter | None,
        option: QtWidgets.QStyleOptionGraphicsItem | None,
        widget: QtWidgets.QWidget | None = ...,
    ) -> None: ...
    def boundingRect(self) -> QtCore.QRectF: ...
    def maximumCacheSize(self) -> QtCore.QSize: ...
    def setMaximumCacheSize(self, size: QtCore.QSize) -> None: ...
    def elementId(self) -> str: ...
    def setElementId(self, id: str | None) -> None: ...
    def renderer(self) -> QtSvg.QSvgRenderer | None: ...
    def setSharedRenderer(
        self, renderer: QtSvg.QSvgRenderer | None
    ) -> None: ...

class QSvgWidget(QtWidgets.QWidget):
    @typing.overload
    def __init__(self, parent: QtWidgets.QWidget | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, file: str | None, parent: QtWidgets.QWidget | None = ...
    ) -> None: ...
    def setOptions(self, options: QtSvg.QtSvg.Option) -> None: ...
    def options(self) -> QtSvg.QtSvg.Option: ...
    def paintEvent(self, event: QtGui.QPaintEvent | None) -> None: ...
    @typing.overload
    def load(self, file: str | None) -> None: ...
    @typing.overload
    def load(
        self, contents: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def sizeHint(self) -> QtCore.QSize: ...
    def renderer(self) -> QtSvg.QSvgRenderer | None: ...
