# The PEP 484 type hints stub file for the QtTextToSpeech module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QTextToSpeech(QtCore.QObject):
    class Capability(enum.Enum):
        None_ = ...
        Speak = ...
        PauseResume = ...
        WordByWordProgress = ...
        Synthesize = ...

    class State(enum.Enum):
        Ready = ...
        Speaking = ...
        Paused = ...
        Error = ...
        Synthesizing = ...

    class ErrorReason(enum.Enum):
        NoError = ...
        Initialization = ...
        Configuration = ...
        Input = ...
        Playback = ...

    class BoundaryHint(enum.Enum):
        Default = ...
        Immediate = ...
        Word = ...
        Sentence = ...
        Utterance = ...

    @typing.overload
    def __init__(
        self,
        engine: str | None,
        params: dict[str | None, typing.Any],
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, engine: str | None, parent: QtCore.QObject | None = ...
    ) -> None: ...

    aboutToSynthesize: typing.ClassVar[QtCore.pyqtSignal]
    sayingWord: typing.ClassVar[QtCore.pyqtSignal]
    def enqueue(self, text: str | None) -> int: ...
    def engineCapabilities(self) -> QTextToSpeech.Capability: ...
    errorOccurred: typing.ClassVar[QtCore.pyqtSignal]
    engineChanged: typing.ClassVar[QtCore.pyqtSignal]
    voiceChanged: typing.ClassVar[QtCore.pyqtSignal]
    volumeChanged: typing.ClassVar[QtCore.pyqtSignal]
    pitchChanged: typing.ClassVar[QtCore.pyqtSignal]
    rateChanged: typing.ClassVar[QtCore.pyqtSignal]
    localeChanged: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setVoice(self, voice: QVoice) -> None: ...
    def setVolume(self, volume: float) -> None: ...
    def setPitch(self, pitch: float) -> None: ...
    def setRate(self, rate: float) -> None: ...
    def setLocale(self, locale: QtCore.QLocale) -> None: ...
    def resume(self) -> None: ...
    def pause(
        self, boundaryHint: QTextToSpeech.BoundaryHint = ...
    ) -> None: ...
    def stop(self, boundaryHint: QTextToSpeech.BoundaryHint = ...) -> None: ...
    def say(self, text: str | None) -> None: ...
    @staticmethod
    def availableEngines() -> list[str]: ...
    def volume(self) -> float: ...
    def pitch(self) -> float: ...
    def rate(self) -> float: ...
    def availableVoices(self) -> list[QVoice]: ...
    def voice(self) -> QVoice: ...
    def locale(self) -> QtCore.QLocale: ...
    def availableLocales(self) -> list[QtCore.QLocale]: ...
    def state(self) -> QTextToSpeech.State: ...
    def errorString(self) -> str: ...
    def errorReason(self) -> QTextToSpeech.ErrorReason: ...
    def engine(self) -> str: ...
    def setEngine(
        self, engine: str | None, params: dict[str | None, typing.Any] = ...
    ) -> bool: ...

class QVoice(PyQt6.sip.simplewrapper):
    class Age(enum.Enum):
        Child = ...
        Teenager = ...
        Adult = ...
        Senior = ...
        Other = ...

    class Gender(enum.Enum):
        Male = ...
        Female = ...
        Unknown = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QVoice) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def language(self) -> QtCore.QLocale.Language: ...
    def locale(self) -> QtCore.QLocale: ...
    def swap(self, other: QVoice) -> None: ...
    @staticmethod
    def ageName(age: QVoice.Age) -> str: ...
    @staticmethod
    def genderName(gender: QVoice.Gender) -> str: ...
    def age(self) -> QVoice.Age: ...
    def gender(self) -> QVoice.Gender: ...
    def name(self) -> str: ...
