# The PEP 484 type hints stub file for the QtPdf module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QPdfBookmarkModel(QtCore.QAbstractItemModel):
    class Role(enum.IntEnum):
        Title = ...
        Level = ...
        Page = ...
        Location = ...
        Zoom = ...

    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    documentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def columnCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def parent(self, index: QtCore.QModelIndex) -> QtCore.QModelIndex: ...
    def index(
        self, row: int, column: int, parent: QtCore.QModelIndex = ...
    ) -> QtCore.QModelIndex: ...
    def data(self, index: QtCore.QModelIndex, role: int) -> typing.Any: ...
    def setDocument(self, document: QPdfDocument | None) -> None: ...
    def document(self) -> QPdfDocument | None: ...

class QPdfDocument(QtCore.QObject):
    class PageModelRole(enum.IntEnum):
        Label = ...
        PointSize = ...

    class MetaDataField(enum.Enum):
        Title = ...
        Subject = ...
        Author = ...
        Keywords = ...
        Producer = ...
        Creator = ...
        CreationDate = ...
        ModificationDate = ...

    class Error(enum.Enum):
        None_ = ...
        Unknown = ...
        DataNotYetAvailable = ...
        FileNotFound = ...
        InvalidFileFormat = ...
        IncorrectPassword = ...
        UnsupportedSecurityScheme = ...

    class Status(enum.Enum):
        Null = ...
        Loading = ...
        Ready = ...
        Unloading = ...
        Error = ...

    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    pageModelChanged: typing.ClassVar[QtCore.pyqtSignal]
    pageCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    statusChanged: typing.ClassVar[QtCore.pyqtSignal]
    passwordChanged: typing.ClassVar[QtCore.pyqtSignal]
    def pageIndexForLabel(self, label: str | None) -> int: ...
    def getAllText(self, page: int) -> QPdfSelection: ...
    def getSelectionAtIndex(
        self, page: int, startIndex: int, maxLength: int
    ) -> QPdfSelection: ...
    def getSelection(
        self, page: int, start: QtCore.QPointF, end: QtCore.QPointF
    ) -> QPdfSelection: ...
    def render(
        self,
        page: int,
        imageSize: QtCore.QSize,
        options: QPdfDocumentRenderOptions = ...,
    ) -> QtGui.QImage: ...
    def pageModel(self) -> QtCore.QAbstractListModel | None: ...
    def pageLabel(self, page: int) -> str: ...
    def pagePointSize(self, page: int) -> QtCore.QSizeF: ...
    def pageCount(self) -> int: ...
    def close(self) -> None: ...
    def error(self) -> QPdfDocument.Error: ...
    def metaData(self, field: QPdfDocument.MetaDataField) -> typing.Any: ...
    def password(self) -> str: ...
    def setPassword(self, password: str | None) -> None: ...
    def status(self) -> QPdfDocument.Status: ...
    @typing.overload
    def load(self, fileName: str | None) -> QPdfDocument.Error: ...
    @typing.overload
    def load(self, device: QtCore.QIODevice | None) -> None: ...

class QPdfDocumentRenderOptions(PyQt6.sip.simplewrapper):
    class RenderFlag(enum.Enum):
        None_ = ...
        Annotations = ...
        OptimizedForLcd = ...
        Grayscale = ...
        ForceHalftone = ...
        TextAliased = ...
        ImageAliased = ...
        PathAliased = ...

    class Rotation(enum.Enum):
        None_ = ...
        Clockwise90 = ...
        Clockwise180 = ...
        Clockwise270 = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPdfDocumentRenderOptions) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def setScaledSize(self, s: QtCore.QSize) -> None: ...
    def scaledSize(self) -> QtCore.QSize: ...
    def setScaledClipRect(self, r: QtCore.QRect) -> None: ...
    def scaledClipRect(self) -> QtCore.QRect: ...
    def setRenderFlags(
        self, r: QPdfDocumentRenderOptions.RenderFlag
    ) -> None: ...
    def renderFlags(self) -> QPdfDocumentRenderOptions.RenderFlag: ...
    def setRotation(self, r: QPdfDocumentRenderOptions.Rotation) -> None: ...
    def rotation(self) -> QPdfDocumentRenderOptions.Rotation: ...

class QPdfLink(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QPdfLink) -> None: ...
    def copyToClipboard(self, mode: QtGui.QClipboard.Mode = ...) -> None: ...
    def toString(self) -> str: ...
    def rectangles(self) -> list[QtCore.QRectF]: ...
    def contextAfter(self) -> str: ...
    def contextBefore(self) -> str: ...
    def url(self) -> QtCore.QUrl: ...
    def zoom(self) -> float: ...
    def location(self) -> QtCore.QPointF: ...
    def page(self) -> int: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QPdfLink) -> None: ...

class QPdfLinkModel(QtCore.QAbstractListModel):
    class Role(enum.Enum):
        Link = ...
        Rectangle = ...
        Url = ...
        Page = ...
        Location = ...
        Zoom = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    pageChanged: typing.ClassVar[QtCore.pyqtSignal]
    documentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setPage(self, page: int) -> None: ...
    def setDocument(self, document: QPdfDocument | None) -> None: ...
    def linkAt(self, point: QtCore.QPointF) -> QPdfLink: ...
    def page(self) -> int: ...
    def data(self, index: QtCore.QModelIndex, role: int) -> typing.Any: ...
    def rowCount(self, parent: QtCore.QModelIndex) -> int: ...
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def document(self) -> QPdfDocument | None: ...

class QPdfPageNavigator(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    jumped: typing.ClassVar[QtCore.pyqtSignal]
    forwardAvailableChanged: typing.ClassVar[QtCore.pyqtSignal]
    backAvailableChanged: typing.ClassVar[QtCore.pyqtSignal]
    currentZoomChanged: typing.ClassVar[QtCore.pyqtSignal]
    currentLocationChanged: typing.ClassVar[QtCore.pyqtSignal]
    currentPageChanged: typing.ClassVar[QtCore.pyqtSignal]
    def back(self) -> None: ...
    def forward(self) -> None: ...
    def update(
        self, page: int, location: QtCore.QPointF, zoom: float
    ) -> None: ...
    @typing.overload
    def jump(self, destination: QPdfLink) -> None: ...
    @typing.overload
    def jump(
        self, page: int, location: QtCore.QPointF, zoom: float = ...
    ) -> None: ...
    def clear(self) -> None: ...
    def forwardAvailable(self) -> bool: ...
    def backAvailable(self) -> bool: ...
    def currentZoom(self) -> float: ...
    def currentLocation(self) -> QtCore.QPointF: ...
    def currentPage(self) -> int: ...

class QPdfPageRenderer(QtCore.QObject):
    class RenderMode(enum.Enum):
        MultiThreaded = ...
        SingleThreaded = ...

    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    renderModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    documentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def requestPage(
        self,
        pageNumber: int,
        imageSize: QtCore.QSize,
        options: QPdfDocumentRenderOptions = ...,
    ) -> int: ...
    def setDocument(self, document: QPdfDocument | None) -> None: ...
    def document(self) -> QPdfDocument | None: ...
    def setRenderMode(self, mode: QPdfPageRenderer.RenderMode) -> None: ...
    def renderMode(self) -> QPdfPageRenderer.RenderMode: ...

class QPdfSearchModel(QtCore.QAbstractListModel):
    class Role(enum.IntEnum):
        Page = ...
        IndexOnPage = ...
        Location = ...
        ContextBefore = ...
        ContextAfter = ...

    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    countChanged: typing.ClassVar[QtCore.pyqtSignal]
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def timerEvent(self, event: QtCore.QTimerEvent | None) -> None: ...
    searchStringChanged: typing.ClassVar[QtCore.pyqtSignal]
    documentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setDocument(self, document: QPdfDocument | None) -> None: ...
    def setSearchString(self, searchString: str | None) -> None: ...
    def data(self, index: QtCore.QModelIndex, role: int) -> typing.Any: ...
    def rowCount(self, parent: QtCore.QModelIndex) -> int: ...
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def searchString(self) -> str: ...
    def document(self) -> QPdfDocument | None: ...
    def resultAtIndex(self, index: int) -> QPdfLink: ...
    def resultsOnPage(self, page: int) -> list[QPdfLink]: ...

class QPdfSelection(PyQt6.sip.simplewrapper):
    def __init__(self, other: QPdfSelection) -> None: ...
    def copyToClipboard(self, mode: QtGui.QClipboard.Mode = ...) -> None: ...
    def endIndex(self) -> int: ...
    def startIndex(self) -> int: ...
    def boundingRectangle(self) -> QtCore.QRectF: ...
    def text(self) -> str: ...
    def bounds(self) -> list[QtGui.QPolygonF]: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QPdfSelection) -> None: ...
