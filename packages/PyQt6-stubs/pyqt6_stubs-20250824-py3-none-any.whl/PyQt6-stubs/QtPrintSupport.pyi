# The PEP 484 type hints stub file for the QtPrintSupport module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtWidgets

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QAbstractPrintDialog(QtWidgets.QDialog):
    class PrintDialogOption(enum.Flag):
        PrintToFile = ...
        PrintSelection = ...
        PrintPageRange = ...
        PrintCollateCopies = ...
        PrintShowPageSize = ...
        PrintCurrentPage = ...

    class PrintRange(enum.Enum):
        AllPages = ...
        Selection = ...
        PageRange = ...
        CurrentPage = ...

    def __init__(
        self, printer: QPrinter | None, parent: QtWidgets.QWidget | None = ...
    ) -> None: ...
    def setOptionTabs(
        self, tabs: collections.abc.Iterable[QtWidgets.QWidget]
    ) -> None: ...
    def printer(self) -> QPrinter | None: ...
    def toPage(self) -> int: ...
    def fromPage(self) -> int: ...
    def setFromTo(self, fromPage: int, toPage: int) -> None: ...
    def maxPage(self) -> int: ...
    def minPage(self) -> int: ...
    def setMinMax(self, min: int, max: int) -> None: ...
    def printRange(self) -> QAbstractPrintDialog.PrintRange: ...
    def setPrintRange(
        self, range: QAbstractPrintDialog.PrintRange
    ) -> None: ...

class QPageSetupDialog(QtWidgets.QDialog):
    @typing.overload
    def __init__(
        self, printer: QPrinter | None, parent: QtWidgets.QWidget | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtWidgets.QWidget | None = ...) -> None: ...
    def printer(self) -> QPrinter | None: ...
    def done(self, result: int) -> None: ...
    @typing.overload
    def open(self) -> None: ...
    @typing.overload
    def open(self, slot: PYQT_SLOT) -> None: ...
    def exec(self) -> int: ...
    def setVisible(self, visible: bool) -> None: ...

class QPrintDialog(QAbstractPrintDialog):
    @typing.overload
    def __init__(
        self, printer: QPrinter | None, parent: QtWidgets.QWidget | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtWidgets.QWidget | None = ...) -> None: ...

    accepted: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def open(self) -> None: ...
    @typing.overload
    def open(self, slot: PYQT_SLOT) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def options(self) -> QAbstractPrintDialog.PrintDialogOption: ...
    def setOptions(
        self, options: QAbstractPrintDialog.PrintDialogOption
    ) -> None: ...
    def testOption(
        self, option: QAbstractPrintDialog.PrintDialogOption
    ) -> bool: ...
    def setOption(
        self, option: QAbstractPrintDialog.PrintDialogOption, on: bool = ...
    ) -> None: ...
    def done(self, result: int) -> None: ...
    def accept(self) -> None: ...
    def exec(self) -> int: ...

class QPrintEngine(PyQt6.sip.simplewrapper):
    class PrintEnginePropertyKey(enum.Enum):
        PPK_CollateCopies = ...
        PPK_ColorMode = ...
        PPK_Creator = ...
        PPK_DocumentName = ...
        PPK_FullPage = ...
        PPK_NumberOfCopies = ...
        PPK_Orientation = ...
        PPK_OutputFileName = ...
        PPK_PageOrder = ...
        PPK_PageRect = ...
        PPK_PageSize = ...
        PPK_PaperRect = ...
        PPK_PaperSource = ...
        PPK_PrinterName = ...
        PPK_PrinterProgram = ...
        PPK_Resolution = ...
        PPK_SelectionOption = ...
        PPK_SupportedResolutions = ...
        PPK_WindowsPageSize = ...
        PPK_FontEmbedding = ...
        PPK_Duplex = ...
        PPK_PaperSources = ...
        PPK_CustomPaperSize = ...
        PPK_PageMargins = ...
        PPK_PaperSize = ...
        PPK_CopyCount = ...
        PPK_SupportsMultipleCopies = ...
        PPK_PaperName = ...
        PPK_QPageSize = ...
        PPK_QPageMargins = ...
        PPK_QPageLayout = ...
        PPK_CustomBase = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPrintEngine) -> None: ...
    def printerState(self) -> QPrinter.PrinterState: ...
    def metric(self, a0: QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def abort(self) -> bool: ...
    def newPage(self) -> bool: ...
    def property(
        self, key: QPrintEngine.PrintEnginePropertyKey
    ) -> typing.Any: ...
    def setProperty(
        self, key: QPrintEngine.PrintEnginePropertyKey, value: typing.Any
    ) -> None: ...

class QPrinter(QtGui.QPagedPaintDevice):
    class DuplexMode(enum.Enum):
        DuplexNone = ...
        DuplexAuto = ...
        DuplexLongSide = ...
        DuplexShortSide = ...

    class Unit(enum.Enum):
        Millimeter = ...
        Point = ...
        Inch = ...
        Pica = ...
        Didot = ...
        Cicero = ...
        DevicePixel = ...

    class PrintRange(enum.Enum):
        AllPages = ...
        Selection = ...
        PageRange = ...
        CurrentPage = ...

    class OutputFormat(enum.Enum):
        NativeFormat = ...
        PdfFormat = ...

    class PrinterState(enum.Enum):
        Idle = ...
        Active = ...
        Aborted = ...
        Error = ...

    class PaperSource(enum.Enum):
        OnlyOne = ...
        Lower = ...
        Middle = ...
        Manual = ...
        Envelope = ...
        EnvelopeManual = ...
        Auto = ...
        Tractor = ...
        SmallFormat = ...
        LargeFormat = ...
        LargeCapacity = ...
        Cassette = ...
        FormSource = ...
        MaxPageSource = ...
        Upper = ...
        CustomSource = ...
        LastPaperSource = ...

    class ColorMode(enum.Enum):
        GrayScale = ...
        Color = ...

    class PageOrder(enum.Enum):
        FirstPageFirst = ...
        LastPageFirst = ...

    class PrinterMode(enum.Enum):
        ScreenResolution = ...
        PrinterResolution = ...
        HighResolution = ...

    @typing.overload
    def __init__(self, mode: QPrinter.PrinterMode = ...) -> None: ...
    @typing.overload
    def __init__(
        self, printer: QPrinterInfo, mode: QPrinter.PrinterMode = ...
    ) -> None: ...
    def pdfVersion(self) -> QtGui.QPagedPaintDevice.PdfVersion: ...
    def setPdfVersion(
        self, version: QtGui.QPagedPaintDevice.PdfVersion
    ) -> None: ...
    def setEngines(
        self,
        printEngine: QPrintEngine | None,
        paintEngine: QtGui.QPaintEngine | None,
    ) -> None: ...
    def metric(self, a0: QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def printRange(self) -> QPrinter.PrintRange: ...
    def setPrintRange(self, range: QPrinter.PrintRange) -> None: ...
    def toPage(self) -> int: ...
    def fromPage(self) -> int: ...
    def setFromTo(self, fromPage: int, toPage: int) -> None: ...
    def printEngine(self) -> QPrintEngine | None: ...
    def paintEngine(self) -> QtGui.QPaintEngine | None: ...
    def printerState(self) -> QPrinter.PrinterState: ...
    def abort(self) -> bool: ...
    def newPage(self) -> bool: ...
    def setPrinterSelectionOption(self, a0: str | None) -> None: ...
    def printerSelectionOption(self) -> str: ...
    def pageRect(self, a0: QPrinter.Unit) -> QtCore.QRectF: ...
    def paperRect(self, a0: QPrinter.Unit) -> QtCore.QRectF: ...
    def fontEmbeddingEnabled(self) -> bool: ...
    def setFontEmbeddingEnabled(self, enable: bool) -> None: ...
    def supportedResolutions(self) -> list[int]: ...
    def duplex(self) -> QPrinter.DuplexMode: ...
    def setDuplex(self, duplex: QPrinter.DuplexMode) -> None: ...
    def paperSource(self) -> QPrinter.PaperSource: ...
    def setPaperSource(self, a0: QPrinter.PaperSource) -> None: ...
    def supportsMultipleCopies(self) -> bool: ...
    def copyCount(self) -> int: ...
    def setCopyCount(self, a0: int) -> None: ...
    def fullPage(self) -> bool: ...
    def setFullPage(self, a0: bool) -> None: ...
    def collateCopies(self) -> bool: ...
    def setCollateCopies(self, collate: bool) -> None: ...
    def colorMode(self) -> QPrinter.ColorMode: ...
    def setColorMode(self, a0: QPrinter.ColorMode) -> None: ...
    def resolution(self) -> int: ...
    def setResolution(self, a0: int) -> None: ...
    def pageOrder(self) -> QPrinter.PageOrder: ...
    def setPageOrder(self, a0: QPrinter.PageOrder) -> None: ...
    def creator(self) -> str: ...
    def setCreator(self, a0: str | None) -> None: ...
    def docName(self) -> str: ...
    def setDocName(self, a0: str | None) -> None: ...
    def printProgram(self) -> str: ...
    def setPrintProgram(self, a0: str | None) -> None: ...
    def outputFileName(self) -> str: ...
    def setOutputFileName(self, a0: str | None) -> None: ...
    def isValid(self) -> bool: ...
    def printerName(self) -> str: ...
    def setPrinterName(self, a0: str | None) -> None: ...
    def outputFormat(self) -> QPrinter.OutputFormat: ...
    def setOutputFormat(self, format: QPrinter.OutputFormat) -> None: ...

class QPrinterInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, src: QPrinterInfo) -> None: ...
    @typing.overload
    def __init__(self, printer: QPrinter) -> None: ...
    def supportedColorModes(self) -> list[QPrinter.ColorMode]: ...
    def defaultColorMode(self) -> QPrinter.ColorMode: ...
    def supportedDuplexModes(self) -> list[QPrinter.DuplexMode]: ...
    def defaultDuplexMode(self) -> QPrinter.DuplexMode: ...
    @staticmethod
    def defaultPrinterName() -> str: ...
    @staticmethod
    def availablePrinterNames() -> list[str]: ...
    def supportedResolutions(self) -> list[int]: ...
    def maximumPhysicalPageSize(self) -> QtGui.QPageSize: ...
    def minimumPhysicalPageSize(self) -> QtGui.QPageSize: ...
    def supportsCustomPageSizes(self) -> bool: ...
    def defaultPageSize(self) -> QtGui.QPageSize: ...
    def supportedPageSizes(self) -> list[QtGui.QPageSize]: ...
    def state(self) -> QPrinter.PrinterState: ...
    def isRemote(self) -> bool: ...
    @staticmethod
    def printerInfo(printerName: str | None) -> QPrinterInfo: ...
    def makeAndModel(self) -> str: ...
    def location(self) -> str: ...
    def description(self) -> str: ...
    @staticmethod
    def defaultPrinter() -> QPrinterInfo: ...
    @staticmethod
    def availablePrinters() -> list[QPrinterInfo]: ...
    def isDefault(self) -> bool: ...
    def isNull(self) -> bool: ...
    def printerName(self) -> str: ...

class QPrintPreviewDialog(QtWidgets.QDialog):
    @typing.overload
    def __init__(
        self,
        parent: QtWidgets.QWidget | None = ...,
        flags: QtCore.Qt.WindowType = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        printer: QPrinter | None,
        parent: QtWidgets.QWidget | None = ...,
        flags: QtCore.Qt.WindowType = ...,
    ) -> None: ...

    paintRequested: typing.ClassVar[QtCore.pyqtSignal]
    def done(self, result: int) -> None: ...
    def printer(self) -> QPrinter | None: ...
    @typing.overload
    def open(self) -> None: ...
    @typing.overload
    def open(self, slot: PYQT_SLOT) -> None: ...
    def setVisible(self, visible: bool) -> None: ...

class QPrintPreviewWidget(QtWidgets.QWidget):
    class ZoomMode(enum.Enum):
        CustomZoom = ...
        FitToWidth = ...
        FitInView = ...

    class ViewMode(enum.Enum):
        SinglePageView = ...
        FacingPagesView = ...
        AllPagesView = ...

    @typing.overload
    def __init__(
        self,
        printer: QPrinter | None,
        parent: QtWidgets.QWidget | None = ...,
        flags: QtCore.Qt.WindowType = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        parent: QtWidgets.QWidget | None = ...,
        flags: QtCore.Qt.WindowType = ...,
    ) -> None: ...
    def pageCount(self) -> int: ...
    previewChanged: typing.ClassVar[QtCore.pyqtSignal]
    paintRequested: typing.ClassVar[QtCore.pyqtSignal]
    def updatePreview(self) -> None: ...
    def setAllPagesViewMode(self) -> None: ...
    def setFacingPagesViewMode(self) -> None: ...
    def setSinglePageViewMode(self) -> None: ...
    def setPortraitOrientation(self) -> None: ...
    def setLandscapeOrientation(self) -> None: ...
    def fitInView(self) -> None: ...
    def fitToWidth(self) -> None: ...
    def setCurrentPage(self, pageNumber: int) -> None: ...
    def setZoomMode(self, zoomMode: QPrintPreviewWidget.ZoomMode) -> None: ...
    def setViewMode(self, viewMode: QPrintPreviewWidget.ViewMode) -> None: ...
    def setOrientation(
        self, orientation: QtGui.QPageLayout.Orientation
    ) -> None: ...
    def setZoomFactor(self, zoomFactor: float) -> None: ...
    def zoomOut(self, factor: float = ...) -> None: ...
    def zoomIn(self, factor: float = ...) -> None: ...
    def print(self) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def currentPage(self) -> int: ...
    def zoomMode(self) -> QPrintPreviewWidget.ZoomMode: ...
    def viewMode(self) -> QPrintPreviewWidget.ViewMode: ...
    def orientation(self) -> QtGui.QPageLayout.Orientation: ...
    def zoomFactor(self) -> float: ...
