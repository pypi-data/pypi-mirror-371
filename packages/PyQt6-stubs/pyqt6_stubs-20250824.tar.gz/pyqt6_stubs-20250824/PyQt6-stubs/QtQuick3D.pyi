# The PEP 484 type hints stub file for the QtQuick3D module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtQml

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QQuick3D(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QQuick3D) -> None: ...
    @staticmethod
    def idealSurfaceFormat(samples: int = ...) -> QtGui.QSurfaceFormat: ...

class QQuick3DObject(QtCore.QObject, QtQml.QQmlParserStatus):
    def __init__(self, parent: QQuick3DObject | None = ...) -> None: ...
    def componentComplete(self) -> None: ...
    def classBegin(self) -> None: ...
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setParentItem(self, parentItem: QQuick3DObject | None) -> None: ...
    def parentItem(self) -> QQuick3DObject | None: ...
    def setState(self, state: str | None) -> None: ...
    def state(self) -> str: ...

class QQuick3DGeometry(QQuick3DObject):
    class PrimitiveType(enum.Enum):
        Points = ...
        LineStrip = ...
        Lines = ...
        TriangleStrip = ...
        TriangleFan = ...
        Triangles = ...

    class Attribute(PyQt6.sip.simplewrapper):
        class ComponentType(enum.Enum):
            U16Type = ...
            U32Type = ...
            F32Type = ...
            I32Type = ...

        class Semantic(enum.Enum):
            IndexSemantic = ...
            PositionSemantic = ...
            NormalSemantic = ...
            TexCoordSemantic = ...
            TangentSemantic = ...
            BinormalSemantic = ...
            JointSemantic = ...
            WeightSemantic = ...
            ColorSemantic = ...
            TargetPositionSemantic = ...
            TargetNormalSemantic = ...
            TargetTangentSemantic = ...
            TargetBinormalSemantic = ...
            TexCoord1Semantic = ...
            TexCoord0Semantic = ...

        componentType: QQuick3DGeometry.Attribute.ComponentType = ...
        offset: int = ...
        semantic: QQuick3DGeometry.Attribute.Semantic = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QQuick3DGeometry.Attribute) -> None: ...

    class TargetAttribute(PyQt6.sip.simplewrapper):
        attr: QQuick3DGeometry.Attribute = ...
        stride: int = ...
        targetId: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QQuick3DGeometry.TargetAttribute) -> None: ...

    def __init__(self, parent: QQuick3DObject | None = ...) -> None: ...
    @typing.overload
    def addTargetAttribute(
        self, att: QQuick3DGeometry.TargetAttribute
    ) -> None: ...
    @typing.overload
    def addTargetAttribute(
        self,
        targetId: int,
        semantic: QQuick3DGeometry.Attribute.Semantic,
        offset: int,
        stride: int = ...,
    ) -> None: ...
    def targetAttributeCount(self) -> int: ...
    def targetAttribute(
        self, index: int
    ) -> QQuick3DGeometry.TargetAttribute: ...
    @typing.overload
    def setTargetData(
        self,
        offset: int,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    @typing.overload
    def setTargetData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def targetData(self) -> QtCore.QByteArray: ...
    def addSubset(
        self,
        offset: int,
        count: int,
        boundsMin: QtGui.QVector3D,
        boundsMax: QtGui.QVector3D,
        name: str | None = ...,
    ) -> None: ...
    def subsetName(self, subset: int) -> str: ...
    def subsetOffset(self, subset: int) -> int: ...
    def subsetBoundsMax(self, subset: int) -> QtGui.QVector3D: ...
    def subsetBoundsMin(self, subset: int) -> QtGui.QVector3D: ...
    @typing.overload
    def subsetCount(self, subset: int) -> int: ...
    @typing.overload
    def subsetCount(self) -> int: ...
    def indexData(self) -> QtCore.QByteArray: ...
    def vertexData(self) -> QtCore.QByteArray: ...
    def clear(self) -> None: ...
    @typing.overload
    def addAttribute(
        self,
        semantic: QQuick3DGeometry.Attribute.Semantic,
        offset: int,
        componentType: QQuick3DGeometry.Attribute.ComponentType,
    ) -> None: ...
    @typing.overload
    def addAttribute(self, att: QQuick3DGeometry.Attribute) -> None: ...
    def setPrimitiveType(
        self, type: QQuick3DGeometry.PrimitiveType
    ) -> None: ...
    def setBounds(
        self, min: QtGui.QVector3D, max: QtGui.QVector3D
    ) -> None: ...
    def setStride(self, stride: int) -> None: ...
    @typing.overload
    def setIndexData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def setIndexData(
        self,
        offset: int,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    @typing.overload
    def setVertexData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def setVertexData(
        self,
        offset: int,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def stride(self) -> int: ...
    def boundsMax(self) -> QtGui.QVector3D: ...
    def boundsMin(self) -> QtGui.QVector3D: ...
    def primitiveType(self) -> QQuick3DGeometry.PrimitiveType: ...
    def attribute(self, index: int) -> QQuick3DGeometry.Attribute: ...
    def attributeCount(self) -> int: ...

class QQuick3DTextureData(QQuick3DObject):
    class Format(enum.Enum):
        None_ = ...
        RGBA8 = ...
        RGBA16F = ...
        RGBA32F = ...
        RGBE8 = ...
        R8 = ...
        R16 = ...
        R16F = ...
        R32F = ...
        BC1 = ...
        BC2 = ...
        BC3 = ...
        BC4 = ...
        BC5 = ...
        BC6H = ...
        BC7 = ...
        DXT1_RGBA = ...
        DXT1_RGB = ...
        DXT3_RGBA = ...
        DXT5_RGBA = ...
        ETC2_RGB8 = ...
        ETC2_RGB8A1 = ...
        ETC2_RGBA8 = ...
        ASTC_4x4 = ...
        ASTC_5x4 = ...
        ASTC_5x5 = ...
        ASTC_6x5 = ...
        ASTC_6x6 = ...
        ASTC_8x5 = ...
        ASTC_8x6 = ...
        ASTC_8x8 = ...
        ASTC_10x5 = ...
        ASTC_10x6 = ...
        ASTC_10x8 = ...
        ASTC_10x10 = ...
        ASTC_12x10 = ...
        ASTC_12x12 = ...

    def __init__(self, parent: QQuick3DObject | None = ...) -> None: ...
    def setDepth(self, depth: int) -> None: ...
    def depth(self) -> int: ...
    def setHasTransparency(self, hasTransparency: bool) -> None: ...
    def hasTransparency(self) -> bool: ...
    def setFormat(self, format: QQuick3DTextureData.Format) -> None: ...
    def format(self) -> QQuick3DTextureData.Format: ...
    def setSize(self, size: QtCore.QSize) -> None: ...
    def size(self) -> QtCore.QSize: ...
    def setTextureData(
        self, data: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def textureData(self) -> QtCore.QByteArray: ...
