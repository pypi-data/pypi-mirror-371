# The PEP 484 type hints stub file for the QtWebEngineCore module.
#
# Generated by SIP 6.10.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6-WebEngine.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtNetwork, QtWebChannel

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QWebEngineCertificateError(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        SslPinnedKeyNotInCertificateChain = ...
        CertificateCommonNameInvalid = ...
        CertificateDateInvalid = ...
        CertificateAuthorityInvalid = ...
        CertificateContainsErrors = ...
        CertificateNoRevocationMechanism = ...
        CertificateUnableToCheckRevocation = ...
        CertificateRevoked = ...
        CertificateInvalid = ...
        CertificateWeakSignatureAlgorithm = ...
        CertificateNonUniqueName = ...
        CertificateWeakKey = ...
        CertificateNameConstraintViolation = ...
        CertificateValidityTooLong = ...
        CertificateTransparencyRequired = ...
        CertificateSymantecLegacy = ...
        CertificateKnownInterceptionBlocked = ...
        SslObsoleteVersion = ...

    def __init__(self, other: QWebEngineCertificateError) -> None: ...
    def isMainFrame(self) -> bool: ...
    def acceptCertificate(self) -> None: ...
    def description(self) -> str: ...
    def type(self) -> QWebEngineCertificateError.Type: ...
    def certificateChain(self) -> list[QtNetwork.QSslCertificate]: ...
    def rejectCertificate(self) -> None: ...
    def defer(self) -> None: ...
    def isOverridable(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineClientCertificateSelection(PyQt6.sip.simplewrapper):
    def __init__(self, a0: QWebEngineClientCertificateSelection) -> None: ...
    def certificates(self) -> list[QtNetwork.QSslCertificate]: ...
    def selectNone(self) -> None: ...
    def select(self, certificate: QtNetwork.QSslCertificate) -> None: ...
    def host(self) -> QtCore.QUrl: ...

class QWebEngineClientCertificateStore(PyQt6.sip.simplewrapper):
    def certificates(self) -> list[QtNetwork.QSslCertificate]: ...
    def clear(self) -> None: ...
    def remove(self, certificate: QtNetwork.QSslCertificate) -> None: ...
    def add(
        self,
        certificate: QtNetwork.QSslCertificate,
        privateKey: QtNetwork.QSslKey,
    ) -> None: ...

class QWebEngineClientHints(QtCore.QObject):
    def resetAll(self) -> None: ...
    def setAllClientHintsEnabled(self, enabled: bool) -> None: ...
    def isAllClientHintsEnabled(self) -> bool: ...
    def setIsWow64(self, a0: bool) -> None: ...
    def setFullVersionList(self, a0: dict[str | None, typing.Any]) -> None: ...
    def setBitness(self, a0: str | None) -> None: ...
    def setPlatformVersion(self, a0: str | None) -> None: ...
    def setFullVersion(self, a0: str | None) -> None: ...
    def setIsMobile(self, a0: bool) -> None: ...
    def setModel(self, a0: str | None) -> None: ...
    def setPlatform(self, a0: str | None) -> None: ...
    def setArch(self, a0: str | None) -> None: ...
    def isWow64(self) -> bool: ...
    def fullVersionList(self) -> dict[str, typing.Any]: ...
    def bitness(self) -> str: ...
    def platformVersion(self) -> str: ...
    def fullVersion(self) -> str: ...
    def isMobile(self) -> bool: ...
    def model(self) -> str: ...
    def platform(self) -> str: ...
    def arch(self) -> str: ...

class QWebEngineContextMenuRequest(QtCore.QObject):
    class EditFlag(enum.Flag):
        CanUndo = ...
        CanRedo = ...
        CanCut = ...
        CanCopy = ...
        CanPaste = ...
        CanDelete = ...
        CanSelectAll = ...
        CanTranslate = ...
        CanEditRichly = ...

    class MediaFlag(enum.Flag):
        MediaInError = ...
        MediaPaused = ...
        MediaMuted = ...
        MediaLoop = ...
        MediaCanSave = ...
        MediaHasAudio = ...
        MediaCanToggleControls = ...
        MediaControls = ...
        MediaCanPrint = ...
        MediaCanRotate = ...

    class MediaType(enum.Enum):
        MediaTypeNone = ...
        MediaTypeImage = ...
        MediaTypeVideo = ...
        MediaTypeAudio = ...
        MediaTypeCanvas = ...
        MediaTypeFile = ...
        MediaTypePlugin = ...

    def editFlags(self) -> QWebEngineContextMenuRequest.EditFlag: ...
    def mediaFlags(self) -> QWebEngineContextMenuRequest.MediaFlag: ...
    def setAccepted(self, accepted: bool) -> None: ...
    def isAccepted(self) -> bool: ...
    def spellCheckerSuggestions(self) -> list[str]: ...
    def misspelledWord(self) -> str: ...
    def isContentEditable(self) -> bool: ...
    def mediaType(self) -> QWebEngineContextMenuRequest.MediaType: ...
    def mediaUrl(self) -> QtCore.QUrl: ...
    def linkUrl(self) -> QtCore.QUrl: ...
    def linkText(self) -> str: ...
    def selectedText(self) -> str: ...
    def position(self) -> QtCore.QPoint: ...

class QWebEngineCookieStore(QtCore.QObject):
    class FilterRequest(PyQt6.sip.simplewrapper):
        firstPartyUrl: QtCore.QUrl = ...
        origin: QtCore.QUrl = ...
        thirdParty: bool = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, a0: QWebEngineCookieStore.FilterRequest
        ) -> None: ...

    def setCookieFilter(
        self,
        filterCallback: collections.abc.Callable[[FilterRequest], bool] = ...,
    ) -> None: ...
    cookieRemoved: typing.ClassVar[QtCore.pyqtSignal]
    cookieAdded: typing.ClassVar[QtCore.pyqtSignal]
    def loadAllCookies(self) -> None: ...
    def deleteAllCookies(self) -> None: ...
    def deleteSessionCookies(self) -> None: ...
    def deleteCookie(
        self, cookie: QtNetwork.QNetworkCookie, origin: QtCore.QUrl = ...
    ) -> None: ...
    def setCookie(
        self, cookie: QtNetwork.QNetworkCookie, origin: QtCore.QUrl = ...
    ) -> None: ...

class QWebEngineDesktopMediaRequest(PyQt6.sip.simplewrapper):
    def cancel(self) -> None: ...
    def selectWindow(self, index: QtCore.QModelIndex) -> None: ...
    def selectScreen(self, index: QtCore.QModelIndex) -> None: ...
    def windowsModel(self) -> QtCore.QAbstractListModel | None: ...
    def screensModel(self) -> QtCore.QAbstractListModel | None: ...

class QWebEngineDownloadRequest(QtCore.QObject):
    class DownloadInterruptReason(enum.Enum):
        NoReason = ...
        FileFailed = ...
        FileAccessDenied = ...
        FileNoSpace = ...
        FileNameTooLong = ...
        FileTooLarge = ...
        FileVirusInfected = ...
        FileTransientError = ...
        FileBlocked = ...
        FileSecurityCheckFailed = ...
        FileTooShort = ...
        FileHashMismatch = ...
        NetworkFailed = ...
        NetworkTimeout = ...
        NetworkDisconnected = ...
        NetworkServerDown = ...
        NetworkInvalidRequest = ...
        ServerFailed = ...
        ServerBadContent = ...
        ServerUnauthorized = ...
        ServerCertProblem = ...
        ServerForbidden = ...
        ServerUnreachable = ...
        UserCanceled = ...

    class SavePageFormat(enum.Enum):
        UnknownSaveFormat = ...
        SingleHtmlSaveFormat = ...
        CompleteHtmlSaveFormat = ...
        MimeHtmlSaveFormat = ...

    class DownloadState(enum.Enum):
        DownloadRequested = ...
        DownloadInProgress = ...
        DownloadCompleted = ...
        DownloadCancelled = ...
        DownloadInterrupted = ...

    downloadFileNameChanged: typing.ClassVar[QtCore.pyqtSignal]
    downloadDirectoryChanged: typing.ClassVar[QtCore.pyqtSignal]
    isPausedChanged: typing.ClassVar[QtCore.pyqtSignal]
    isFinishedChanged: typing.ClassVar[QtCore.pyqtSignal]
    interruptReasonChanged: typing.ClassVar[QtCore.pyqtSignal]
    totalBytesChanged: typing.ClassVar[QtCore.pyqtSignal]
    receivedBytesChanged: typing.ClassVar[QtCore.pyqtSignal]
    savePageFormatChanged: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setDownloadFileName(self, fileName: str | None) -> None: ...
    def downloadFileName(self) -> str: ...
    def setDownloadDirectory(self, directory: str | None) -> None: ...
    def downloadDirectory(self) -> str: ...
    def suggestedFileName(self) -> str: ...
    def page(self) -> QWebEnginePage | None: ...
    def isSavePageDownload(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def interruptReasonString(self) -> str: ...
    def interruptReason(
        self,
    ) -> QWebEngineDownloadRequest.DownloadInterruptReason: ...
    def setSavePageFormat(
        self, format: QWebEngineDownloadRequest.SavePageFormat
    ) -> None: ...
    def savePageFormat(self) -> QWebEngineDownloadRequest.SavePageFormat: ...
    def mimeType(self) -> str: ...
    def resume(self) -> None: ...
    def pause(self) -> None: ...
    def cancel(self) -> None: ...
    def accept(self) -> None: ...
    def isFinished(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...
    def receivedBytes(self) -> int: ...
    def totalBytes(self) -> int: ...
    def state(self) -> QWebEngineDownloadRequest.DownloadState: ...
    def id(self) -> int: ...

class QWebEngineFileSystemAccessRequest(PyQt6.sip.simplewrapper):
    class HandleType(enum.Enum):
        File = ...
        Directory = ...

    class AccessFlag(enum.Flag):
        Read = ...
        Write = ...

    def __init__(self, other: QWebEngineFileSystemAccessRequest) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def accessFlags(self) -> QWebEngineFileSystemAccessRequest.AccessFlag: ...
    def handleType(self) -> QWebEngineFileSystemAccessRequest.HandleType: ...
    def filePath(self) -> QtCore.QUrl: ...
    def origin(self) -> QtCore.QUrl: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...
    def swap(self, other: QWebEngineFileSystemAccessRequest) -> None: ...

class QWebEngineFindTextResult(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QWebEngineFindTextResult) -> None: ...
    def activeMatch(self) -> int: ...
    def numberOfMatches(self) -> int: ...

class QWebEngineFrame(PyQt6.sip.simplewrapper):
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def printToPdf(self, filePath: str | None) -> None: ...
    @typing.overload
    def printToPdf(
        self,
        callback: collections.abc.Callable[
            [QtCore.QByteArray | bytes | bytearray | memoryview], None
        ],
    ) -> None: ...
    @typing.overload
    def runJavaScript(
        self, script: str | None, worldId: int = ...
    ) -> None: ...
    @typing.overload
    def runJavaScript(
        self,
        script: str | None,
        callback: collections.abc.Callable[[typing.Any], None],
    ) -> None: ...
    @typing.overload
    def runJavaScript(
        self,
        script: str | None,
        worldId: int,
        callback: collections.abc.Callable[[typing.Any], None],
    ) -> None: ...
    def isMainFrame(self) -> bool: ...
    def size(self) -> QtCore.QSizeF: ...
    def url(self) -> QtCore.QUrl: ...
    def children(self) -> list[QWebEngineFrame]: ...
    def htmlName(self) -> str: ...
    def name(self) -> str: ...
    def isValid(self) -> bool: ...

class QWebEngineFullScreenRequest(PyQt6.sip.simplewrapper):
    def __init__(self, other: QWebEngineFullScreenRequest) -> None: ...
    def origin(self) -> QtCore.QUrl: ...
    def toggleOn(self) -> bool: ...
    def accept(self) -> None: ...
    def reject(self) -> None: ...

class QWebEngineGlobalSettings(PyQt6.sip.simplewrapper):
    class SecureDnsMode(enum.Enum):
        SystemOnly = ...
        SecureWithFallback = ...
        SecureOnly = ...

    class DnsMode(PyQt6.sip.simplewrapper):
        secureMode: QWebEngineGlobalSettings.SecureDnsMode = ...
        serverTemplates: collections.abc.Iterable[str | None] = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QWebEngineGlobalSettings.DnsMode) -> None: ...

class QWebEngineHistoryItem(PyQt6.sip.simplewrapper):
    def __init__(self, other: QWebEngineHistoryItem) -> None: ...
    def swap(self, other: QWebEngineHistoryItem) -> None: ...
    def isValid(self) -> bool: ...
    def iconUrl(self) -> QtCore.QUrl: ...
    def lastVisited(self) -> QtCore.QDateTime: ...
    def title(self) -> str: ...
    def url(self) -> QtCore.QUrl: ...
    def originalUrl(self) -> QtCore.QUrl: ...

class QWebEngineHistoryModel(QtCore.QAbstractListModel):
    class Roles(enum.Enum):
        UrlRole = ...
        TitleRole = ...
        OffsetRole = ...
        IconUrlRole = ...

    def reset(self) -> None: ...
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def data(
        self, index: QtCore.QModelIndex, role: int = ...
    ) -> typing.Any: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...

class QWebEngineHistory(QtCore.QObject):
    def forwardItemsModel(self) -> QWebEngineHistoryModel | None: ...
    def backItemsModel(self) -> QWebEngineHistoryModel | None: ...
    def itemsModel(self) -> QWebEngineHistoryModel | None: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def currentItemIndex(self) -> int: ...
    def itemAt(self, i: int) -> QWebEngineHistoryItem: ...
    def forwardItem(self) -> QWebEngineHistoryItem: ...
    def currentItem(self) -> QWebEngineHistoryItem: ...
    def backItem(self) -> QWebEngineHistoryItem: ...
    def goToItem(self, item: QWebEngineHistoryItem) -> None: ...
    def forward(self) -> None: ...
    def back(self) -> None: ...
    def canGoForward(self) -> bool: ...
    def canGoBack(self) -> bool: ...
    def forwardItems(self, maxItems: int) -> list[QWebEngineHistoryItem]: ...
    def backItems(self, maxItems: int) -> list[QWebEngineHistoryItem]: ...
    def items(self) -> list[QWebEngineHistoryItem]: ...
    def clear(self) -> None: ...

class QWebEngineHttpRequest(PyQt6.sip.simplewrapper):
    class Method(enum.Enum):
        Get = ...
        Post = ...

    @typing.overload
    def __init__(
        self,
        url: QtCore.QUrl = ...,
        method: QWebEngineHttpRequest.Method = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QWebEngineHttpRequest) -> None: ...
    def headers(self) -> list[QtCore.QByteArray]: ...
    def unsetHeader(
        self, headerName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def setHeader(
        self,
        headerName: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def header(
        self, headerName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> QtCore.QByteArray: ...
    def hasHeader(
        self, headerName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def setPostData(
        self, postData: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def postData(self) -> QtCore.QByteArray: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def setMethod(self, method: QWebEngineHttpRequest.Method) -> None: ...
    def method(self) -> QWebEngineHttpRequest.Method: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def swap(self, other: QWebEngineHttpRequest) -> None: ...
    @staticmethod
    def postRequest(
        url: QtCore.QUrl, postData: dict[str | None, str | None]
    ) -> QWebEngineHttpRequest: ...

class QWebEngineLoadingInfo(PyQt6.sip.simplewrapper):
    class ErrorDomain(enum.Enum):
        NoErrorDomain = ...
        InternalErrorDomain = ...
        ConnectionErrorDomain = ...
        CertificateErrorDomain = ...
        HttpErrorDomain = ...
        FtpErrorDomain = ...
        DnsErrorDomain = ...
        HttpStatusCodeDomain = ...

    class LoadStatus(enum.Enum):
        LoadStartedStatus = ...
        LoadStoppedStatus = ...
        LoadSucceededStatus = ...
        LoadFailedStatus = ...

    def __init__(self, other: QWebEngineLoadingInfo) -> None: ...
    def isDownload(self) -> bool: ...
    def responseHeaders(
        self,
    ) -> dict[QtCore.QByteArray, list[QtCore.QByteArray]]: ...
    def errorCode(self) -> int: ...
    def errorDomain(self) -> QWebEngineLoadingInfo.ErrorDomain: ...
    def errorString(self) -> str: ...
    def status(self) -> QWebEngineLoadingInfo.LoadStatus: ...
    def isErrorPage(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineNavigationRequest(QtCore.QObject):
    class NavigationType(enum.Enum):
        LinkClickedNavigation = ...
        TypedNavigation = ...
        FormSubmittedNavigation = ...
        BackForwardNavigation = ...
        ReloadNavigation = ...
        OtherNavigation = ...
        RedirectNavigation = ...

    actionChanged: typing.ClassVar[QtCore.pyqtSignal]
    def hasFormData(self) -> bool: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...
    def navigationType(self) -> QWebEngineNavigationRequest.NavigationType: ...
    def isMainFrame(self) -> bool: ...
    def url(self) -> QtCore.QUrl: ...

class QWebEngineNewWindowRequest(QtCore.QObject):
    class DestinationType(enum.Enum):
        InNewWindow = ...
        InNewTab = ...
        InNewDialog = ...
        InNewBackgroundTab = ...

    def openIn(self, a0: QWebEnginePage | None) -> None: ...
    def isUserInitiated(self) -> bool: ...
    def requestedGeometry(self) -> QtCore.QRect: ...
    def requestedUrl(self) -> QtCore.QUrl: ...
    def destination(self) -> QWebEngineNewWindowRequest.DestinationType: ...

class QWebEngineNotification(QtCore.QObject):
    closed: typing.ClassVar[QtCore.pyqtSignal]
    def close(self) -> None: ...
    def click(self) -> None: ...
    def show(self) -> None: ...
    def direction(self) -> QtCore.Qt.LayoutDirection: ...
    def language(self) -> str: ...
    def tag(self) -> str: ...
    def message(self) -> str: ...
    def title(self) -> str: ...
    def icon(self) -> QtGui.QImage: ...
    def origin(self) -> QtCore.QUrl: ...
    def matches(self, other: QWebEngineNotification | None) -> bool: ...

class QWebEnginePage(QtCore.QObject):
    class LifecycleState(enum.Enum):
        Active = ...
        Frozen = ...
        Discarded = ...

    class RenderProcessTerminationStatus(enum.Enum):
        NormalTerminationStatus = ...
        AbnormalTerminationStatus = ...
        CrashedTerminationStatus = ...
        KilledTerminationStatus = ...

    class NavigationType(enum.Enum):
        NavigationTypeLinkClicked = ...
        NavigationTypeTyped = ...
        NavigationTypeFormSubmitted = ...
        NavigationTypeBackForward = ...
        NavigationTypeReload = ...
        NavigationTypeRedirect = ...
        NavigationTypeOther = ...

    class JavaScriptConsoleMessageLevel(enum.Enum):
        InfoMessageLevel = ...
        WarningMessageLevel = ...
        ErrorMessageLevel = ...

    class FileSelectionMode(enum.Enum):
        FileSelectOpen = ...
        FileSelectOpenMultiple = ...
        FileSelectUploadFolder = ...
        FileSelectSave = ...

    class Feature(enum.Enum):
        Notifications = ...
        Geolocation = ...
        MediaAudioCapture = ...
        MediaVideoCapture = ...
        MediaAudioVideoCapture = ...
        MouseLock = ...
        DesktopVideoCapture = ...
        DesktopAudioVideoCapture = ...
        ClipboardReadWrite = ...
        LocalFontsAccess = ...

    class PermissionPolicy(enum.Enum):
        PermissionUnknown = ...
        PermissionGrantedByUser = ...
        PermissionDeniedByUser = ...

    class WebWindowType(enum.Enum):
        WebBrowserWindow = ...
        WebBrowserTab = ...
        WebDialog = ...
        WebBrowserBackgroundTab = ...

    class FindFlag(enum.Flag):
        FindBackward = ...
        FindCaseSensitively = ...

    class WebAction(enum.Enum):
        NoWebAction = ...
        Back = ...
        Forward = ...
        Stop = ...
        Reload = ...
        Cut = ...
        Copy = ...
        Paste = ...
        Undo = ...
        Redo = ...
        SelectAll = ...
        ReloadAndBypassCache = ...
        PasteAndMatchStyle = ...
        OpenLinkInThisWindow = ...
        OpenLinkInNewWindow = ...
        OpenLinkInNewTab = ...
        CopyLinkToClipboard = ...
        DownloadLinkToDisk = ...
        CopyImageToClipboard = ...
        CopyImageUrlToClipboard = ...
        DownloadImageToDisk = ...
        CopyMediaUrlToClipboard = ...
        ToggleMediaControls = ...
        ToggleMediaLoop = ...
        ToggleMediaPlayPause = ...
        ToggleMediaMute = ...
        DownloadMediaToDisk = ...
        InspectElement = ...
        ExitFullScreen = ...
        RequestClose = ...
        Unselect = ...
        SavePage = ...
        OpenLinkInNewBackgroundTab = ...
        ViewSource = ...
        ToggleBold = ...
        ToggleItalic = ...
        ToggleUnderline = ...
        ToggleStrikethrough = ...
        AlignLeft = ...
        AlignCenter = ...
        AlignRight = ...
        AlignJustified = ...
        Indent = ...
        Outdent = ...
        InsertOrderedList = ...
        InsertUnorderedList = ...
        ChangeTextDirectionLTR = ...
        ChangeTextDirectionRTL = ...

    @typing.overload
    def __init__(
        self,
        profile: QWebEngineProfile | None,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    printRequestedByFrame: typing.ClassVar[QtCore.pyqtSignal]
    zoomFactorChanged: typing.ClassVar[QtCore.pyqtSignal]
    permissionRequested: typing.ClassVar[QtCore.pyqtSignal]
    def findFrameByName(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QWebEngineFrame | None: ...
    def mainFrame(self) -> QWebEngineFrame: ...
    webAuthUxRequested: typing.ClassVar[QtCore.pyqtSignal]
    desktopMediaRequested: typing.ClassVar[QtCore.pyqtSignal]
    def devToolsId(self) -> str: ...
    fileSystemAccessRequested: typing.ClassVar[QtCore.pyqtSignal]
    newWindowRequested: typing.ClassVar[QtCore.pyqtSignal]
    navigationRequested: typing.ClassVar[QtCore.pyqtSignal]
    certificateError: typing.ClassVar[QtCore.pyqtSignal]
    loadingChanged: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def printToPdf(
        self,
        filePath: str | None,
        pageLayout: QtGui.QPageLayout = ...,
        ranges: QtGui.QPageRanges = ...,
    ) -> None: ...
    @typing.overload
    def printToPdf(
        self,
        resultCallback: collections.abc.Callable[
            [QtCore.QByteArray | bytes | bytearray | memoryview], None
        ],
        pageLayout: QtGui.QPageLayout = ...,
        ranges: QtGui.QPageRanges = ...,
    ) -> None: ...
    def setWebChannel(
        self, a0: QtWebChannel.QWebChannel | None, worldId: int = ...
    ) -> None: ...
    @typing.overload
    def runJavaScript(
        self,
        scriptSource: str | None,
        worldId: int = ...,
        resultCallback: collections.abc.Callable[[typing.Any], None] = ...,
    ) -> None: ...
    @typing.overload
    def runJavaScript(
        self,
        scriptSource: str | None,
        resultCallback: collections.abc.Callable[[typing.Any], None],
    ) -> None: ...
    def toPlainText(
        self, resultCallback: collections.abc.Callable[[str | None], None]
    ) -> None: ...
    def toHtml(
        self, resultCallback: collections.abc.Callable[[str | None], None]
    ) -> None: ...
    def isLoading(self) -> bool: ...
    def findText(
        self,
        subString: str | None,
        options: QWebEnginePage.FindFlag = ...,
        resultCallback: collections.abc.Callable[[bool], None] = ...,
    ) -> None: ...
    renderProcessPidChanged: typing.ClassVar[QtCore.pyqtSignal]
    def renderProcessPid(self) -> int: ...
    findTextFinished: typing.ClassVar[QtCore.pyqtSignal]
    recommendedStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    lifecycleStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setVisible(self, visible: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def recommendedState(self) -> QWebEnginePage.LifecycleState: ...
    def setLifecycleState(
        self, state: QWebEnginePage.LifecycleState
    ) -> None: ...
    def lifecycleState(self) -> QWebEnginePage.LifecycleState: ...
    def setUrlRequestInterceptor(
        self, interceptor: QWebEngineUrlRequestInterceptor | None
    ) -> None: ...
    printRequested: typing.ClassVar[QtCore.pyqtSignal]
    selectClientCertificate: typing.ClassVar[QtCore.pyqtSignal]
    registerProtocolHandlerRequested: typing.ClassVar[QtCore.pyqtSignal]
    quotaRequested: typing.ClassVar[QtCore.pyqtSignal]
    def devToolsPage(self) -> QWebEnginePage | None: ...
    def setDevToolsPage(self, page: QWebEnginePage | None) -> None: ...
    def inspectedPage(self) -> QWebEnginePage | None: ...
    def setInspectedPage(self, page: QWebEnginePage | None) -> None: ...
    def download(
        self, url: QtCore.QUrl, filename: str | None = ...
    ) -> None: ...
    def save(
        self,
        filePath: str | None,
        format: QWebEngineDownloadRequest.SavePageFormat = ...,
    ) -> None: ...
    def replaceMisspelledWord(self, replacement: str | None) -> None: ...
    pdfPrintingFinished: typing.ClassVar[QtCore.pyqtSignal]
    recentlyAudibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    audioMutedChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    scrollPositionChanged: typing.ClassVar[QtCore.pyqtSignal]
    iconChanged: typing.ClassVar[QtCore.pyqtSignal]
    def recentlyAudible(self) -> bool: ...
    def setAudioMuted(self, muted: bool) -> None: ...
    def isAudioMuted(self) -> bool: ...
    def contentsSize(self) -> QtCore.QSizeF: ...
    def scrollPosition(self) -> QtCore.QPointF: ...
    def icon(self) -> QtGui.QIcon: ...
    renderProcessTerminated: typing.ClassVar[QtCore.pyqtSignal]
    fullScreenRequested: typing.ClassVar[QtCore.pyqtSignal]
    def setBackgroundColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def backgroundColor(self) -> QtGui.QColor: ...
    def acceptNavigationRequest(
        self,
        url: QtCore.QUrl,
        type: QWebEnginePage.NavigationType,
        isMainFrame: bool,
    ) -> bool: ...
    def webChannel(self) -> QtWebChannel.QWebChannel | None: ...
    def scripts(self) -> QWebEngineScriptCollection: ...
    def profile(self) -> QWebEngineProfile | None: ...
    def javaScriptConsoleMessage(
        self,
        level: QWebEnginePage.JavaScriptConsoleMessageLevel,
        message: str | None,
        lineNumber: int,
        sourceID: str | None,
    ) -> None: ...
    def javaScriptPrompt(
        self,
        securityOrigin: QtCore.QUrl,
        msg: str | None,
        defaultValue: str | None,
    ) -> tuple[bool, str | None]: ...
    def javaScriptConfirm(
        self, securityOrigin: QtCore.QUrl, msg: str | None
    ) -> bool: ...
    def javaScriptAlert(
        self, securityOrigin: QtCore.QUrl, msg: str | None
    ) -> None: ...
    def chooseFiles(
        self,
        mode: QWebEnginePage.FileSelectionMode,
        oldFiles: collections.abc.Iterable[str | None],
        acceptedMimeTypes: collections.abc.Iterable[str | None],
    ) -> list[str]: ...
    def createWindow(
        self, type: QWebEnginePage.WebWindowType
    ) -> QWebEnginePage | None: ...
    iconUrlChanged: typing.ClassVar[QtCore.pyqtSignal]
    urlChanged: typing.ClassVar[QtCore.pyqtSignal]
    titleChanged: typing.ClassVar[QtCore.pyqtSignal]
    proxyAuthenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    authenticationRequired: typing.ClassVar[QtCore.pyqtSignal]
    featurePermissionRequestCanceled: typing.ClassVar[QtCore.pyqtSignal]
    featurePermissionRequested: typing.ClassVar[QtCore.pyqtSignal]
    windowCloseRequested: typing.ClassVar[QtCore.pyqtSignal]
    geometryChangeRequested: typing.ClassVar[QtCore.pyqtSignal]
    selectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    linkHovered: typing.ClassVar[QtCore.pyqtSignal]
    loadFinished: typing.ClassVar[QtCore.pyqtSignal]
    loadProgress: typing.ClassVar[QtCore.pyqtSignal]
    loadStarted: typing.ClassVar[QtCore.pyqtSignal]
    def settings(self) -> QWebEngineSettings | None: ...
    def setZoomFactor(self, factor: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def iconUrl(self) -> QtCore.QUrl: ...
    def requestedUrl(self) -> QtCore.QUrl: ...
    def url(self) -> QtCore.QUrl: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def title(self) -> str: ...
    def setContent(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        mimeType: str | None = ...,
        baseUrl: QtCore.QUrl = ...,
    ) -> None: ...
    def setHtml(
        self, html: str | None, baseUrl: QtCore.QUrl = ...
    ) -> None: ...
    @typing.overload
    def load(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def load(self, request: QWebEngineHttpRequest) -> None: ...
    def setFeaturePermission(
        self,
        securityOrigin: QtCore.QUrl,
        feature: QWebEnginePage.Feature,
        policy: QWebEnginePage.PermissionPolicy,
    ) -> None: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    def triggerAction(
        self, action: QWebEnginePage.WebAction, checked: bool = ...
    ) -> None: ...
    def action(
        self, action: QWebEnginePage.WebAction
    ) -> QtGui.QAction | None: ...
    def selectedText(self) -> str: ...
    def hasSelection(self) -> bool: ...
    def history(self) -> QWebEngineHistory | None: ...

class QWebEnginePermission(PyQt6.sip.simplewrapper):
    class State(enum.Enum):
        Invalid = ...
        Ask = ...
        Granted = ...
        Denied = ...

    class PermissionType(enum.Enum):
        Unsupported = ...
        MediaAudioCapture = ...
        MediaVideoCapture = ...
        MediaAudioVideoCapture = ...
        DesktopVideoCapture = ...
        DesktopAudioVideoCapture = ...
        MouseLock = ...
        Notifications = ...
        Geolocation = ...
        ClipboardReadWrite = ...
        LocalFontsAccess = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QWebEnginePermission) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def isPersistent(
        permissionType: QWebEnginePermission.PermissionType,
    ) -> bool: ...
    def reset(self) -> None: ...
    def deny(self) -> None: ...
    def grant(self) -> None: ...
    def isValid(self) -> bool: ...
    def state(self) -> QWebEnginePermission.State: ...
    def permissionType(self) -> QWebEnginePermission.PermissionType: ...
    def origin(self) -> QtCore.QUrl: ...
    def swap(self, other: QWebEnginePermission) -> None: ...

class QWebEngineProfile(QtCore.QObject):
    class PersistentPermissionsPolicy(enum.Enum):
        AskEveryTime = ...
        StoreInMemory = ...
        StoreOnDisk = ...

    class PersistentCookiesPolicy(enum.Enum):
        NoPersistentCookies = ...
        AllowPersistentCookies = ...
        ForcePersistentCookies = ...

    class HttpCacheType(enum.Enum):
        MemoryHttpCache = ...
        DiskHttpCache = ...
        NoCache = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, name: str | None, parent: QtCore.QObject | None = ...
    ) -> None: ...
    def listPermissionsForPermissionType(
        self, permissionType: QWebEnginePermission.PermissionType
    ) -> list[QWebEnginePermission]: ...
    def listPermissionsForOrigin(
        self, securityOrigin: QtCore.QUrl
    ) -> list[QWebEnginePermission]: ...
    def listAllPermissions(self) -> list[QWebEnginePermission]: ...
    def queryPermission(
        self,
        securityOrigin: QtCore.QUrl,
        permissionType: QWebEnginePermission.PermissionType,
    ) -> QWebEnginePermission: ...
    def clientHints(self) -> QWebEngineClientHints | None: ...
    def setPersistentPermissionsPolicy(
        self, a0: QWebEngineProfile.PersistentPermissionsPolicy
    ) -> None: ...
    def persistentPermissionsPolicy(
        self,
    ) -> QWebEngineProfile.PersistentPermissionsPolicy: ...
    def setPushServiceEnabled(self, enabled: bool) -> None: ...
    def isPushServiceEnabled(self) -> bool: ...
    def requestIconForIconURL(
        self,
        url: QtCore.QUrl,
        desiredSizeInPixel: int,
        iconAvailableCallback: collections.abc.Callable[
            [QtGui.QIcon, QtCore.QUrl], None
        ],
    ) -> None: ...
    def requestIconForPageURL(
        self,
        url: QtCore.QUrl,
        desiredSizeInPixel: int,
        iconAvailableCallback: collections.abc.Callable[
            [QtGui.QIcon, QtCore.QUrl, QtCore.QUrl], None
        ],
    ) -> None: ...
    def clientCertificateStore(
        self,
    ) -> QWebEngineClientCertificateStore | None: ...
    def setNotificationPresenter(
        self, a0: collections.abc.Callable[[QWebEngineNotification], None]
    ) -> None: ...
    def setDownloadPath(self, path: str | None) -> None: ...
    def downloadPath(self) -> str: ...
    def isSpellCheckEnabled(self) -> bool: ...
    def setSpellCheckEnabled(self, enabled: bool) -> None: ...
    def spellCheckLanguages(self) -> list[str]: ...
    def setSpellCheckLanguages(
        self, languages: collections.abc.Iterable[str | None]
    ) -> None: ...
    def clearHttpCache(self) -> None: ...
    def removeAllUrlSchemeHandlers(self) -> None: ...
    def removeUrlSchemeHandler(
        self, a0: QWebEngineUrlSchemeHandler | None
    ) -> None: ...
    def removeUrlScheme(
        self, scheme: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def installUrlSchemeHandler(
        self,
        scheme: QtCore.QByteArray | bytes | bytearray | memoryview,
        a1: QWebEngineUrlSchemeHandler | None,
    ) -> None: ...
    def urlSchemeHandler(
        self, a0: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> QWebEngineUrlSchemeHandler | None: ...
    def setUrlRequestInterceptor(
        self, interceptor: QWebEngineUrlRequestInterceptor | None
    ) -> None: ...
    def cookieStore(self) -> QWebEngineCookieStore | None: ...
    def httpAcceptLanguage(self) -> str: ...
    def setHttpAcceptLanguage(
        self, httpAcceptLanguage: str | None
    ) -> None: ...
    clearHttpCacheCompleted: typing.ClassVar[QtCore.pyqtSignal]
    downloadRequested: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def defaultProfile() -> QWebEngineProfile | None: ...
    def scripts(self) -> QWebEngineScriptCollection | None: ...
    def settings(self) -> QWebEngineSettings | None: ...
    def visitedLinksContainsUrl(self, url: QtCore.QUrl) -> bool: ...
    def clearVisitedLinks(
        self, urls: collections.abc.Iterable[QtCore.QUrl]
    ) -> None: ...
    def clearAllVisitedLinks(self) -> None: ...
    def setHttpCacheMaximumSize(self, maxSize: int) -> None: ...
    def httpCacheMaximumSize(self) -> int: ...
    def setPersistentCookiesPolicy(
        self, a0: QWebEngineProfile.PersistentCookiesPolicy
    ) -> None: ...
    def persistentCookiesPolicy(
        self,
    ) -> QWebEngineProfile.PersistentCookiesPolicy: ...
    def setHttpCacheType(
        self, a0: QWebEngineProfile.HttpCacheType
    ) -> None: ...
    def httpCacheType(self) -> QWebEngineProfile.HttpCacheType: ...
    def setHttpUserAgent(self, userAgent: str | None) -> None: ...
    def httpUserAgent(self) -> str: ...
    def setCachePath(self, path: str | None) -> None: ...
    def cachePath(self) -> str: ...
    def setPersistentStoragePath(self, path: str | None) -> None: ...
    def persistentStoragePath(self) -> str: ...
    def isOffTheRecord(self) -> bool: ...
    def storageName(self) -> str: ...

class QWebEngineProfileBuilder(PyQt6.sip.simplewrapper):
    def setPersistentPermissionsPolicy(
        self,
        persistentPermissionPolicy: QWebEngineProfile.PersistentPermissionsPolicy,
    ) -> QWebEngineProfileBuilder: ...
    def setHttpCacheMaximumSize(
        self, maxSizeInBytes: int
    ) -> QWebEngineProfileBuilder: ...
    def setPersistentCookiesPolicy(
        self,
        persistentCookiesPolicy: QWebEngineProfile.PersistentCookiesPolicy,
    ) -> QWebEngineProfileBuilder: ...
    def setHttpCacheType(
        self, httpCacheType: QWebEngineProfile.HttpCacheType
    ) -> QWebEngineProfileBuilder: ...
    def setCachePath(self, path: str | None) -> QWebEngineProfileBuilder: ...
    def setPersistentStoragePath(
        self, path: str | None
    ) -> QWebEngineProfileBuilder: ...
    @staticmethod
    def createOffTheRecordProfile(
        parent: QtCore.QObject | None = ...,
    ) -> QWebEngineProfile | None: ...
    def createProfile(
        self, storageName: str | None, parent: QtCore.QObject | None = ...
    ) -> QWebEngineProfile | None: ...

class QWebEngineQuotaRequest(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QWebEngineQuotaRequest) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def requestedSize(self) -> int: ...
    def origin(self) -> QtCore.QUrl: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...

class QWebEngineRegisterProtocolHandlerRequest(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, a0: QWebEngineRegisterProtocolHandlerRequest
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def scheme(self) -> str: ...
    def origin(self) -> QtCore.QUrl: ...
    def reject(self) -> None: ...
    def accept(self) -> None: ...

class QWebEngineScript(PyQt6.sip.simplewrapper):
    class ScriptWorldId(enum.IntEnum):
        MainWorld = ...
        ApplicationWorld = ...
        UserWorld = ...

    class InjectionPoint(enum.Enum):
        Deferred = ...
        DocumentReady = ...
        DocumentCreation = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QWebEngineScript) -> None: ...
    def setSourceUrl(self, url: QtCore.QUrl) -> None: ...
    def sourceUrl(self) -> QtCore.QUrl: ...
    def swap(self, other: QWebEngineScript) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setRunsOnSubFrames(self, on: bool) -> None: ...
    def runsOnSubFrames(self) -> bool: ...
    def setWorldId(self, a0: int) -> None: ...
    def worldId(self) -> int: ...
    def setInjectionPoint(
        self, a0: QWebEngineScript.InjectionPoint
    ) -> None: ...
    def injectionPoint(self) -> QWebEngineScript.InjectionPoint: ...
    def setSourceCode(self, a0: str | None) -> None: ...
    def sourceCode(self) -> str: ...
    def setName(self, a0: str | None) -> None: ...
    def name(self) -> str: ...

class QWebEngineScriptCollection(PyQt6.sip.simplewrapper):
    def find(self, name: str | None) -> list[QWebEngineScript]: ...
    def toList(self) -> list[QWebEngineScript]: ...
    def clear(self) -> None: ...
    def remove(self, a0: QWebEngineScript) -> bool: ...
    @typing.overload
    def insert(self, a0: QWebEngineScript) -> None: ...
    @typing.overload
    def insert(
        self, list: collections.abc.Iterable[QWebEngineScript]
    ) -> None: ...
    def contains(self, value: QWebEngineScript) -> bool: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def isEmpty(self) -> bool: ...

class QWebEngineSettings(PyQt6.sip.simplewrapper):
    class ImageAnimationPolicy(enum.Enum):
        Allow = ...
        AnimateOnce = ...
        Disallow = ...

    class UnknownUrlSchemePolicy(enum.Enum):
        DisallowUnknownUrlSchemes = ...
        AllowUnknownUrlSchemesFromUserInteraction = ...
        AllowAllUnknownUrlSchemes = ...

    class FontSize(enum.Enum):
        MinimumFontSize = ...
        MinimumLogicalFontSize = ...
        DefaultFontSize = ...
        DefaultFixedFontSize = ...

    class WebAttribute(enum.Enum):
        AutoLoadImages = ...
        JavascriptEnabled = ...
        JavascriptCanOpenWindows = ...
        JavascriptCanAccessClipboard = ...
        LinksIncludedInFocusChain = ...
        LocalStorageEnabled = ...
        LocalContentCanAccessRemoteUrls = ...
        XSSAuditingEnabled = ...
        SpatialNavigationEnabled = ...
        LocalContentCanAccessFileUrls = ...
        HyperlinkAuditingEnabled = ...
        ScrollAnimatorEnabled = ...
        ErrorPageEnabled = ...
        PluginsEnabled = ...
        FullScreenSupportEnabled = ...
        ScreenCaptureEnabled = ...
        WebGLEnabled = ...
        Accelerated2dCanvasEnabled = ...
        AutoLoadIconsForPage = ...
        TouchIconsEnabled = ...
        FocusOnNavigationEnabled = ...
        PrintElementBackgrounds = ...
        AllowRunningInsecureContent = ...
        AllowGeolocationOnInsecureOrigins = ...
        AllowWindowActivationFromJavaScript = ...
        ShowScrollBars = ...
        PlaybackRequiresUserGesture = ...
        WebRTCPublicInterfacesOnly = ...
        JavascriptCanPaste = ...
        DnsPrefetchEnabled = ...
        PdfViewerEnabled = ...
        NavigateOnDropEnabled = ...
        ReadingFromCanvasEnabled = ...
        ForceDarkMode = ...
        PrintHeaderAndFooter = ...
        PreferCSSMarginsForPrinting = ...
        TouchEventsApiEnabled = ...

    class FontFamily(enum.Enum):
        StandardFont = ...
        FixedFont = ...
        SerifFont = ...
        SansSerifFont = ...
        CursiveFont = ...
        FantasyFont = ...
        PictographFont = ...

    def resetImageAnimationPolicy(self) -> None: ...
    def imageAnimationPolicy(
        self,
    ) -> QWebEngineSettings.ImageAnimationPolicy: ...
    def setImageAnimationPolicy(
        self, policy: QWebEngineSettings.ImageAnimationPolicy
    ) -> None: ...
    def resetUnknownUrlSchemePolicy(self) -> None: ...
    def setUnknownUrlSchemePolicy(
        self, policy: QWebEngineSettings.UnknownUrlSchemePolicy
    ) -> None: ...
    def unknownUrlSchemePolicy(
        self,
    ) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
    def defaultTextEncoding(self) -> str: ...
    def setDefaultTextEncoding(self, encoding: str | None) -> None: ...
    def resetAttribute(
        self, attr: QWebEngineSettings.WebAttribute
    ) -> None: ...
    def testAttribute(self, attr: QWebEngineSettings.WebAttribute) -> bool: ...
    def setAttribute(
        self, attr: QWebEngineSettings.WebAttribute, on: bool
    ) -> None: ...
    def resetFontSize(self, type: QWebEngineSettings.FontSize) -> None: ...
    def fontSize(self, type: QWebEngineSettings.FontSize) -> int: ...
    def setFontSize(
        self, type: QWebEngineSettings.FontSize, size: int
    ) -> None: ...
    def resetFontFamily(
        self, which: QWebEngineSettings.FontFamily
    ) -> None: ...
    def fontFamily(self, which: QWebEngineSettings.FontFamily) -> str: ...
    def setFontFamily(
        self, which: QWebEngineSettings.FontFamily, family: str | None
    ) -> None: ...

class QWebEngineUrlRequestInfo(PyQt6.sip.simplewrapper):
    class NavigationType(enum.Enum):
        NavigationTypeLink = ...
        NavigationTypeTyped = ...
        NavigationTypeFormSubmitted = ...
        NavigationTypeBackForward = ...
        NavigationTypeReload = ...
        NavigationTypeRedirect = ...
        NavigationTypeOther = ...

    class ResourceType(enum.Enum):
        ResourceTypeMainFrame = ...
        ResourceTypeSubFrame = ...
        ResourceTypeStylesheet = ...
        ResourceTypeScript = ...
        ResourceTypeImage = ...
        ResourceTypeFontResource = ...
        ResourceTypeSubResource = ...
        ResourceTypeObject = ...
        ResourceTypeMedia = ...
        ResourceTypeWorker = ...
        ResourceTypeSharedWorker = ...
        ResourceTypePrefetch = ...
        ResourceTypeFavicon = ...
        ResourceTypeXhr = ...
        ResourceTypePing = ...
        ResourceTypeServiceWorker = ...
        ResourceTypeUnknown = ...
        ResourceTypeCspReport = ...
        ResourceTypePluginResource = ...
        ResourceTypeNavigationPreloadMainFrame = ...
        ResourceTypeNavigationPreloadSubFrame = ...
        ResourceTypeWebSocket = ...
        ResourceTypeJson = ...

    def isDownload(self) -> bool: ...
    def requestBody(self) -> QtCore.QIODevice | None: ...
    def httpHeaders(self) -> dict[QtCore.QByteArray, QtCore.QByteArray]: ...
    def initiator(self) -> QtCore.QUrl: ...
    def setHttpHeader(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview,
        value: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def redirect(self, url: QtCore.QUrl) -> None: ...
    def block(self, shouldBlock: bool) -> None: ...
    def requestMethod(self) -> QtCore.QByteArray: ...
    def firstPartyUrl(self) -> QtCore.QUrl: ...
    def requestUrl(self) -> QtCore.QUrl: ...
    def navigationType(self) -> QWebEngineUrlRequestInfo.NavigationType: ...
    def resourceType(self) -> QWebEngineUrlRequestInfo.ResourceType: ...

class QWebEngineUrlRequestInterceptor(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def interceptRequest(self, info: QWebEngineUrlRequestInfo) -> None: ...

class QWebEngineUrlRequestJob(QtCore.QObject):
    class Error(enum.Enum):
        NoError = ...
        UrlNotFound = ...
        UrlInvalid = ...
        RequestAborted = ...
        RequestDenied = ...
        RequestFailed = ...

    def requestBody(self) -> QtCore.QIODevice | None: ...
    def setAdditionalResponseHeaders(
        self,
        additionalResponseHeaders: dict[
            QtCore.QByteArray | bytes | bytearray | memoryview,
            collections.abc.Sequence[
                QtCore.QByteArray | bytes | bytearray | memoryview
            ],
        ],
    ) -> None: ...
    def requestHeaders(self) -> dict[QtCore.QByteArray, QtCore.QByteArray]: ...
    def initiator(self) -> QtCore.QUrl: ...
    def redirect(self, url: QtCore.QUrl) -> None: ...
    def fail(self, error: QWebEngineUrlRequestJob.Error) -> None: ...
    def reply(
        self,
        contentType: QtCore.QByteArray | bytes | bytearray | memoryview,
        device: QtCore.QIODevice | None,
    ) -> None: ...
    def requestMethod(self) -> QtCore.QByteArray: ...
    def requestUrl(self) -> QtCore.QUrl: ...

class QWebEngineUrlScheme(PyQt6.sip.simplewrapper):
    class Flag(enum.Flag):
        SecureScheme = ...
        LocalScheme = ...
        LocalAccessAllowed = ...
        NoAccessAllowed = ...
        ServiceWorkersAllowed = ...
        ViewSourceAllowed = ...
        ContentSecurityPolicyIgnored = ...
        CorsEnabled = ...
        FetchApiAllowed = ...

    class SpecialPort(enum.Enum):
        PortUnspecified = ...

    class Syntax(enum.Enum):
        HostPortAndUserInformation = ...
        HostAndPort = ...
        Host = ...
        Path = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, name: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def __init__(self, that: QWebEngineUrlScheme) -> None: ...
    @staticmethod
    def schemeByName(
        name: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QWebEngineUrlScheme: ...
    @staticmethod
    def registerScheme(scheme: QWebEngineUrlScheme) -> None: ...
    def setFlags(self, newValue: QWebEngineUrlScheme.Flag) -> None: ...
    def flags(self) -> QWebEngineUrlScheme.Flag: ...
    def setDefaultPort(self, newValue: int) -> None: ...
    def defaultPort(self) -> int: ...
    def setSyntax(self, newValue: QWebEngineUrlScheme.Syntax) -> None: ...
    def syntax(self) -> QWebEngineUrlScheme.Syntax: ...
    def setName(
        self, newValue: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def name(self) -> QtCore.QByteArray: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QWebEngineUrlSchemeHandler(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def requestStarted(self, a0: QWebEngineUrlRequestJob | None) -> None: ...

class QWebEngineWebAuthUxRequest(QtCore.QObject):
    class RequestFailureReason(enum.Enum):
        Timeout = ...
        KeyNotRegistered = ...
        KeyAlreadyRegistered = ...
        SoftPinBlock = ...
        HardPinBlock = ...
        AuthenticatorRemovedDuringPinEntry = ...
        AuthenticatorMissingResidentKeys = ...
        AuthenticatorMissingUserVerification = ...
        AuthenticatorMissingLargeBlob = ...
        NoCommonAlgorithms = ...
        StorageFull = ...
        UserConsentDenied = ...
        WinUserCancelled = ...

    class PinEntryError(enum.Enum):
        NoError = ...
        InternalUvLocked = ...
        WrongPin = ...
        TooShort = ...
        InvalidCharacters = ...
        SameAsCurrentPin = ...

    class PinEntryReason(enum.Enum):
        Set = ...
        Change = ...
        Challenge = ...

    class WebAuthUxState(enum.Enum):
        NotStarted = ...
        SelectAccount = ...
        CollectPin = ...
        FinishTokenCollection = ...
        RequestFailed = ...
        Cancelled = ...
        Completed = ...

    def setPin(self, pin: str | None) -> None: ...
    def setSelectedAccount(self, selectedAccount: str | None) -> None: ...
    def retry(self) -> None: ...
    def cancel(self) -> None: ...
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    def requestFailureReason(
        self,
    ) -> QWebEngineWebAuthUxRequest.RequestFailureReason: ...
    def state(self) -> QWebEngineWebAuthUxRequest.WebAuthUxState: ...
    def pinRequest(self) -> QWebEngineWebAuthPinRequest: ...
    def relyingPartyId(self) -> str: ...
    def userNames(self) -> list[str]: ...

class QWebEngineWebAuthPinRequest(PyQt6.sip.simplewrapper):
    error: QWebEngineWebAuthUxRequest.PinEntryError = ...
    minPinLength: int = ...
    reason: QWebEngineWebAuthUxRequest.PinEntryReason = ...
    remainingAttempts: int = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QWebEngineWebAuthPinRequest) -> None: ...

PYQT_WEBENGINE_VERSION: int = ...
PYQT_WEBENGINE_VERSION_STR: str = ...

def qWebEngineGetDomainAndRegistry(url: QtCore.QUrl) -> str: ...
def qWebEngineProcessName() -> str | None: ...
def qWebEngineChromiumSecurityPatchVersion() -> str | None: ...
def qWebEngineChromiumVersion() -> str | None: ...
def qWebEngineVersion() -> str | None: ...
