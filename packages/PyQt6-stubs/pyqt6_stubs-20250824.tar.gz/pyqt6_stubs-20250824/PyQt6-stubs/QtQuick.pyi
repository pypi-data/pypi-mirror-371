# The PEP 484 type hints stub file for the QtQuick module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import contextlib
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtGui, QtQml

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QQuickItem(QtCore.QObject, QtQml.QQmlParserStatus):
    class TransformOrigin(enum.Enum):
        TopLeft = ...
        Top = ...
        TopRight = ...
        Left = ...
        Center = ...
        Right = ...
        BottomLeft = ...
        Bottom = ...
        BottomRight = ...

    class ItemChange(enum.Enum):
        ItemChildAddedChange = ...
        ItemChildRemovedChange = ...
        ItemSceneChange = ...
        ItemVisibleHasChanged = ...
        ItemParentHasChanged = ...
        ItemOpacityHasChanged = ...
        ItemActiveFocusHasChanged = ...
        ItemRotationHasChanged = ...
        ItemAntialiasingHasChanged = ...
        ItemDevicePixelRatioHasChanged = ...
        ItemEnabledHasChanged = ...
        ItemScaleHasChanged = ...
        ItemTransformHasChanged = ...

    class Flag(enum.Flag):
        ItemClipsChildrenToShape = ...
        ItemAcceptsInputMethod = ...
        ItemIsFocusScope = ...
        ItemHasContents = ...
        ItemAcceptsDrops = ...
        ItemIsViewport = ...
        ItemObservesViewport = ...

    class ItemChangeData(PyQt6.sip.simplewrapper):
        boolValue: bool = ...
        item: QQuickItem = ...
        realValue: float = ...
        window: QQuickWindow = ...

        @typing.overload
        def __init__(self, v: QQuickItem | None) -> None: ...
        @typing.overload
        def __init__(self, v: QQuickWindow | None) -> None: ...
        @typing.overload
        def __init__(self, v: float) -> None: ...
        @typing.overload
        def __init__(self, v: bool) -> None: ...
        @typing.overload
        def __init__(self, a0: QQuickItem.ItemChangeData) -> None: ...

    class UpdatePaintNodeData(PyQt6.sip.simplewrapper):
        transformNode: QSGTransformNode = ...

        def __init__(self, a0: QQuickItem.UpdatePaintNodeData) -> None: ...

    def __init__(self, parent: QQuickItem | None = ...) -> None: ...

    focusPolicyChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setFocusPolicy(self, policy: QtCore.Qt.FocusPolicy) -> None: ...
    def focusPolicy(self) -> QtCore.Qt.FocusPolicy: ...
    def dumpItemTree(self) -> None: ...
    def ensurePolished(self) -> None: ...
    def viewportItem(self) -> QQuickItem | None: ...
    containmentMaskChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setContainmentMask(self, mask: QtCore.QObject | None) -> None: ...
    def containmentMask(self) -> QtCore.QObject | None: ...
    def setAcceptTouchEvents(self, accept: bool) -> None: ...
    def acceptTouchEvents(self) -> bool: ...
    def size(self) -> QtCore.QSizeF: ...
    def mapFromGlobal(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    def mapToGlobal(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    def isAncestorOf(self, child: QQuickItem | None) -> bool: ...
    def grabToImage(
        self, targetSize: QtCore.QSize = ...
    ) -> QQuickItemGrabResult | None: ...
    def resetAntialiasing(self) -> None: ...
    windowChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeFocusOnTabChanged: typing.ClassVar[QtCore.pyqtSignal]
    def nextItemInFocusChain(
        self, forward: bool = ...
    ) -> QQuickItem | None: ...
    def setActiveFocusOnTab(self, a0: bool) -> None: ...
    def activeFocusOnTab(self) -> bool: ...
    def updatePolish(self) -> None: ...
    def releaseResources(self) -> None: ...
    def updatePaintNode(
        self, a0: QSGNode | None, a1: QQuickItem.UpdatePaintNodeData | None
    ) -> QSGNode | None: ...
    def geometryChange(
        self, newGeometry: QtCore.QRectF, oldGeometry: QtCore.QRectF
    ) -> None: ...
    def childMouseEventFilter(
        self, a0: QQuickItem | None, a1: QtCore.QEvent | None
    ) -> bool: ...
    def dropEvent(self, a0: QtGui.QDropEvent | None) -> None: ...
    def dragLeaveEvent(self, a0: QtGui.QDragLeaveEvent | None) -> None: ...
    def dragMoveEvent(self, a0: QtGui.QDragMoveEvent | None) -> None: ...
    def dragEnterEvent(self, a0: QtGui.QDragEnterEvent | None) -> None: ...
    def hoverLeaveEvent(self, event: QtGui.QHoverEvent | None) -> None: ...
    def hoverMoveEvent(self, event: QtGui.QHoverEvent | None) -> None: ...
    def hoverEnterEvent(self, event: QtGui.QHoverEvent | None) -> None: ...
    def touchEvent(self, event: QtGui.QTouchEvent | None) -> None: ...
    def wheelEvent(self, event: QtGui.QWheelEvent | None) -> None: ...
    def touchUngrabEvent(self) -> None: ...
    def mouseUngrabEvent(self) -> None: ...
    def mouseDoubleClickEvent(
        self, event: QtGui.QMouseEvent | None
    ) -> None: ...
    def mouseReleaseEvent(self, event: QtGui.QMouseEvent | None) -> None: ...
    def mouseMoveEvent(self, event: QtGui.QMouseEvent | None) -> None: ...
    def mousePressEvent(self, event: QtGui.QMouseEvent | None) -> None: ...
    def focusOutEvent(self, a0: QtGui.QFocusEvent | None) -> None: ...
    def focusInEvent(self, a0: QtGui.QFocusEvent | None) -> None: ...
    def inputMethodEvent(self, a0: QtGui.QInputMethodEvent | None) -> None: ...
    def keyReleaseEvent(self, event: QtGui.QKeyEvent | None) -> None: ...
    def keyPressEvent(self, event: QtGui.QKeyEvent | None) -> None: ...
    def componentComplete(self) -> None: ...
    def classBegin(self) -> None: ...
    def heightValid(self) -> bool: ...
    def widthValid(self) -> bool: ...
    def updateInputMethod(
        self, queries: QtCore.Qt.InputMethodQuery = ...
    ) -> None: ...
    def itemChange(
        self, a0: QQuickItem.ItemChange, a1: QQuickItem.ItemChangeData
    ) -> None: ...
    def isComponentComplete(self) -> bool: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    implicitHeightChanged: typing.ClassVar[QtCore.pyqtSignal]
    implicitWidthChanged: typing.ClassVar[QtCore.pyqtSignal]
    zChanged: typing.ClassVar[QtCore.pyqtSignal]
    heightChanged: typing.ClassVar[QtCore.pyqtSignal]
    widthChanged: typing.ClassVar[QtCore.pyqtSignal]
    yChanged: typing.ClassVar[QtCore.pyqtSignal]
    xChanged: typing.ClassVar[QtCore.pyqtSignal]
    scaleChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    enabledChanged: typing.ClassVar[QtCore.pyqtSignal]
    opacityChanged: typing.ClassVar[QtCore.pyqtSignal]
    clipChanged: typing.ClassVar[QtCore.pyqtSignal]
    antialiasingChanged: typing.ClassVar[QtCore.pyqtSignal]
    smoothChanged: typing.ClassVar[QtCore.pyqtSignal]
    transformOriginChanged: typing.ClassVar[QtCore.pyqtSignal]
    parentChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeFocusChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusChanged: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    baselineOffsetChanged: typing.ClassVar[QtCore.pyqtSignal]
    childrenRectChanged: typing.ClassVar[QtCore.pyqtSignal]
    def update(self) -> None: ...
    def textureProvider(self) -> QSGTextureProvider | None: ...
    def isTextureProvider(self) -> bool: ...
    def inputMethodQuery(
        self, query: QtCore.Qt.InputMethodQuery
    ) -> typing.Any: ...
    def childAt(self, x: float, y: float) -> QQuickItem | None: ...
    @typing.overload
    def forceActiveFocus(self) -> None: ...
    @typing.overload
    def forceActiveFocus(self, reason: QtCore.Qt.FocusReason) -> None: ...
    def polish(self) -> None: ...
    def mapRectFromScene(self, rect: QtCore.QRectF) -> QtCore.QRectF: ...
    def mapRectFromItem(
        self, item: QQuickItem | None, rect: QtCore.QRectF
    ) -> QtCore.QRectF: ...
    def mapFromScene(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    def mapFromItem(
        self, item: QQuickItem | None, point: QtCore.QPointF
    ) -> QtCore.QPointF: ...
    def mapRectToScene(self, rect: QtCore.QRectF) -> QtCore.QRectF: ...
    def mapRectToItem(
        self, item: QQuickItem | None, rect: QtCore.QRectF
    ) -> QtCore.QRectF: ...
    def mapToScene(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    def mapToItem(
        self, item: QQuickItem | None, point: QtCore.QPointF
    ) -> QtCore.QPointF: ...
    def contains(self, point: QtCore.QPointF) -> bool: ...
    def setKeepTouchGrab(self, a0: bool) -> None: ...
    def keepTouchGrab(self) -> bool: ...
    def ungrabTouchPoints(self) -> None: ...
    def grabTouchPoints(self, ids: collections.abc.Iterable[int]) -> None: ...
    def setFiltersChildMouseEvents(self, filter: bool) -> None: ...
    def filtersChildMouseEvents(self) -> bool: ...
    def setKeepMouseGrab(self, a0: bool) -> None: ...
    def keepMouseGrab(self) -> bool: ...
    def ungrabMouse(self) -> None: ...
    def grabMouse(self) -> None: ...
    def unsetCursor(self) -> None: ...
    def setCursor(
        self, cursor: QtGui.QCursor | QtCore.Qt.CursorShape
    ) -> None: ...
    def cursor(self) -> QtGui.QCursor: ...
    def setAcceptHoverEvents(self, enabled: bool) -> None: ...
    def acceptHoverEvents(self) -> bool: ...
    def setAcceptedMouseButtons(
        self, buttons: QtCore.Qt.MouseButton
    ) -> None: ...
    def acceptedMouseButtons(self) -> QtCore.Qt.MouseButton: ...
    def scopedFocusItem(self) -> QQuickItem | None: ...
    def isFocusScope(self) -> bool: ...
    @typing.overload
    def setFocus(self, a0: bool) -> None: ...
    @typing.overload
    def setFocus(self, focus: bool, reason: QtCore.Qt.FocusReason) -> None: ...
    def hasFocus(self) -> bool: ...
    def hasActiveFocus(self) -> bool: ...
    def setFlags(self, flags: QQuickItem.Flag) -> None: ...
    def setFlag(self, flag: QQuickItem.Flag, enabled: bool = ...) -> None: ...
    def flags(self) -> QQuickItem.Flag: ...
    def setAntialiasing(self, a0: bool) -> None: ...
    def antialiasing(self) -> bool: ...
    def setSmooth(self, a0: bool) -> None: ...
    def smooth(self) -> bool: ...
    def setEnabled(self, a0: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def setVisible(self, a0: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def setOpacity(self, a0: float) -> None: ...
    def opacity(self) -> float: ...
    def setScale(self, a0: float) -> None: ...
    def scale(self) -> float: ...
    def setRotation(self, a0: float) -> None: ...
    def rotation(self) -> float: ...
    def setZ(self, a0: float) -> None: ...
    def z(self) -> float: ...
    def setTransformOrigin(self, a0: QQuickItem.TransformOrigin) -> None: ...
    def transformOrigin(self) -> QQuickItem.TransformOrigin: ...
    def setSize(self, size: QtCore.QSizeF) -> None: ...
    def implicitHeight(self) -> float: ...
    def setImplicitHeight(self, a0: float) -> None: ...
    def resetHeight(self) -> None: ...
    def setHeight(self, a0: float) -> None: ...
    def height(self) -> float: ...
    def implicitWidth(self) -> float: ...
    def setImplicitWidth(self, a0: float) -> None: ...
    def resetWidth(self) -> None: ...
    def setWidth(self, a0: float) -> None: ...
    def width(self) -> float: ...
    def setY(self, a0: float) -> None: ...
    def setX(self, a0: float) -> None: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def setBaselineOffset(self, a0: float) -> None: ...
    def baselineOffset(self) -> float: ...
    def setState(self, a0: str | None) -> None: ...
    def state(self) -> str: ...
    def setClip(self, a0: bool) -> None: ...
    def clip(self) -> bool: ...
    def childItems(self) -> list[QQuickItem]: ...
    def childrenRect(self) -> QtCore.QRectF: ...
    def stackAfter(self, a0: QQuickItem | None) -> None: ...
    def stackBefore(self, a0: QQuickItem | None) -> None: ...
    def setParentItem(self, parent: QQuickItem | None) -> None: ...
    def parentItem(self) -> QQuickItem | None: ...
    def window(self) -> QQuickWindow | None: ...

class QQuickFramebufferObject(QQuickItem):
    class Renderer(PyQt6.sip.wrapper):
        with contextlib.suppress(ImportError):
            from PyQt6.QtOpenGL import QOpenGLFramebufferObject

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QQuickFramebufferObject.Renderer) -> None: ...
        def invalidateFramebufferObject(self) -> None: ...
        def update(self) -> None: ...
        def framebufferObject(self) -> QOpenGLFramebufferObject | None: ...
        def synchronize(self, a0: QQuickFramebufferObject | None) -> None: ...
        def createFramebufferObject(
            self, size: QtCore.QSize
        ) -> QOpenGLFramebufferObject | None: ...
        def render(self) -> None: ...

    def __init__(self, parent: QQuickItem | None = ...) -> None: ...

    mirrorVerticallyChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setMirrorVertically(self, enable: bool) -> None: ...
    def mirrorVertically(self) -> bool: ...
    def releaseResources(self) -> None: ...
    def textureProvider(self) -> QSGTextureProvider | None: ...
    def isTextureProvider(self) -> bool: ...
    textureFollowsItemSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def updatePaintNode(
        self, a0: QSGNode | None, a1: QQuickItem.UpdatePaintNodeData | None
    ) -> QSGNode | None: ...
    def geometryChange(
        self, newGeometry: QtCore.QRectF, oldGeometry: QtCore.QRectF
    ) -> None: ...
    def createRenderer(self) -> QQuickFramebufferObject.Renderer | None: ...
    def setTextureFollowsItemSize(self, follows: bool) -> None: ...
    def textureFollowsItemSize(self) -> bool: ...

class QQuickGraphicsConfiguration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QQuickGraphicsConfiguration) -> None: ...
    def timestampsEnabled(self) -> bool: ...
    def setTimestamps(self, enable: bool) -> None: ...
    def pipelineCacheLoadFile(self) -> str: ...
    def setPipelineCacheLoadFile(self, filename: str | None) -> None: ...
    def pipelineCacheSaveFile(self) -> str: ...
    def setPipelineCacheSaveFile(self, filename: str | None) -> None: ...
    def isAutomaticPipelineCacheEnabled(self) -> bool: ...
    def setAutomaticPipelineCache(self, enable: bool) -> None: ...
    def prefersSoftwareDevice(self) -> bool: ...
    def setPreferSoftwareDevice(self, enable: bool) -> None: ...
    def isDebugMarkersEnabled(self) -> bool: ...
    def setDebugMarkers(self, enable: bool) -> None: ...
    def isDebugLayerEnabled(self) -> bool: ...
    def setDebugLayer(self, enable: bool) -> None: ...
    @staticmethod
    def preferredInstanceExtensions() -> list[QtCore.QByteArray]: ...
    def isDepthBufferEnabledFor2D(self) -> bool: ...
    def setDepthBufferFor2D(self, enable: bool) -> None: ...
    def deviceExtensions(self) -> list[QtCore.QByteArray]: ...
    def setDeviceExtensions(
        self,
        extensions: collections.abc.Iterable[
            QtCore.QByteArray | bytes | bytearray | memoryview
        ],
    ) -> None: ...

class QQuickGraphicsDevice(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QQuickGraphicsDevice) -> None: ...
    @staticmethod
    def fromOpenGLContext(
        context: QtGui.QOpenGLContext | None,
    ) -> QQuickGraphicsDevice: ...
    def isNull(self) -> bool: ...

class QQuickTextureFactory(QtCore.QObject):
    def __init__(self) -> None: ...
    @staticmethod
    def textureFactoryForImage(
        image: QtGui.QImage,
    ) -> QQuickTextureFactory | None: ...
    def image(self) -> QtGui.QImage: ...
    def textureByteCount(self) -> int: ...
    def textureSize(self) -> QtCore.QSize: ...
    def createTexture(
        self, window: QQuickWindow | None
    ) -> QSGTexture | None: ...

class QQuickImageProvider(QtQml.QQmlImageProviderBase):
    def __init__(
        self,
        type: QtQml.QQmlImageProviderBase.ImageType,
        flags: QtQml.QQmlImageProviderBase.Flag = ...,
    ) -> None: ...
    def requestTexture(
        self, id: str | None, requestedSize: QtCore.QSize
    ) -> tuple[QQuickTextureFactory | None, QtCore.QSize | None]: ...
    def requestPixmap(
        self, id: str | None, requestedSize: QtCore.QSize
    ) -> tuple[QtGui.QPixmap, QtCore.QSize | None]: ...
    def requestImage(
        self, id: str | None, requestedSize: QtCore.QSize
    ) -> tuple[QtGui.QImage, QtCore.QSize | None]: ...
    def flags(self) -> QtQml.QQmlImageProviderBase.Flag: ...
    def imageType(self) -> QtQml.QQmlImageProviderBase.ImageType: ...

class QQuickImageResponse(QtCore.QObject):
    def __init__(self) -> None: ...

    finished: typing.ClassVar[QtCore.pyqtSignal]
    def cancel(self) -> None: ...
    def errorString(self) -> str: ...
    def textureFactory(self) -> QQuickTextureFactory | None: ...

class QQuickAsyncImageProvider(QQuickImageProvider):
    def __init__(self) -> None: ...
    def requestImageResponse(
        self, id: str | None, requestedSize: QtCore.QSize
    ) -> QQuickImageResponse | None: ...

class QQuickItemGrabResult(QtCore.QObject):
    ready: typing.ClassVar[QtCore.pyqtSignal]
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    @typing.overload
    def saveToFile(self, fileName: str | None) -> bool: ...
    @typing.overload
    def saveToFile(self, fileName: QtCore.QUrl) -> bool: ...
    def url(self) -> QtCore.QUrl: ...
    def image(self) -> QtGui.QImage: ...

class QQuickPaintedItem(QQuickItem):
    class PerformanceHint(enum.Flag):
        FastFBOResizing = ...

    class RenderTarget(enum.Enum):
        Image = ...
        FramebufferObject = ...
        InvertedYFramebufferObject = ...

    def __init__(self, parent: QQuickItem | None = ...) -> None: ...

    textureSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setTextureSize(self, size: QtCore.QSize) -> None: ...
    def textureSize(self) -> QtCore.QSize: ...
    def itemChange(
        self, a0: QQuickItem.ItemChange, a1: QQuickItem.ItemChangeData
    ) -> None: ...
    def releaseResources(self) -> None: ...
    def textureProvider(self) -> QSGTextureProvider | None: ...
    def isTextureProvider(self) -> bool: ...
    def updatePaintNode(
        self, a0: QSGNode | None, a1: QQuickItem.UpdatePaintNodeData | None
    ) -> QSGNode | None: ...
    renderTargetChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsScaleChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    fillColorChanged: typing.ClassVar[QtCore.pyqtSignal]
    def paint(self, painter: QtGui.QPainter | None) -> None: ...
    def setRenderTarget(
        self, target: QQuickPaintedItem.RenderTarget
    ) -> None: ...
    def renderTarget(self) -> QQuickPaintedItem.RenderTarget: ...
    def setFillColor(
        self, a0: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def fillColor(self) -> QtGui.QColor: ...
    def setContentsScale(self, a0: float) -> None: ...
    def contentsScale(self) -> float: ...
    def resetContentsSize(self) -> None: ...
    def setContentsSize(self, a0: QtCore.QSize) -> None: ...
    def contentsSize(self) -> QtCore.QSize: ...
    def contentsBoundingRect(self) -> QtCore.QRectF: ...
    def setPerformanceHints(
        self, hints: QQuickPaintedItem.PerformanceHint
    ) -> None: ...
    def setPerformanceHint(
        self, hint: QQuickPaintedItem.PerformanceHint, enabled: bool = ...
    ) -> None: ...
    def performanceHints(self) -> QQuickPaintedItem.PerformanceHint: ...
    def setMipmap(self, enable: bool) -> None: ...
    def mipmap(self) -> bool: ...
    def setAntialiasing(self, enable: bool) -> None: ...
    def antialiasing(self) -> bool: ...
    def setOpaquePainting(self, opaque: bool) -> None: ...
    def opaquePainting(self) -> bool: ...
    def update(self, rect: QtCore.QRect = ...) -> None: ...

class QQuickRenderControl(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def window(self) -> QQuickWindow | None: ...
    def endFrame(self) -> None: ...
    def beginFrame(self) -> None: ...
    def samples(self) -> int: ...
    def setSamples(self, sampleCount: int) -> None: ...
    sceneChanged: typing.ClassVar[QtCore.pyqtSignal]
    renderRequested: typing.ClassVar[QtCore.pyqtSignal]
    def prepareThread(self, targetThread: QtCore.QThread | None) -> None: ...
    def renderWindow(
        self, offset: QtCore.QPoint | None
    ) -> QtGui.QWindow | None: ...
    @staticmethod
    def renderWindowFor(
        win: QQuickWindow | None, offset: QtCore.QPoint | None = ...
    ) -> QtGui.QWindow | None: ...
    def sync(self) -> bool: ...
    def render(self) -> None: ...
    def polishItems(self) -> None: ...
    def invalidate(self) -> None: ...
    def initialize(self) -> bool: ...

class QQuickRenderTarget(PyQt6.sip.simplewrapper):
    class Flag(enum.Enum):
        MultisampleResolve = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QQuickRenderTarget) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def setMirrorVertically(self, enable: bool) -> None: ...
    def mirrorVertically(self) -> bool: ...
    def setDevicePixelRatio(self, ratio: float) -> None: ...
    def devicePixelRatio(self) -> float: ...
    @staticmethod
    def fromPaintDevice(
        device: QtGui.QPaintDevice | None,
    ) -> QQuickRenderTarget: ...
    @staticmethod
    def fromOpenGLRenderBuffer(
        renderbufferId: int, pixelSize: QtCore.QSize, sampleCount: int = ...
    ) -> QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(
        textureId: int, pixelSize: QtCore.QSize, sampleCount: int = ...
    ) -> QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(
        textureId: int,
        format: int,
        pixelSize: QtCore.QSize,
        sampleCount: int = ...,
    ) -> QQuickRenderTarget: ...
    @typing.overload
    @staticmethod
    def fromOpenGLTexture(
        textureId: int,
        format: int,
        pixelSize: QtCore.QSize,
        sampleCount: int,
        arraySize: int,
        flags: QQuickRenderTarget.Flag,
    ) -> QQuickRenderTarget: ...
    def isNull(self) -> bool: ...

class QQuickTextDocument(QtCore.QObject):
    class Status(enum.Enum):
        Null = ...
        Loading = ...
        Loaded = ...
        Saving = ...
        Saved = ...
        ReadError = ...
        WriteError = ...
        NonLocalFileError = ...

    def __init__(self, parent: QQuickItem | None) -> None: ...

    errorStringChanged: typing.ClassVar[QtCore.pyqtSignal]
    statusChanged: typing.ClassVar[QtCore.pyqtSignal]
    modifiedChanged: typing.ClassVar[QtCore.pyqtSignal]
    sourceChanged: typing.ClassVar[QtCore.pyqtSignal]
    textDocumentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def errorString(self) -> str: ...
    def status(self) -> QQuickTextDocument.Status: ...
    def saveAs(self, url: QtCore.QUrl) -> None: ...
    def save(self) -> None: ...
    def setTextDocument(
        self, document: QtGui.QTextDocument | None
    ) -> None: ...
    def setModified(self, modified: bool) -> None: ...
    def isModified(self) -> bool: ...
    def setSource(self, url: QtCore.QUrl) -> None: ...
    def source(self) -> QtCore.QUrl: ...
    def textDocument(self) -> QtGui.QTextDocument | None: ...

class QQuickWindow(QtGui.QWindow):
    class TextRenderType(enum.Enum):
        QtTextRendering = ...
        NativeTextRendering = ...
        CurveTextRendering = ...

    class RenderStage(enum.Enum):
        BeforeSynchronizingStage = ...
        AfterSynchronizingStage = ...
        BeforeRenderingStage = ...
        AfterRenderingStage = ...
        AfterSwapStage = ...
        NoStage = ...

    class SceneGraphError(enum.Enum):
        ContextNotAvailable = ...

    class CreateTextureOption(enum.Flag):
        TextureHasAlphaChannel = ...
        TextureHasMipmaps = ...
        TextureOwnsGLTexture = ...
        TextureCanUseAtlas = ...
        TextureIsOpaque = ...

    def __init__(self, parent: QtGui.QWindow | None = ...) -> None: ...
    def graphicsConfiguration(self) -> QQuickGraphicsConfiguration: ...
    def setGraphicsConfiguration(
        self, config: QQuickGraphicsConfiguration
    ) -> None: ...
    def graphicsDevice(self) -> QQuickGraphicsDevice: ...
    def setGraphicsDevice(self, device: QQuickGraphicsDevice) -> None: ...
    @staticmethod
    def graphicsApi() -> QSGRendererInterface.GraphicsApi: ...
    @staticmethod
    def setGraphicsApi(api: QSGRendererInterface.GraphicsApi) -> None: ...
    def isPersistentGraphics(self) -> bool: ...
    def setPersistentGraphics(self, persistent: bool) -> None: ...
    afterFrameEnd: typing.ClassVar[QtCore.pyqtSignal]
    beforeFrameBegin: typing.ClassVar[QtCore.pyqtSignal]
    afterRenderPassRecording: typing.ClassVar[QtCore.pyqtSignal]
    beforeRenderPassRecording: typing.ClassVar[QtCore.pyqtSignal]
    def endExternalCommands(self) -> None: ...
    def beginExternalCommands(self) -> None: ...
    @staticmethod
    def setTextRenderType(renderType: QQuickWindow.TextRenderType) -> None: ...
    @staticmethod
    def textRenderType() -> QQuickWindow.TextRenderType: ...
    @staticmethod
    def sceneGraphBackend() -> str: ...
    def createImageNode(self) -> QSGImageNode | None: ...
    def createRectangleNode(self) -> QSGRectangleNode | None: ...
    @staticmethod
    def setSceneGraphBackend(backend: str | None) -> None: ...
    def rendererInterface(self) -> QSGRendererInterface | None: ...
    def isSceneGraphInitialized(self) -> bool: ...
    def effectiveDevicePixelRatio(self) -> float: ...
    def scheduleRenderJob(
        self, job: QtCore.QRunnable | None, schedule: QQuickWindow.RenderStage
    ) -> None: ...
    sceneGraphError: typing.ClassVar[QtCore.pyqtSignal]
    sceneGraphAboutToStop: typing.ClassVar[QtCore.pyqtSignal]
    afterAnimating: typing.ClassVar[QtCore.pyqtSignal]
    afterSynchronizing: typing.ClassVar[QtCore.pyqtSignal]
    activeFocusItemChanged: typing.ClassVar[QtCore.pyqtSignal]
    closing: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def setDefaultAlphaBuffer(useAlpha: bool) -> None: ...
    @staticmethod
    def hasDefaultAlphaBuffer() -> bool: ...
    def closeEvent(self, a0: QtGui.QCloseEvent | None) -> None: ...
    def tabletEvent(self, a0: QtGui.QTabletEvent | None) -> None: ...
    def wheelEvent(self, a0: QtGui.QWheelEvent | None) -> None: ...
    def mouseMoveEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def mouseDoubleClickEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def mouseReleaseEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def mousePressEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def keyReleaseEvent(self, a0: QtGui.QKeyEvent | None) -> None: ...
    def keyPressEvent(self, a0: QtGui.QKeyEvent | None) -> None: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    def focusOutEvent(self, a0: QtGui.QFocusEvent | None) -> None: ...
    def focusInEvent(self, a0: QtGui.QFocusEvent | None) -> None: ...
    def hideEvent(self, a0: QtGui.QHideEvent | None) -> None: ...
    def showEvent(self, a0: QtGui.QShowEvent | None) -> None: ...
    def resizeEvent(self, a0: QtGui.QResizeEvent | None) -> None: ...
    def exposeEvent(self, a0: QtGui.QExposeEvent | None) -> None: ...
    def releaseResources(self) -> None: ...
    def update(self) -> None: ...
    colorChanged: typing.ClassVar[QtCore.pyqtSignal]
    afterRendering: typing.ClassVar[QtCore.pyqtSignal]
    beforeRendering: typing.ClassVar[QtCore.pyqtSignal]
    beforeSynchronizing: typing.ClassVar[QtCore.pyqtSignal]
    sceneGraphInvalidated: typing.ClassVar[QtCore.pyqtSignal]
    sceneGraphInitialized: typing.ClassVar[QtCore.pyqtSignal]
    frameSwapped: typing.ClassVar[QtCore.pyqtSignal]
    def isPersistentSceneGraph(self) -> bool: ...
    def setPersistentSceneGraph(self, persistent: bool) -> None: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def createTextureFromImage(
        self, image: QtGui.QImage
    ) -> QSGTexture | None: ...
    @typing.overload
    def createTextureFromImage(
        self, image: QtGui.QImage, options: QQuickWindow.CreateTextureOption
    ) -> QSGTexture | None: ...
    def createTextNode(self) -> QSGTextNode | None: ...
    def incubationController(
        self,
    ) -> QtQml.QQmlIncubationController | None: ...
    def renderTarget(self) -> QQuickRenderTarget: ...
    def setRenderTarget(self, target: QQuickRenderTarget) -> None: ...
    def grabWindow(self) -> QtGui.QImage: ...
    def mouseGrabberItem(self) -> QQuickItem | None: ...
    def focusObject(self) -> QtCore.QObject | None: ...
    def activeFocusItem(self) -> QQuickItem | None: ...
    def contentItem(self) -> QQuickItem | None: ...

class QQuickView(QQuickWindow):
    class Status(enum.Enum):
        Null = ...
        Ready = ...
        Loading = ...
        Error = ...

    class ResizeMode(enum.Enum):
        SizeViewToRootObject = ...
        SizeRootObjectToView = ...

    @typing.overload
    def __init__(self, parent: QtGui.QWindow | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, engine: QtQml.QQmlEngine | None, parent: QtGui.QWindow | None
    ) -> None: ...
    @typing.overload
    def __init__(
        self, source: QtCore.QUrl, parent: QtGui.QWindow | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        uri: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        typeName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
        parent: QtGui.QWindow | None = ...,
    ) -> None: ...
    def mouseMoveEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def mouseReleaseEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def mousePressEvent(self, a0: QtGui.QMouseEvent | None) -> None: ...
    def keyReleaseEvent(self, a0: QtGui.QKeyEvent | None) -> None: ...
    def keyPressEvent(self, a0: QtGui.QKeyEvent | None) -> None: ...
    def timerEvent(self, a0: QtCore.QTimerEvent | None) -> None: ...
    def resizeEvent(self, a0: QtGui.QResizeEvent | None) -> None: ...
    statusChanged: typing.ClassVar[QtCore.pyqtSignal]
    def loadFromModule(
        self,
        uri: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        typeName: QtCore.QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> None: ...
    def setInitialProperties(
        self, initialProperties: dict[str | None, typing.Any]
    ) -> None: ...
    def setSource(self, a0: QtCore.QUrl) -> None: ...
    def initialSize(self) -> QtCore.QSize: ...
    def errors(self) -> list[QtQml.QQmlError]: ...
    def status(self) -> QQuickView.Status: ...
    def setResizeMode(self, a0: QQuickView.ResizeMode) -> None: ...
    def resizeMode(self) -> QQuickView.ResizeMode: ...
    def rootObject(self) -> QQuickItem | None: ...
    def rootContext(self) -> QtQml.QQmlContext | None: ...
    def engine(self) -> QtQml.QQmlEngine | None: ...
    def source(self) -> QtCore.QUrl: ...

class QQuickCloseEvent(PyQt6.sip.simplewrapper): ...

class QSGMaterial(PyQt6.sip.wrapper):
    class Flag(enum.Flag):
        Blending = ...
        RequiresDeterminant = ...
        RequiresFullMatrixExceptTranslate = ...
        RequiresFullMatrix = ...
        NoBatching = ...
        CustomCompileStep = ...

    def __init__(self) -> None: ...
    def viewCount(self) -> int: ...
    def setFlag(
        self, flags: QSGMaterial.Flag, enabled: bool = ...
    ) -> None: ...
    def flags(self) -> QSGMaterial.Flag: ...
    def compare(self, other: QSGMaterial | None) -> int: ...
    def createShader(
        self, renderMode: QSGRendererInterface.RenderMode
    ) -> QSGMaterialShader | None: ...
    def type(self) -> QSGMaterialType | None: ...

class QSGFlatColorMaterial(QSGMaterial):
    def __init__(self) -> None: ...
    def compare(self, other: QSGMaterial | None) -> int: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def createShader(
        self, renderMode: QSGRendererInterface.RenderMode
    ) -> QSGMaterialShader | None: ...
    def type(self) -> QSGMaterialType | None: ...

class QSGGeometry(PyQt6.sip.wrapper):
    class Type(enum.Enum):
        ByteType = ...
        UnsignedByteType = ...
        ShortType = ...
        UnsignedShortType = ...
        IntType = ...
        UnsignedIntType = ...
        FloatType = ...
        Bytes2Type = ...
        Bytes3Type = ...
        Bytes4Type = ...
        DoubleType = ...

    class DrawingMode(enum.IntEnum):
        DrawPoints = ...
        DrawLines = ...
        DrawLineLoop = ...
        DrawLineStrip = ...
        DrawTriangles = ...
        DrawTriangleStrip = ...
        DrawTriangleFan = ...

    class AttributeType(enum.Enum):
        UnknownAttribute = ...
        PositionAttribute = ...
        ColorAttribute = ...
        TexCoordAttribute = ...
        TexCoord1Attribute = ...
        TexCoord2Attribute = ...

    class DataPattern(enum.Enum):
        AlwaysUploadPattern = ...
        StreamPattern = ...
        DynamicPattern = ...
        StaticPattern = ...

    class Attribute(PyQt6.sip.simplewrapper):
        attributeType: QSGGeometry.AttributeType = ...
        isVertexCoordinate: int = ...
        position: int = ...
        tupleSize: int = ...
        type: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QSGGeometry.Attribute) -> None: ...
        @staticmethod
        def createWithAttributeType(
            pos: int,
            tupleSize: int,
            primitiveType: int,
            attributeType: QSGGeometry.AttributeType,
        ) -> QSGGeometry.Attribute: ...
        @staticmethod
        def create(
            pos: int,
            tupleSize: int,
            primitiveType: int,
            isPosition: bool = ...,
        ) -> QSGGeometry.Attribute: ...

    class AttributeSet(PyQt6.sip.simplewrapper):
        attributes: PyQt6.sip.array[typing.Any] = ...
        count: int = ...
        stride: int = ...

        def __init__(
            self,
            attributes: collections.abc.Iterable[QSGGeometry.Attribute],
            stride: int = ...,
        ) -> None: ...

    class Point2D(PyQt6.sip.simplewrapper):
        x: float = ...
        y: float = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QSGGeometry.Point2D) -> None: ...
        def set(self, nx: float, ny: float) -> None: ...

    class TexturedPoint2D(PyQt6.sip.simplewrapper):
        tx: float = ...
        ty: float = ...
        x: float = ...
        y: float = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QSGGeometry.TexturedPoint2D) -> None: ...
        def set(
            self, nx: float, ny: float, ntx: float, nty: float
        ) -> None: ...

    class ColoredPoint2D(PyQt6.sip.simplewrapper):
        a: int = ...
        b: int = ...
        g: int = ...
        r: int = ...
        x: float = ...
        y: float = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QSGGeometry.ColoredPoint2D) -> None: ...
        def set(
            self, nx: float, ny: float, nr: int, ng: int, nb: int, na: int
        ) -> None: ...

    def __init__(
        self,
        attribs: QSGGeometry.AttributeSet,
        vertexCount: int,
        indexCount: int = ...,
        indexType: int = ...,
    ) -> None: ...
    @staticmethod
    def updateColoredRectGeometry(
        g: QSGGeometry | None, rect: QtCore.QRectF
    ) -> None: ...
    def sizeOfIndex(self) -> int: ...
    def vertexDataAsColoredPoint2D(self) -> PyQt6.sip.array[typing.Any]: ...
    def vertexDataAsTexturedPoint2D(self) -> PyQt6.sip.array[typing.Any]: ...
    def vertexDataAsPoint2D(self) -> PyQt6.sip.array[typing.Any]: ...
    def indexDataAsUShort(self) -> PyQt6.sip.array[typing.Any]: ...
    def indexDataAsUInt(self) -> PyQt6.sip.array[typing.Any]: ...
    def setLineWidth(self, w: float) -> None: ...
    def lineWidth(self) -> float: ...
    def markVertexDataDirty(self) -> None: ...
    def markIndexDataDirty(self) -> None: ...
    def vertexDataPattern(self) -> QSGGeometry.DataPattern: ...
    def setVertexDataPattern(self, p: QSGGeometry.DataPattern) -> None: ...
    def indexDataPattern(self) -> QSGGeometry.DataPattern: ...
    def setIndexDataPattern(self, p: QSGGeometry.DataPattern) -> None: ...
    @staticmethod
    def updateTexturedRectGeometry(
        g: QSGGeometry | None, rect: QtCore.QRectF, sourceRect: QtCore.QRectF
    ) -> None: ...
    @staticmethod
    def updateRectGeometry(
        g: QSGGeometry | None, rect: QtCore.QRectF
    ) -> None: ...
    def sizeOfVertex(self) -> int: ...
    def attributes(self) -> PyQt6.sip.array[typing.Any]: ...
    def attributeCount(self) -> int: ...
    def indexData(self) -> PyQt6.sip.voidptr | None: ...
    def indexCount(self) -> int: ...
    def indexType(self) -> int: ...
    def vertexData(self) -> PyQt6.sip.voidptr | None: ...
    def vertexCount(self) -> int: ...
    def allocate(self, vertexCount: int, indexCount: int = ...) -> None: ...
    def drawingMode(self) -> int: ...
    def setDrawingMode(self, mode: int) -> None: ...
    @staticmethod
    def defaultAttributes_ColoredPoint2D() -> QSGGeometry.AttributeSet: ...
    @staticmethod
    def defaultAttributes_TexturedPoint2D() -> QSGGeometry.AttributeSet: ...
    @staticmethod
    def defaultAttributes_Point2D() -> QSGGeometry.AttributeSet: ...

class QSGNode(PyQt6.sip.wrapper):
    class DirtyStateBit(enum.Flag):
        DirtyMatrix = ...
        DirtyNodeAdded = ...
        DirtyNodeRemoved = ...
        DirtyGeometry = ...
        DirtyMaterial = ...
        DirtyOpacity = ...

    class Flag(enum.Flag):
        OwnedByParent = ...
        UsePreprocess = ...
        OwnsGeometry = ...
        OwnsMaterial = ...
        OwnsOpaqueMaterial = ...

    class NodeType(enum.Enum):
        BasicNodeType = ...
        GeometryNodeType = ...
        TransformNodeType = ...
        ClipNodeType = ...
        OpacityNodeType = ...

    def __init__(self) -> None: ...
    def preprocess(self) -> None: ...
    def setFlags(self, a0: QSGNode.Flag, enabled: bool = ...) -> None: ...
    def setFlag(self, a0: QSGNode.Flag, enabled: bool = ...) -> None: ...
    def flags(self) -> QSGNode.Flag: ...
    def isSubtreeBlocked(self) -> bool: ...
    def markDirty(self, bits: QSGNode.DirtyStateBit) -> None: ...
    def type(self) -> QSGNode.NodeType: ...
    def previousSibling(self) -> QSGNode | None: ...
    def nextSibling(self) -> QSGNode | None: ...
    def lastChild(self) -> QSGNode | None: ...
    def firstChild(self) -> QSGNode | None: ...
    def childAtIndex(self, i: int) -> QSGNode | None: ...
    def __len__(self) -> int: ...
    def childCount(self) -> int: ...
    def insertChildNodeAfter(
        self, node: QSGNode | None, after: QSGNode | None
    ) -> None: ...
    def insertChildNodeBefore(
        self, node: QSGNode | None, before: QSGNode | None
    ) -> None: ...
    def appendChildNode(self, node: QSGNode | None) -> None: ...
    def prependChildNode(self, node: QSGNode | None) -> None: ...
    def removeAllChildNodes(self) -> None: ...
    def removeChildNode(self, node: QSGNode | None) -> None: ...
    def parent(self) -> QSGNode | None: ...

class QSGBasicGeometryNode(QSGNode):
    def geometry(self) -> QSGGeometry | None: ...
    def setGeometry(self, geometry: QSGGeometry | None) -> None: ...

class QSGGeometryNode(QSGBasicGeometryNode):
    def __init__(self) -> None: ...
    def opaqueMaterial(self) -> QSGMaterial | None: ...
    def setOpaqueMaterial(self, material: QSGMaterial | None) -> None: ...
    def material(self) -> QSGMaterial | None: ...
    def setMaterial(self, material: QSGMaterial | None) -> None: ...

class QSGImageNode(QSGGeometryNode):
    class TextureCoordinatesTransformFlag(enum.Flag):
        NoTransform = ...
        MirrorHorizontally = ...
        MirrorVertically = ...

    def anisotropyLevel(self) -> QSGTexture.AnisotropyLevel: ...
    def setAnisotropyLevel(
        self, level: QSGTexture.AnisotropyLevel
    ) -> None: ...
    @staticmethod
    def rebuildGeometry(
        g: QSGGeometry | None,
        texture: QSGTexture | None,
        rect: QtCore.QRectF,
        sourceRect: QtCore.QRectF,
        texCoordMode: QSGImageNode.TextureCoordinatesTransformFlag,
    ) -> None: ...
    def ownsTexture(self) -> bool: ...
    def setOwnsTexture(self, owns: bool) -> None: ...
    def textureCoordinatesTransform(
        self,
    ) -> QSGImageNode.TextureCoordinatesTransformFlag: ...
    def setTextureCoordinatesTransform(
        self, mode: QSGImageNode.TextureCoordinatesTransformFlag
    ) -> None: ...
    def mipmapFiltering(self) -> QSGTexture.Filtering: ...
    def setMipmapFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def setFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def texture(self) -> QSGTexture | None: ...
    def setTexture(self, texture: QSGTexture | None) -> None: ...
    def sourceRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setSourceRect(self, r: QtCore.QRectF) -> None: ...
    @typing.overload
    def setSourceRect(
        self, x: float, y: float, w: float, h: float
    ) -> None: ...
    def rect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...

class QSGMaterialShader(PyQt6.sip.simplewrapper):
    class Stage(enum.Enum):
        VertexStage = ...
        FragmentStage = ...

    class Flag(enum.Flag):
        UpdatesGraphicsPipelineState = ...

    class RenderState(PyQt6.sip.simplewrapper):
        class DirtyState(enum.Flag):
            DirtyMatrix = ...
            DirtyOpacity = ...
            DirtyCachedMaterialData = ...
            DirtyAll = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QSGMaterialShader.RenderState) -> None: ...
        def uniformData(self) -> QtCore.QByteArray | None: ...
        def devicePixelRatio(self) -> float: ...
        def determinant(self) -> float: ...
        def deviceRect(self) -> QtCore.QRect: ...
        def viewportRect(self) -> QtCore.QRect: ...
        def projectionMatrix(self) -> QtGui.QMatrix4x4: ...
        def modelViewMatrix(self) -> QtGui.QMatrix4x4: ...
        def combinedMatrix(self) -> QtGui.QMatrix4x4: ...
        def opacity(self) -> float: ...
        def isOpacityDirty(self) -> bool: ...
        def isMatrixDirty(self) -> bool: ...
        def dirtyStates(self) -> QSGMaterialShader.RenderState.DirtyState: ...

    class GraphicsPipelineState(PyQt6.sip.simplewrapper):
        class PolygonMode(enum.Enum):
            Fill = ...
            Line = ...

        class CullMode(enum.Enum):
            CullNone = ...
            CullFront = ...
            CullBack = ...

        class ColorMaskComponent(enum.Flag):
            R = ...
            G = ...
            B = ...
            A = ...

        class BlendOp(enum.Enum):
            Add = ...
            Subtract = ...
            ReverseSubtract = ...
            Min = ...
            Max = ...

        class BlendFactor(enum.Enum):
            Zero = ...
            One = ...
            SrcColor = ...
            OneMinusSrcColor = ...
            DstColor = ...
            OneMinusDstColor = ...
            SrcAlpha = ...
            OneMinusSrcAlpha = ...
            DstAlpha = ...
            OneMinusDstAlpha = ...
            ConstantColor = ...
            OneMinusConstantColor = ...
            ConstantAlpha = ...
            OneMinusConstantAlpha = ...
            SrcAlphaSaturate = ...
            Src1Color = ...
            OneMinusSrc1Color = ...
            Src1Alpha = ...
            OneMinusSrc1Alpha = ...

        blendConstant: QtGui.QColor | QtCore.Qt.GlobalColor | int = ...
        blendEnable: bool = ...
        colorWrite: QSGMaterialShader.GraphicsPipelineState.ColorMaskComponent = ...
        cullMode: QSGMaterialShader.GraphicsPipelineState.CullMode = ...
        dstAlpha: QSGMaterialShader.GraphicsPipelineState.BlendFactor = ...
        dstColor: QSGMaterialShader.GraphicsPipelineState.BlendFactor = ...
        opAlpha: QSGMaterialShader.GraphicsPipelineState.BlendOp = ...
        opColor: QSGMaterialShader.GraphicsPipelineState.BlendOp = ...
        polygonMode: QSGMaterialShader.GraphicsPipelineState.PolygonMode = ...
        separateBlendFactors: bool = ...
        srcAlpha: QSGMaterialShader.GraphicsPipelineState.BlendFactor = ...
        srcColor: QSGMaterialShader.GraphicsPipelineState.BlendFactor = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, a0: QSGMaterialShader.GraphicsPipelineState
        ) -> None: ...

    def __init__(self) -> None: ...
    @typing.overload
    def setShaderFileName(
        self, stage: QSGMaterialShader.Stage, filename: str | None
    ) -> None: ...
    @typing.overload
    def setShaderFileName(
        self,
        stage: QSGMaterialShader.Stage,
        filename: str | None,
        viewCount: int,
    ) -> None: ...
    def combinedImageSamplerCount(self, binding: int) -> int: ...
    def setFlags(self, flags: QSGMaterialShader.Flag) -> None: ...
    def setFlag(
        self, flags: QSGMaterialShader.Flag, on: bool = ...
    ) -> None: ...
    def flags(self) -> QSGMaterialShader.Flag: ...
    def updateGraphicsPipelineState(
        self,
        state: QSGMaterialShader.RenderState,
        ps: QSGMaterialShader.GraphicsPipelineState | None,
        newMaterial: QSGMaterial | None,
        oldMaterial: QSGMaterial | None,
    ) -> bool: ...
    def updateSampledImage(
        self,
        state: QSGMaterialShader.RenderState,
        binding: int,
        newMaterial: QSGMaterial | None,
        oldMaterial: QSGMaterial | None,
    ) -> QSGTexture | None: ...
    def updateUniformData(
        self,
        state: QSGMaterialShader.RenderState,
        newMaterial: QSGMaterial | None,
        oldMaterial: QSGMaterial | None,
    ) -> bool: ...

class QSGMaterialType(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QSGMaterialType) -> None: ...

class QSGClipNode(QSGBasicGeometryNode):
    def __init__(self) -> None: ...
    def clipRect(self) -> QtCore.QRectF: ...
    def setClipRect(self, a0: QtCore.QRectF) -> None: ...
    def isRectangular(self) -> bool: ...
    def setIsRectangular(self, rectHint: bool) -> None: ...

class QSGTransformNode(QSGNode):
    def __init__(self) -> None: ...
    def matrix(self) -> QtGui.QMatrix4x4: ...
    def setMatrix(self, matrix: QtGui.QMatrix4x4) -> None: ...

class QSGOpacityNode(QSGNode):
    def __init__(self) -> None: ...
    def opacity(self) -> float: ...
    def setOpacity(self, opacity: float) -> None: ...

class QSGRectangleNode(QSGGeometryNode):
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def rect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...

class QSGRendererInterface(PyQt6.sip.simplewrapper):
    class RenderMode(enum.Enum):
        RenderMode2D = ...
        RenderMode2DNoDepthBuffer = ...
        RenderMode3D = ...

    class ShaderSourceType(enum.Flag):
        ShaderSourceString = ...
        ShaderSourceFile = ...
        ShaderByteCode = ...

    class ShaderCompilationType(enum.Flag):
        RuntimeCompilation = ...
        OfflineCompilation = ...

    class ShaderType(enum.Enum):
        UnknownShadingLanguage = ...
        GLSL = ...
        HLSL = ...
        RhiShader = ...

    class Resource(enum.Enum):
        DeviceResource = ...
        CommandQueueResource = ...
        CommandListResource = ...
        PainterResource = ...
        RhiResource = ...
        PhysicalDeviceResource = ...
        OpenGLContextResource = ...
        DeviceContextResource = ...
        CommandEncoderResource = ...
        VulkanInstanceResource = ...
        RenderPassResource = ...
        RhiSwapchainResource = ...
        RhiRedirectCommandBuffer = ...
        RhiRedirectRenderTarget = ...
        RedirectPaintDevice = ...
        GraphicsQueueFamilyIndexResource = ...
        GraphicsQueueIndexResource = ...

    class GraphicsApi(enum.Enum):
        Unknown = ...
        Software = ...
        OpenGL = ...
        OpenVG = ...
        OpenGLRhi = ...
        Direct3D11Rhi = ...
        VulkanRhi = ...
        MetalRhi = ...
        NullRhi = ...
        Direct3D11 = ...
        Vulkan = ...
        Metal = ...
        Direct3D12 = ...
        Null = ...

    @staticmethod
    def isApiRhiBased(api: QSGRendererInterface.GraphicsApi) -> bool: ...
    def shaderSourceType(self) -> QSGRendererInterface.ShaderSourceType: ...
    def shaderCompilationType(
        self,
    ) -> QSGRendererInterface.ShaderCompilationType: ...
    def shaderType(self) -> QSGRendererInterface.ShaderType: ...
    @typing.overload
    def getResource(
        self,
        window: QQuickWindow | None,
        resource: QSGRendererInterface.Resource,
    ) -> PyQt6.sip.voidptr | None: ...
    @typing.overload
    def getResource(
        self, window: QQuickWindow | None, resource: str | None
    ) -> PyQt6.sip.voidptr | None: ...
    def graphicsApi(self) -> QSGRendererInterface.GraphicsApi: ...

class QSGRenderNode(QSGNode):
    class RenderingFlag(enum.Flag):
        BoundedRectRendering = ...
        DepthAwareRendering = ...
        OpaqueRendering = ...

    class StateFlag(enum.Flag):
        DepthState = ...
        StencilState = ...
        ScissorState = ...
        ColorState = ...
        BlendState = ...
        CullState = ...
        ViewportState = ...
        RenderTargetState = ...

    class RenderState(PyQt6.sip.simplewrapper):
        def get(self, state: str | None) -> PyQt6.sip.voidptr | None: ...
        def clipRegion(self) -> QtGui.QRegion | None: ...
        def stencilEnabled(self) -> bool: ...
        def stencilValue(self) -> int: ...
        def scissorEnabled(self) -> bool: ...
        def scissorRect(self) -> QtCore.QRect: ...
        def projectionMatrix(self) -> QtGui.QMatrix4x4 | None: ...

    def __init__(self) -> None: ...
    def projectionMatrix(self) -> QtGui.QMatrix4x4 | None: ...
    def prepare(self) -> None: ...
    def inheritedOpacity(self) -> float: ...
    def clipList(self) -> QSGClipNode | None: ...
    def matrix(self) -> QtGui.QMatrix4x4 | None: ...
    def rect(self) -> QtCore.QRectF: ...
    def flags(self) -> QSGRenderNode.RenderingFlag: ...
    def releaseResources(self) -> None: ...
    def render(self, state: QSGRenderNode.RenderState | None) -> None: ...
    def changedStates(self) -> QSGRenderNode.StateFlag: ...

class QSGSimpleRectNode(QSGGeometryNode):
    @typing.overload
    def __init__(
        self,
        rect: QtCore.QRectF,
        color: QtGui.QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def rect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...

class QSGSimpleTextureNode(QSGGeometryNode):
    class TextureCoordinatesTransformFlag(enum.Flag):
        NoTransform = ...
        MirrorHorizontally = ...
        MirrorVertically = ...

    def __init__(self) -> None: ...
    def sourceRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setSourceRect(self, r: QtCore.QRectF) -> None: ...
    @typing.overload
    def setSourceRect(
        self, x: float, y: float, w: float, h: float
    ) -> None: ...
    def ownsTexture(self) -> bool: ...
    def setOwnsTexture(self, owns: bool) -> None: ...
    def textureCoordinatesTransform(
        self,
    ) -> QSGSimpleTextureNode.TextureCoordinatesTransformFlag: ...
    def setTextureCoordinatesTransform(
        self, mode: QSGSimpleTextureNode.TextureCoordinatesTransformFlag
    ) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def setFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def texture(self) -> QSGTexture | None: ...
    def setTexture(self, texture: QSGTexture | None) -> None: ...
    def rect(self) -> QtCore.QRectF: ...
    @typing.overload
    def setRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...

class QSGTextNode(QSGTransformNode):
    class TextStyle(enum.Enum):
        Normal = ...
        Outline = ...
        Raised = ...
        Sunken = ...

    class RenderType(enum.Enum):
        QtRendering = ...
        NativeRendering = ...
        CurveRendering = ...

    def viewport(self) -> QtCore.QRectF: ...
    def setViewport(self, viewport: QtCore.QRectF) -> None: ...
    def clear(self) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def setFiltering(self, a0: QSGTexture.Filtering) -> None: ...
    def renderTypeQuality(self) -> int: ...
    def setRenderTypeQuality(self, renderTypeQuality: int) -> None: ...
    def renderType(self) -> QSGTextNode.RenderType: ...
    def setRenderType(self, renderType: QSGTextNode.RenderType) -> None: ...
    def selectionTextColor(self) -> QtGui.QColor: ...
    def setSelectionTextColor(
        self, selectionTextColor: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def selectionColor(self) -> QtGui.QColor: ...
    def setSelectionColor(
        self, selectionColor: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def linkColor(self) -> QtGui.QColor: ...
    def setLinkColor(
        self, linkColor: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def styleColor(self) -> QtGui.QColor: ...
    def setStyleColor(
        self, styleColor: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def textStyle(self) -> QSGTextNode.TextStyle: ...
    def setTextStyle(self, textStyle: QSGTextNode.TextStyle) -> None: ...
    def color(self) -> QtGui.QColor: ...
    def setColor(
        self, color: QtGui.QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def addTextLayout(
        self,
        position: QtCore.QPointF,
        layout: QtGui.QTextLayout | None,
        selectionStart: int = ...,
        selectionCount: int = ...,
        lineStart: int = ...,
        lineCount: int = ...,
    ) -> None: ...
    def addTextDocument(
        self,
        position: QtCore.QPointF,
        document: QtGui.QTextDocument | None,
        selectionStart: int = ...,
        selectionCount: int = ...,
    ) -> None: ...

class QSGTexture(QtCore.QObject):
    class AnisotropyLevel(enum.Enum):
        AnisotropyNone = ...
        Anisotropy2x = ...
        Anisotropy4x = ...
        Anisotropy8x = ...
        Anisotropy16x = ...

    class Filtering(enum.Enum):
        None_ = ...
        Nearest = ...
        Linear = ...

    class WrapMode(enum.Enum):
        Repeat = ...
        ClampToEdge = ...
        MirroredRepeat = ...

    def __init__(self) -> None: ...
    def comparisonKey(self) -> int: ...
    def anisotropyLevel(self) -> QSGTexture.AnisotropyLevel: ...
    def setAnisotropyLevel(
        self, level: QSGTexture.AnisotropyLevel
    ) -> None: ...
    def convertToNormalizedSourceRect(
        self, rect: QtCore.QRectF
    ) -> QtCore.QRectF: ...
    def verticalWrapMode(self) -> QSGTexture.WrapMode: ...
    def setVerticalWrapMode(self, vwrap: QSGTexture.WrapMode) -> None: ...
    def horizontalWrapMode(self) -> QSGTexture.WrapMode: ...
    def setHorizontalWrapMode(self, hwrap: QSGTexture.WrapMode) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def setFiltering(self, filter: QSGTexture.Filtering) -> None: ...
    def mipmapFiltering(self) -> QSGTexture.Filtering: ...
    def setMipmapFiltering(self, filter: QSGTexture.Filtering) -> None: ...
    def isAtlasTexture(self) -> bool: ...
    def normalizedTextureSubRect(self) -> QtCore.QRectF: ...
    def hasMipmaps(self) -> bool: ...
    def hasAlphaChannel(self) -> bool: ...
    def textureSize(self) -> QtCore.QSize: ...

class QSGDynamicTexture(QSGTexture):
    def __init__(self) -> None: ...
    def updateTexture(self) -> bool: ...

class QNativeInterface(PyQt6.sip.simplewrapper):
    class QSGOpenGLTexture(PyQt6.sip.simplewrapper):
        @staticmethod
        def fromNative(
            textureId: int,
            window: QQuickWindow | None,
            size: QtCore.QSize,
            options: QQuickWindow.CreateTextureOption = ...,
        ) -> QSGTexture | None: ...
        def nativeTexture(self) -> int: ...

class QSGOpaqueTextureMaterial(QSGMaterial):
    def __init__(self) -> None: ...
    def anisotropyLevel(self) -> QSGTexture.AnisotropyLevel: ...
    def setAnisotropyLevel(
        self, level: QSGTexture.AnisotropyLevel
    ) -> None: ...
    def verticalWrapMode(self) -> QSGTexture.WrapMode: ...
    def setVerticalWrapMode(self, mode: QSGTexture.WrapMode) -> None: ...
    def horizontalWrapMode(self) -> QSGTexture.WrapMode: ...
    def setHorizontalWrapMode(self, mode: QSGTexture.WrapMode) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def setFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def mipmapFiltering(self) -> QSGTexture.Filtering: ...
    def setMipmapFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def texture(self) -> QSGTexture | None: ...
    def setTexture(self, texture: QSGTexture | None) -> None: ...
    def compare(self, other: QSGMaterial | None) -> int: ...
    def createShader(
        self, renderMode: QSGRendererInterface.RenderMode
    ) -> QSGMaterialShader | None: ...
    def type(self) -> QSGMaterialType | None: ...

class QSGTextureMaterial(QSGOpaqueTextureMaterial):
    def __init__(self) -> None: ...
    def createShader(
        self, renderMode: QSGRendererInterface.RenderMode
    ) -> QSGMaterialShader | None: ...
    def type(self) -> QSGMaterialType | None: ...

class QSGTextureProvider(QtCore.QObject):
    def __init__(self) -> None: ...

    textureChanged: typing.ClassVar[QtCore.pyqtSignal]
    def texture(self) -> QSGTexture | None: ...

class QSGVertexColorMaterial(QSGMaterial):
    def __init__(self) -> None: ...
    def createShader(
        self, renderMode: QSGRendererInterface.RenderMode
    ) -> QSGMaterialShader | None: ...
    def type(self) -> QSGMaterialType | None: ...
    def compare(self, other: QSGMaterial | None) -> int: ...
