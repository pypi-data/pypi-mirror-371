# The PEP 484 type hints stub file for the QtOpenGLWidgets module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

from PyQt6 import QtCore, QtGui, QtWidgets

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QOpenGLWidget(QtWidgets.QWidget):
    class TargetBuffer(enum.Enum):
        LeftBuffer = ...
        RightBuffer = ...

    class UpdateBehavior(enum.Enum):
        NoPartialUpdate = ...
        PartialUpdate = ...

    def __init__(
        self,
        parent: QtWidgets.QWidget | None = ...,
        flags: QtCore.Qt.WindowType = ...,
    ) -> None: ...
    def currentTargetBuffer(self) -> QOpenGLWidget.TargetBuffer: ...
    def setTextureFormat(self, texFormat: int) -> None: ...
    def textureFormat(self) -> int: ...
    def updateBehavior(self) -> QOpenGLWidget.UpdateBehavior: ...
    def setUpdateBehavior(
        self, updateBehavior: QOpenGLWidget.UpdateBehavior
    ) -> None: ...
    def paintEngine(self) -> QtGui.QPaintEngine | None: ...
    def metric(self, metric: QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def event(self, e: QtCore.QEvent | None) -> bool: ...
    def resizeEvent(self, e: QtGui.QResizeEvent | None) -> None: ...
    def paintEvent(self, e: QtGui.QPaintEvent | None) -> None: ...
    def paintGL(self) -> None: ...
    def resizeGL(self, w: int, h: int) -> None: ...
    def initializeGL(self) -> None: ...
    resized: typing.ClassVar[QtCore.pyqtSignal]
    aboutToResize: typing.ClassVar[QtCore.pyqtSignal]
    frameSwapped: typing.ClassVar[QtCore.pyqtSignal]
    aboutToCompose: typing.ClassVar[QtCore.pyqtSignal]
    @typing.overload
    def grabFramebuffer(self) -> QtGui.QImage: ...
    @typing.overload
    def grabFramebuffer(
        self, targetBuffer: QOpenGLWidget.TargetBuffer
    ) -> QtGui.QImage: ...
    @typing.overload
    def defaultFramebufferObject(self) -> int: ...
    @typing.overload
    def defaultFramebufferObject(
        self, targetBuffer: QOpenGLWidget.TargetBuffer
    ) -> int: ...
    def context(self) -> QtGui.QOpenGLContext | None: ...
    def doneCurrent(self) -> None: ...
    @typing.overload
    def makeCurrent(self) -> None: ...
    @typing.overload
    def makeCurrent(
        self, targetBuffer: QOpenGLWidget.TargetBuffer
    ) -> None: ...
    def isValid(self) -> bool: ...
    def format(self) -> QtGui.QSurfaceFormat: ...
    def setFormat(self, format: QtGui.QSurfaceFormat) -> None: ...
