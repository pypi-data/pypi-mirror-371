# The PEP 484 type hints stub file for the QtSql module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore, QtWidgets

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QSqlDriverCreatorBase(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QSqlDriverCreatorBase) -> None: ...
    def createObject(self) -> QSqlDriver | None: ...

class QSqlDatabase(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlDatabase) -> None: ...
    @typing.overload
    def __init__(self, type: str | None) -> None: ...
    @typing.overload
    def __init__(self, driver: QSqlDriver | None) -> None: ...
    def thread(self) -> QtCore.QThread | None: ...
    def moveToThread(self, targetThread: QtCore.QThread | None) -> bool: ...
    def numericalPrecisionPolicy(self) -> QSql.NumericalPrecisionPolicy: ...
    def setNumericalPrecisionPolicy(
        self, precisionPolicy: QSql.NumericalPrecisionPolicy
    ) -> None: ...
    @staticmethod
    def isDriverAvailable(name: str | None) -> bool: ...
    @staticmethod
    def registerSqlDriver(
        name: str | None, creator: QSqlDriverCreatorBase | None
    ) -> None: ...
    @staticmethod
    def connectionNames() -> list[str]: ...
    @staticmethod
    def drivers() -> list[str]: ...
    @staticmethod
    def contains(connectionName: str | None = ...) -> bool: ...
    @staticmethod
    def removeDatabase(connectionName: str | None) -> None: ...
    @staticmethod
    def database(
        connectionName: str | None = ..., open: bool = ...
    ) -> QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def cloneDatabase(
        other: QSqlDatabase, connectionName: str | None
    ) -> QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def cloneDatabase(
        other: str | None, connectionName: str | None
    ) -> QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def addDatabase(
        type: str | None, connectionName: str | None = ...
    ) -> QSqlDatabase: ...
    @typing.overload
    @staticmethod
    def addDatabase(
        driver: QSqlDriver | None, connectionName: str | None = ...
    ) -> QSqlDatabase: ...
    def driver(self) -> QSqlDriver | None: ...
    def connectionName(self) -> str: ...
    def connectOptions(self) -> str: ...
    def port(self) -> int: ...
    def driverName(self) -> str: ...
    def hostName(self) -> str: ...
    def password(self) -> str: ...
    def userName(self) -> str: ...
    def databaseName(self) -> str: ...
    def setConnectOptions(self, options: str | None = ...) -> None: ...
    def setPort(self, p: int) -> None: ...
    def setHostName(self, host: str | None) -> None: ...
    def setPassword(self, password: str | None) -> None: ...
    def setUserName(self, name: str | None) -> None: ...
    def setDatabaseName(self, name: str | None) -> None: ...
    def rollback(self) -> bool: ...
    def commit(self) -> bool: ...
    def transaction(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastError(self) -> QSqlError: ...
    def exec(self, query: str | None = ...) -> QSqlQuery: ...
    def record(self, tablename: str | None) -> QSqlRecord: ...
    def primaryIndex(self, tablename: str | None) -> QSqlIndex: ...
    def tables(self, type: QSql.TableType = ...) -> list[str]: ...
    def isOpenError(self) -> bool: ...
    def isOpen(self) -> bool: ...
    def close(self) -> None: ...
    @typing.overload
    def open(self) -> bool: ...
    @typing.overload
    def open(self, user: str | None, password: str | None) -> bool: ...

class QSqlDriver(QtCore.QObject):
    class DbmsType(enum.Enum):
        UnknownDbms = ...
        MSSqlServer = ...
        MySqlServer = ...
        PostgreSQL = ...
        Oracle = ...
        Sybase = ...
        SQLite = ...
        Interbase = ...
        DB2 = ...
        MimerSQL = ...

    class NotificationSource(enum.Enum):
        UnknownSource = ...
        SelfSource = ...
        OtherSource = ...

    class IdentifierType(enum.Enum):
        FieldName = ...
        TableName = ...

    class StatementType(enum.Enum):
        WhereStatement = ...
        SelectStatement = ...
        UpdateStatement = ...
        InsertStatement = ...
        DeleteStatement = ...

    class DriverFeature(enum.Enum):
        Transactions = ...
        QuerySize = ...
        BLOB = ...
        Unicode = ...
        PreparedQueries = ...
        NamedPlaceholders = ...
        PositionalPlaceholders = ...
        LastInsertId = ...
        BatchOperations = ...
        SimpleLocking = ...
        LowPrecisionNumbers = ...
        EventNotifications = ...
        FinishQuery = ...
        MultipleResultSets = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def connectionName(self) -> str: ...
    def maximumIdentifierLength(
        self, type: QSqlDriver.IdentifierType
    ) -> int: ...
    def dbmsType(self) -> QSqlDriver.DbmsType: ...
    def numericalPrecisionPolicy(self) -> QSql.NumericalPrecisionPolicy: ...
    def setNumericalPrecisionPolicy(
        self, precisionPolicy: QSql.NumericalPrecisionPolicy
    ) -> None: ...
    def stripDelimiters(
        self, identifier: str | None, type: QSqlDriver.IdentifierType
    ) -> str: ...
    def isIdentifierEscaped(
        self, identifier: str | None, type: QSqlDriver.IdentifierType
    ) -> bool: ...
    notification: typing.ClassVar[QtCore.pyqtSignal]
    def subscribedToNotifications(self) -> list[str]: ...
    def unsubscribeFromNotification(self, name: str | None) -> bool: ...
    def subscribeToNotification(self, name: str | None) -> bool: ...
    def setLastError(self, e: QSqlError) -> None: ...
    def setOpenError(self, e: bool) -> None: ...
    def setOpen(self, o: bool) -> None: ...
    def open(
        self,
        db: str | None,
        user: str | None = ...,
        password: str | None = ...,
        host: str | None = ...,
        port: int = ...,
        options: str | None = ...,
    ) -> bool: ...
    def createResult(self) -> QSqlResult | None: ...
    def close(self) -> None: ...
    def hasFeature(self, f: QSqlDriver.DriverFeature) -> bool: ...
    def handle(self) -> typing.Any: ...
    def lastError(self) -> QSqlError: ...
    def sqlStatement(
        self,
        type: QSqlDriver.StatementType,
        tableName: str | None,
        rec: QSqlRecord,
        preparedStatement: bool,
    ) -> str: ...
    def escapeIdentifier(
        self, identifier: str | None, type: QSqlDriver.IdentifierType
    ) -> str: ...
    def formatValue(
        self, field: QSqlField, trimStrings: bool = ...
    ) -> str: ...
    def record(self, tableName: str | None) -> QSqlRecord: ...
    def primaryIndex(self, tableName: str | None) -> QSqlIndex: ...
    def tables(self, tableType: QSql.TableType) -> list[str]: ...
    def rollbackTransaction(self) -> bool: ...
    def commitTransaction(self) -> bool: ...
    def beginTransaction(self) -> bool: ...
    def isOpenError(self) -> bool: ...
    def isOpen(self) -> bool: ...

class QSqlError(PyQt6.sip.simplewrapper):
    class ErrorType(enum.Enum):
        NoError = ...
        ConnectionError = ...
        StatementError = ...
        TransactionError = ...
        UnknownError = ...

    @typing.overload
    def __init__(
        self,
        driverText: str | None = ...,
        databaseText: str | None = ...,
        type: QSqlError.ErrorType = ...,
        errorCode: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlError) -> None: ...
    def swap(self, other: QSqlError) -> None: ...
    def nativeErrorCode(self) -> str: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isValid(self) -> bool: ...
    def text(self) -> str: ...
    def type(self) -> QSqlError.ErrorType: ...
    def databaseText(self) -> str: ...
    def driverText(self) -> str: ...

class QSqlField(PyQt6.sip.simplewrapper):
    class RequiredStatus(enum.Enum):
        Unknown = ...
        Optional = ...
        Required = ...

    @typing.overload
    def __init__(
        self,
        fieldName: str | None = ...,
        type: QtCore.QMetaType = ...,
        tableName: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlField) -> None: ...
    def swap(self, other: QSqlField) -> None: ...
    def setMetaType(self, type: QtCore.QMetaType) -> None: ...
    def metaType(self) -> QtCore.QMetaType: ...
    def tableName(self) -> str: ...
    def setTableName(self, tableName: str | None) -> None: ...
    def isValid(self) -> bool: ...
    def isGenerated(self) -> bool: ...
    def typeID(self) -> int: ...
    def defaultValue(self) -> typing.Any: ...
    def precision(self) -> int: ...
    def length(self) -> int: ...
    def requiredStatus(self) -> QSqlField.RequiredStatus: ...
    def setAutoValue(self, autoVal: bool) -> None: ...
    def setGenerated(self, gen: bool) -> None: ...
    def setSqlType(self, type: int) -> None: ...
    def setDefaultValue(self, value: typing.Any) -> None: ...
    def setPrecision(self, precision: int) -> None: ...
    def setLength(self, fieldLength: int) -> None: ...
    def setRequired(self, required: bool) -> None: ...
    def setRequiredStatus(self, status: QSqlField.RequiredStatus) -> None: ...
    def isAutoValue(self) -> bool: ...
    def clear(self) -> None: ...
    def isReadOnly(self) -> bool: ...
    def setReadOnly(self, readOnly: bool) -> None: ...
    def isNull(self) -> bool: ...
    def name(self) -> str: ...
    def setName(self, name: str | None) -> None: ...
    def value(self) -> typing.Any: ...
    def setValue(self, value: typing.Any) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QSqlRecord(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlRecord) -> None: ...
    def swap(self, other: QSqlRecord) -> None: ...
    def keyValues(self, keyFields: QSqlRecord) -> QSqlRecord: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def clearValues(self) -> None: ...
    def clear(self) -> None: ...
    def contains(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    def isEmpty(self) -> bool: ...
    def remove(self, pos: int) -> None: ...
    def insert(self, pos: int, field: QSqlField) -> None: ...
    def replace(self, pos: int, field: QSqlField) -> None: ...
    def append(self, field: QSqlField) -> None: ...
    @typing.overload
    def setGenerated(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        generated: bool,
    ) -> None: ...
    @typing.overload
    def setGenerated(self, i: int, generated: bool) -> None: ...
    @typing.overload
    def isGenerated(self, i: int) -> bool: ...
    @typing.overload
    def isGenerated(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def field(self, i: int) -> QSqlField: ...
    @typing.overload
    def field(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QSqlField: ...
    def fieldName(self, i: int) -> str: ...
    def indexOf(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> int: ...
    @typing.overload
    def isNull(self, i: int) -> bool: ...
    @typing.overload
    def isNull(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def setNull(self, i: int) -> None: ...
    @typing.overload
    def setNull(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def setValue(self, i: int, val: typing.Any) -> None: ...
    @typing.overload
    def setValue(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
        val: typing.Any,
    ) -> None: ...
    @typing.overload
    def value(self, i: int) -> typing.Any: ...
    @typing.overload
    def value(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> typing.Any: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QSqlIndex(QSqlRecord):
    @typing.overload
    def __init__(
        self, cursorName: str | None = ..., name: str | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlIndex) -> None: ...
    def swap(self, other: QSqlIndex) -> None: ...
    def setDescending(self, i: int, desc: bool) -> None: ...
    def isDescending(self, i: int) -> bool: ...
    @typing.overload
    def append(self, field: QSqlField) -> None: ...
    @typing.overload
    def append(self, field: QSqlField, desc: bool) -> None: ...
    def name(self) -> str: ...
    def setName(self, name: str | None) -> None: ...
    def cursorName(self) -> str: ...
    def setCursorName(self, cursorName: str | None) -> None: ...

class QSqlQuery(PyQt6.sip.simplewrapper):
    class BatchExecutionMode(enum.Enum):
        ValuesAsRows = ...
        ValuesAsColumns = ...

    @typing.overload
    def __init__(self, db: QSqlDatabase) -> None: ...
    @typing.overload
    def __init__(
        self, query: str | None = ..., db: QSqlDatabase = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, r: QSqlResult | None) -> None: ...
    @typing.overload
    def __init__(self, other: QSqlQuery) -> None: ...
    def isPositionalBindingEnabled(self) -> bool: ...
    def setPositionalBindingEnabled(self, enable: bool) -> None: ...
    def boundValueName(self, pos: int) -> str: ...
    def boundValueNames(self) -> list[str]: ...
    def swap(self, other: QSqlQuery) -> None: ...
    def nextResult(self) -> bool: ...
    def finish(self) -> None: ...
    def numericalPrecisionPolicy(self) -> QSql.NumericalPrecisionPolicy: ...
    def setNumericalPrecisionPolicy(
        self, precisionPolicy: QSql.NumericalPrecisionPolicy
    ) -> None: ...
    def lastInsertId(self) -> typing.Any: ...
    def executedQuery(self) -> str: ...
    def boundValues(self) -> list[typing.Any]: ...
    @typing.overload
    def boundValue(self, placeholder: str | None) -> typing.Any: ...
    @typing.overload
    def boundValue(self, pos: int) -> typing.Any: ...
    def addBindValue(
        self, val: typing.Any, type: QSql.ParamTypeFlag = ...
    ) -> None: ...
    @typing.overload
    def bindValue(
        self,
        placeholder: str | None,
        val: typing.Any,
        type: QSql.ParamTypeFlag = ...,
    ) -> None: ...
    @typing.overload
    def bindValue(
        self, pos: int, val: typing.Any, type: QSql.ParamTypeFlag = ...
    ) -> None: ...
    def prepare(self, query: str | None) -> bool: ...
    def execBatch(self, mode: QSqlQuery.BatchExecutionMode = ...) -> bool: ...
    def clear(self) -> None: ...
    def last(self) -> bool: ...
    def first(self) -> bool: ...
    def previous(self) -> bool: ...
    def next(self) -> bool: ...
    def seek(self, index: int, relative: bool = ...) -> bool: ...
    @typing.overload
    def value(self, i: int) -> typing.Any: ...
    @typing.overload
    def value(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> typing.Any: ...
    @typing.overload
    def exec(self, query: str | None) -> bool: ...
    @typing.overload
    def exec(self) -> bool: ...
    def setForwardOnly(self, forward: bool) -> None: ...
    def record(self) -> QSqlRecord: ...
    def isForwardOnly(self) -> bool: ...
    def result(self) -> QSqlResult | None: ...
    def driver(self) -> QSqlDriver | None: ...
    def size(self) -> int: ...
    def isSelect(self) -> bool: ...
    def lastError(self) -> QSqlError: ...
    def numRowsAffected(self) -> int: ...
    def lastQuery(self) -> str: ...
    def at(self) -> int: ...
    @typing.overload
    def isNull(self, field: int) -> bool: ...
    @typing.overload
    def isNull(
        self,
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    def isActive(self) -> bool: ...
    def isValid(self) -> bool: ...

class QSqlQueryModel(QtCore.QAbstractTableModel):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def refresh(self) -> None: ...
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def endRemoveColumns(self) -> None: ...
    def beginRemoveColumns(
        self, parent: QtCore.QModelIndex, first: int, last: int
    ) -> None: ...
    def endInsertColumns(self) -> None: ...
    def beginInsertColumns(
        self, parent: QtCore.QModelIndex, first: int, last: int
    ) -> None: ...
    def endRemoveRows(self) -> None: ...
    def beginRemoveRows(
        self, parent: QtCore.QModelIndex, first: int, last: int
    ) -> None: ...
    def endInsertRows(self) -> None: ...
    def beginInsertRows(
        self, parent: QtCore.QModelIndex, first: int, last: int
    ) -> None: ...
    def endResetModel(self) -> None: ...
    def beginResetModel(self) -> None: ...
    def setLastError(self, error: QSqlError) -> None: ...
    def indexInQuery(self, item: QtCore.QModelIndex) -> QtCore.QModelIndex: ...
    def queryChange(self) -> None: ...
    def canFetchMore(self, parent: QtCore.QModelIndex = ...) -> bool: ...
    def fetchMore(self, parent: QtCore.QModelIndex = ...) -> None: ...
    def lastError(self) -> QSqlError: ...
    def clear(self) -> None: ...
    def query(self) -> QSqlQuery: ...
    @typing.overload
    def setQuery(self, query: QSqlQuery) -> None: ...
    @typing.overload
    def setQuery(self, query: str | None, db: QSqlDatabase = ...) -> None: ...
    def removeColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def setHeaderData(
        self,
        section: int,
        orientation: QtCore.Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: QtCore.Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def data(
        self, item: QtCore.QModelIndex, role: int = ...
    ) -> typing.Any: ...
    @typing.overload
    def record(self) -> QSqlRecord: ...
    @typing.overload
    def record(self, row: int) -> QSqlRecord: ...
    def columnCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...

class QSqlRelationalDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def setModelData(
        self,
        editor: QtWidgets.QWidget | None,
        model: QtCore.QAbstractItemModel | None,
        index: QtCore.QModelIndex,
    ) -> None: ...
    def setEditorData(
        self, editor: QtWidgets.QWidget | None, index: QtCore.QModelIndex
    ) -> None: ...
    def createEditor(
        self,
        parent: QtWidgets.QWidget | None,
        option: QtWidgets.QStyleOptionViewItem,
        index: QtCore.QModelIndex,
    ) -> QtWidgets.QWidget | None: ...

class QSqlRelation(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        aTableName: str | None,
        indexCol: str | None,
        displayCol: str | None,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QSqlRelation) -> None: ...
    def swap(self, other: QSqlRelation) -> None: ...
    def isValid(self) -> bool: ...
    def displayColumn(self) -> str: ...
    def indexColumn(self) -> str: ...
    def tableName(self) -> str: ...

class QSqlTableModel(QSqlQueryModel):
    class EditStrategy(enum.Enum):
        OnFieldChange = ...
        OnRowChange = ...
        OnManualSubmit = ...

    def __init__(
        self, parent: QtCore.QObject | None = ..., db: QSqlDatabase = ...
    ) -> None: ...
    def clearItemData(self, index: QtCore.QModelIndex) -> bool: ...
    @typing.overload
    def record(self) -> QSqlRecord: ...
    @typing.overload
    def record(self, row: int) -> QSqlRecord: ...
    def selectRow(self, row: int) -> bool: ...
    def primaryValues(self, row: int) -> QSqlRecord: ...
    def indexInQuery(self, item: QtCore.QModelIndex) -> QtCore.QModelIndex: ...
    def setPrimaryKey(self, key: QSqlIndex) -> None: ...
    def selectStatement(self) -> str: ...
    def orderByClause(self) -> str: ...
    def deleteRowFromTable(self, row: int) -> bool: ...
    def insertRowIntoTable(self, values: QSqlRecord) -> bool: ...
    def updateRowInTable(self, row: int, values: QSqlRecord) -> bool: ...
    beforeDelete: typing.ClassVar[QtCore.pyqtSignal]
    beforeUpdate: typing.ClassVar[QtCore.pyqtSignal]
    beforeInsert: typing.ClassVar[QtCore.pyqtSignal]
    primeInsert: typing.ClassVar[QtCore.pyqtSignal]
    def revertAll(self) -> None: ...
    def submitAll(self) -> bool: ...
    def revert(self) -> None: ...
    def submit(self) -> bool: ...
    def revertRow(self, row: int) -> None: ...
    def setRecord(self, row: int, record: QSqlRecord) -> bool: ...
    def insertRecord(self, row: int, record: QSqlRecord) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def removeRows(
        self, row: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def removeColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def setFilter(self, filter: str | None) -> None: ...
    def filter(self) -> str: ...
    def setSort(self, column: int, order: QtCore.Qt.SortOrder) -> None: ...
    def sort(self, column: int, order: QtCore.Qt.SortOrder) -> None: ...
    def fieldIndex(self, fieldName: str | None) -> int: ...
    def database(self) -> QSqlDatabase: ...
    def primaryKey(self) -> QSqlIndex: ...
    def editStrategy(self) -> QSqlTableModel.EditStrategy: ...
    def setEditStrategy(
        self, strategy: QSqlTableModel.EditStrategy
    ) -> None: ...
    def clear(self) -> None: ...
    @typing.overload
    def isDirty(self, index: QtCore.QModelIndex) -> bool: ...
    @typing.overload
    def isDirty(self) -> bool: ...
    def headerData(
        self, section: int, orientation: QtCore.Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QtCore.QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, idx: QtCore.QModelIndex, role: int = ...) -> typing.Any: ...
    def flags(self, index: QtCore.QModelIndex) -> QtCore.Qt.ItemFlag: ...
    def tableName(self) -> str: ...
    def setTable(self, tableName: str | None) -> None: ...
    def select(self) -> bool: ...

class QSqlRelationalTableModel(QSqlTableModel):
    class JoinMode(enum.Enum):
        InnerJoin = ...
        LeftJoin = ...

    def __init__(
        self, parent: QtCore.QObject | None = ..., db: QSqlDatabase = ...
    ) -> None: ...
    def setJoinMode(
        self, joinMode: QSqlRelationalTableModel.JoinMode
    ) -> None: ...
    def insertRowIntoTable(self, values: QSqlRecord) -> bool: ...
    def orderByClause(self) -> str: ...
    def updateRowInTable(self, row: int, values: QSqlRecord) -> bool: ...
    def selectStatement(self) -> str: ...
    def removeColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def revertRow(self, row: int) -> None: ...
    def relationModel(self, column: int) -> QSqlTableModel | None: ...
    def relation(self, column: int) -> QSqlRelation: ...
    def setRelation(self, column: int, relation: QSqlRelation) -> None: ...
    def setTable(self, tableName: str | None) -> None: ...
    def select(self) -> bool: ...
    def clear(self) -> None: ...
    def setData(
        self, item: QtCore.QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(
        self, item: QtCore.QModelIndex, role: int = ...
    ) -> typing.Any: ...

class QSqlResult(PyQt6.sip.wrapper):
    class BindingSyntax(enum.Enum):
        PositionalBinding = ...
        NamedBinding = ...

    def __init__(self, db: QSqlDriver | None) -> None: ...
    def isPositionalBindingEnabled(self) -> bool: ...
    def setPositionalBindingEnabled(self, enable: bool) -> None: ...
    def boundValueNames(self) -> list[str]: ...
    def lastInsertId(self) -> typing.Any: ...
    def record(self) -> QSqlRecord: ...
    def numRowsAffected(self) -> int: ...
    def size(self) -> int: ...
    def fetchLast(self) -> bool: ...
    def fetchFirst(self) -> bool: ...
    def fetchPrevious(self) -> bool: ...
    def fetchNext(self) -> bool: ...
    def fetch(self, i: int) -> bool: ...
    def reset(self, sqlquery: str | None) -> bool: ...
    def isNull(self, i: int) -> bool: ...
    def data(self, i: int) -> typing.Any: ...
    def bindingSyntax(self) -> QSqlResult.BindingSyntax: ...
    def hasOutValues(self) -> bool: ...
    def clear(self) -> None: ...
    def boundValueName(self, pos: int) -> str: ...
    def executedQuery(self) -> str: ...
    def boundValues(self) -> list[typing.Any]: ...
    def boundValueCount(self) -> int: ...
    @typing.overload
    def bindValueType(self, placeholder: str | None) -> QSql.ParamTypeFlag: ...
    @typing.overload
    def bindValueType(self, pos: int) -> QSql.ParamTypeFlag: ...
    @typing.overload
    def boundValue(self, placeholder: str | None) -> typing.Any: ...
    @typing.overload
    def boundValue(self, pos: int) -> typing.Any: ...
    def addBindValue(
        self, val: typing.Any, type: QSql.ParamTypeFlag
    ) -> None: ...
    @typing.overload
    def bindValue(
        self, pos: int, val: typing.Any, type: QSql.ParamTypeFlag
    ) -> None: ...
    @typing.overload
    def bindValue(
        self,
        placeholder: str | None,
        val: typing.Any,
        type: QSql.ParamTypeFlag,
    ) -> None: ...
    def savePrepare(self, sqlquery: str | None) -> bool: ...
    def prepare(self, query: str | None) -> bool: ...
    def exec(self) -> bool: ...
    def setForwardOnly(self, forward: bool) -> None: ...
    def setSelect(self, s: bool) -> None: ...
    def setQuery(self, query: str | None) -> None: ...
    def setLastError(self, e: QSqlError) -> None: ...
    def setActive(self, a: bool) -> None: ...
    def setAt(self, at: int) -> None: ...
    def driver(self) -> QSqlDriver | None: ...
    def isForwardOnly(self) -> bool: ...
    def isSelect(self) -> bool: ...
    def isActive(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastError(self) -> QSqlError: ...
    def lastQuery(self) -> str: ...
    def at(self) -> int: ...
    def handle(self) -> typing.Any: ...

class QSql(PyQt6.sip.simplewrapper):
    class NumericalPrecisionPolicy(enum.Enum):
        LowPrecisionInt32 = ...
        LowPrecisionInt64 = ...
        LowPrecisionDouble = ...
        HighPrecision = ...

    class TableType(enum.Enum):
        Tables = ...
        SystemTables = ...
        Views = ...
        AllTables = ...

    class ParamTypeFlag(enum.Flag):
        In = ...
        Out = ...
        InOut = ...
        Binary = ...

    class Location(enum.Enum):
        BeforeFirstRow = ...
        AfterLastRow = ...
