[project]
name = "modelbatch"
version = "0.1.0"
description = "Train many independent PyTorch models simultaneously on a single GPU using vectorized operations"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.20.0",
    "tqdm>=4.64.0",
]
keywords = ["pytorch", "machine learning", "vectorization", "gpu", "training"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 88
target-version = "py39"
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy-specific rules
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by formatter
    "N812",    # conventional for nn.functional to be imported as F
    "S101",    # use of assert
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "TRY003",  # avoid specifying long messages outside the exception class
    "EM101",   # exception must not use a string literal
    "EM102",   # exception must not use an f-string literal
    "COM812",  # missing trailing comma in multiline
    "ISC001",  # single line implicit string concatenation
    "NPY002",  # ignore legacy np.random.seed (needed for global state)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ARG001", "PLR2004"]
"tests/test_compile.py" = ["BLE001", "FBT001", "FA102", "PT006", "PT018", "I001", "RUF100", "F401"]
"examples/**/*" = ["T201", "S603", "S607", "F401", "F841", "ERA001", "RET504", "I001", "UP035"]
"__init__.py" = ["F401"]
"src/modelbatch/core.py" = ["FBT"]
"src/modelbatch/huggingface_integration.py" = ["ARG002", "FBT001", "FBT002"]

[tool.ruff.lint.isort]
known-first-party = ["modelbatch"]
force-sort-within-sections = true
combine-as-imports = true

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[dependency-groups]
dev = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.15",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.2",
    "torchvision>=0.22.1",
    {include-group = "integrations"},
    "datasets>=4.0.0",
]
integrations = [
    "accelerate>=1.9.0",
    "optuna>=4.4.0",
    "pytorch-lightning>=2.5.2",
    "transformers>=4.53.1",
    "wandb>=0.21.0",
]
