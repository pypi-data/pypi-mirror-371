name: PyPI Release

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Docker Buildx (Linux only)
      if: runner.os == 'Linux'
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install cibuildwheel

    - name: Sync Python version
      run: python scripts/sync_version.py


    - name: Verify Docker (Linux only)
      if: runner.os == 'Linux'
      run: |
        docker --version
        docker info
        echo "Docker is ready for cibuildwheel"

    - name: Build wheels
      run: python -m cibuildwheel . --output-dir wheelhouse

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build

    - name: Sync Python version
      run: python scripts/sync_version.py

    - name: Build source distribution
      run: python -m build --sdist . --outdir dist/

    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/libcachesim
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Flatten artifacts directory
      run: |
        mkdir -p final-dist
        find dist/ -name "*.whl" -exec cp {} final-dist/ \;
        find dist/ -name "*.tar.gz" -exec cp {} final-dist/ \;
        ls -la final-dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: final-dist/
        skip-existing: true

  publish-to-test-pypi:
    name: Publish to TestPyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/libcachesim
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Flatten artifacts directory
      run: |
        mkdir -p final-dist
        find dist/ -name "*.whl" -exec cp {} final-dist/ \;
        find dist/ -name "*.tar.gz" -exec cp {} final-dist/ \;
        ls -la final-dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: final-dist/
        skip-existing: true