name: Tests
on:
  workflow_dispatch:
  push:
  pull_request:
  merge_group:
  schedule:
    - cron: "0 0 1 * *"

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lockfiles:
    name: Check lock files
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v3
    - name: Install tox and poetry
      run: |
        uv tool install --python-preference only-managed --python 3.13 tox --with tox-uv --with tox-gh
        uv tool install --python-preference only-managed --python 3.13 poetry
    - name: Check poetry lock file
      run: poetry check --lock
    - name: Check Cargo lock file
      run: cargo update --workspace --locked

  code-quality:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure Python environment
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Format Python files with black
      uses: psf/black@stable
      with:
        options: "--check --verbose"

    - name: Lint Python files with flake8
      uses: py-actions/flake8@v2
      with:
        plugins: "flake8-bugbear flake8-comprehensions flake8-simplify"

    - name: Sort Python imports
      uses: isort/isort-action@v1

    - name: Prepare Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt

    - name: Format Rust files
      uses: actions-rust-lang/rustfmt@v1

  test-code:
    name: Run unit tests with ${{ matrix.env }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - python3.13
          - python3.12
          - python3.11
          - python3.10
          - pypy3.11
          - pypy3.10
        os:
          - ubuntu-latest
          - macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v3

    - name: Install tox and poetry
      run: |
        uv tool install --python-preference only-managed --python 3.13 tox --with tox-uv --with tox-gh
        uv tool install --python-preference only-managed --python 3.13 poetry

    - name: Install Graphviz
      uses: tlylt/install-graphviz@v1

    - name: Install Python
      if: ${{ matrix.env != 'python3.13' }}
      run: uv python install --python-preference only-managed ${{ matrix.env }}

    - name: Setup test suite
      run: tox run -vv --notest --skip-missing-interpreters false
      env:
        TOX_GH_MAJOR_MINOR: ${{ matrix.env }}

    - name: Download hypothesis example database
      id: download-artifact
      uses: dawidd6/action-download-artifact@v11
      with:
        name: hypothesis-example-db
        path: .hypothesis/examples
        search_artifacts: true
        if_no_artifact_found: ignore

    - name: Run test suite
      run: tox run --skip-pkg-install
      env:
        TOX_GH_MAJOR_MINOR: ${{ matrix.env }}

    - name: Upload hypothesis example database
      uses: actions/upload-artifact@v4
      if: ${{ matrix.env == 'python3.13' && matrix.os == 'ubuntu-latest' }}
      with:
        name: hypothesis-example-db
        path: .hypothesis/examples
        overwrite: true
        include-hidden-files: true


    - name: Upload coverage artifact, if required
      if: ${{ matrix.env == 'python3.13' && matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage.xml

  publish-coverage:
    name: Send coverage data to Coveralls
    runs-on: ubuntu-latest
    needs: [test-code]
    if: ${{ always() }}
    steps:
    - name: Recover coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: coverage

    - name: Send coverage data
      if: ${{ success() }}
      uses: coverallsapp/github-action@v2
      with:
        file: coverage.xml
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel: false
        debug: true
