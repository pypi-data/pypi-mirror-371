{"version":3,"file":"460.59c26ca6dd9d56ab.js","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-spinner.ts","webpack://lcn-frontend/./homeassistant-frontend/src/layouts/hass-loading-screen.ts","webpack://lcn-frontend/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.36O46B5H.js","webpack://lcn-frontend/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7DUCI5S4.js"],"sourcesContent":["import Spinner from \"@shoelace-style/shoelace/dist/components/spinner/spinner.component\";\nimport spinnerStyles from \"@shoelace-style/shoelace/dist/components/spinner/spinner.styles\";\nimport type { PropertyValues } from \"lit\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-spinner\")\nexport class HaSpinner extends Spinner {\n  @property() public size?: \"tiny\" | \"small\" | \"medium\" | \"large\";\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"size\")) {\n      switch (this.size) {\n        case \"tiny\":\n          this.style.setProperty(\"--ha-spinner-size\", \"16px\");\n          break;\n        case \"small\":\n          this.style.setProperty(\"--ha-spinner-size\", \"28px\");\n          break;\n        case \"medium\":\n          this.style.setProperty(\"--ha-spinner-size\", \"48px\");\n          break;\n        case \"large\":\n          this.style.setProperty(\"--ha-spinner-size\", \"68px\");\n          break;\n        case undefined:\n          this.style.removeProperty(\"--ha-progress-ring-size\");\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    spinnerStyles,\n    css`\n      :host {\n        --indicator-color: var(\n          --ha-spinner-indicator-color,\n          var(--primary-color)\n        );\n        --track-color: var(--ha-spinner-divider-color, var(--divider-color));\n        --track-width: 4px;\n        --speed: 3.5s;\n        font-size: var(--ha-spinner-size, 48px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-spinner\": HaSpinner;\n  }\n}\n","import type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/ha-spinner\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { haStyle } from \"../resources/styles\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-loading-screen\")\nclass HassLoadingScreen extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, attribute: \"no-toolbar\" })\n  public noToolbar = false;\n\n  @property({ type: Boolean }) public rootnav = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public message?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.noToolbar\n        ? \"\"\n        : html`<div class=\"toolbar\">\n            ${this.rootnav || history.state?.root\n              ? html`\n                  <ha-menu-button\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : html`\n                  <ha-icon-button-arrow-prev\n                    .hass=${this.hass}\n                    @click=${this._handleBack}\n                  ></ha-icon-button-arrow-prev>\n                `}\n          </div>`}\n      <div class=\"content\">\n        <ha-spinner></ha-spinner>\n        ${this.message\n          ? html`<div id=\"loading-text\">${this.message}</div>`\n          : nothing}\n      </div>\n    `;\n  }\n\n  private _handleBack() {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n        .toolbar {\n          display: flex;\n          align-items: center;\n          font-size: var(--ha-font-size-xl);\n          height: var(--header-height);\n          padding: 8px 12px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: var(--ha-font-weight-normal);\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar {\n            padding: 4px;\n          }\n        }\n        ha-menu-button,\n        ha-icon-button-arrow-prev {\n          pointer-events: auto;\n        }\n        .content {\n          height: calc(100% - var(--header-height));\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n        }\n        #loading-text {\n          max-width: 350px;\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-loading-screen\": HassLoadingScreen;\n  }\n}\n","import {\n  spinner_styles_default\n} from \"./chunk.7DUCI5S4.js\";\nimport {\n  LocalizeController\n} from \"./chunk.6CTB5ZDJ.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.4TUIT776.js\";\n\n// src/components/spinner/spinner.component.ts\nimport { html } from \"lit\";\nvar SlSpinner = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.localize = new LocalizeController(this);\n  }\n  render() {\n    return html`\n      <svg part=\"base\" class=\"spinner\" role=\"progressbar\" aria-label=${this.localize.term(\"loading\")}>\n        <circle class=\"spinner__track\"></circle>\n        <circle class=\"spinner__indicator\"></circle>\n      </svg>\n    `;\n  }\n};\nSlSpinner.styles = [component_styles_default, spinner_styles_default];\n\nexport {\n  SlSpinner\n};\n","// src/components/spinner/spinner.styles.ts\nimport { css } from \"lit\";\nvar spinner_styles_default = css`\n  :host {\n    --track-width: 2px;\n    --track-color: rgb(128 128 128 / 25%);\n    --indicator-color: var(--sl-color-primary-600);\n    --speed: 2s;\n\n    display: inline-flex;\n    width: 1em;\n    height: 1em;\n    flex: none;\n  }\n\n  .spinner {\n    flex: 1 1 auto;\n    height: 100%;\n    width: 100%;\n  }\n\n  .spinner__track,\n  .spinner__indicator {\n    fill: none;\n    stroke-width: var(--track-width);\n    r: calc(0.5em - var(--track-width) / 2);\n    cx: 0.5em;\n    cy: 0.5em;\n    transform-origin: 50% 50%;\n  }\n\n  .spinner__track {\n    stroke: var(--track-color);\n    transform-origin: 0% 0%;\n  }\n\n  .spinner__indicator {\n    stroke: var(--indicator-color);\n    stroke-linecap: round;\n    stroke-dasharray: 150% 75%;\n    animation: spin var(--speed) linear infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n      stroke-dasharray: 0.05em, 3em;\n    }\n\n    50% {\n      transform: rotate(450deg);\n      stroke-dasharray: 1.375em, 1.375em;\n    }\n\n    100% {\n      transform: rotate(1080deg);\n      stroke-dasharray: 0.05em, 3em;\n    }\n  }\n`;\n\nexport {\n  spinner_styles_default\n};\n"],"names":["HaSpinner","_Spinner","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","changedProps","_superPropGet","has","this","size","style","setProperty","undefined","removeProperty","Spinner","styles","spinnerStyles","css","_templateObject","_taggedTemplateLiteral","HassLoadingScreen","_LitElement","_this","concat","args","noToolbar","rootnav","narrow","_history$state","html","_templateObject2","history","state","root","_templateObject3","hass","_templateObject4","_handleBack","message","_templateObject5","nothing","back","get","haStyle","_templateObject6","LitElement","attribute","type","Boolean","SlSpinner","_ShoelaceElement","localize","LocalizeController","term","ShoelaceElement","component_styles_default","spinner_styles_default"],"mappings":"yRAOAA,EAAA,SAAAC,GAAA,SAAAD,IAAA,OAAAE,EAAAA,EAAAA,GAAA,KAAAF,IAAAG,EAAAA,EAAAA,GAAA,KAAAH,EAAAI,UAAA,QAAAC,EAAAA,EAAAA,GAAAL,EAAAC,IAAAK,EAAAA,EAAAA,GAAAN,EAAA,EAAAO,IAAA,UAAAC,MAGY,SAAAC,GAGR,IAFAC,EAAAA,EAAAA,GAAAV,EAAA,iBAAAU,CAAA,CAAAD,IAEAA,EAAAE,IAAA,QACE,OAAQC,KAARC,MACE,IAAK,OACHD,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,QACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,SACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,QACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,UAAAC,EACEJ,KAAAE,MAAAG,eAAA,2BAIR,KAzBF,E,6BAAAC,GAAalB,EAAAmB,OAAA,CA4BTC,EAAAA,GACAC,EAAAA,EAAAA,IAAAC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oV,0XC9BJ,IAGAC,EAAA,SAAAC,G,2GAAA,OAAAC,GAAAvB,EAAAA,EAAAA,GAAA,KAAAqB,EAAA,GAAAG,OAAAC,KAAAC,WAAA,EAAAH,EAAAI,SAAA,EAAAJ,EAAAK,QAAA,EAAAL,C,mDAaY,eAAAM,EACR,OAAAC,EAAAA,EAAAA,IAAAX,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mHACE,KAAAM,UAAA,IAAAI,EAAAA,EAAAA,IAAAC,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,+DAGM,KAAAO,SAAA,QAAAE,EAAAG,QAAAC,aAAA,IAAAJ,GAAAA,EAAAK,MAAAJ,EAAAA,EAAAA,IAAAK,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,kKAGc,KAAAgB,KACE,KAAAR,SAEZE,EAAAA,EAAAA,IAAAO,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,uLAGU,KAAAgB,KACC,KAAAE,cAMnB,KAAAC,SAAAT,EAAAA,EAAAA,IAAAU,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,4CAAAmB,SAAAE,EAAAA,GAKN,IAAArC,IAAA,cAAAC,MAEQ,WACN2B,QAAAU,MACF,MAAAtC,IAAA,SAAAuC,IAEA,WACE,MAAO,CACLC,EAAAA,IACA1B,EAAAA,EAAAA,IAAA2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,2qCAyCJ,KAzFF,CAAA0B,EAAAA,K,2BAEcC,WAAA,K,uDAEAC,KAAAC,QAAeF,UAAA,gB,4DAGfC,KAAAC,W,0DAEAD,KAAAC,W,qZCHd,IAAAC,EAAA,SAAAC,GACE,SAAAD,IAAA,IAAA3B,EAEE,OAFFxB,EAAAA,EAAAA,GAAA,KAAAmD,IACE3B,GAAAvB,EAAAA,EAAAA,GAAA,KAAAkD,EAAAjD,YACAmD,SAAA,IAAAC,EAAAA,EAAA9B,GAAAA,CACF,QAAArB,EAAAA,EAAAA,GAAAgD,EAAAC,IAAAhD,EAAAA,EAAAA,GAAA+C,EAAA,EAAA9C,IAAA,SAAAC,MACA,WACE,OAAAyB,EAAAA,EAAAA,IAAAX,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8MACiE,KAAAgC,SAAAE,KAAA,WAKnE,KAZF,CAAAC,EAAAA,GAcAL,EAAAlC,OAAA,CAAoBwC,EAAAA,EAA0BC,EAAAA,G,8FC3B9CA,GAAAvC,E,SAAAA,IAAAC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,imC"}