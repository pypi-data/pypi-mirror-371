{"version":3,"file":"452.031401c0c7901428.js","sources":["webpack://lcn-frontend/../../src/layouts/shared/SizeCache.ts","webpack://lcn-frontend/../../src/layouts/shared/BaseLayout.ts","webpack://lcn-frontend/../src/layouts/flow.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n"],"names":["SizeCache","_createClass","config","_classCallCheck","_map","Map","_roundAverageSize","totalSize","roundAverageSize","this","key","value","index","prev","get","set","size","average","Math","round","clear","dim1","direction","BaseLayout","hostSink","_this","_latestCoords","left","top","_direction","_viewportSize","width","height","totalScrollSize","offsetWithinScroller","_pendingReflow","_pendingLayoutUpdate","_pin","_firstVisible","_lastVisible","_physicalMin","_physicalMax","_first","_last","_sizeDim","_secondarySizeDim","_positionDim","_secondaryPositionDim","_scrollPosition","_scrollError","_items","_scrollSize","_overhang","_hostSink","Promise","resolve","then","_getDefaultConfig","Object","assign","items","_setItems","_scheduleReflow","dir","_triggerReflow","dims","_viewDim1","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","coords","oldPos","abs","arguments","length","undefined","_reflow","_this$_pin","block","max","min","options","val","_sendUnpinnedMessage","_this2","reflowIfNeeded","_updateLayout","_updateScrollSize","_setPositionFromPin","_getActiveItems","_updateVisibleIndices","_sendStateChangedMessage","pin","lastScrollPosition","_this$pin","_calculateScrollIntoViewPosition","itemStartPosition","_getItemPosition","scrollPosition","itemSize","_getItemSize","itemEndPosition","currentScrollPosition","_clampScrollPosition","_defineProperty","type","firstVisible","lastVisible","childPositions","idx","message","scrollSize","range","first","last","scrollError","_num","emit","_sendVisibilityChangedMessage","flow","FlowLayout","leadingMargin","trailingMargin","collapseMargins","a","b","m","sort","apply","_toConsumableArray","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","metrics","marginsToUpdate","Set","keys","forEach","k","Number","add","_step","_iterator","_createForOfIteratorHelper","s","n","done","_this$_metricsCache$g","_this$_metricsCache$g2","err","e","f","averageSize","_this$_metricsCache$g3","getSize","_BaseLayout","_itemSize","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","_inherits","sizes","update","_this$_newPhysicalIte","_getPhysicalItem","getChildSize","averageChildSize","c","averageMarginSize","_getAverageSize","delta","pos","getMarginSize","_this$_metricsCache$g4","item","_estimatePosition","lower","upper","floor","_delta","_calculateAnchor","firstItem","lastItem","firstMin","candidateIdx","cMax","Infinity","_clearItems","_getItems","_this$_metricsCache$g5","_this$_metricsCache$g6","_getPosition","_getAnchor","anchorSize","_getSize","anchorLeadingMargin","anchorTrailingMargin","anchorErr","margin","extentErr","_calculateError","_superPropGet","_resetReflowState","_this$_metricsCache$g7","getLeadingMarginValue"],"mappings":"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"}