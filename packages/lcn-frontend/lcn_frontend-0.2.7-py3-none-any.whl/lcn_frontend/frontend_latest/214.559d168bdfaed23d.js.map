{"version":3,"file":"214.559d168bdfaed23d.js","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-button.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-md-dialog.ts","webpack://lcn-frontend/./homeassistant-frontend/src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import { Button } from \"@material/mwc-button\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { styles } from \"@material/mwc-button/styles.css\";\n\n@customElement(\"ha-button\")\nexport class HaButton extends Button {\n  static override styles = [\n    styles,\n    css`\n      ::slotted([slot=\"icon\"]) {\n        margin-inline-start: 0px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n        display: block;\n      }\n      .mdc-button {\n        height: var(--button-height, 36px);\n      }\n      .trailing-icon {\n        display: flex;\n      }\n      .slot-container {\n        overflow: var(--button-slot-container-overflow, visible);\n      }\n      :host([destructive]) {\n        --mdc-theme-primary: var(--error-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button\": HaButton;\n  }\n}\n","import { Dialog } from \"@material/web/dialog/internal/dialog\";\nimport { styles } from \"@material/web/dialog/internal/dialog-styles\";\nimport {\n  type DialogAnimation,\n  DIALOG_DEFAULT_CLOSE_ANIMATION,\n  DIALOG_DEFAULT_OPEN_ANIMATION,\n} from \"@material/web/dialog/internal/animations\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n// workaround to be able to overlay a dialog with another dialog\nDialog.addInitializer(async (instance) => {\n  await instance.updateComplete;\n\n  const dialogInstance = instance as HaMdDialog;\n\n  // @ts-expect-error dialog is private\n  dialogInstance.dialog.prepend(dialogInstance.scrim);\n  // @ts-expect-error scrim is private\n  dialogInstance.scrim.style.inset = 0;\n  // @ts-expect-error scrim is private\n  dialogInstance.scrim.style.zIndex = 0;\n\n  const { getOpenAnimation, getCloseAnimation } = dialogInstance;\n  dialogInstance.getOpenAnimation = () => {\n    const animations = getOpenAnimation.call(this);\n    animations.container = [\n      ...(animations.container ?? []),\n      ...(animations.dialog ?? []),\n    ];\n    animations.dialog = [];\n    return animations;\n  };\n  dialogInstance.getCloseAnimation = () => {\n    const animations = getCloseAnimation.call(this);\n    animations.container = [\n      ...(animations.container ?? []),\n      ...(animations.dialog ?? []),\n    ];\n    animations.dialog = [];\n    return animations;\n  };\n});\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nlet DIALOG_POLYFILL: Promise<typeof import(\"dialog-polyfill\")>;\n\n/**\n * Based on the home assistant design: https://design.home-assistant.io/#components/ha-dialogs\n *\n */\n@customElement(\"ha-md-dialog\")\nexport class HaMdDialog extends Dialog {\n  /**\n   * When true the dialog will not close when the user presses the esc key or press out of the dialog.\n   */\n  @property({ attribute: \"disable-cancel-action\", type: Boolean })\n  public disableCancelAction = false;\n\n  private _polyfillDialogRegistered = false;\n\n  constructor() {\n    super();\n    this.addEventListener(\"cancel\", this._handleCancel);\n\n    if (typeof HTMLDialogElement !== \"function\") {\n      this.addEventListener(\"open\", this._handleOpen);\n\n      if (!DIALOG_POLYFILL) {\n        DIALOG_POLYFILL = import(\"dialog-polyfill\");\n      }\n    }\n\n    // if browser doesn't support animate API disable open/close animations\n    if (this.animate === undefined) {\n      this.quick = true;\n    }\n\n    // if browser doesn't support animate API disable open/close animations\n    if (this.animate === undefined) {\n      this.quick = true;\n    }\n  }\n\n  // prevent open in older browsers and wait for polyfill to load\n  private async _handleOpen(openEvent: Event) {\n    openEvent.preventDefault();\n\n    if (this._polyfillDialogRegistered) {\n      return;\n    }\n\n    this._polyfillDialogRegistered = true;\n    this._loadPolyfillStylesheet(\"/static/polyfills/dialog-polyfill.css\");\n    const dialog = this.shadowRoot?.querySelector(\n      \"dialog\"\n    ) as HTMLDialogElement;\n\n    const dialogPolyfill = await DIALOG_POLYFILL;\n    dialogPolyfill.default.registerDialog(dialog);\n    this.removeEventListener(\"open\", this._handleOpen);\n\n    this.show();\n  }\n\n  private async _loadPolyfillStylesheet(href) {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = href;\n\n    return new Promise<void>((resolve, reject) => {\n      link.onload = () => resolve();\n      link.onerror = () =>\n        reject(new Error(`Stylesheet failed to load: ${href}`));\n\n      this.shadowRoot?.appendChild(link);\n    });\n  }\n\n  private _handleCancel(closeEvent: Event) {\n    if (this.disableCancelAction) {\n      closeEvent.preventDefault();\n      const dialogElement = this.shadowRoot?.querySelector(\"dialog .container\");\n      if (this.animate !== undefined) {\n        dialogElement?.animate(\n          [\n            {\n              transform: \"rotate(-1deg)\",\n              \"animation-timing-function\": \"ease-in\",\n            },\n            {\n              transform: \"rotate(1.5deg)\",\n              \"animation-timing-function\": \"ease-out\",\n            },\n            {\n              transform: \"rotate(0deg)\",\n              \"animation-timing-function\": \"ease-in\",\n            },\n          ],\n          {\n            duration: 200,\n            iterations: 2,\n          }\n        );\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --md-dialog-container-color: var(--card-background-color);\n        --md-dialog-headline-color: var(--primary-text-color);\n        --md-dialog-supporting-text-color: var(--primary-text-color);\n        --md-sys-color-scrim: #000000;\n\n        --md-dialog-headline-weight: var(--ha-font-weight-normal);\n        --md-dialog-headline-size: var(--ha-font-size-xl);\n        --md-dialog-supporting-text-size: var(--ha-font-size-m);\n        --md-dialog-supporting-text-line-height: var(--ha-line-height-normal);\n      }\n\n      :host([type=\"alert\"]) {\n        min-width: 320px;\n      }\n\n      @media all and (max-width: 450px), all and (max-height: 500px) {\n        :host(:not([type=\"alert\"])) {\n          min-width: calc(\n            100vw - var(--safe-area-inset-right) - var(--safe-area-inset-left)\n          );\n          max-width: calc(\n            100vw - var(--safe-area-inset-right) - var(--safe-area-inset-left)\n          );\n          min-height: 100%;\n          max-height: 100%;\n          --md-dialog-container-shape: 0;\n        }\n      }\n\n      ::slotted(ha-dialog-header[slot=\"headline\"]) {\n        display: contents;\n      }\n\n      .scroller {\n        overflow: var(--dialog-content-overflow, auto);\n      }\n\n      slot[name=\"content\"]::slotted(*) {\n        padding: var(--dialog-content-padding, 24px);\n      }\n      .scrim {\n        z-index: 10; /* overlay navigation */\n      }\n    `,\n  ];\n}\n\n// by default the dialog open/close animation will be from/to the top\n// but if we have a special mobile dialog which is at the bottom of the screen, a from bottom animation can be used:\nconst OPEN_FROM_BOTTOM_ANIMATION: DialogAnimation = {\n  ...DIALOG_DEFAULT_OPEN_ANIMATION,\n  dialog: [\n    [\n      // Dialog slide up\n      [{ transform: \"translateY(50px)\" }, { transform: \"translateY(0)\" }],\n      { duration: 500, easing: \"cubic-bezier(.3,0,0,1)\" },\n    ],\n  ],\n  container: [\n    [\n      // Container fade in\n      [{ opacity: 0 }, { opacity: 1 }],\n      { duration: 50, easing: \"linear\", pseudoElement: \"::before\" },\n    ],\n  ],\n};\n\nconst CLOSE_TO_BOTTOM_ANIMATION: DialogAnimation = {\n  ...DIALOG_DEFAULT_CLOSE_ANIMATION,\n  dialog: [\n    [\n      // Dialog slide down\n      [{ transform: \"translateY(0)\" }, { transform: \"translateY(50px)\" }],\n      { duration: 150, easing: \"cubic-bezier(.3,0,0,1)\" },\n    ],\n  ],\n  container: [\n    [\n      // Container fade out\n      [{ opacity: \"1\" }, { opacity: \"0\" }],\n      { delay: 100, duration: 50, easing: \"linear\", pseudoElement: \"::before\" },\n    ],\n  ],\n};\n\nexport const getMobileOpenFromBottomAnimation = () => {\n  const matches = window.matchMedia(\n    \"all and (max-width: 450px), all and (max-height: 500px)\"\n  ).matches;\n  return matches ? OPEN_FROM_BOTTOM_ANIMATION : DIALOG_DEFAULT_OPEN_ANIMATION;\n};\n\nexport const getMobileCloseToBottomAnimation = () => {\n  const matches = window.matchMedia(\n    \"all and (max-width: 450px), all and (max-height: 500px)\"\n  ).matches;\n  return matches ? CLOSE_TO_BOTTOM_ANIMATION : DIALOG_DEFAULT_CLOSE_ANIMATION;\n};\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-dialog\": HaMdDialog;\n  }\n}\n","import { mdiAlertOutline } from \"@mdi/js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-md-dialog\";\nimport type { HaMdDialog } from \"../../components/ha-md-dialog\";\nimport \"../../components/ha-dialog-header\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-button\";\nimport \"../../components/ha-textfield\";\nimport type { HaTextField } from \"../../components/ha-textfield\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @state() private _closeState?: \"canceled\" | \"confirmed\";\n\n  @query(\"ha-textfield\") private _textField?: HaTextField;\n\n  @query(\"ha-md-dialog\") private _dialog?: HaMdDialog;\n\n  private _closePromise?: Promise<void>;\n\n  private _closeResolve?: () => void;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    if (this._closePromise) {\n      await this._closePromise;\n    }\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    const dialogTitle =\n      this._params.title ||\n      (this._params.confirmation &&\n        this.hass.localize(\"ui.dialogs.generic.default_confirmation_title\"));\n\n    return html`\n      <ha-md-dialog\n        open\n        .disableCancelAction=${confirmPrompt || false}\n        @closed=${this._dialogClosed}\n        type=\"alert\"\n        aria-labelledby=\"dialog-box-title\"\n        aria-describedby=\"dialog-box-description\"\n      >\n        <div slot=\"headline\">\n          <span .title=${dialogTitle} id=\"dialog-box-title\">\n            ${this._params.warning\n              ? html`<ha-svg-icon\n                  .path=${mdiAlertOutline}\n                  style=\"color: var(--warning-color)\"\n                ></ha-svg-icon> `\n              : nothing}\n            ${dialogTitle}\n          </span>\n        </div>\n        <div slot=\"content\" id=\"dialog-box-description\">\n          ${this._params.text ? html` <p>${this._params.text}</p> ` : \"\"}\n          ${this._params.prompt\n            ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .placeholder=${this._params.placeholder}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                  .min=${this._params.inputMin}\n                  .max=${this._params.inputMax}\n                ></ha-textfield>\n              `\n            : \"\"}\n        </div>\n        <div slot=\"actions\">\n          ${confirmPrompt &&\n          html`\n            <ha-button\n              @click=${this._dismiss}\n              ?dialogInitialFocus=${!this._params.prompt &&\n              this._params.destructive}\n            >\n              ${this._params.dismissText\n                ? this._params.dismissText\n                : this.hass.localize(\"ui.common.cancel\")}\n            </ha-button>\n          `}\n          <ha-button\n            @click=${this._confirm}\n            ?dialogInitialFocus=${!this._params.prompt &&\n            !this._params.destructive}\n            ?destructive=${this._params.destructive}\n          >\n            ${this._params.confirmText\n              ? this._params.confirmText\n              : this.hass.localize(\"ui.common.ok\")}\n          </ha-button>\n        </div>\n      </ha-md-dialog>\n    `;\n  }\n\n  private _cancel(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n  }\n\n  private _dismiss(): void {\n    this._closeState = \"canceled\";\n    this._cancel();\n    this._closeDialog();\n  }\n\n  private _confirm(): void {\n    this._closeState = \"confirmed\";\n    if (this._params!.confirm) {\n      this._params!.confirm(this._textField?.value);\n    }\n    this._closeDialog();\n  }\n\n  private _closeDialog() {\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    this._dialog?.close();\n    this._closePromise = new Promise((resolve) => {\n      this._closeResolve = resolve;\n    });\n  }\n\n  private _dialogClosed() {\n    if (!this._closeState) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n      this._cancel();\n    }\n    this._closeState = undefined;\n    this._params = undefined;\n    this._closeResolve?.();\n    this._closeResolve = undefined;\n  }\n\n  static styles = css`\n    :host([inert]) {\n      pointer-events: initial !important;\n      cursor: initial !important;\n    }\n    a {\n      color: var(--primary-color);\n    }\n    p {\n      margin: 0;\n      color: var(--primary-text-color);\n    }\n    .no-bottom-padding {\n      padding-bottom: 0;\n    }\n    .secondary {\n      color: var(--secondary-text-color);\n    }\n    ha-textfield {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"names":["HaButton","Button","styles","css","DIALOG_POLYFILL","Dialog","instance","updateComplete","dialogInstance","dialog","prepend","scrim","style","inset","zIndex","getOpenAnimation","getCloseAnimation","animations","call","container","HaMdDialog","_handleOpen","openEvent","preventDefault","this","_polyfillDialogRegistered","_loadPolyfillStylesheet","shadowRoot","querySelector","default","registerDialog","removeEventListener","show","href","link","document","createElement","rel","Promise","resolve","reject","onload","onerror","Error","appendChild","_handleCancel","closeEvent","disableCancelAction","dialogElement","undefined","animate","transform","duration","iterations","constructor","super","addEventListener","HTMLDialogElement","quick","attribute","type","Boolean","DIALOG_DEFAULT_OPEN_ANIMATION","DIALOG_DEFAULT_CLOSE_ANIMATION","DialogBox","LitElement","showDialog","params","_closePromise","_params","closeDialog","confirmation","prompt","_dismiss","render","nothing","confirmPrompt","dialogTitle","title","hass","localize","html","_dialogClosed","warning","text","ifDefined","defaultValue","placeholder","inputLabel","inputType","inputMin","inputMax","destructive","dismissText","_confirm","confirmText","_cancel","cancel","_closeState","_closeDialog","confirm","_textField","value","fireEvent","localName","_dialog","close","_closeResolve"],"mappings":"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"}