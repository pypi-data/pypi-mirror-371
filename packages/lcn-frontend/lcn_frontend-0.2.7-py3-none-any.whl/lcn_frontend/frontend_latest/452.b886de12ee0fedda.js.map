{"version":3,"file":"452.b886de12ee0fedda.js","sources":["webpack://lcn-frontend/../../src/layouts/shared/SizeCache.ts","webpack://lcn-frontend/../../src/layouts/shared/BaseLayout.ts","webpack://lcn-frontend/../src/layouts/flow.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n"],"names":["SizeCache","set","index","value","prev","this","_map","get","totalSize","averageSize","size","average","_roundAverageSize","Math","round","getSize","clear","constructor","config","Map","roundAverageSize","dim1","direction","BaseLayout","_getDefaultConfig","Object","assign","items","_items","_setItems","_scheduleReflow","_direction","dir","_sizeDim","_secondarySizeDim","_positionDim","_secondaryPositionDim","_triggerReflow","viewportSize","_viewportSize","dims","_viewDim1","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","_latestCoords","coords","oldPos","_scrollPosition","abs","reflowIfNeeded","force","_pendingReflow","_reflow","pin","options","_pin","block","max","min","length","_clampScrollPosition","val","offsetWithinScroller","totalScrollSize","unpin","_sendUnpinnedMessage","_updateLayout","_pendingLayoutUpdate","Promise","resolve","then","_updateScrollSize","_setPositionFromPin","_getActiveItems","_updateVisibleIndices","_sendStateChangedMessage","lastScrollPosition","_calculateScrollIntoViewPosition","_scrollError","itemStartPosition","_getItemPosition","scrollPosition","itemSize","_getItemSize","itemEndPosition","currentScrollPosition","getScrollIntoViewCoordinates","_hostSink","type","_sendVisibilityChangedMessage","firstVisible","_firstVisible","lastVisible","_lastVisible","childPositions","_first","_last","idx","message","scrollSize","_scrollSize","range","first","last","scrollError","_num","_overhang","_physicalMin","_physicalMax","emit","hostSink","left","top","width","height","flow","FlowLayout","leadingMargin","trailingMargin","offset","collapseMargins","a","b","m","sort","MetricsCache","update","metrics","marginsToUpdate","Set","keys","forEach","key","k","Number","_metricsCache","_childSizeCache","add","_marginSizeCache","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","getChildSize","getMarginSize","measureChildren","_measureChildren","updateItemSizes","sizes","_getPhysicalItem","_newPhysicalItems","_physicalItems","_getSize","_getAverageSize","_itemSize","_estimatePosition","c","delta","pos","_getPosition","item","_calculateAnchor","lower","upper","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","candidateIdx","cMax","Infinity","_clearItems","_getItems","_stable","_anchorIdx","_anchorPos","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","margin","_estimate","extentErr","_calculateError","super","_resetReflowState","_viewDim2Changed"],"mappings":";wIAIG,MAAAA,EAiBDC,GAAAA,CAAIC,EAAwBC,GAC1B,MAAMC,EAAOC,KAAKC,KAAKC,IAAIL,IAAU,EACrCG,KAAKC,KAAKL,IAAIC,EAAOC,GACrBE,KAAKG,WAAaL,EAAQC,CAC5B,CAEA,eAAIK,GACF,GAAIJ,KAAKC,KAAKI,KAAO,EAAG,CACtB,MAAMC,EAAUN,KAAKG,UAAYH,KAAKC,KAAKI,KAC3C,OAAOL,KAAKO,kBAAoBC,KAAKC,MAAMH,GAAWA,CACxD,CACA,OAAO,CACT,CAEAI,OAAAA,CAAQb,GACN,OAAOG,KAAKC,KAAKC,IAAIL,EACvB,CAEAc,KAAAA,GACEX,KAAKC,KAAKU,QACVX,KAAKG,UAAY,CACnB,CA3BAS,WAAAA,CAAYC,GAJJ,KAAAZ,KAAO,IAAIa,IACX,KAAAP,mBAAoB,EAC5B,KAAAJ,UAAY,GAGuB,IAA7BU,GAAQE,mBACVf,KAAKO,mBAAoB,EAE7B,ECfC,SAAAS,EAAAC,GAsBD,MAAqB,eAAdA,EAA6B,QAAU,QAChD,CAcM,MAAgBC,EAkHVC,iBAAAA,GACR,MAAO,CACLF,UAAW,WAEf,CAUA,UAAIJ,CAAOA,GACTO,OAAOC,OAAOrB,KAAMoB,OAAOC,OAAO,CAAC,EAAGrB,KAAKmB,oBAAqBN,GAClE,CAEA,UAAIA,GACF,MAAO,CACLI,UAAWjB,KAAKiB,UAEpB,CAKG,SAAAK,GAED,OAAOtB,KAAKuB,MACd,CAEA,SAAID,CAAMA,GACRtB,KAAKwB,UAAUF,EACjB,CAEUE,SAAAA,CAAUF,GACdA,IAAUtB,KAAKuB,SACjBvB,KAAKuB,OAASD,EACdtB,KAAKyB,kBAET,CAIG,aAAAR,GAED,OAAOjB,KAAK0B,UACd,CACA,aAAIT,CAAUU,IAEZA,EAAc,eAARA,EAAuBA,EAAM,cACvB3B,KAAK0B,aACf1B,KAAK0B,WAAaC,EAClB3B,KAAK4B,SAAmB,eAARD,EAAuB,QAAU,SACjD3B,KAAK6B,kBAA4B,eAARF,EAAuB,SAAW,QAC3D3B,KAAK8B,aAAuB,eAARH,EAAuB,OAAS,MACpD3B,KAAK+B,sBAAgC,eAARJ,EAAuB,MAAQ,OAC5D3B,KAAKgC,iBAET,CAIG,gBAAAC,GAED,OAAOjC,KAAKkC,aACd,CACA,gBAAID,CAAaE,GACf,MAAM,UAACC,EAAS,UAAEC,GAAarC,KAC/BoB,OAAOC,OAAOrB,KAAKkC,cAAeC,GAC9BE,IAAcrC,KAAKqC,UAErBrC,KAAKsC,wBACNF,IAAA,KAAAA,WACCpC,KAAKuC,kBAET,CAIG,kBAAAC,GAED,OAAOxC,KAAKyC,aACd,CACA,kBAAID,CAAeE,GACjBtB,OAAOC,OAAOrB,KAAKyC,cAAeC,GAClC,MAAMC,EAAS3C,KAAK4C,gBACpB5C,KAAK4C,gBAAkB5C,KAAKyC,cAAczC,KAAK8B,cAChCtB,KAAKqC,IAAIF,EAAS3C,KAAK4C,kBACxB,GACZ5C,KAAKuC,kBAET,CAIGO,cAAAA,CAAAC,GAAA,IAEGA,GAAS/C,KAAKgD,kBAChBhD,KAAKgD,gBAAiB,EACtBhD,KAAKiD,UAET,CAEA,OAAIC,CAAIC,GACNnD,KAAKoD,KAAOD,EACZnD,KAAKgC,gBACP,CAEA,OAAIkB,GACF,GAAkB,OAAdlD,KAAKoD,KAAe,CACtB,MAAM,MAACvD,EAAK,MAAEwD,GAASrD,KAAKoD,KAC5B,MAAO,CACLvD,MAAOW,KAAK8C,IAAI,EAAG9C,KAAK+C,IAAI1D,EAAOG,KAAKsB,MAAMkC,OAAS,IACvDH,QAEJ,CACA,OAAO,IACT,CAEAI,oBAAAA,CAAqBC,GACnB,OAAOlD,KAAK8C,KACTtD,KAAK2D,qBAAqB3D,KAAK8B,cAChCtB,KAAK+C,IAAIG,EAAK1D,KAAK4D,gBAAgB5C,EAAKhB,KAAKiB,YAAcjB,KAAKoC,WAEpE,CAEAyB,KAAAA,GACoB,OAAd7D,KAAKoD,OACPpD,KAAK8D,uBACL9D,KAAKoD,KAAO,KAEhB,CAwBUW,aAAAA,GACR,CASC,aAAA3B,GAED,OAAOpC,KAAKkC,cAAclC,KAAK4B,SACjC,CAIG,aAAAS,GAED,OAAOrC,KAAKkC,cAAclC,KAAK6B,kBACjC,CAEUJ,eAAAA,GACRzB,KAAKgD,gBAAiB,CACxB,CAEUV,qBAAAA,GACRtC,KAAKgE,sBAAuB,EAC5BhE,KAAKyB,iBACP,CAIUO,cAAAA,GACRhC,KAAKsC,wBAKL2B,QAAQC,UAAUC,MAAK,IAAG,KAAGrB,kBAC/B,CAEUG,OAAAA,GACJjD,KAAKgE,uBACPhE,KAAK+D,gBACL/D,KAAKgE,sBAAuB,GAE9BhE,KAAKoE,oBACLpE,KAAKqE,sBACLrE,KAAKsE,kBACLtE,KAAKuE,wBACLvE,KAAKwE,0BACP,CAQGH,mBAAAA,GAED,GAAiB,OAAbrE,KAAKkD,IAAc,CACrB,MAAMuB,EAAqBzE,KAAK4C,iBAC1B,MAAC/C,EAAK,MAAEwD,GAASrD,KAAKkD,IAC5BlD,KAAK4C,gBAAe,KAAA8B,iCAAA,CAEhB7E,QACAwD,MAAOA,GAAS,UACbrD,KAAK2D,qBAAqB3D,KAAK8B,cACtC9B,KAAK2E,aAAeF,EAAqBzE,KAAK4C,eAChD,CACF,CAYG8B,gCAAAA,CAAAvB,GAED,MAAM,MAACE,GAASF,EACVtD,EAAQW,KAAK+C,IAAIvD,KAAKsB,MAAMkC,OAAQhD,KAAK8C,IAAI,EAAGH,EAAQtD,QACxD+E,EAAoB5E,KAAK6E,iBAAiBhF,GAAOG,KAAK8B,cAC5D,IAAIgD,EAAiBF,EACrB,GAAc,UAAVvB,EAAmB,CACrB,MAAM0B,EAAW/E,KAAKgF,aAAanF,GAAOG,KAAK4B,UAC/C,GAAc,WAAVyB,EACFyB,EAAcF,EAAA,QAAAxC,UAAA,GAAA2C,MAET,CACL,MAAME,EAAkBL,EAAoB5E,KAAKoC,UAAY2C,EAC7D,GAAc,QAAV1B,EACFyB,EAAiBG,MACZ,CAEL,MAAMC,EAAwBlF,KAAK4C,gBACnCkC,EAActE,KAAAqC,IAAAqC,EAAAN,GAAApE,KAAAqC,IAAAqC,EAAAD,GAAAL,EAAAK,CAKhB,CACF,CACF,CAEA,OADAH,GAAkB9E,KAAK2D,qBAAqB3D,KAAK8B,cAC1C9B,KAAKyD,qBAAqBqB,EACnC,CAEOK,4BAAAA,CACLhC,GAEA,MAAO,CACL,CAACnD,KAAK8B,cACJ9B,KAAK0E,iCAAiCvB,GAE5C,CAEQW,oBAAAA,GACN9D,KAAKoF,UAAU,CACbC,KAAM,YAEV,CAEQC,6BAAAA,GACNtF,KAAKoF,UAAU,CACbC,KAAM,oBACNE,aAAcvF,KAAKwF,cACnBC,YAAazF,KAAK0F,cAEtB,CAEUlB,wBAAAA,GACR,MAAMmB,EAAiC,IAAI7E,IAC3C,IAAqB,IAAjBd,KAAK4F,SAAiC,IAAhB5F,KAAK6F,MAC7B,IAAK,IAAAC,EAAO,KAAOF,OAAOE,GAAK,KAAQD,MAAMC,IAC3CH,EAAe/F,IAAIkG,EAAK9F,KAAK6E,iBAAiBiB,IAGlD,MAAMC,EAA+B,CACnCV,KAAM,eACNW,WAAY,CACV,CAAChG,KAAK4B,UAAW5B,KAAKiG,YACtB,CAACjG,KAAK6B,mBAAoB,MAE5BqE,MAAO,CACLC,MAAOnG,KAAK4F,OACZQ,KAAMpG,KAAK6F,MACXN,aAAcvF,KAAKwF,cACnBC,YAAazF,KAAK0F,cAEpBC,kBAEE3F,KAAK2E,eACPoB,EAAQM,YAAc,CACpB,CAACrG,KAAK8B,cAAe9B,KAAK2E,aAC1B,CAAC3E,KAAK+B,uBAAwB,GAEhC/B,KAAK2E,aAAe,GAEtB3E,KAAKoF,UAAUW,EACjB,CAIG,QAAAO,GAED,OAAqB,IAAjBtG,KAAK4F,SAAiC,IAAhB5F,KAAK6F,MACtB,EAEF7F,KAAK6F,MAAQ7F,KAAK4F,OAAS,CACpC,CAEQrD,gBAAAA,GACN,GAAmB,IAAf,KAAKH,WAAgB,KAAQkE,KAAK,GAAkB,OAAb,KAAIlD,KAC7CpD,KAAKyB,sBACA,CACL,MAAM8B,EAAM/C,KAAK8C,IAAI,EAAGtD,KAAK4C,gBAAkB5C,KAAKuG,WAC9CjD,EAAM9C,KAAK+C,IACfvD,KAAKiG,YACLjG,KAAK4C,gBAAkB5C,KAAKoC,UAAYpC,KAAKuG,WAE3CvG,KAAKwG,aAAejD,GAAOvD,KAAKyG,aAAenD,EACjDtD,KAAKyB,kBAELzB,KAAKuE,sBAAsB,CAACmC,MAAM,GAEtC,CACF,CAKGnC,qBAAAA,CAAApB,GAED,IAAqB,IAAjBnD,KAAK4F,SAAiC,IAAhB5F,KAAK6F,MAAc,OAE7C,IAAIN,EAAevF,KAAK4F,OACxB,KAAAL,EACc,KAAOM,OAAMrF,KAAAC,MAAA,KAAAoE,iBAAAU,GAAA,KAAAzD,cAAA,KAAAkD,aAAAO,GAAA,KAAA3D,YAAApB,KAAAC,MAAA,KAAAmC,kBAMzB2C,IAGF,IAAIE,EAAczF,KAAK6F,MACvB,KAAAJ,EACa,KAAOG,QAAOpF,KAAAC,MAAA,KAAAoE,iBAAAY,GAAA,KAAA3D,gBAAAtB,KAAAC,MAAA,KAAAmC,gBAAA,KAAAR,YAIzBqD,IAIAF,IAAiBvF,KAAKwF,eAAaC,IAAA,KAAAC,eAGnC1F,KAAKwF,cAAgBD,EACrBvF,KAAK0F,aAAeD,EAChBtC,GAAWA,EAAQuD,MACrB1G,KAAKsF,gCAGX,CA/XA1E,WAAAA,CAAY+F,EAA0B9F,GArHnC,KAAA4B,cAAA,CACiCmE,KAAM,EAAGC,IAAK,GAI/C,KAAAnF,WAAA,KAKA,KAAAQ,cAAA,CAC4B4E,MAAO,EAAGC,OAAQ,GAE1C,KAAAnD,gBAAwB,CAACkD,MAAO,EAAGC,OAAQ,GAE3C,KAAApD,qBAAkC,CAACiD,KAAM,EAAGC,IAAK,GAIrD,KAAA7D,gBAAA,EAGK,KAAAgB,sBAAuB,EAErB,KAAAZ,KAA0B,KAIjC,KAAAoC,cAAA,EAKA,KAAAE,aAAA,EAKA,KAAAc,aAAA,EAKA,KAAAC,aAAA,EAKA,KAAAb,QAAA,EAKA,KAAAC,OAAA,EAKA,KAAAjE,SAAA,SAKA,KAAAC,kBAAA,QAKA,KAAAC,aAAA,MAKA,KAAAC,sBAAA,OAKA,KAAAa,gBAAA,EAMA,KAAA+B,aAAA,EAMA,KAAApD,OAAA,GAKA,KAAA0E,YAAA,EASO,KAAAM,UAAY,IAcpBvG,KAAKoF,UAAYuB,EAEjB1C,QAAQC,UAAUC,MAChB,IAAG,KAAItD,OAAWA,GAAS,KAAIM,qBAEnC,ECjIK,MAAM6F,EAAoCnG,GAA2BO,OAC1EC,OAAO,CAEHgE,KAAM4B,GAERpG,GAGJ,SAASqG,EAAcjG,GACrB,MAAqB,eAAdA,EAA6B,aAAe,WACrD,CAEA,SAASkG,EAAelG,GACtB,MAAqB,eAAdA,EAA6B,cAAgB,cACtD,CAEA,SAASmG,EAAOnG,GACd,MAAqB,eAAdA,EAA6B,UAAY,SAClD,CAEA,SAASoG,EAAgBC,EAAWC,GAClC,MAAMC,EAAI,CAACF,EAAGC,GAAGE,OACjB,OAAOD,EAAE,IAAM,EAAIhH,KAAK+C,OAAOiE,GAAKA,EAAE,IAAM,EAAIhH,KAAK8C,OAAOkE,GAAKA,EAAE,GAAKA,EAAE,EAC5E,CAEA,MAAME,EAKJC,MAAAA,CAAOC,EAA0C3G,GAC/C,MAAM4G,EAAkB,IAAIC,IAC5B1G,OAAO2G,KAAKH,GAASI,SAASC,IAC5B,MAAMC,EAAIC,OAAOF,GACjBjI,KAAKoI,cAAcxI,IAAIsI,EAAGN,EAAQM,IAClClI,KAAKqI,gBAAgBzI,IAAIsI,EAAGN,EAAQM,GAAGlH,EAAKC,KAC5C4G,EAAgBS,IAAIJ,GACpBL,EAAgBS,IAAIJ,EAAI,MAE1B,IAAK,MAAMA,KAAKL,EAAiB,CAC/B,MAAMP,EAAItH,KAAKoI,cAAclI,IAAIgI,KAAKhB,EAAcjG,KAAe,EAC7DsG,EAAIvH,KAAKoI,cAAclI,IAAIgI,EAAI,KAAKf,EAAelG,KAAe,EACxEjB,KAAKuI,iBAAiB3I,IAAIsI,EAAGb,EAAgBC,EAAGC,GAClD,CACF,CAEA,oBAAIiB,GACF,OAAOxI,KAAKqI,gBAAgBjI,WAC9B,CAEA,kBAAIqI,GACF,OAAOzI,KAAKqI,gBAAgBlI,SAC9B,CAEA,qBAAIuI,GACF,OAAO1I,KAAKuI,iBAAiBnI,WAC/B,CAEA,mBAAIuI,GACF,OAAO3I,KAAKuI,iBAAiBpI,SAC/B,CAEAyI,qBAAAA,CAAsB/I,EAAeoB,GACnC,OAAOjB,KAAKoI,cAAclI,IAAIL,KAASqH,EAAcjG,KAAe,CACtE,CAEA4H,YAAAA,CAAahJ,GACX,OAAOG,KAAKqI,gBAAgB3H,QAAQb,EACtC,CAEAiJ,aAAAA,CAAcjJ,GACZ,OAAOG,KAAKuI,iBAAiB7H,QAAQb,EACvC,CAEAc,KAAAA,GACEX,KAAKqI,gBAAgB1H,QACrBX,KAAKuI,iBAAiB5H,QACtBX,KAAKoI,cAAczH,OACrB,CArDFC,WAAAA,GACU,KAAAyH,gBAAkB,IAAI1I,EACtB,KAAA4I,iBAAmB,IAAI5I,EACvB,KAAAyI,cAAgB,IAAItH,GAmD9B,EAEM,MAAOmG,UAAmB/F,EAoD9B,mBAAI6H,GACF,OAAO/I,KAAKgJ,gBACd,CAKGC,eAAAA,CAAAC,GAEDlJ,KAAKoI,cAAcT,OAAOuB,EAAyBlJ,KAAKiB,WAGxDjB,KAAKyB,iBAEP,CAWA0H,gBAAAA,CAAiBrD,GACf,OAAO9F,KAAKoJ,kBAAkBlJ,IAAI4F,IAAQ9F,KAAKqJ,eAAenJ,IAAI4F,EACpE,CAEAwD,QAAAA,CAASxD,GAEP,OADa9F,KAAKmJ,iBAAiBrD,IACpB9F,KAAKoI,cAAcS,aAAa/C,EACjD,CAEAyD,eAAAA,GACE,OAAOvJ,KAAKoI,cAAcI,kBAAoBxI,KAAKwJ,UAAUxJ,KAAK4B,SACpE,CAEA6H,iBAAAA,CAAkB3D,GAChB,MAAM4D,EAAI1J,KAAKoI,cACf,IAAqB,IAAjBpI,KAAK4F,SAAiC,IAAhB5F,KAAK6F,MAC7B,OAAO6D,EACJhB,kBAAkB5C,GAAA4D,EAAAhB,kBAAA,KAAAa,mBAIrB,GAAIzD,EAAM9F,KAAK4F,OAAQ,CACrB,MAAM+D,EAAQ3J,KAAK4F,OAASE,EAE5B,OADgB9F,KAAKmJ,iBAAiBnJ,KAAK4F,QAEjCgE,KAAIF,EAAAZ,cAAA,KAAAlD,OAAA,IAAA8D,EAAAhB,oBAAAiB,EAAAD,EAAAlB,kBAAAmB,EAAA,GAAAD,EAAAhB,kBAIhB,CAAO,CACL,MAAMiB,EAAQ7D,EAAM9F,KAAK6F,MAEzB,OADgB7F,KAAKmJ,iBAAiBnJ,KAAK6F,OAEjC+D,KAAIF,EAAAb,aAAA,KAAAhD,QAAA6D,EAAAlB,mBAAAkB,EAAAZ,cAAA,KAAAjD,QAAA6D,EAAAhB,mBAAAiB,GAAAD,EAAAlB,iBAAAkB,EAAAhB,kBAKhB,CAEJ,CAKGmB,YAAAA,CAAA/D,GAED,MAAMgE,EAAO9J,KAAKmJ,iBAAiBrD,IAC7B,kBAAC4C,GAAqB1I,KAAKoI,cACjC,OAAe,IAARtC,EAAS,KAAAsC,cAAAU,cAAA,IAAAJ,EAAAoB,EAAAA,EAAAF,IAAA,KAAAH,kBAAA3D,EAKlB,CAEAiE,gBAAAA,CAAiBC,EAAeC,GAC9B,OAAID,GAAS,EACJ,EAELC,EAAQjK,KAAKiG,YAAcjG,KAAKoC,UAC3BpC,KAAKsB,MAAMkC,OAAS,EAEtBhD,KAAK8C,IACV,EACA9C,KAAK+C,IACHvD,KAAKsB,MAAMkC,OAAS,EACpBhD,KAAK0J,OAAOF,EAAQC,GAAS,EAAIjK,KAAKmK,SAG5C,CAEAC,UAAAA,CAAWJ,EAAeC,GACxB,GAAiC,IAA7BjK,KAAKqJ,eAAehJ,KACtB,OAAOL,KAAK+J,iBAAiBC,EAAOC,GAEtC,GAAIjK,KAAK4F,OAAS,EAChB,OAAO5F,KAAK+J,iBAAiBC,EAAOC,GAEtC,GAAIjK,KAAK6F,MAAQ,EACf,OAAO7F,KAAK+J,iBAAiBC,EAAOC,GAGtC,MAAMI,EAAYrK,KAAKmJ,iBAAiBnJ,KAAK4F,QAC3C0E,EAAWtK,KAAKmJ,iBAAiBnJ,KAAK6F,OACtC0E,EAAWF,EAAWT,IAIxB,GAHYU,EAAUV,IACA5J,KAAKoI,cAAcS,aAAa7I,KAAK6F,OAE7CmE,EAEZ,OAAOhK,KAAK+J,iBAAiBC,EAAOC,GAEtC,GAAIM,EAAWN,EAEb,OAAOjK,KAAK+J,iBAAiBC,EAAOC,GAItC,IAAIO,EAAexK,KAAKwF,cAAgB,EACpCiF,GAAQC,IACZ,KAAAD,EAAWT,GAAQ,CAEjBS,EADkBzK,KAAKmJ,mBAAmBqB,GACxBZ,IAAM5J,KAAKoI,cAAcS,aAAa2B,EAC1D,CACA,OAAOA,CACT,CAKGlG,eAAAA,GAEsB,IAAnBtE,KAAKoC,WAAyC,IAAtBpC,KAAKsB,MAAMkC,OACrCxD,KAAK2K,cAEL3K,KAAK4K,WAET,CAIGD,WAAAA,GAED3K,KAAK4F,QAAU,EACf5F,KAAK6F,OAAS,EACd7F,KAAKwG,aAAe,EACpBxG,KAAKyG,aAAe,EACpB,MAAMnF,EAAQtB,KAAKoJ,kBACnBpJ,KAAKoJ,kBAAoBpJ,KAAKqJ,eAC9BrJ,KAAKoJ,kBAAkBzI,QACvBX,KAAKqJ,eAAiB/H,EACtBtB,KAAK6K,SAAU,CACjB,CAIGD,SAAAA,GAED,MAAMtJ,EAAQtB,KAAKoJ,kBAEnB,IAAIY,EAAOC,EAOX,GARAjK,KAAK6K,SAAU,EAQE,OAAb7K,KAAKkD,IAAc,CACrB,MAAM,MAACrD,GAASG,KAAKkD,IACrBlD,KAAK8K,WAAajL,EAClBG,KAAK+K,WAAa/K,KAAK6J,aAAahK,EACtC,CAOA,GAHAmK,EAAQhK,KAAK4C,gBAAkB5C,KAAKuG,UACpC0D,EAAQjK,KAAK4C,gBAAkB5C,KAAKoC,UAAYpC,KAAKuG,UAEjD0D,EAAQ,GAAKD,EAAQhK,KAAKiG,YAE5B,YADAjG,KAAK2K,cAOiB,OAApB3K,KAAK8K,YAA2C,OAApB9K,KAAK+K,aACnC/K,KAAK8K,WAAa9K,KAAKoK,WAAWJ,EAAOC,GACzCjK,KAAK+K,WAAa/K,KAAK6J,aAAa7J,KAAK8K,aAG3C,IAAIE,EAAahL,KAAKsJ,SAAStJ,KAAK8K,iBACjBG,IAAfD,IACFhL,KAAK6K,SAAU,EACfG,EAAahL,KAAKuJ,mBAGpB,MAAM2B,EACJlL,KAAKoI,cAAcU,cAAc9I,KAAK8K,aAAW,KAAA1C,cAAAM,kBAE7CyC,EACJnL,KAAKoI,cAAcU,cAAc9I,KAAK8K,WAAa,IAAE,KAAA1C,cAAAM,kBAG/B,IAApB1I,KAAK8K,aACP9K,KAAK+K,WAAaG,GAGhBlL,KAAK8K,aAAe9K,KAAKsB,MAAMkC,OAAS,IAC1CxD,KAAK+K,WAAa/K,KAAKiG,YAAckF,EAAuBH,GAK9D,IAAII,EAAY,EAuBhB,IArBIpL,KAAK+K,WAAaC,EAAaG,EAAuBnB,IACxDoB,EAAYpB,GAAShK,KAAK+K,WAAaC,EAAaG,IAGlDnL,KAAK+K,WAAaG,EAAsBjB,IAC1CmB,EAAYnB,GAASjK,KAAK+K,WAAaG,IAGrCE,IACFpL,KAAK4C,iBAAmBwI,EACxBpB,GAASoB,EACTnB,GAASmB,EACTpL,KAAK2E,cAAgByG,GAGvB9J,EAAM1B,IAAII,KAAK8K,WAAY,CAAClB,IAAK5J,KAAK+K,WAAY1K,KAAM2K,IAExDhL,KAAK4F,OAAS5F,KAAK6F,MAAQ7F,KAAK8K,WAChC9K,KAAKwG,aAAexG,KAAK+K,WAAaG,EACtClL,KAAKyG,aAAezG,KAAK+K,WAAaC,EAAaG,EAE5CnL,KAAIwG,aAAawD,GAAQ,KAAQpE,OAAO,GAAI,CACjD,IAAIvF,EAAOL,KAAKsJ,WAAWtJ,KAAK4F,aACnBqF,IAAT5K,IACFL,KAAK6K,SAAU,EACfxK,EAAOL,KAAKuJ,mBAEd,IAAI8B,EAASrL,KAAKoI,cAAcU,cAAc9I,KAAK4F,aACpCqF,IAAXI,IACFrL,KAAK6K,SAAU,EACfQ,EAASrL,KAAKoI,cAAcM,mBAE9B1I,KAAKwG,cAAgBnG,EACrB,MAAMuJ,EAAM5J,KAAKwG,aAGjB,GAFAlF,EAAM1B,IAAII,KAAK4F,OAAQ,CAACgE,MAAKvJ,SAC7BL,KAAKwG,cAAgB6E,GACA,IAAjBrL,KAAK6K,UAAwC,IAAnB7K,KAAKsL,UACjC,KAEJ,CAEA,KAAOtL,KAAIyG,aAAawD,GAAQ,KAAQpE,MAAM,KAAOvE,MAAMkC,OAAO,GAAI,CACpE,IAAInD,EAAOL,KAAKsJ,WAAWtJ,KAAK6F,YACnBoF,IAAT5K,IACFL,KAAK6K,SAAU,EACfxK,EAAOL,KAAKuJ,mBAEd,IAAI8B,EAASrL,KAAKoI,cAAcU,cAAc9I,KAAK6F,YACpCoF,IAAXI,IACFrL,KAAK6K,SAAU,EACfQ,EAASrL,KAAKoI,cAAcM,mBAE9B,MAAMkB,EAAM5J,KAAKyG,aAGjB,GAFAnF,EAAM1B,IAAII,KAAK6F,MAAO,CAAC+D,MAAKvJ,SAC5BL,KAAKyG,cAAgBpG,EAAOgL,GACvBrL,KAAK6K,UAAY7K,KAAKsL,UACzB,KAEJ,CAGA,MAAMC,EAAYvL,KAAKwL,kBACnBD,IACFvL,KAAKwG,cAAgB+E,EACrBvL,KAAKyG,cAAgB8E,EACrBvL,KAAK+K,YAAcQ,EACnBvL,KAAK4C,iBAAmB2I,EACxBjK,EAAM0G,SAAS8B,GAAMA,EAAIF,KAAQ2B,IACjCvL,KAAK2E,cAAgB4G,GAGnBvL,KAAK6K,UACP7K,KAAKoJ,kBAAoBpJ,KAAKqJ,eAC9BrJ,KAAKoJ,kBAAkBzI,QACvBX,KAAKqJ,eAAiB/H,EAE1B,CAEAkK,eAAAA,GACE,OAAoB,IAAhBxL,KAAK4F,OACA5F,KAAKwG,aACHxG,KAAVwG,cAAA,EACQxG,KAAKwG,aAAexG,KAAK4F,OAAS5F,KAAKmK,OACrCnK,KAAV6F,QAAA,KAAAvE,MAAAkC,OAAA,EACQxD,KAAKyG,aAAezG,KAAKiG,YACvBjG,KAAVyG,cAAA,KAAAR,YACQ,KACDQ,aAAa,KAAAR,aAAA,KAAA3E,MAAAkC,OAAA,OAAAqC,OAAA,KAAAsE,OAKd,CACT,CAESlH,OAAAA,GACP,MAAM,OAAC2C,EAAM,MAAEC,GAAS7F,KACxByL,MAAMxI,YAEa,IAAjB,KAAK2C,SAAgC,GAAlB,KAAQC,OAAa,KAAAD,SAAAA,GAAA,KAAAC,QAAAA,IAGxC7F,KAAK0L,mBAET,CAEAA,iBAAAA,GACE1L,KAAK8K,WAAa,KAClB9K,KAAK+K,WAAa,KAClB/K,KAAK6K,SAAU,CACjB,CAEAzG,iBAAAA,GACE,MAAM,kBAACsE,GAAqB1I,KAAKoI,cACjCpI,KAAKiG,YAAczF,KAAK8C,IACtB,EACAtD,KAAKsB,MAAMkC,QAAUkF,EAAoB1I,KAAKuJ,mBAAkBb,EAGpE,CAKG,UAAAyB,GAED,MAAM,kBAACzB,GAAqB1I,KAAKoI,cACjC,OAAOpI,KAAKuJ,kBAAoBb,CAClC,CAIG7D,gBAAAA,CAAAiB,GAED,MAAO,CACL,CAAC9F,KAAK8B,cAAe9B,KAAK6J,aAAa/D,GACvC,CAAC9F,KAAK+B,uBAAwB,EAC9B,CAACqF,EAAOpH,KAAKiB,cACXjB,KAAKoI,cAAcQ,sBAAsB9C,EAAK9F,KAAKiB,YAAU,KAAAmH,cAAAM,mBAInE,CAIG1D,YAAAA,CAAAc,GAED,MAAO,CACL,CAAC9F,KAAK4B,UAAW5B,KAAKsJ,SAASxD,IAAQ9F,KAAKuJ,kBAC5C,CAACvJ,KAAK6B,mBAAoB7B,KAAKwJ,UAAUxJ,KAAK6B,mBAElD,CAEA8J,gBAAAA,GACE3L,KAAKoI,cAAczH,QACnBX,KAAKyB,iBACP,CA/aFb,WAAAA,uBAGK,KAAA4I,UAAA,CACgB1C,MAAO,IAAKC,OAAQ,KAKpC,KAAAsC,eAAA,IAAAvI,IAMA,KAAAsI,kBAAA,IAAAtI,IAKA,KAAAsH,cAAA,IAAAV,EAOA,KAAAoD,WAAA,KAKA,KAAAC,WAAA,KAKA,KAAAF,SAAA,EAGK,KAAA7B,kBAAmB,EAE3B,KAAAsC,WAAY,CAsYd"}