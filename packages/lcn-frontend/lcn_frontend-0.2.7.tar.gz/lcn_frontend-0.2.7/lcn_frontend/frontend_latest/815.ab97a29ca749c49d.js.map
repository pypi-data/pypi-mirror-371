{"version":3,"file":"815.ab97a29ca749c49d.js","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-spinner.ts","webpack://lcn-frontend/./src/dialogs/progress-dialog.ts","webpack://lcn-frontend/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.36O46B5H.js","webpack://lcn-frontend/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7DUCI5S4.js"],"sourcesContent":["import Spinner from \"@shoelace-style/shoelace/dist/components/spinner/spinner.component\";\nimport spinnerStyles from \"@shoelace-style/shoelace/dist/components/spinner/spinner.styles\";\nimport type { PropertyValues } from \"lit\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-spinner\")\nexport class HaSpinner extends Spinner {\n  @property() public size?: \"tiny\" | \"small\" | \"medium\" | \"large\";\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"size\")) {\n      switch (this.size) {\n        case \"tiny\":\n          this.style.setProperty(\"--ha-spinner-size\", \"16px\");\n          break;\n        case \"small\":\n          this.style.setProperty(\"--ha-spinner-size\", \"28px\");\n          break;\n        case \"medium\":\n          this.style.setProperty(\"--ha-spinner-size\", \"48px\");\n          break;\n        case \"large\":\n          this.style.setProperty(\"--ha-spinner-size\", \"68px\");\n          break;\n        case undefined:\n          this.style.removeProperty(\"--ha-progress-ring-size\");\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    spinnerStyles,\n    css`\n      :host {\n        --indicator-color: var(\n          --ha-spinner-indicator-color,\n          var(--primary-color)\n        );\n        --track-color: var(--ha-spinner-divider-color, var(--divider-color));\n        --track-width: 4px;\n        --speed: 3.5s;\n        font-size: var(--ha-spinner-size, 48px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-spinner\": HaSpinner;\n  }\n}\n","import \"@ha/components/ha-spinner\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { HaDialog } from \"@ha/components/ha-dialog\";\nimport type { ProgressDialogParams } from \"./show-dialog-progress\";\n\n@customElement(\"progress-dialog\")\nexport class ProgressDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: ProgressDialogParams;\n\n  @query(\"ha-dialog\", true) private _dialog!: HaDialog;\n\n  public async showDialog(params: ProgressDialogParams): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n    fireEvent(this._dialog as HTMLElement, \"iron-resize\");\n  }\n\n  public async closeDialog() {\n    this.close();\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog open scrimClickAction escapeKeyAction @close-dialog=${this.closeDialog}>\n        <h2>${this._params?.title}</h2>\n        <p>${this._params?.text}</p>\n\n        <div id=\"dialog-content\">\n          <ha-spinner></ha-spinner>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  public close() {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        #dialog-content {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"progress-dialog\": ProgressDialog;\n  }\n}\n","import {\n  spinner_styles_default\n} from \"./chunk.7DUCI5S4.js\";\nimport {\n  LocalizeController\n} from \"./chunk.6CTB5ZDJ.js\";\nimport {\n  component_styles_default\n} from \"./chunk.TUVJKY7S.js\";\nimport {\n  ShoelaceElement\n} from \"./chunk.4TUIT776.js\";\n\n// src/components/spinner/spinner.component.ts\nimport { html } from \"lit\";\nvar SlSpinner = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.localize = new LocalizeController(this);\n  }\n  render() {\n    return html`\n      <svg part=\"base\" class=\"spinner\" role=\"progressbar\" aria-label=${this.localize.term(\"loading\")}>\n        <circle class=\"spinner__track\"></circle>\n        <circle class=\"spinner__indicator\"></circle>\n      </svg>\n    `;\n  }\n};\nSlSpinner.styles = [component_styles_default, spinner_styles_default];\n\nexport {\n  SlSpinner\n};\n","// src/components/spinner/spinner.styles.ts\nimport { css } from \"lit\";\nvar spinner_styles_default = css`\n  :host {\n    --track-width: 2px;\n    --track-color: rgb(128 128 128 / 25%);\n    --indicator-color: var(--sl-color-primary-600);\n    --speed: 2s;\n\n    display: inline-flex;\n    width: 1em;\n    height: 1em;\n    flex: none;\n  }\n\n  .spinner {\n    flex: 1 1 auto;\n    height: 100%;\n    width: 100%;\n  }\n\n  .spinner__track,\n  .spinner__indicator {\n    fill: none;\n    stroke-width: var(--track-width);\n    r: calc(0.5em - var(--track-width) / 2);\n    cx: 0.5em;\n    cy: 0.5em;\n    transform-origin: 50% 50%;\n  }\n\n  .spinner__track {\n    stroke: var(--track-color);\n    transform-origin: 0% 0%;\n  }\n\n  .spinner__indicator {\n    stroke: var(--indicator-color);\n    stroke-linecap: round;\n    stroke-dasharray: 150% 75%;\n    animation: spin var(--speed) linear infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n      stroke-dasharray: 0.05em, 3em;\n    }\n\n    50% {\n      transform: rotate(450deg);\n      stroke-dasharray: 1.375em, 1.375em;\n    }\n\n    100% {\n      transform: rotate(1080deg);\n      stroke-dasharray: 0.05em, 3em;\n    }\n  }\n`;\n\nexport {\n  spinner_styles_default\n};\n"],"names":["HaSpinner","Spinner","updated","changedProps","super","has","this","size","style","setProperty","undefined","removeProperty","styles","spinnerStyles","css","ProgressDialog","LitElement","showDialog","params","_params","updateComplete","fireEvent","_dialog","closeDialog","close","render","html","title","text","nothing","haStyleDialog","attribute","SlSpinner","ShoelaceElement","localize","term","constructor","arguments","LocalizeController","component_styles_default","spinner_styles_default"],"mappings":"sNAOO,MAAPA,UAAAC,EAAAA,EAGYC,OAAAA,CAAAC,GAGR,GAFAC,MAAAF,QAAAC,GAEAA,EAAAE,IAAA,QACE,OAAQC,KAARC,MACE,IAAK,OACHD,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,QACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,SACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,IAAK,QACHH,KAAAE,MAAAC,YAAA,4BACA,MACF,UAAAC,EACEJ,KAAAE,MAAAG,eAAA,2BAIR,EAzBWX,EAAAY,OAAA,CA4BTC,EAAAA,EACAC,EAAAA,EAAA;;;;;;;;;;;oUCzBG,MAAPC,UAAAC,EAAAA,GAOE,gBAAAC,CAAAC,GACEZ,KAAAa,QAAAD,QACMZ,KAANc,gBACAC,EAAAA,EAAAA,GAAA,KAAAC,QAAA,cACF,CAEA,iBAAAC,GACEjB,KAAAkB,OACF,CAEUC,MAAAA,GACR,OAAKnB,KAALa,QAGAO,EAAAA,EAAA;uEACiE,KAAAH;cACzD,KAAAJ,SAAAQ;aACD,KAAAR,SAAAS;;;;;;MALLC,EAAAA,EAYJ,CAEOL,KAAAA,GACLlB,KAAAa,aAAAT,CACF,CAEA,iBAAAE,GACE,MAAO,CACLkB,EAAAA,GACAhB,EAAAA,EAAA;;;;QAMJ,G,2BA7CYiB,WAAA,K,0YCGd,IAAAC,EAAA,cAAAC,EAAAA,EAKER,MAAAA,GACE,OAAAC,EAAAA,EAAA;uEACiE,KAAAQ,SAAAC,KAAA;;;;KAKnE,CAXAC,WAAAA,GACEhC,SAAAiC,WACA/B,KAAA4B,SAAA,IAAAI,EAAAA,EAAAhC,KACF,GAUF0B,EAAApB,OAAA,CAAoB2B,EAAAA,EAA0BC,EAAAA,G,+DC3B9CA,E,QAAA1B,EAAA"}