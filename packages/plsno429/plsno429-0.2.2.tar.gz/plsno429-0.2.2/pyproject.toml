[project]
name = "plsno429"
version = "0.2.2"
description = "A tiny Python library that politely says pls no 429 by auto-handling OpenAI rate limits."
authors = [
    {name="Jongsu Liam Kim", email="jongsukim8@gmail.com"}
]
readme = "README.md"
dependencies = [
]
requires-python = ">=3.12, <4.0"
keywords = [
    "openai",
    "rate-limiting",
    "throttling",
    "429-error",
    "api-client",
    "backoff",
    "retry",
    "artificial-intelligence",
    "async",
    "http-client",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/appleparan/plsno429"

[dependency-groups]
dev = [
    "git-cliff>=2.9.1",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-literate-nav>=0.6.1",
    "mypy>=1.16.0",
    "mypy-extensions>=1.1.0",
    "myst-parser>=4.0.1",
    "ruff>=0.11.12",
    "pytest>=8.4.0",
    "pytest-asyncio~=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    "pre-commit>=4.0.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-literate-nav>=0.6.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
plsno429-cli = "plsno429.cli:main"

[tool.hatch.metadata]
allow-direct-references = true

# Only needed when `tool.uv.package = true`
[tool.hatch.build.targets.wheel]
packages = ["src/plsno429"]

[tool.uv]
package = true
native-tls = false
managed = true

[tool.uv.pip]
index-url = "https://pypi.org/simple"

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    "git",
    "__pycache__",
    "data/*",
    "notebooks/*",
    "logs/*",
    "**/__pycache__",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
    "data",
    "tests/data",
]
# Same as Black.
line-length = 100
# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
ignore = [
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN204", # missing-return-type-special-method
    "ANN401", # dynamically-typed-expressions (common in generic APIs)
    "ARG002", # unused-method-argument (common in abstract interfaces)
    "BLE001", # blind-except (sometimes necessary for generic handling)
    "COM812", # missing-trailing-comma
    "D100", # undocumented-public-module
    "D101", # undocumented-public-class
    "E741", # ambiguous-variable-name
    "F811", # redefined-while-unused
    "FBT001", # boolean-typed-positional-argument
    "FBT002", # boolean-default-positional-argument
    "N806", # non-lowercase-variable-in-function
    "N818", # exception-name-should-be-named-with-an-error-suffix
    "S110", # try-except-pass-detected
    "S311", # standard-pseudo-random-generators-not-suitable-for-cryptographic-purposes
    "SIM105", # use-contextlib-suppress
]
select = [
    "A",    # flake8-builtins
    "AIR",  # Airflow
    "ANN",  # flake8-annotations: https://stackoverflow.com/a/63550734/743078
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-accept
    "B9",   # flake8-broken-line
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle
    "EM",   # flake8-errmsg
    "F",    # pyflakes
    "FBT",  # flake8-boolean-trap
    "G",    # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PIE",  # flake8-pie
    "PLE",  # pylint-error
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "T100", # debuggger
    "YTT",  # flake8-2020
    "UP",   # pyupgrade
    "W",    # pycodestyle
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.per-file-ignores]
"**/configs/**.py" = [
    "F401",
    "E402",
]
"**/__init__.py" = [
    "F401",
    "F403",
    "E402",
]
"**/tests/config/**.py" = [
    "F401",
    "E402",
]
"**/tests/**.py" = [
    "ANN",
    "ARG001",  # unused-function-argument (common in test fixtures)
    "B017",   # assert-raises-exception (pytest pattern)
    "D100",   # undocumented-public-module
    "D102",   # undocumented-public-method (test methods don't need docstrings)
    "D103",   # undocumented-public-function
    "D104",   # undocumented-public-package
    "PT011",  # pytest-raises-too-broad (sometimes needed for generic exceptions)
    "S101",   # assert (allowed in tests)
]
"configs/**.py" = [
    "F401",
    "E402",
]
"tests/config/**.py" = [
    "F401",
    "E402",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["plsno429"]
known-third-party = ["numpy", "scipy", "pandas", "matplotlib", "sklearn", "torch", "tqdm"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.13"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Exclude tests and scripts from mypy checking
exclude = [
    "tests/.*",
    "scripts/.*",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [
    "tests",
]
pythonpath = [
  "src"
]
python_files = ["test_*.py"]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = [
    "hooks",
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__"
]
log_cli = "true"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "minute_boundary: marks tests that test minute boundary behavior",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--doctest-modules",
    "--doctest-continue-on-failure",
    "--timeout=60"     # 60ì´ˆ timeout per test
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["tests"]
branch = true

[tool.coverage.report]
fail_under = 50
show_missing = true

[tool.git-changelog]
bump = "minor"
convention = "conventional"
in-place = false
filter-commits = "0.1.0.."
marker-line = "<!-- insertion marker -->"
output = "output.log"
parse-refs = false
parse-trailers = false

provider = "github"

repository = "."
sections = "fix,maint"
template = "keepachangelog"
version-regex = "^## \\\\[(?P<version>v?[^\\\\]]+)"
versioning = "semver"
zerover = true
