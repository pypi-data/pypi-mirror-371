# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/AccessSchedule.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import digitaleye_msgs.msg

class AccessSchedule(genpy.Message):
  _md5sum = "f76085021706532bc9640defb02e5721"
  _type = "digitaleye_msgs/AccessSchedule"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# List of authorisations for an object

# id of the object
uint64 object_id

# list of authorisation(s)
digitaleye_msgs/TimeSlot[] schedule

================================================================================
MSG: digitaleye_msgs/TimeSlot
# Zone authorisation

# TOLZ to which access has been granted
uint32 zone_id

# start time of authorisation (included) (Epoch timestamp in seconds)
uint32 start

# end time of authorisation (included) (Epoch timestamp in seconds)
uint32 end
"""
  __slots__ = ['object_id','schedule']
  _slot_types = ['uint64','digitaleye_msgs/TimeSlot[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_id,schedule

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AccessSchedule, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = 0
      if self.schedule is None:
        self.schedule = []
    else:
      self.object_id = 0
      self.schedule = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.schedule)
      buff.write(_struct_I.pack(length))
      for val1 in self.schedule:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.zone_id, _x.start, _x.end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.schedule is None:
        self.schedule = None
      end = 0
      start = end
      end += 8
      (self.object_id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.schedule = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.TimeSlot()
        _x = val1
        start = end
        end += 12
        (_x.zone_id, _x.start, _x.end,) = _get_struct_3I().unpack(str[start:end])
        self.schedule.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_id
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.schedule)
      buff.write(_struct_I.pack(length))
      for val1 in self.schedule:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.zone_id, _x.start, _x.end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.schedule is None:
        self.schedule = None
      end = 0
      start = end
      end += 8
      (self.object_id,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.schedule = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.TimeSlot()
        _x = val1
        start = end
        end += 12
        (_x.zone_id, _x.start, _x.end,) = _get_struct_3I().unpack(str[start:end])
        self.schedule.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
