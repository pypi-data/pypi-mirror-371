# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/GetMvSafetyStatusRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetMvSafetyStatusRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "digitaleye_msgs/GetMvSafetyStatusRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMvSafetyStatusRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/GetMvSafetyStatusResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import digitaleye_msgs.msg

class GetMvSafetyStatusResponse(genpy.Message):
  _md5sum = "4d8788b9418df02939a4505ff6419bcd"
  _type = "digitaleye_msgs/GetMvSafetyStatusResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# PORTAL Managed Volume Safety Status
digitaleye_msgs/MvSafetyStatus status


================================================================================
MSG: digitaleye_msgs/MvSafetyStatus
# Current safety status of the Managed Volume

# overall safety status, use SS_ constants in SafetyStatus
uint32 safety_status

digitaleye_msgs/SafetyStatus[] zones_status

================================================================================
MSG: digitaleye_msgs/SafetyStatus
# Safety status

# zone id
uint32 id

# overall safety status, use SS_ below
uint32 safety_status

uint32 SS_SAFE = 0
uint32 SS_UNSAFE = 1
"""
  __slots__ = ['status']
  _slot_types = ['digitaleye_msgs/MvSafetyStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMvSafetyStatusResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = digitaleye_msgs.msg.MvSafetyStatus()
    else:
      self.status = digitaleye_msgs.msg.MvSafetyStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status.safety_status
      buff.write(_get_struct_I().pack(_x))
      length = len(self.status.zones_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.status.zones_status:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.safety_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = digitaleye_msgs.msg.MvSafetyStatus()
      end = 0
      start = end
      end += 4
      (self.status.safety_status,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.status.zones_status = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.SafetyStatus()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.safety_status,) = _get_struct_2I().unpack(str[start:end])
        self.status.zones_status.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status.safety_status
      buff.write(_get_struct_I().pack(_x))
      length = len(self.status.zones_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.status.zones_status:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.id, _x.safety_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = digitaleye_msgs.msg.MvSafetyStatus()
      end = 0
      start = end
      end += 4
      (self.status.safety_status,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.status.zones_status = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.SafetyStatus()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.safety_status,) = _get_struct_2I().unpack(str[start:end])
        self.status.zones_status.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
class GetMvSafetyStatus(object):
  _type          = 'digitaleye_msgs/GetMvSafetyStatus'
  _md5sum = '4d8788b9418df02939a4505ff6419bcd'
  _request_class  = GetMvSafetyStatusRequest
  _response_class = GetMvSafetyStatusResponse
