# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/GetUAVExternalReportRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetUAVExternalReportRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "digitaleye_msgs/GetUAVExternalReportRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetUAVExternalReportRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/GetUAVExternalReportResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import digitaleye_msgs.msg
import std_msgs.msg

class GetUAVExternalReportResponse(genpy.Message):
  _md5sum = "d68b8cf2151dd5702683c410bbdaf90f"
  _type = "digitaleye_msgs/GetUAVExternalReportResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UAV Report
digitaleye_msgs/UavExtReportList report


================================================================================
MSG: digitaleye_msgs/UavExtReportList
# List of external generic UAV report(s)

# information on the time at which report was sent
# (epoch time)
std_msgs/Header header

# list of UAVs' description
digitaleye_msgs/UavExtReport[] uavs

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: digitaleye_msgs/UavExtReport
# Generic external UAV report from

# information on the time at which the object
# was reported (epoch time) and its reference frame
std_msgs/Header header

# list of external metric(s), using UAV_EXT_ constants
digitaleye_msgs/Metric[] uav_metric


# Constants for Metric of uav_metric

# internal ID (uint)
string UAV_EXT_INT_ID = Internal ID

# agent registration (string)
string UAV_EXT_AGENT_REG = Agent registration

# absolute position lat:long:alt
# (lat, long in degrees and alt in meters - WGS84 ellipsoid)
string UAV_EXT_ABS_POS = Absolute position

# objectâ€™s estimated position in the
# local reference frame x:y:z (meters)
string UAV_EXT_LOC_POS = Local position

# ground speed x:y:z (m/s)
string UAV_EXT_GND_SPEED = Ground speed

# GNSS fix-type code use FIX_ constants below
string UAV_EXT_FIX_TYPE = Fix-type

string FIX_NO_GNSS      = No GNSS
string FIX_NO_FIX       = No Position
string FIX_2D           = 2D Position
string FIX_3D           = 3D Position
string FIX_DGPS         = DGPS
string FIX_RTK_FLOAT    = RTK Float
string FIX_RTK_FIXED    = RTK Fixed
string FIX_STATIC       = Static Fixed
string FIX_PPP          = PPP
string FIX_UNKNOWN      = Unknown

# HDOP horizontal dilution of position (float unitless)
string UAV_EXT_HDOP = HDOP

# VDOP horizontal dilution of position (float unitless)
string UAV_EXT_VDOP = VDOP

# number of visible satellites by the UAV
string UAV_EXT_NB_SATS_VIS = Nb sat vis

# percentage of battery remaining (uint)
string UAV_EXT_BATT_REMAIN = Battery remaining

# reported state, use STATE_ constants below
string UAV_EXT_STATE = External state

string STATE_NOT_READY     = Not Ready
string STATE_READY_TO      = Ready for T-O
string STATE_TAKING_OFF    = Taking Off
string STATE_FLYING        = Flying
string STATE_HELD          = Held
string STATE_LANDING       = Landing
string STATE_UNKNOWN       = Unknown

# SQUAWK code (uint)
string UAV_EXT_SQUAWK_CODE = SQUAWK code

# handover origin (string)
string UAV_EXT_HAND_ORIGIN = Handover Origin

# handover confirmation (string)
string UAV_EXT_HAND_DEST_CONFIRM = Handover destination confirmation

================================================================================
MSG: digitaleye_msgs/Metric
# Performance indicator for a subsystem,
# component or sensor

# name of the performance indicator
string name

# value of the performance indicator
string value
"""
  __slots__ = ['report']
  _slot_types = ['digitaleye_msgs/UavExtReportList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       report

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetUAVExternalReportResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.report is None:
        self.report = digitaleye_msgs.msg.UavExtReportList()
    else:
      self.report = digitaleye_msgs.msg.UavExtReportList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs))
      _x = self.report.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.report.uavs)
      buff.write(_struct_I.pack(length))
      for val1 in self.report.uavs:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.uav_metric)
        buff.write(_struct_I.pack(length))
        for val2 in val1.uav_metric:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.report is None:
        self.report = digitaleye_msgs.msg.UavExtReportList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.report.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.report.uavs = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.UavExtReport()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.uav_metric = []
        for i in range(0, length):
          val2 = digitaleye_msgs.msg.Metric()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.uav_metric.append(val2)
        self.report.uavs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs))
      _x = self.report.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.report.uavs)
      buff.write(_struct_I.pack(length))
      for val1 in self.report.uavs:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.uav_metric)
        buff.write(_struct_I.pack(length))
        for val2 in val1.uav_metric:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.report is None:
        self.report = digitaleye_msgs.msg.UavExtReportList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.report.header.seq, _x.report.header.stamp.secs, _x.report.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.report.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.report.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.report.uavs = []
      for i in range(0, length):
        val1 = digitaleye_msgs.msg.UavExtReport()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.uav_metric = []
        for i in range(0, length):
          val2 = digitaleye_msgs.msg.Metric()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.uav_metric.append(val2)
        self.report.uavs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
class GetUAVExternalReport(object):
  _type          = 'digitaleye_msgs/GetUAVExternalReport'
  _md5sum = 'd68b8cf2151dd5702683c410bbdaf90f'
  _request_class  = GetUAVExternalReportRequest
  _response_class = GetUAVExternalReportResponse
