# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitaleye_msgs/ConstantsAllocations.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConstantsAllocations(genpy.Message):
  _md5sum = "db9f0456f8b4b9d37fb9c13d0953266d"
  _type = "digitaleye_msgs/ConstantsAllocations"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Constants regarding allocations
# CONFORMANCE STATUS
uint32 CONF_UNKNOWN=1 # no allocation found to conform to
uint32 CONF_KO_ALLOCATION=2 #
uint32 CONF_KO_EXPIRED=3
uint32 CONF_OK=4

# categories type
uint32 ALLOC_CAT_WALK=0
uint32 ALLOC_CAT_AIR_ENTRY=1
uint32 ALLOC_CAT_AIR_EXIT=2
uint32 ALLOC_CAT_GROUND_ENTRY=3
uint32 ALLOC_CAT_GROUND_EXIT=4
uint32 ALLOC_CAT_FLIGHT_IN=5
uint32 ALLOC_CAT_FLIGHT_OUT=6
uint32 ALLOC_CAT_GROUND_IN=7
uint32 ALLOC_CAT_GROUND_OUT=8
uint32 ALLOC_CAT_GROUND_AIR_DELIV=9
uint32 ALLOC_CAT_MANUAL_CHARGING=10
uint32 ALLOC_CAT_TOUCH_AND_GO=11
uint32 ALLOC_CAT_PAUSE=12

# Sector categories
uint32 SECTOR_CAT_BOARDING=0
uint32 SECTOR_CAT_SIZE=1

# Block categories
uint32 BLOCK_CAT_TOL=0
uint32 BLOCK_CAT_AIR_CORRIDOR=1
uint32 BLOCK_CAT_HANDOVER=2
uint32 BLOCK_CAT_GROUND_CORRIDOR=3
uint32 BLOCK_CAT_SIZE=4

# Class of entities
uint32 ENT_CLASS_ALL=0
uint32 ENT_CLASS_UAV=1
uint32 ENT_CLASS_PERSON=2
uint32 ENT_CLASS_PILOT=3
uint32 ENT_CLASS_DELIVERY=4
uint32 ENT_CLASS_MANAGER=5
"""
  # Pseudo-constants
  CONF_UNKNOWN = 1
  CONF_KO_ALLOCATION = 2
  CONF_KO_EXPIRED = 3
  CONF_OK = 4
  ALLOC_CAT_WALK = 0
  ALLOC_CAT_AIR_ENTRY = 1
  ALLOC_CAT_AIR_EXIT = 2
  ALLOC_CAT_GROUND_ENTRY = 3
  ALLOC_CAT_GROUND_EXIT = 4
  ALLOC_CAT_FLIGHT_IN = 5
  ALLOC_CAT_FLIGHT_OUT = 6
  ALLOC_CAT_GROUND_IN = 7
  ALLOC_CAT_GROUND_OUT = 8
  ALLOC_CAT_GROUND_AIR_DELIV = 9
  ALLOC_CAT_MANUAL_CHARGING = 10
  ALLOC_CAT_TOUCH_AND_GO = 11
  ALLOC_CAT_PAUSE = 12
  SECTOR_CAT_BOARDING = 0
  SECTOR_CAT_SIZE = 1
  BLOCK_CAT_TOL = 0
  BLOCK_CAT_AIR_CORRIDOR = 1
  BLOCK_CAT_HANDOVER = 2
  BLOCK_CAT_GROUND_CORRIDOR = 3
  BLOCK_CAT_SIZE = 4
  ENT_CLASS_ALL = 0
  ENT_CLASS_UAV = 1
  ENT_CLASS_PERSON = 2
  ENT_CLASS_PILOT = 3
  ENT_CLASS_DELIVERY = 4
  ENT_CLASS_MANAGER = 5

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConstantsAllocations, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
