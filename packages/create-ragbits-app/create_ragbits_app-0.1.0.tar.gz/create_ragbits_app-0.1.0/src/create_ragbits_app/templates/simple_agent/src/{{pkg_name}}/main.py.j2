"""
Main entry point for the {{ project_name }} application.
To run this file, use the following command:

```bash
ragbits api run {{pkg_name}}.main:ChatApp
```
"""
from collections.abc import AsyncGenerator

from ragbits.core.prompt import Prompt
from ragbits.chat.interface import ChatInterface
from ragbits.chat.interface.types import ChatContext, ChatResponse, LiveUpdateType
from ragbits.core.prompt.base import ChatFormat
from ragbits.agents import Agent, ToolCallResult
from ragbits.core.llms import LiteLLM, ToolCall
from {{pkg_name}}.prompt_finance import FinancePrompt, FinancePromptInput
from {{pkg_name}}.components import get_llm
from {{pkg_name}}.tools import get_yahoo_finance_markdown
{%- if observability %}
from {{pkg_name}}.observability import setup_observability

# Initialize observability
setup_observability()
{%- endif %}


class ChatApp(ChatInterface):
    """Chat interface for {{ project_name }} application."""

    async def setup(self) -> None:
        self.llm = get_llm()
        self.financial_agent = Agent(llm=self.llm, prompt=FinancePrompt, tools=[get_yahoo_finance_markdown])

    async def chat(
        self,
        message: str,
        history: ChatFormat| None = None,
        context: ChatContext | None = None,
    ) -> AsyncGenerator[ChatResponse, None]:

        # Create prompt with context
        prompt_input = FinancePromptInput(
            input=message
        )

        # Stream the response from the LLM
        async for result in self.financial_agent.run_streaming(prompt_input):
            match result:
                case str():
                    yield self.create_live_update(
                        update_id="1",
                        type=LiveUpdateType.START,
                        label="Answering...",
                    )
                    yield self.create_text_response(result)
                case ToolCall():
                    yield self.create_live_update(
                        update_id=result.id,
                        type=LiveUpdateType.START,
                        label="Fetching...",
                        description=f"Using {result.name}.",
                    )
                case ToolCallResult():
                    yield self.create_live_update(
                        update_id=result.id,
                        type=LiveUpdateType.FINISH,
                        label="Fetching",
                        description=f"Found {len(result.result)} relevant chunks.",
                    )

        yield self.create_live_update(
            update_id="1",
            type=LiveUpdateType.FINISH,
            label="Answer",
        )
