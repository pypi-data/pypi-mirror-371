Metadata-Version: 2.4
Name: epub-cfi-toolkit
Version: 0.1.0
Summary: A Python toolkit for processing EPUB Canonical Fragment Identifiers (CFIs)
Author-email: PagePal <info@pagepalapp.com>
Maintainer-email: PagePal <info@pagepalapp.com>
License: MIT
Project-URL: Homepage, https://github.com/PagePalApp/epub-cfi-toolkit
Project-URL: Repository, https://github.com/PagePalApp/epub-cfi-toolkit
Project-URL: Issues, https://github.com/PagePalApp/epub-cfi-toolkit/issues
Keywords: epub,cfi,ebook,canonical-fragment-identifier
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: XML
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: lxml>=4.6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Dynamic: license-file

**Disclaimer**: everything in this repository was generated entirely by Claude Code (including this README) and has not been reviewed or verified by a human. Content may be inaccurate or incomplete. Use at your own risk.

# EPUB CFI Toolkit

[![PyPI version](https://badge.fury.io/py/epub-cfi-toolkit.svg)](https://badge.fury.io/py/epub-cfi-toolkit)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![CI](https://github.com/PagePalApp/epub-cfi-toolkit/workflows/CI/badge.svg)](https://github.com/PagePalApp/epub-cfi-toolkit/actions)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A Python toolkit for processing **EPUB Canonical Fragment Identifiers (CFIs)**. This library provides functionality to extract text from EPUB files using CFI references, validate CFI strings, and navigate EPUB document structure.

## üöÄ Quick Start

### Installation

```bash
pip install epub-cfi-toolkit
```

### Basic Usage

```python
from epub_cfi_toolkit import CFIProcessor, CFIValidator

# Extract text from an EPUB file using CFI range
with CFIProcessor("path/to/book.epub") as processor:
    text = processor.extract_text_from_cfi_range(
        start_cfi="epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)",
        end_cfi="epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:20)"
    )
    print(text)  # "This is the extracted text from the EPUB"

# Validate CFI strings
validator = CFIValidator()
is_valid = validator.validate("epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)")
print(is_valid)  # True or False
```

## üìö Features

- **‚úÖ CFI Range Text Extraction**: Extract text between two CFI positions with character-level precision
- **‚úÖ CFI Validation**: Validate EPUB CFI strings for correct syntax and format
- **‚úÖ Cross-Element Support**: Handle text extraction across different XML elements
- **‚úÖ EPUB Structure Parsing**: Navigate EPUB spine, manifest, and content documents
- **‚úÖ Error Handling**: Comprehensive error handling with descriptive messages
- **‚úÖ Context Manager**: Safe resource management with automatic cleanup
- **‚úÖ Type Safety**: Full type hints for better development experience

## üéØ Use Cases

### Extract Text from EPUB Annotations
```python
from epub_cfi_toolkit import CFIProcessor

# Extract highlighted text or notes from EPUB files
with CFIProcessor("novel.epub") as processor:
    # Extract a specific paragraph
    paragraph = processor.extract_text_from_cfi_range(
        "epubcfi(/6/14!/4/2/4/1:0)",    # Start of paragraph  
        "epubcfi(/6/14!/4/2/4/1:150)"   # First 150 characters
    )
    print(f"Extracted: {paragraph}")
```

### Validate CFI References
```python
from epub_cfi_toolkit import CFIValidator

validator = CFIValidator()

# Validate different CFI formats
cfis_to_check = [
    "epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)",  # Valid
    "epubcfi(/6/4!/4/2/22/1:0)",                           # Valid  
    "invalid-cfi-string",                                   # Invalid
    "/6/4[chap01ref]!/4[body01]/10[para05]/3:10"          # Valid (without wrapper)
]

for cfi in cfis_to_check:
    result = "‚úÖ Valid" if validator.validate(cfi) else "‚ùå Invalid"
    print(f"{cfi} -> {result}")
```

### Batch Process Multiple EPUBs
```python
from epub_cfi_toolkit import CFIProcessor
import os

def extract_from_multiple_books(epub_folder, cfi_start, cfi_end):
    results = []
    
    for epub_file in os.listdir(epub_folder):
        if epub_file.endswith('.epub'):
            epub_path = os.path.join(epub_folder, epub_file)
            
            try:
                with CFIProcessor(epub_path) as processor:
                    text = processor.extract_text_from_cfi_range(cfi_start, cfi_end)
                    results.append((epub_file, text.strip()))
            except Exception as e:
                print(f"Error processing {epub_file}: {e}")
    
    return results

# Extract the same CFI range from multiple books
results = extract_from_multiple_books(
    "books/", 
    "epubcfi(/6/6!/4/2/22/1:0)", 
    "epubcfi(/6/6!/4/2/22/3:15)"
)
```

## üìñ API Reference

### CFIProcessor

The main class for processing EPUB files and extracting text using CFIs.

```python
class CFIProcessor:
    def __init__(self, epub_path: str) -> None:
        """Initialize with path to EPUB file."""
    
    def extract_text_from_cfi_range(self, start_cfi: str, end_cfi: str) -> str:
        """Extract text between two CFI positions."""
    
    def close(self) -> None:
        """Close and cleanup resources."""
    
    # Context manager support
    def __enter__(self) -> 'CFIProcessor': ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
```

### CFIValidator

Utility class for validating CFI strings.

```python
class CFIValidator:
    def validate(self, cfi: str) -> bool:
        """Return True if CFI is valid, False otherwise."""
    
    def validate_strict(self, cfi: str) -> None:
        """Validate CFI, raise CFIValidationError if invalid."""
```

### Exceptions

```python
from epub_cfi_toolkit import CFIError, CFIValidationError, EPUBError

# CFIError: Base exception for CFI-related errors
# CFIValidationError: Raised when CFI validation fails  
# EPUBError: Raised when EPUB file cannot be processed
```

## üß™ Advanced Examples

### Working with Complex CFI Paths
```python
from epub_cfi_toolkit import CFIProcessor

# CFIs can reference complex document structures
with CFIProcessor("textbook.epub") as processor:
    # Extract from nested elements
    citation = processor.extract_text_from_cfi_range(
        "epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:0)",  # Inside <em> tag
        "epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:25)"  # First 25 chars
    )
    
    # Extract across multiple elements  
    full_paragraph = processor.extract_text_from_cfi_range(
        "epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)",    # Start of paragraph
        "epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:100)"   # Including tail text
    )
```

### Error Handling Best Practices
```python
from epub_cfi_toolkit import CFIProcessor, CFIError, EPUBError

def safe_extract_text(epub_path, start_cfi, end_cfi):
    try:
        with CFIProcessor(epub_path) as processor:
            return processor.extract_text_from_cfi_range(start_cfi, end_cfi)
            
    except EPUBError as e:
        print(f"EPUB file error: {e}")
        return None
        
    except CFIError as e:
        print(f"CFI processing error: {e}")
        return None
        
    except Exception as e:
        print(f"Unexpected error: {e}")
        return None

# Safe extraction with error handling
result = safe_extract_text("book.epub", "epubcfi(/6/4!/4/2/1:0)", "epubcfi(/6/4!/4/2/1:50)")
if result:
    print(f"Extracted: {result}")
```

## üõ†Ô∏è Requirements

- **Python 3.8+** (tested on 3.8, 3.9, 3.10, 3.11, 3.12)
- **lxml** - XML processing library

## üèóÔ∏è Development

```bash
# Clone the repository
git clone https://github.com/PagePalApp/epub-cfi-toolkit.git
cd epub-cfi-toolkit

# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:  
source venv/bin/activate

# Install development dependencies
pip install -e .[dev]

# Run tests
pytest

# Run tests with coverage
pytest --cov=epub_cfi_toolkit --cov-report=html

# Code formatting
black epub_cfi_toolkit tests
isort epub_cfi_toolkit tests

# Type checking
mypy epub_cfi_toolkit

# Linting
flake8 epub_cfi_toolkit
```

## üìã What are EPUB CFIs?

EPUB Canonical Fragment Identifiers (CFIs) are a standard way to reference specific locations within EPUB documents. They work like precise bookmarks that can point to:

- Specific characters within text
- Elements within the document structure  
- Ranges of text across multiple elements

**Example CFI**: `epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)`

This CFI breaks down as:
- `/6` - Reference to spine item
- `/4[chap01ref]` - Chapter 1 reference  
- `!` - Separator (spine reference / content reference)
- `/4[body01]/10[para05]` - Navigate to paragraph 5 in body
- `/3:10` - Character offset 10 in the 3rd text node

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Make your changes
4. Add tests for your changes
5. Ensure all tests pass (`pytest`)
6. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
7. Push to the branch (`git push origin feature/AmazingFeature`)
8. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Built according to the [EPUB CFI specification](https://idpf.org/epub/linking/cfi/)
- Developed with ‚ù§Ô∏è for the EPUB and digital publishing community
- Part of the [PagePal](https://github.com/PagePalApp) ecosystem
