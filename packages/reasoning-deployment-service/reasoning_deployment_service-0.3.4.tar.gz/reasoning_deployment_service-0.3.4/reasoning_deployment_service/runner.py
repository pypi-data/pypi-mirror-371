import sys
import argparse
from pathlib import Path
from reasoning_deployment_service import ReasoningEngineDeploymentService
from reasoning_deployment_service.gui_editor import GUIEditor
from reasoning_deployment_service.cli_editor import CLIRunner


class Runner:
    @staticmethod
    def run():
        parser = argparse.ArgumentParser(description="Reasoning Engine Deployment Runner")
        parser.add_argument(
            "--mode",
            choices=["create", "auth", "cli", "gui", "populate_files"],
            help="Operation mode to run",
        )
        parser.add_argument(
            "--agent-path",
            help="Dotted path to your agent (e.g. Invoice_agent.agent:root_agent). "
                 "If omitted, falls back to your_agent_import.py in project root."
        )
        args = parser.parse_args()

        Runner._ensure_gitignore()

        # --- Load root_agent dynamically ---
        root_agent = Runner._load_agent(args.agent_path)

        # --- Check env config ---
        if not Path(".env.agent").exists() or not Path("aix_agent.yaml").exists():
            print("Missing .env.agent or aix_agent.yaml.")
            print("Options:\n 5) Generate placeholder config\n q) Quit")
            choice = input("Enter choice: ").strip()
            if choice == "5":
                svc = ReasoningEngineDeploymentService(root_agent, deployment_environment="DEV")
                svc._check_required_files_exist()
            sys.exit(0)

        # --- Run mode or menu ---
        if args.mode:
            Runner._dispatch(args.mode, root_agent)
        else:
            Runner._menu(root_agent)

    # ------------------ HELPERS ------------------

    @staticmethod
    def _ensure_gitignore():
        gi = Path(".gitignore")
        if not gi.exists():
            gi.write_text("# Generated by Runner\n")
        patterns = [
            ".venv", ".venv_deploy", "venv", "__pycache__",
            "deploy_env", "your_agent_import.py"
        ]
        content = gi.read_text().splitlines()
        for p in patterns:
            if p not in content:
                gi.write_text(gi.read_text() + f"\n{p}\n")

    @staticmethod
    def _load_agent(agent_path_arg: str):
        """Load root_agent either from --agent-path or your_agent_import.py."""
        sys.path.insert(0, str(Path.cwd()))  # ensure project root on sys.path

        if agent_path_arg:
            import importlib
            if ":" in agent_path_arg:
                module_path, attr = agent_path_arg.split(":")
            else:
                module_path, attr = agent_path_arg, "root_agent"
            module = importlib.import_module(module_path)
            return getattr(module, attr)

        if Path("your_agent_import.py").exists():
            from your_agent_import import root_agent
            return root_agent

        print("Error: No agent path provided and your_agent_import.py not found.")
        sys.exit(1)

    @staticmethod
    def _dispatch(mode, root_agent):
        svc = ReasoningEngineDeploymentService(root_agent, deployment_environment="DEV")

        if mode == "create":
            svc.one_deployment_with_everything_on_it()
        elif mode == "auth":
            svc.one_deployment_with_everything_on_it(skip_engine_step=True)
        elif mode == "cli":
            CLIRunner().run()
        elif mode == "gui":
            GUIEditor().run()
        elif mode == "populate_files":
            svc._check_required_files_exist()

    @staticmethod
    def _menu(root_agent):
        print("Choose an operation:\n1) Create/Update\n2) Auth only\n3) CLI\n4) GUI\nq) Quit")
        choice = input("Enter choice: ").strip().lower()
        mapping = {"1": "create", "2": "auth", "3": "cli", "4": "gui"}
        if choice == "q":
            sys.exit(0)
        Runner._dispatch(mapping.get(choice, ""), root_agent)
