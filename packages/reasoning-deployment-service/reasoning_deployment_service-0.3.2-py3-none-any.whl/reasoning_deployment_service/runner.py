import os
import sys
import subprocess
from pathlib import Path
from dotenv import load_dotenv
import argparse

from reasoning_deployment_service import (
    ReasoningEngineDeploymentService,
)
from reasoning_deployment_service.gui_editor import GUIEditor
from reasoning_deployment_service.cli_editor import CLIRunner


class Runner:
    @staticmethod
    def run():
        parser = argparse.ArgumentParser(description="Reasoning Engine Deployment Runner")
        parser.add_argument(
            "--mode",
            choices=["create", "auth", "cli", "gui", "populate_files"],
            required=False,
            help="Operation mode to run",
        )
        args = parser.parse_args()

        # --- Ensure .gitignore covers junk ---
        Runner._ensure_gitignore()

        # --- Ensure your_agent_import.py exists ---
        if not Path("your_agent_import.py").exists():
            Runner._create_agent_import()

        # --- Always ensure venv exists & is up to date ---
        venv_python = Runner._ensure_venv()

        # --- Install dependencies into venv ---
        Runner._install_deps(venv_python)

        # --- If no config files, restrict menu ---
        if not Path(".env.agent").exists() or not Path("aix_agent.yaml").exists():
            print("Missing .env.agent or aix_agent.yaml.")
            print("Options:\n 5) Generate placeholder config\n q) Quit")
            choice = input("Enter choice: ").strip()
            if choice == "5":
                subprocess.check_call([venv_python, "deploy.py", "--mode", "populate_files"])
            else:
                sys.exit(0)
            return

        # --- Dispatch based on mode or menu ---
        if args.mode:
            Runner._dispatch(args.mode, venv_python)
        else:
            Runner._menu(venv_python)

    # ------------------ HELPERS ------------------

    @staticmethod
    def _ensure_gitignore():
        gi = Path(".gitignore")
        if not gi.exists():
            gi.write_text("# Generated by Runner\n")
        patterns = [".venv", ".venv_deploy", "venv", "__pycache__", "deploy_env", "your_agent_import.py"]
        content = gi.read_text().splitlines()
        for p in patterns:
            if p not in content:
                with gi.open("a") as f:
                    f.write(f"{p}\n")

    @staticmethod
    def _create_agent_import():
        agent_dir = input("Enter the directory where your root_agent (agent.py) lives: ").strip()
        if not Path(agent_dir, "agent.py").exists():
            print(f"Error: {agent_dir}/agent.py not found")
            sys.exit(1)
        import_path = agent_dir.replace("/", ".") + ".agent"
        Path("your_agent_import.py").write_text(f"from {import_path} import root_agent\n")
        print(f"Created your_agent_import.py pointing to {agent_dir}/agent.py")

    @staticmethod
    def _ensure_venv():
        venv_dir = Path("deploy_env")
        if not venv_dir.exists():
            subprocess.check_call([sys.executable, "-m", "venv", str(venv_dir)])
            print("Created venv at ./deploy_env")
        return str(venv_dir / "bin" / "python")

    @staticmethod
    def _install_deps(venv_python):
        subprocess.check_call([venv_python, "-m", "pip", "install", "--upgrade", "pip"])
        subprocess.check_call([venv_python, "-m", "pip", "install", "keyring", "keyrings.google-artifactregistry-auth"])
        # Install reasoning-deployment-service itself (current package)
        subprocess.check_call([venv_python, "-m", "pip", "install", "reasoning-deployment-service"])

        if Path("requirements.txt").exists():
            subprocess.check_call([venv_python, "-m", "pip", "install", "-r", "requirements.txt"])

    @staticmethod
    def _dispatch(mode, venv_python):
        from your_agent_import import root_agent
        svc = ReasoningEngineDeploymentService(root_agent, deployment_environment="DEV")

        if mode == "create":
            svc.one_deployment_with_everything_on_it()
        elif mode == "auth":
            svc.one_deployment_with_everything_on_it(skip_engine_step=True)
        elif mode == "cli":
            CLIRunner().run()
        elif mode == "gui":
            GUIEditor().run()
        elif mode == "populate_files":
            svc._check_required_files_exist()

    @staticmethod
    def _menu(venv_python):
        print("Choose an operation:\n1) Create/Update\n2) Auth only\n3) CLI\n4) GUI\nq) Quit")
        choice = input("Enter choice: ").strip()
        mapping = {"1": "create", "2": "auth", "3": "cli", "4": "gui"}
        if choice.lower() == "q":
            sys.exit(0)
        Runner._dispatch(mapping.get(choice, ""), venv_python)
