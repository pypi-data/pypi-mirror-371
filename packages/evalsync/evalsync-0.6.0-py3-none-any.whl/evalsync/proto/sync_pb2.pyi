"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ServiceState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ServiceStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ServiceState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INIT: _ServiceState.ValueType  # 0
    """Initial state when service starts"""
    READY: _ServiceState.ValueType  # 1
    """Benchmark is ready to run"""
    RUNNING: _ServiceState.ValueType  # 2
    """Benchmark is currently running"""
    DONE: _ServiceState.ValueType  # 3
    """Benchmark is already done"""
    ERROR: _ServiceState.ValueType  # 4
    """Benchmark is in error state"""

class ServiceState(_ServiceState, metaclass=_ServiceStateEnumTypeWrapper): ...

INIT: ServiceState.ValueType  # 0
"""Initial state when service starts"""
READY: ServiceState.ValueType  # 1
"""Benchmark is ready to run"""
RUNNING: ServiceState.ValueType  # 2
"""Benchmark is currently running"""
DONE: ServiceState.ValueType  # 3
"""Benchmark is already done"""
ERROR: ServiceState.ValueType  # 4
"""Benchmark is in error state"""
global___ServiceState = ServiceState

class _ExperimentCommand:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ExperimentCommandEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ExperimentCommand.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NONE: _ExperimentCommand.ValueType  # 0
    BEGIN: _ExperimentCommand.ValueType  # 1
    END: _ExperimentCommand.ValueType  # 2
    ABORT: _ExperimentCommand.ValueType  # 3

class ExperimentCommand(_ExperimentCommand, metaclass=_ExperimentCommandEnumTypeWrapper): ...

NONE: ExperimentCommand.ValueType  # 0
BEGIN: ExperimentCommand.ValueType  # 1
END: ExperimentCommand.ValueType  # 2
ABORT: ExperimentCommand.ValueType  # 3
global___ExperimentCommand = ExperimentCommand

@typing.final
class StateSync(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    STATE_FIELD_NUMBER: builtins.int
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    state: global___ServiceState.ValueType
    error_message: builtins.str
    @property
    def metadata(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        state: global___ServiceState.ValueType = ...,
        error_message: builtins.str = ...,
        metadata: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["error_message", b"error_message", "metadata", b"metadata", "state", b"state"]) -> None: ...

global___StateSync = StateSync

@typing.final
class ManagerMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMAND_FIELD_NUMBER: builtins.int
    command: global___ExperimentCommand.ValueType
    def __init__(
        self,
        *,
        command: global___ExperimentCommand.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["command", b"command"]) -> None: ...

global___ManagerMessage = ManagerMessage
