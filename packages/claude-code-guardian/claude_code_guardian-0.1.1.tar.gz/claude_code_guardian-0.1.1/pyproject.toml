[project]
name = "claude-code-guardian"
version = "0.1.1"
description = "Validation and permission system for Claude Code"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Jhon Pedroza", email = "jhon@pedroza.me"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]
license = "MIT"
dependencies = [
    "cchooks>=0.1.2,<0.2",
    "click>=8.0.0",
    "platformdirs>=4.3.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
]

[project.urls]
Repository = "https://github.com/jfpedroza/claude-code-guardian"

[project.scripts]
claude-code-guardian = "ccguardian.cli:main"

[tool.uv]
package = true

[tool.setuptools.packages.find]
include = ["ccguardian*"]

[tool.setuptools.package-data]
ccguardian = ["config/*.yml"]

[dependency-groups]
dev = [
    "ruff>=0.12.0",
    "mypy>=1.17.0",
    "pytest>=8.0.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.10.0",
    "types-pyyaml>=6.0.12.20250516",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.10.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ccguardian",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--cov-config=pyproject.toml",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["ccguardian"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py312"
exclude = [
    ".git",
    ".venv",
    "build",
    "dist"
]
line-length = 98

[tool.ruff.lint]
select = [
	"E",  # pycodestyle errors
	"W",  # pycodestyle warnings
	"F",  # pyflakes
	"I",  # isort
	"B",  # flake8-bugbear
	"C4", # flake8-comprehensions
    "PT", # flake8-pytest-style
	"UP", # pyupgrade
]
ignore = [
	"E501", # line too long, handled by ruff format
	"B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
