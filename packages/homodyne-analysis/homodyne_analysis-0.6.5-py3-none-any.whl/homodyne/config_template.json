{
  "metadata": {
    "_comment": "Project metadata and version information",
    "config_version": "0.6.5.dev0",
    "description": "Homodyne Scattering Analysis Configuration - XPCS under Nonequilibrium Conditions",
    "based_on": "He et al. PNAS 2024 - Transport coefficient approach",
    "created_date": "YYYY-MM-DD",
    "updated_date": "YYYY-MM-DD",
    "authors": ["Your Name"],
    "institution": "Your Institution",
    "experiment_name": "Your Experiment Description",
    "sample_description": "Sample details and preparation method",
    "script_compatibility": "homodyne v0.6.4"
  },
  
  "experimental_data": {
    "_comment": "Data source and loading configuration",
    "data_folder_path": "./data/SAMPLE_NAME/",
    "data_file_name": "your_data_file.hdf",
    "phi_angles_path": "./data/phi_angles/",
    "phi_angles_file": "phi_list.txt",
    "exchange_key": "exchange",
    "cache_file_path": "./data/SAMPLE_NAME/",
    "cache_filename_template": "cached_c2_frames_{start_frame}_{end_frame}.npz",
    "cache_compression": true,
    "data_type": "float64",
    "file_format": "NPZ",
    "preprocessing": {
      "apply_diagonal_correction": true,
      "vectorized_correction": true,
      "cache_processed_data": true,
      "normalize_data": true,
      "normalization_method": "baseline"
    }
  },
  
  "analyzer_parameters": {
    "_comment": "Core analysis parameters and experimental geometry",
    "temporal": {
      "dt": 0.1,
      "_dt_note": "Time step between frames in seconds",
      "dt_unit": "seconds",
      "start_frame": 100,
      "end_frame": 1000,
      "frame_description": "Analysis window for XPCS experiment"
    },
    "scattering": {
      "wavevector_q": 0.01,
      "_q_note": "Scattering wavevector magnitude: q = 4π sin(θ/2)/λ",
      "q_unit": "Å⁻¹",
      "typical_range": [0.001, 0.1]
    },
    "geometry": {
      "stator_rotor_gap": 1000000,
      "_gap_note": "Gap in Angstroms (100μm typical)",
      "gap_unit": "Å",
      "gap_in_microns": 100
    },
    "computational": {
      "num_threads": "auto",
      "auto_detect_cores": true,
      "max_threads_limit": 12,
      "memory_limit_gb": 16
    }
  },
  
  "initial_parameters": {
    "_comment": "Starting values for optimization [D0, alpha, D_offset, gamma_dot_t0, beta, gamma_dot_t_offset, phi0]",
    "values": [100.0, 0.0, 10.0, 1.0, 0.0, 0.0, 0.0],
    "parameter_names": ["D0", "alpha", "D_offset", "gamma_dot_t0", "beta", "gamma_dot_t_offset", "phi0"],
    "units": ["Å²/s", "dimensionless", "Å²/s", "s⁻¹", "dimensionless", "s⁻¹", "degrees"],
    "physical_meaning": {
      "D0": "Reference diffusion coefficient",
      "alpha": "Power-law exponent for D(t) evolution",
      "D_offset": "Baseline diffusion coefficient",
      "gamma_dot_t0": "Reference shear rate",
      "beta": "Power-law exponent for shear rate evolution",
      "gamma_dot_t_offset": "Baseline shear rate",
      "phi0": "Angular offset between flow and scattering"
    },
    "active_parameters": ["D0", "alpha", "D_offset", "gamma_dot_t0", "beta", "gamma_dot_t_offset", "phi0"],
    "parameter_units": {
      "D0": "Å²/s",
      "alpha": "dimensionless",
      "D_offset": "Å²/s",
      "gamma_dot_t0": "s⁻¹",
      "beta": "dimensionless",
      "gamma_dot_t_offset": "s⁻¹",
      "phi0": "degrees"
    }
  },
  
  "optimization_config": {
    "_comment": "Configuration for optimization methods",
    "angle_filtering": {
      "enabled": true,
      "target_ranges": [
        {"min_angle": -10.0, "max_angle": 10.0},
        {"min_angle": 170.0, "max_angle": 190.0}
      ],
      "fallback_to_all_angles": true
    },
    "classical_optimization": {
      "methods": ["Nelder-Mead", "Gurobi", "Robust-Wasserstein", "Robust-Scenario", "Robust-Ellipsoidal"],
      "_methods_note": "Available: Nelder-Mead (always), Gurobi (if licensed), Robust-* (if CVXPY installed)",
      "_usage_flags": {
        "--method classical": "Runs ONLY traditional classical methods: Nelder-Mead, Gurobi (if available)",
        "--method robust": "Runs ONLY Robust-Wasserstein, Robust-Scenario, Robust-Ellipsoidal",
        "--method mcmc": "Runs Bayesian MCMC sampling for uncertainty quantification",
        "--method all": "Runs all methods listed above (classical + robust) followed by MCMC"
      },
      "_gurobi_availability": "Gurobi provides quadratic programming alternative. Requires license: pip install gurobipy",
      "_robust_availability": "Robust methods require CVXPY: pip install cvxpy. Options: Robust-Wasserstein, Robust-Scenario, Robust-Ellipsoidal",
      "_robust_flag_note": "Use --method robust to run ONLY robust methods for noise-resistant parameter estimation",
      "method_options": {
        "Nelder-Mead": {
          "maxiter": 5000,
          "xatol": 1e-08,
          "fatol": 1e-08,
          "adaptive": true
        },
        "Gurobi": {
          "_comment": "Quadratic programming solver (requires license)",
          "max_iterations": 1000,
          "tolerance": 1e-06,
          "output_flag": 0,
          "method": 2,
          "time_limit": 300
        }
      },
      "selection_strategy": "best_chi_squared"
    },
    "mcmc_sampling": {
      "enabled": true,
      "sampler": "NUTS",
      "draws": 6000,
      "tune": 1500,
      "thin": 1,
      "chains": 4,
      "cores": 4,
      "target_accept": 0.95,
      "max_treedepth": 12,
      "return_inferencedata": true
    },
    "scaling_parameters": {
      "_comment": "Physical scaling for c2_fitted = c2_theory * contrast + offset",
      "fitted_range": {"min": 1.0, "max": 2.0},
      "theory_range": {"min": 0.0, "max": 1.0},
      "contrast": {
        "min": 0.05,
        "max": 0.5,
        "prior_mu": 0.3,
        "prior_sigma": 0.1,
        "type": "TruncatedNormal"
      },
      "offset": {
        "min": 0.05,
        "max": 1.95,
        "prior_mu": 1.0,
        "prior_sigma": 0.2,
        "type": "TruncatedNormal"
      }
    },
    "robust_optimization": {
      "_comment": "Robust optimization settings using CVXPY + Gurobi",
      "_usage_examples": [
        "python run_homodyne.py --method robust  # Run only robust methods",
        "python run_homodyne.py --method robust --static-isotropic  # Robust in static mode",
        "python run_homodyne.py --method classical  # Run all methods including robust",
        "python run_homodyne.py --method all  # Run classical (with robust) + MCMC"
      ],
      "_robust_flag_benefits": "Use --method robust for noise-resistant estimation without classical methods",
      "enabled": true,
      "uncertainty_model": "wasserstein",
      "_uncertainty_model_note": "Options: wasserstein, ellipsoidal, scenario",
      "uncertainty_radius": 0.05,
      "_uncertainty_radius_note": "Fraction of data variance for uncertainty set (0.01-0.1 typical)",
      "n_scenarios": 50,
      "_n_scenarios_note": "Number of bootstrap scenarios for scenario-based optimization",
      "regularization_alpha": 0.01,
      "_regularization_alpha_note": "L2 regularization strength for parameter stability",
      "regularization_beta": 0.001,
      "_regularization_beta_note": "L1 sparsity parameter for parameter deviations",
      "solver_settings": {
        "Method": 2,
        "_Method_note": "Gurobi solver method: 2=Barrier, 0=Primal simplex, 1=Dual simplex",
        "CrossOver": 0,
        "_CrossOver_note": "Skip crossover for numerical stability",
        "BarHomogeneous": 1,
        "_BarHomogeneous_note": "Use homogeneous barrier method",
        "TimeLimit": 600,
        "_TimeLimit_note": "Maximum solve time in seconds",
        "MIPGap": 1e-6,
        "_MIPGap_note": "Optimality gap tolerance",
        "NumericFocus": 3,
        "_NumericFocus_note": "Maximum numerical stability focus",
        "OutputFlag": 0,
        "_OutputFlag_note": "Suppress solver output"
      },
      "method_options": {
        "wasserstein": {
          "uncertainty_radius": 0.05,
          "regularization_alpha": 0.01
        },
        "scenario": {
          "n_scenarios": 50,
          "bootstrap_method": "residual",
          "parallel_scenarios": true
        },
        "ellipsoidal": {
          "gamma": 0.1,
          "l1_regularization": 0.001,
          "l2_regularization": 0.01
        }
      }
    }
  },
  
  "parameter_space": {
    "_comment": "Parameter bounds and priors for optimization",
    "bounds": [
      {
        "name": "D0",
        "min": 1.0,
        "max": 1000000.0,
        "type": "TruncatedNormal",
        "prior_mu": 10000.0,
        "prior_sigma": 1000.0,
        "unit": "Å²/s"
      },
      {
        "name": "alpha",
        "min": -2.0,
        "max": 2.0,
        "type": "Normal",
        "prior_mu": -1.5,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "D_offset",
        "min": -100,
        "max": 100,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 10.0,
        "unit": "Å²/s"
      },
      {
        "name": "gamma_dot_t0",
        "min": 1e-06,
        "max": 1.0,
        "type": "TruncatedNormal",
        "prior_mu": 0.001,
        "prior_sigma": 0.01,
        "unit": "s⁻¹"
      },
      {
        "name": "beta",
        "min": -2.0,
        "max": 2.0,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 0.1,
        "unit": "dimensionless"
      },
      {
        "name": "gamma_dot_t_offset",
        "min": -0.01,
        "max": 0.01,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 0.001,
        "unit": "s⁻¹"
      },
      {
        "name": "phi0",
        "min": -10.0,
        "max": 10.0,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 5.0,
        "unit": "degrees"
      }
    ]
  },
  
  "analysis_settings": {
    "_comment": "Analysis mode configuration",
    "static_mode": false,
    "_static_mode_note": "True for no-flow analysis (only D0, alpha, D_offset)",
    "static_submode": "anisotropic",
    "_submode_options": "isotropic (no angles) or anisotropic (with angle filtering)",
    "model_description": {
      "static": "g₂(t₁,t₂) ~ [exp(-q² ∫ D(t)dt)]²",
      "laminar_flow": "g₂ = g₁_diff × g₁_shear with sinc² term"
    }
  },
  
  "advanced_settings": {
    "_comment": "Advanced computational settings",
    "data_loading": {
      "use_diagonal_correction": true,
      "vectorized_diagonal_fix": true
    },
    "chi_squared_calculation": {
      "method": "standard",
      "_scaling_note": "Scaling optimization always enabled for proper chi-squared",
      "uncertainty_estimation_factor": 0.1,
      "minimum_sigma": 1e-10,
      "fast_computation": true,
      "uncertainty_calculation": {
        "enable_uncertainty": true,
        "report_uncertainty": true,
        "minimum_angles_for_uncertainty": 2
      },
      "validity_check": {
        "check_positive_D0": true,
        "check_positive_gamma_dot_t0": true,
        "check_positive_time_dependent": true,
        "check_parameter_bounds": true
      }
    },
    "numerical_integration": {
      "method": "simpson",
      "relative_tolerance": 1e-08,
      "absolute_tolerance": 1e-12
    },
    "optimization_controls": {
      "convergence_tolerance": 1e-08,
      "max_function_evaluations": 10000,
      "parameter_scaling": "auto",
      "finite_difference_step": 1e-08
    }
  },
  
  "performance_settings": {
    "_comment": "Performance and resource management",
    "caching": {
      "enable_memory_cache": true,
      "enable_disk_cache": true,
      "cache_size_limit_mb": 1000,
      "auto_cleanup": true
    },
    "parallel_processing": {
      "enable_multiprocessing": true,
      "chunk_size": "auto",
      "backend": "threading"
    },
    "memory_management": {
      "low_memory_mode": false,
      "garbage_collection_frequency": 10,
      "memory_monitoring": false
    },
    "numba_optimization": {
      "enable_numba": true,
      "warmup_numba": true,
      "parallel_numba": true,
      "cache_numba": true,
      "stability_enhancements": {
        "enable_kernel_warmup": true,
        "warmup_iterations": 5,
        "optimize_memory_layout": true,
        "enable_nogil": true,
        "environment_optimization": {
          "auto_configure": true,
          "max_threads": 4,
          "gc_optimization": true
        }
      },
      "performance_monitoring": {
        "enable_profiling": false,
        "stable_benchmarking": false,
        "adaptive_benchmarking": false,
        "performance_baselines": false,
        "target_cv": 0.10,
        "memory_monitoring": true,
        "smart_caching": {
          "enabled": true,
          "max_items": 100,
          "max_memory_mb": 500.0
        }
      }
    },
    "noise_model": {
      "use_simple_forward_model": false,
      "_note": "False uses full forward model consistent with classical optimization",
      "sigma_prior": 0.1
    }
  },
  
  "validation_rules": {
    "_comment": "Data validation and quality control",
    "data_quality": {
      "check_data_range": true,
      "correlation_minimum": 0.0,
      "correlation_maximum": 10.0,
      "check_nan_values": true,
      "nan_handling": "raise"
    },
    "parameter_validation": {
      "check_bounds": true,
      "physics_constraints": true,
      "correlation_checks": true
    },
    "fit_quality": {
      "_comment": "Classical optimization quality thresholds",
      "overall_chi_squared": {
        "excellent_threshold": 2.0,
        "acceptable_threshold": 5.0,
        "warning_threshold": 10.0,
        "critical_threshold": 20.0
      },
      "per_angle_chi_squared": {
        "excellent_threshold": 2.0,
        "acceptable_threshold": 5.0,
        "warning_threshold": 10.0,
        "outlier_threshold_multiplier": 2.5,
        "max_outlier_fraction": 0.25,
        "min_good_angles": 3
      }
    },
    "mcmc_convergence": {
      "_comment": "MCMC convergence criteria",
      "rhat_thresholds": {
        "excellent_threshold": 1.01,
        "good_threshold": 1.05,
        "acceptable_threshold": 1.1,
        "critical_threshold": 1.2
      },
      "ess_thresholds": {
        "excellent_threshold": 400,
        "good_threshold": 200,
        "acceptable_threshold": 100,
        "minimum_threshold": 50
      },
      "divergence_thresholds": {
        "max_divergences_fraction": 0.05,
        "warning_divergences_fraction": 0.01
      }
    },
    "frame_range": {
      "minimum_frames": 10,
      "maximum_frames": null,
      "check_continuity": true
    }
  },
  
  "workflow_integration": {
    "_comment": "Analysis workflow settings",
    "analysis_workflow": {
      "auto_generate_plots": true,
      "plot_integration_enabled": true,
      "plot_experimental_data_on_load": false,
      "cache_plot_data": true,
      "save_intermediate_plots": false
    },
    "mcmc_integration": {
      "auto_save_traces": true,
      "trace_file_format": "netcdf",
      "include_warmup_in_traces": false,
      "convergence_diagnostics_auto": true,
      "plot_mcmc_results": true
    },
    "data_management": {
      "experimental_data_cache": true,
      "theoretical_data_cache": true,
      "cache_directory": "./cache",
      "auto_cleanup_cache": false,
      "cache_retention_days": 30
    },
    "error_handling": {
      "continue_on_plot_errors": true,
      "log_plot_errors": true,
      "fallback_plotting": true,
      "validate_plot_data": true
    }
  },
  
  "output_settings": {
    "_comment": "Output and reporting configuration",
    "_output_structure": "homodyne_analysis_results.json (main summary) saved to output directory root. Method-specific results saved to individual directories: classical/[method_name]/ and robust/[method_name]/ containing analysis_results_[method_name].json, parameters.json, fitted_data.npz (consolidated: c2_experimental, c2_fitted, residuals, parameters, uncertainties, chi_squared, phi_angles, t1, t2), and c2_heatmaps_[method_name].png. Summary files: all_classical_methods_summary.json and all_robust_methods_summary.json. MCMC: results saved to mcmc/ subdirectory with same fitted_data.npz structure.",
    "results_directory": "./homodyne_results",
    "file_formats": {
      "results_format": "json",
      "save_intermediate": false,
      "compression": true,
      "precision": "float64"
    },
    "file_naming": {
      "timestamp_format": "%Y%m%d_%H%M%S",
      "include_config_name": true,
      "include_chi_squared": true
    },
    "reporting": {
      "generate_plots": true,
      "plot_formats": ["png", "pdf"],
      "detailed_summary": true,
      "convergence_diagnostics": true
    },
    "plotting": {
      "_comment": "Plotting configuration",
      "general": {
        "create_plots": true,
        "plot_format": "png",
        "dpi": 300,
        "figure_size": [10, 8],
        "style": "publication",
        "save_plots": true,
        "show_plots": false
      },
      "c2_heatmaps": {
        "enabled": true,
        "_method_specific_note": "When multiple optimization methods are used (e.g., Nelder-Mead + Gurobi), separate heatmaps are generated for each method with method names in filenames",
        "layout": "single_row",
        "include_experimental": true,
        "include_theoretical": true,
        "include_residuals": true,
        "colormap": "viridis",
        "colorbar_position": "right",
        "title_prefix": "C2 Correlation Function",
        "figsize": [15, 5]
      },
      "mcmc_plots": {
        "enabled": true,
        "corner_plots": {
          "enabled": true,
          "show_titles": true,
          "quantiles": [0.16, 0.5, 0.84],
          "show_truths": false,
          "use_arviz": true,
          "figsize": [12, 12]
        },
        "trace_plots": {
          "enabled": true,
          "show_chains": true,
          "show_warmup": false,
          "compact_layout": false,
          "figsize": [12, 8]
        },
        "convergence_diagnostics": {
          "enabled": true,
          "show_rhat": true,
          "show_ess": true,
          "show_mcse": true,
          "show_energy": true,
          "rhat_threshold": 1.1,
          "ess_threshold": 100
        }
      },
      "diagnostic_plots": {
        "enabled": true,
        "chi_squared_summary": true,
        "parameter_correlations": true,
        "residual_analysis": true,
        "convergence_history": true
      },
      "output": {
        "base_directory": "./plots",
        "subdirectories": {
          "c2_heatmaps": "c2_correlation",
          "parameter_plots": "parameters",
          "mcmc_plots": "mcmc_analysis",
          "diagnostics": "diagnostics"
        },
        "filename_template": "{analysis_type}_{timestamp}_{method}",
        "_filename_template_note": "Method-specific plotting: {method} will be replaced with optimization method name (e.g., Nelder-Mead, Gurobi) for easy identification",
        "include_timestamp": true,
        "overwrite_existing": false
      }
    },
    "logging": {
      "log_level": "INFO",
      "log_to_file": true,
      "log_to_console": true,
      "log_filename": "homodyne_analysis.log",
      "rotation": {
        "max_bytes": 10485760,
        "backup_count": 3
      }
    }
  }
}