{
  "_template_info": {
    "name": "Homodyne Scattering Analysis Configuration Template",
    "version": "2.1",
    "description": "Complete configuration template for X-ray Photon Correlation Spectroscopy (XPCS) analysis",
    "based_on": "He et al. PNAS 2024 - Transport coefficient approach",
    "usage": "Copy this template, rename it, and modify the values for your specific experiment",
    "mode": "general_template",
    "package_version": "0.6.3",
    "required_sections": [
      "metadata",
      "analyzer_parameters",
      "experimental_data",
      "optimization_config"
    ],
    "template_created": "2024-08-16",
    "template_updated": "2024-08-19",
    "key_features": [
      "Comprehensive template for all analysis modes",
      "Complete documentation and examples for all parameters",
      "Breakthrough performance optimizations with 2.71x speedup in chi-squared calculations",
      "Advanced batch processing and vectorized operations for maximum efficiency",
      "Stable benchmarking utilities and performance monitoring",
      "Detailed scaling optimization documentation",
      "Template selection guide for choosing appropriate specialized templates",
      "Migration notes for updating from previous versions"
    ],
    "_available_templates": {
      "config_template.json": "General-purpose template with comprehensive documentation for all analysis modes",
      "config_static_isotropic.json": "Optimized for static samples with isotropic scattering (3 parameters: D0, alpha, D_offset)",
      "config_static_anisotropic.json": "For static samples with angular dependence (3 parameters + angle filtering)",
      "config_laminar_flow.json": "For samples under laminar flow conditions (7 parameters including flow dynamics)"
    },
    "_template_selection_guide": {
      "static_isotropic": "Use when: no flow, no angular dependence expected, fastest analysis",
      "static_anisotropic": "Use when: no flow but angular variations present, moderate complexity",
      "laminar_flow": "Use when: samples under controlled flow, most comprehensive analysis",
      "general_template": "Use when: creating custom configurations or need all options documented"
    },
    "_scaling_optimization_update": {
      "important_change": "Scaling optimization is now ALWAYS ENABLED across all templates",
      "removed_setting": "The 'scaling_optimization' boolean setting has been removed",
      "migration": "If your config contains 'scaling_optimization': true/false, simply remove that line",
      "benefit": "More consistent and scientifically accurate chi-squared calculations"
    }
  },
  "metadata": {
    "_comment": "Project metadata and version information",
    "config_version": "0.6.3",
    "description": "Configuration for Homodyne Scattering Analysis - XPCS under Nonequilibrium Laminar Flow",
    "based_on": "He et al. PNAS 2024 - Transport coefficient approach",
    "created_date": "YYYY-MM-DD",
    "updated_date": "YYYY-MM-DD",
    "authors": [
      "Your Name",
      "Collaborator Name"
    ],
    "institution": "Your Institution",
    "experiment_name": "Your Experiment Description",
    "sample_description": "Sample details and preparation method",
    "script_compatibility": "homodyne v0.6.3",
    "_cli_usage": {
      "description": "Command line interface usage with homodyne v0.6.3",
      "main_command": "homodyne --config your_config.json --method classical",
      "config_generator": "homodyne-config --mode static_isotropic --sample SAMPLE_NAME",
      "analysis_modes": [
        "--static-isotropic",
        "--static-anisotropic",
        "--laminar-flow"
      ],
      "optimization_methods": [
        "classical",
        "mcmc",
        "all"
      ]
    }
  },
  "experimental_data": {
    "_comment": "Data source and loading configuration",
    "description": "Data source and loading configuration",
    "data_folder_path": "./data/SAMPLE_NAME/",
    "_data_folder_path_note": "Path to directory containing experimental data files",
    "data_file_name": "your_data_file.hdf",
    "_data_file_name_note": "Main experimental data file (HDF5 format recommended)",
    "phi_angles_path": "./data/phi_angles/",
    "_phi_angles_path_note": "Directory containing scattering angle information",
    "phi_angles_file": "phi_list.txt",
    "_phi_angles_file_note": "File containing phi angles (one angle per line)",
    "exchange_key": "exchange",
    "_exchange_key_note": "HDF5 dataset key for correlation data",
    "cache_file_path": "./data/SAMPLE_NAME/",
    "_cache_file_path_note": "Directory for cached processed data",
    "cache_filename_template": "cached_c2_frames_{start_frame}_{end_frame}.npz",
    "_cache_filename_template_note": "Template for cache filenames with frame range",
    "cache_compression": true,
    "_cache_compression_note": "Enable compression for cache files (saves disk space)",
    "data_type": "float64",
    "_data_type_note": "Data precision: float32 (faster) or float64 (more precise)",
    "file_format": "NPZ",
    "_file_format_note": "Supported formats: HDF5, NPZ (NPZ recommended for better compatibility)",
    "preprocessing": {
      "_comment": "Data preprocessing options",
      "apply_diagonal_correction": true,
      "_apply_diagonal_correction_note": "Remove diagonal artifacts from correlation matrices",
      "vectorized_correction": true,
      "_vectorized_correction_note": "Use vectorized operations for speed",
      "cache_processed_data": true,
      "_cache_processed_data_note": "Save processed data to avoid recomputation",
      "normalize_data": true,
      "_normalize_data_note": "Apply data normalization",
      "normalization_method": "baseline",
      "_normalization_method_note": "Options: baseline, zscore, minmax"
    }
  },
  "analyzer_parameters": {
    "_comment": "Core analysis parameters and experimental geometry",
    "description": "Core analysis parameters and experimental geometry",
    "temporal": {
      "_comment": "Time-related parameters",
      "dt": 0.1,
      "_dt_note": "Time step between correlation frames (typical range: 0.01-1.0s)",
      "dt_unit": "seconds",
      "start_frame": 100,
      "_start_frame_note": "First frame to analyze (skip initial equilibration, typical: 50-500)",
      "end_frame": 1000,
      "_end_frame_note": "Last frame to analyze (null for all frames, typical analysis: 500-2000)",
      "frame_description": "Analysis window for typical XPCS experiment"
    },
    "scattering": {
      "_comment": "Scattering geometry parameters",
      "wavevector_q": 0.01,
      "_wavevector_q_note": "Scattering wavevector magnitude: q = 4π sin(θ/2)/λ (typical: 0.001-0.1 Å⁻¹)",
      "q_unit": "Å⁻¹",
      "q_description": "Scattering wavevector magnitude for typical XPCS setup",
      "typical_range": [
        0.001,
        0.1
      ],
      "_typical_range_note": "Common q-range for colloidal and soft matter XPCS"
    },
    "geometry": {
      "_comment": "Sample geometry parameters",
      "stator_rotor_gap": 1000000,
      "_stator_rotor_gap_note": "Gap between stator and rotor in Angstroms (100μm typical)",
      "gap_unit": "Å",
      "gap_description": "Shear cell gap for flow experiments",
      "gap_in_microns": 100,
      "_gap_in_microns_note": "Gap in microns (typical range: 50-500μm)"
    },
    "computational": {
      "_comment": "Performance and resource settings",
      "num_threads": "auto",
      "_num_threads_note": "Number of CPU threads to use ('auto' recommended for optimal performance)",
      "auto_detect_cores": true,
      "_auto_detect_cores_note": "Automatically detect available CPU cores",
      "max_threads_limit": 12,
      "_max_threads_limit_note": "Maximum threads limit (balanced for typical systems)",
      "memory_limit_gb": 16,
      "_memory_limit_gb_note": "Memory limit in GB (adjusted for modern systems)"
    }
  },
  "initial_parameters": {
    "_comment": "Starting values for optimization - CRITICAL: Adjust these for your system",
    "description": "Starting values for optimization based on physical model",
    "values": [
      100.0,
      0.0,
      10.0,
      1.0,
      0.0,
      0.0,
      0.0
    ],
    "_values_note": "Order: [D0, alpha, D_offset, gamma_dot_t0, beta, gamma_dot_t_offset, phi0]",
    "parameter_names": [
      "D0",
      "alpha",
      "D_offset",
      "gamma_dot_t0",
      "beta",
      "gamma_dot_t_offset",
      "phi0"
    ],
    "units": [
      "Å²/s",
      "dimensionless",
      "Å²/s",
      "s⁻¹",
      "dimensionless",
      "s⁻¹",
      "degrees"
    ],
    "physical_meaning": {
      "D0": "Reference diffusion coefficient",
      "alpha": "Power-law exponent for D(t) evolution (0=constant, <0=subdiffusion)",
      "D_offset": "Baseline diffusion coefficient",
      "gamma_dot_t0": "Reference shear rate",
      "beta": "Power-law exponent for γ̇(t) evolution (0=steady flow)",
      "gamma_dot_t_offset": "Baseline shear rate",
      "phi0": "Angular offset between flow direction and scattering vector"
    },
    "model_equations": {
      "_comment": "Mathematical model equations",
      "diffusion": "D(t) = D₀(t/t₀)^α + D_offset",
      "shear_rate": "γ̇(t) = γ̇₀(t/t₀)^β + γ̇_offset",
      "correlation": "c₂ = 1 + β[exp(-q²∫D(t)dt)] × sinc²[(qh/2π)∫γ̇(t)cos(φ)dt]"
    },
    "parameter_estimation_tips": {
      "_comment": "Guidelines for estimating initial parameters",
      "D0": "Estimate from single-particle diffusion measurements or literature values",
      "alpha": "Start with 0 (constant diffusion) and adjust based on system behavior",
      "D_offset": "Baseline diffusion offset, typically small and can be positive or negative",
      "gamma_dot_t0": "Estimate from rheology measurements or applied shear conditions",
      "beta": "Start with 0 (steady flow) for constant shear rate systems",
      "gamma_dot_t_offset": "Often small or zero for controlled shear experiments",
      "phi0": "Start near 0, represents alignment between flow and scattering geometry"
    },
    "active_parameters": [
      "D0",
      "alpha",
      "D_offset",
      "gamma_dot_t0",
      "beta",
      "gamma_dot_t_offset",
      "phi0"
    ],
    "_active_parameters_note": "OPTIONAL: List of parameters to optimize. If not specified, all parameters are used. For static modes, use only ['D0', 'alpha', 'D_offset']. For flow modes, use all 7 parameters. This affects plotting and optimization focus.",
    "_active_parameters_examples": {
      "static_mode": [
        "D0",
        "alpha",
        "D_offset"
      ],
      "laminar_flow_mode": [
        "D0",
        "alpha",
        "D_offset",
        "gamma_dot_t0",
        "beta",
        "gamma_dot_t_offset",
        "phi0"
      ],
      "note": "Remove or comment out 'active_parameters' to use all parameters (default behavior)"
    }
  },
  "optimization_config": {
    "_comment": "Configuration for optimization methods",
    "description": "Configuration for optimization methods",
    "angle_filtering": {
      "_comment": "Angle filtering settings for optimization",
      "enabled": true,
      "_enabled_note": "Enable angle filtering to focus optimization on specific angular ranges",
      "target_ranges": [
        {
          "min_angle": -10.0,
          "max_angle": 10.0,
          "_note": "First angular range for optimization (around 0 degrees)"
        },
        {
          "min_angle": 170.0,
          "max_angle": 190.0,
          "_note": "Second angular range for optimization (around 180 degrees)"
        }
      ],
      "_target_ranges_note": "Angular ranges in degrees where optimization focuses",
      "fallback_to_all_angles": true,
      "_fallback_to_all_angles_note": "Use all angles if no angles found in target ranges",
      "performance_impact": {
        "_comment": "Expected performance improvements",
        "typical_data_reduction": "80-90% fewer data points",
        "expected_speedup": "3-5x faster optimization",
        "memory_savings": "Significant reduction in memory usage"
      }
    },
    "classical_optimization": {
      "_comment": "Traditional optimization algorithms",
      "methods": [
        "Nelder-Mead"
      ],
      "_methods_note": "Optimized to use only Nelder-Mead for best performance",
      "method_options": {
        "Nelder-Mead": {
          "maxiter": 5000,
          "_maxiter_note": "Maximum iterations (increased for better convergence)",
          "xatol": 1e-08,
          "_xatol_note": "Absolute error in parameters (balanced precision vs speed)",
          "fatol": 1e-08,
          "_fatol_note": "Absolute error in function value",
          "adaptive": true,
          "_adaptive_note": "Use adaptive algorithm variant"
        }
      },
      "selection_strategy": "best_chi_squared",
      "_selection_strategy_note": "How to choose best result: best_chi_squared, consensus, first_success"
    },
    "mcmc_sampling": {
      "_comment": "Markov Chain Monte Carlo sampling",
      "enabled": true,
      "_enabled_note": "Enable MCMC sampling (requires PyMC)",
      "sampler": "NUTS",
      "_sampler_note": "Sampling algorithm: NUTS (recommended), Metropolis, HamiltonianMC",
      "draws": 6000,
      "_draws_note": "Number of MCMC samples to draw (balanced for typical use)",
      "tune": 1500,
      "_tune_note": "Number of tuning steps before sampling (increased for robustness)",
      "thin": 1,
      "_thin_note": "Thinning interval: keep every nth sample (1=no thinning recommended for NUTS)",
      "chains": 4,
      "_chains_note": "Number of parallel MCMC chains (good balance for convergence diagnostics)",
      "cores": 4,
      "_cores_note": "CPU cores for parallel sampling (matches chain count)",
      "target_accept": 0.95,
      "_target_accept_note": "Target acceptance rate for NUTS sampler (optimized for efficiency)",
      "max_treedepth": 12,
      "_max_treedepth_note": "Maximum tree depth for NUTS (increased for complex posteriors)",
      "return_inferencedata": true,
      "_return_inferencedata_note": "Return ArviZ InferenceData object for analysis"
    },
    "scaling_parameters": {
      "_comment": "Physical scaling constraints for c2 fitting optimization",
      "_description": "Controls the c2_fitted = c2_theory * contrast + offset relationship",
      "fitted_range": {
        "min": 1.0,
        "max": 2.0,
        "_description": "c2_fitted range constraint - normalized correlation function range"
      },
      "theory_range": {
        "min": 0.0,
        "max": 1.0,
        "_description": "c2_theory range constraint - theoretical correlation function bounds"
      },
      "contrast": {
        "min": 0.05,
        "max": 0.5,
        "prior_mu": 0.3,
        "prior_sigma": 0.1,
        "type": "TruncatedNormal",
        "_description": "Scaling factor for correlation strength, typically ∈ (0, 0.5], μ ≈ 0.3"
      },
      "offset": {
        "min": 0.05,
        "max": 1.95,
        "prior_mu": 1.0,
        "prior_sigma": 0.2,
        "type": "TruncatedNormal",
        "_description": "Baseline correlation level, typically ∈ (0, 2.0), μ ≈ 1.0"
      }
    }
  },
  "parameter_space": {
    "_comment": "Parameter bounds and priors for optimization",
    "description": "Parameter bounds and prior distributions",
    "bounds": [
      {
        "name": "D0",
        "min": 1.0,
        "_min_note": "Lower bound suitable for typical colloidal systems",
        "max": 1000000.0,
        "_max_note": "Upper bound encompassing fast diffusion processes",
        "type": "TruncatedNormal",
        "_type_note": "Normal distribution used for all parameters in MCMC",
        "prior_mu": 10000.0,
        "_prior_mu_note": "Prior mean centered on 10,000 Å²/s",
        "prior_sigma": 1000.0,
        "_prior_sigma_note": "Standard deviation for Normal prior",
        "unit": "Å²/s",
        "physical_constraint": "positive",
        "_physical_constraint_note": "Diffusion coefficient must be positive"
      },
      {
        "name": "alpha",
        "min": -2.0,
        "max": 2.0,
        "type": "Normal",
        "prior_mu": -1.5,
        "prior_sigma": 0.1,
        "unit": "dimensionless",
        "physical_constraint": "none",
        "_note": "Typical range for subdiffusion (negative) to superdiffusion (positive)"
      },
      {
        "name": "D_offset",
        "min": -100,
        "max": 100,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 10.0,
        "unit": "Å²/s",
        "physical_constraint": "none",
        "_note": "Baseline diffusion coefficient, typically small compared to D0"
      },
      {
        "name": "gamma_dot_t0",
        "min": 1e-06,
        "max": 1.0,
        "type": "TruncatedNormal",
        "prior_mu": 0.001,
        "prior_sigma": 0.01,
        "unit": "s⁻¹",
        "physical_constraint": "positive",
        "_note": "Typical shear rate range for XPCS experiments"
      },
      {
        "name": "beta",
        "min": -2.0,
        "max": 2.0,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 0.1,
        "unit": "dimensionless",
        "physical_constraint": "none",
        "_note": "Shear rate evolution exponent, typically smaller range than alpha"
      },
      {
        "name": "gamma_dot_t_offset",
        "min": -0.01,
        "max": 0.01,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 0.001,
        "unit": "s⁻¹",
        "physical_constraint": "none",
        "_note": "Small baseline shear rate, often near zero"
      },
      {
        "name": "phi0",
        "min": -10.0,
        "max": 10.0,
        "type": "Normal",
        "prior_mu": 0.0,
        "prior_sigma": 5.0,
        "unit": "degrees",
        "physical_constraint": "angular",
        "_note": "Angular offset between flow and scattering geometry"
      }
    ]
  },
  "analysis_settings": {
    "_comment": "Analysis mode and model configuration",
    "description": "Configure the analysis mode for different experimental conditions",
    "static_mode": false,
    "_static_mode_note": "Set to true for static (no-flow) analysis where γ̇=0, β=0, γ̇_offset=0, φ₀=0",
    "_static_mode_description": "In static mode, sinc²(0)=1 and only diffusion contribution g₁_diff remains: g₂(t₁,t₂) ~ [exp(-q²/2 ∫|t₂-t₁| D(t')dt')]². Angular offset φ₀ is irrelevant and automatically set to 0.",
    "static_submode": "anisotropic",
    "_static_submode_note": "Sub-mode for static analysis: 'isotropic' or 'anisotropic' (case-insensitive)",
    "_static_submode_description": {
      "isotropic": "Isotropic scattering - no angle selection, phi_angles_file not loaded, angle_filtering disabled. Results independent of scattering angle.",
      "anisotropic": "Anisotropic scattering - uses angle selection from phi_angles_file, angle_filtering enabled for optimization. Default behavior for backward compatibility."
    },
    "_static_submode_usage": "Only relevant when static_mode=true. If omitted, defaults to 'anisotropic' for backward compatibility.",
    "model_description": {
      "static_isotropic_case": "g₁(t₁,t₂) = exp(-q² ∫ᵗ²ᵗ¹ D(t)dt) = g₁_diff(t₁,t₂), g₂(t₁,t₂) ~ [g₁(t₁,t₂)]². No angular dependence.",
      "static_anisotropic_case": "g₁(t₁,t₂) = exp(-q² ∫ᵗ²ᵗ¹ D(t)dt) = g₁_diff(t₁,t₂), g₂(t₁,t₂) ~ [g₁(t₁,t₂)]². Uses angle filtering for optimization.",
      "laminar_flow_case": "g₁(t₁,t₂) = g₁_diff(t₁,t₂) × g₁_shear(t₁,t₂) where g₁_shear = [sinc(Φ)]² and Φ = (1/2π)qL cos(φ₀-φ) ∫|t₂-t₁| γ̇(t')dt'"
    }
  },
  "workflow_integration": {
    "_comment": "Analysis workflow and plotting integration settings",
    "description": "Configure integration between analysis workflow and plotting/visualization",
    "analysis_workflow": {
      "_comment": "Core analysis workflow settings",
      "auto_generate_plots": true,
      "_auto_generate_plots_note": "Automatically generate plots after analysis completion",
      "plot_integration_enabled": true,
      "_plot_integration_enabled_note": "Enable plotting integration in analysis workflow",
      "plot_experimental_data_on_load": false,
      "_plot_experimental_data_on_load_note": "Generate comprehensive validation plots of experimental data immediately after loading for quality checking (includes heatmaps, cross-sections, statistics)",
      "cache_plot_data": true,
      "_cache_plot_data_note": "Cache experimental and theoretical data for plotting",
      "save_intermediate_plots": false,
      "_save_intermediate_plots_note": "Save plots during intermediate analysis steps"
    },
    "mcmc_integration": {
      "_comment": "MCMC workflow integration settings",
      "auto_save_traces": true,
      "_auto_save_traces_note": "Automatically save MCMC trace data to NetCDF files",
      "trace_file_format": "netcdf",
      "_trace_file_format_note": "Format for MCMC trace files: netcdf, pickle, json",
      "include_warmup_in_traces": false,
      "_include_warmup_in_traces_note": "Include warmup samples in saved traces",
      "convergence_diagnostics_auto": true,
      "_convergence_diagnostics_auto_note": "Automatically compute convergence diagnostics",
      "plot_mcmc_results": true,
      "_plot_mcmc_results_note": "Generate MCMC plots automatically after sampling"
    },
    "data_management": {
      "_comment": "Data caching and management for workflow integration",
      "experimental_data_cache": true,
      "_experimental_data_cache_note": "Cache experimental data for plotting and analysis",
      "theoretical_data_cache": true,
      "_theoretical_data_cache_note": "Cache generated theoretical data",
      "cache_directory": "./cache",
      "_cache_directory_note": "Directory for workflow data caching",
      "auto_cleanup_cache": false,
      "_auto_cleanup_cache_note": "Automatically clean old cache files",
      "cache_retention_days": 30,
      "_cache_retention_days_note": "Number of days to retain cache files"
    },
    "error_handling": {
      "_comment": "Error handling during workflow integration",
      "continue_on_plot_errors": true,
      "_continue_on_plot_errors_note": "Continue analysis if plotting fails",
      "log_plot_errors": true,
      "_log_plot_errors_note": "Log detailed error information for plotting failures",
      "fallback_plotting": true,
      "_fallback_plotting_note": "Use simplified plotting if advanced features fail",
      "validate_plot_data": true,
      "_validate_plot_data_note": "Validate data before attempting to plot"
    }
  },
  "advanced_settings": {
    "_comment": "Advanced configuration options",
    "description": "Advanced analysis and computational settings",
    "data_loading": {
      "_comment": "Data loading and preprocessing parameters",
      "use_diagonal_correction": true,
      "_use_diagonal_correction_note": "Apply diagonal correction to correlation matrices",
      "vectorized_diagonal_fix": true,
      "_vectorized_diagonal_fix_note": "Use vectorized operations for diagonal correction"
    },
    "chi_squared_calculation": {
      "_comment": "Chi-squared calculation parameters",
      "method": "standard",
      "_method_note": "Options: standard, weighted, robust",
      "_scaling_optimization_documentation": {
        "_description": "SCALING OPTIMIZATION (ALWAYS ENABLED)",
        "_overview": "Scaling optimization is always enabled and performs least squares fitting to determine optimal scaling relationship between experimental and theoretical data",
        "_mathematical_relationship": "g₂ = offset + contrast × g₁",
        "_where": {
          "g₁": "theoretical correlation function",
          "g₂": "experimental correlation function",
          "contrast": "fitted scaling parameter (multiplicative factor)",
          "offset": "fitted baseline parameter (additive factor)"
        },
        "_physical_significance": {
          "_purpose": "Accounts for systematic scaling factors present in experimental data",
          "_factors_addressed": [
            "Instrumental response functions",
            "Background signals",
            "Detector gain variations",
            "Normalization differences",
            "Systematic measurement offsets"
          ]
        },
        "_implementation": {
          "_method": "Least squares fitting using numpy.linalg.lstsq",
          "_matrix_equation": "A·x = b where A = [theory, ones], x = [contrast, offset], b = experimental",
          "_solution": "fitted = theory × contrast + offset"
        },
        "_chi_squared_calculation": {
          "_formula": "χ² = Σ(experimental - fitted)²/σ²",
          "_fitted_definition": "fitted = theory × contrast + offset from optimal scaling",
          "_significance": "Provides meaningful fitting quality assessment regardless of analysis mode or number of angles"
        },
        "_always_enabled_because": [
          "Essential for proper chi-squared calculation",
          "Required for meaningful comparison between experimental and theoretical data",
          "Accounts for unavoidable systematic factors in real measurements",
          "Ensures consistency across different optimization methods (classical, MCMC, Bayesian)",
          "Independent of number of scattering angles or analysis mode"
        ],
        "_implementation_details": {
          "_per_angle_processing": "Scaling optimization is performed independently for each scattering angle",
          "_robust_handling": "Graceful fallback to identity scaling if least squares fails",
          "_computational_cost": "Minimal overhead - O(n) where n is number of data points per angle",
          "_memory_usage": "Temporary matrices A and x only, no significant memory impact"
        },
        "_usage_examples": {
          "_typical_results": "contrast ≈ 0.1-10.0, offset ≈ 0.0-0.1 for well-normalized data",
          "_interpretation": "Large contrast deviations may indicate normalization issues or instrumental effects",
          "_quality_indicators": "Contrast values significantly different from 1.0 suggest systematic scaling factors"
        },
        "_migration_notes": {
          "_from_previous_versions": "If your config contains 'scaling_optimization': true/false, remove this line - scaling is now always enabled",
          "_backward_compatibility": "All previous configurations work unchanged - scaling is applied automatically",
          "_performance_impact": "No performance degradation - optimization was typically enabled in production use"
        }
      },
      "_scaling_optimization_note": "Scaling optimization is always enabled: g₂ = offset + contrast × g₁. This is essential for proper chi-squared calculation regardless of mode or number of angles.",
      "uncertainty_estimation_factor": 0.1,
      "_uncertainty_estimation_factor_note": "Factor for estimating measurement uncertainties",
      "minimum_sigma": 1e-10,
      "_minimum_sigma_note": "Minimum uncertainty to prevent division by zero",
      "fast_computation": true,
      "_fast_computation_note": "Use optimized chi-squared kernels for performance",
      "uncertainty_calculation": {
        "_comment": "Reduced chi-squared uncertainty calculation settings",
        "enable_uncertainty": true,
        "_enable_uncertainty_note": "Calculate uncertainty in reduced chi-squared from per-angle variation",
        "report_uncertainty": true,
        "_report_uncertainty_note": "Include uncertainty in log output and results",
        "minimum_angles_for_uncertainty": 2,
        "_minimum_angles_for_uncertainty_note": "Minimum number of angles required for uncertainty calculation",
        "_interpretation_note": "Uncertainty in reduced chi-squared from per-angle variation: Small uncertainty (< 10% of χ²_red) = consistent fit across angles; Large uncertainty (> 50% of χ²_red) = high angle variability, potential systematic issues or model inadequacy. Use for quality assessment: consistent uncertainty indicates reliable optimization."
      },
      "validity_check": {
        "_comment": "Parameter validation settings",
        "check_positive_D0": true,
        "_check_positive_D0_note": "Validate that D0 parameter is positive",
        "check_positive_gamma_dot_t0": true,
        "_check_positive_gamma_dot_t0_note": "Validate that gamma_dot_t0 parameter is positive",
        "check_positive_time_dependent": true,
        "_check_positive_time_dependent_note": "Validate time-dependent parameters",
        "check_parameter_bounds": true,
        "_check_parameter_bounds_note": "Validate parameters are within specified bounds"
      }
    },
    "numerical_integration": {
      "_comment": "Numerical integration settings",
      "method": "simpson",
      "_method_note": "Integration method: simpson, trapezoid, romberg",
      "relative_tolerance": 1e-08,
      "_relative_tolerance_note": "Relative tolerance for integration",
      "absolute_tolerance": 1e-12,
      "_absolute_tolerance_note": "Absolute tolerance for integration"
    },
    "optimization_controls": {
      "_comment": "Optimization control parameters",
      "convergence_tolerance": 1e-08,
      "_convergence_tolerance_note": "Convergence criterion for optimization",
      "max_function_evaluations": 10000,
      "_max_function_evaluations_note": "Maximum function evaluations per optimization",
      "parameter_scaling": "auto",
      "_parameter_scaling_note": "Parameter scaling: auto, manual, none",
      "finite_difference_step": 1e-08,
      "_finite_difference_step_note": "Step size for numerical gradients"
    }
  },
  "performance_settings": {
    "_comment": "Performance and resource management",
    "description": "Performance optimization settings",
    "caching": {
      "_comment": "Data caching configuration",
      "enable_memory_cache": true,
      "_enable_memory_cache_note": "Cache frequently used data in memory",
      "enable_disk_cache": true,
      "_enable_disk_cache_note": "Cache processed data to disk",
      "cache_size_limit_mb": 1000,
      "_cache_size_limit_mb_note": "Maximum memory cache size in MB",
      "auto_cleanup": true,
      "_auto_cleanup_note": "Automatically clean old cache files"
    },
    "parallel_processing": {
      "_comment": "Parallel processing settings",
      "enable_multiprocessing": true,
      "_enable_multiprocessing_note": "Use multiple CPU cores",
      "chunk_size": "auto",
      "_chunk_size_note": "Data chunk size for parallel processing",
      "backend": "threading",
      "_backend_note": "Parallel backend: threading, multiprocessing, joblib"
    },
    "memory_management": {
      "_comment": "Memory usage optimization",
      "low_memory_mode": false,
      "_low_memory_mode_note": "Reduce memory usage at cost of speed",
      "garbage_collection_frequency": 10,
      "_garbage_collection_frequency_note": "How often to run garbage collection",
      "memory_monitoring": false,
      "_memory_monitoring_note": "Monitor memory usage during analysis"
    },
    "numba_optimization": {
      "_comment": "Numba JIT compilation settings",
      "enable_numba": true,
      "_enable_numba_note": "Use Numba JIT compilation for speed",
      "warmup_numba": true,
      "_warmup_numba_note": "Pre-compile Numba functions on startup (enhanced in v0.6.3)",
      "parallel_numba": true,
      "_parallel_numba_note": "Enable Numba parallel processing",
      "cache_numba": true,
      "_cache_numba_note": "Cache compiled Numba functions",
      "stability_enhancements": {
        "_comment": "Performance stability enhancements (v0.6.3)",
        "enable_kernel_warmup": true,
        "_enable_kernel_warmup_note": "Systematic JIT warmup for all computational kernels",
        "warmup_iterations": 5,
        "_warmup_iterations_note": "Number of warmup iterations per kernel",
        "optimize_memory_layout": true,
        "_optimize_memory_layout_note": "Ensure C-contiguous arrays for optimal performance",
        "enable_nogil": true,
        "_enable_nogil_note": "Enable no-GIL mode for better parallel performance",
        "environment_optimization": {
          "_comment": "Automatic numerical environment optimization",
          "auto_configure": true,
          "_auto_configure_note": "Automatically optimize BLAS/threading settings",
          "max_threads": 4,
          "_max_threads_note": "Conservative thread count for optimal stability-performance balance",
          "gc_optimization": true,
          "_gc_optimization_note": "Optimize garbage collection for consistent memory"
        }
      },
      "performance_monitoring": {
        "_comment": "Enhanced performance monitoring (v0.6.3)",
        "enable_profiling": false,
        "_enable_profiling_note": "Enable detailed performance profiling with advanced monitoring",
        "stable_benchmarking": false,
        "_stable_benchmarking_note": "Use stable benchmarking with statistical outlier filtering",
        "adaptive_benchmarking": false,
        "_adaptive_benchmarking_note": "Use adaptive benchmarking with target coefficient of variation",
        "performance_baselines": false,
        "_performance_baselines_note": "Track performance baselines and regression detection",
        "target_cv": 0.10,
        "_target_cv_note": "Aggressive CV target achievable with performance rebalancing (10%)",
        "memory_monitoring": true,
        "_memory_monitoring_note": "Monitor memory usage and trigger automatic cleanup",
        "smart_caching": {
          "_comment": "Memory-aware performance caching",
          "enabled": true,
          "_enabled_note": "Enable smart LRU cache with memory management",
          "max_items": 100,
          "_max_items_note": "Maximum number of cached items",
          "max_memory_mb": 500.0,
          "_max_memory_mb_note": "Maximum cache memory usage in MB"
        }
      }
    },
    "noise_model": {
      "_comment": "MCMC noise model and forward model settings",
      "use_simple_forward_model": false,
      "_use_simple_forward_model_note": "If False (RECOMMENDED), uses full forward model with scaling optimization (consistent with classical optimization). If True, uses simplified MCMC likelihood (faster but inconsistent results)",
      "sigma_prior": 0.1,
      "_sigma_prior_note": "Prior standard deviation for noise parameter in MCMC likelihood",
      "_scaling_consistency_note": "IMPORTANT: If scaling_optimization is enabled in chi_squared_calculation and use_simple_forward_model=True, MCMC results may not be comparable to classical optimization due to different treatment of per-angle scaling"
    }
  },
  "validation_rules": {
    "_comment": "Data validation and quality control",
    "description": "Validation rules and quality checks",
    "data_quality": {
      "_comment": "Data quality validation",
      "check_data_range": true,
      "_check_data_range_note": "Validate data is within expected range",
      "correlation_minimum": 0.0,
      "_correlation_minimum_note": "Minimum allowed correlation value",
      "correlation_maximum": 10.0,
      "_correlation_maximum_note": "Maximum allowed correlation value",
      "check_nan_values": true,
      "_check_nan_values_note": "Check for NaN values in data",
      "nan_handling": "raise",
      "_nan_handling_note": "How to handle NaN: raise, skip, interpolate"
    },
    "parameter_validation": {
      "_comment": "Parameter validation rules",
      "check_bounds": true,
      "_check_bounds_note": "Enforce parameter bounds during optimization",
      "physics_constraints": true,
      "_physics_constraints_note": "Apply physical constraint checks",
      "correlation_checks": true,
      "_correlation_checks_note": "Check for highly correlated parameters"
    },
    "fit_quality": {
      "_comment": "Classical optimization fit quality validation with reduced chi-squared thresholds",
      "_applies_to": "Classical optimization using Nelder-Mead method",
      "overall_chi_squared": {
        "excellent_threshold": 2.0,
        "_excellent_threshold_note": "Overall reduced chi-squared ≤2.0 indicates excellent fit",
        "acceptable_threshold": 5.0,
        "_acceptable_threshold_note": "Overall reduced chi-squared ≤5.0 indicates acceptable fit",
        "warning_threshold": 10.0,
        "_warning_threshold_note": "Issue warning if overall chi-squared exceeds this",
        "critical_threshold": 20.0,
        "_critical_threshold_note": "Flag as critical if chi-squared exceeds this value"
      },
      "per_angle_chi_squared": {
        "excellent_threshold": 2.0,
        "_excellent_threshold_note": "Per-angle reduced chi-squared ≤2.0 indicates excellent fit",
        "acceptable_threshold": 5.0,
        "_acceptable_threshold_note": "Per-angle reduced chi-squared ≤5.0 indicates acceptable fit",
        "warning_threshold": 10.0,
        "_warning_threshold_note": "Per-angle reduced chi-squared >5.0 but ≤10.0 indicates warning level",
        "outlier_threshold_multiplier": 2.5,
        "_outlier_threshold_multiplier_note": "Angles with chi2_red > mean + multiplier*std are outliers",
        "max_outlier_fraction": 0.25,
        "_max_outlier_fraction_note": "Maximum acceptable fraction of outlier angles (0.0-1.0)",
        "min_good_angles": 3,
        "_min_good_angles_note": "Minimum number of angles with acceptable fit required"
      }
    },
    "mcmc_convergence": {
      "_comment": "MCMC convergence validation criteria for Bayesian analysis quality assessment",
      "_applies_to": "MCMC/NUTS sampling methods only",
      "_note": "MCMC uses convergence diagnostics instead of chi-squared for quality assessment",
      "rhat_thresholds": {
        "_comment": "R-hat (potential scale reduction factor) convergence criteria",
        "excellent_threshold": 1.01,
        "_excellent_threshold_note": "R̂ ≤ 1.01 indicates excellent chain convergence",
        "good_threshold": 1.05,
        "_good_threshold_note": "R̂ ≤ 1.05 indicates good chain convergence",
        "acceptable_threshold": 1.1,
        "_acceptable_threshold_note": "R̂ ≤ 1.1 indicates acceptable chain convergence",
        "critical_threshold": 1.2,
        "_critical_threshold_note": "R̂ > 1.2 indicates poor convergence requiring attention"
      },
      "ess_thresholds": {
        "_comment": "Effective Sample Size thresholds for sampling efficiency",
        "excellent_threshold": 400,
        "_excellent_threshold_note": "ESS ≥ 400 indicates excellent sampling efficiency",
        "good_threshold": 200,
        "_good_threshold_note": "ESS ≥ 200 indicates good sampling efficiency",
        "acceptable_threshold": 100,
        "_acceptable_threshold_note": "ESS ≥ 100 indicates acceptable sampling efficiency",
        "minimum_threshold": 50,
        "_minimum_threshold_note": "ESS < 50 indicates inadequate sampling"
      },
      "divergence_thresholds": {
        "_comment": "NUTS divergence diagnostics (if available)",
        "max_divergences_fraction": 0.05,
        "_max_divergences_fraction_note": "Maximum acceptable fraction of divergent transitions",
        "warning_divergences_fraction": 0.01,
        "_warning_divergences_fraction_note": "Issue warning if divergences exceed this fraction"
      },
      "quality_assessment": {
        "_comment": "Combined quality assessment criteria for MCMC",
        "excellent_criteria": "R̂ < 1.01 AND ESS > 400 AND divergences < 1%",
        "good_criteria": "R̂ < 1.05 AND ESS > 200 AND divergences < 3%",
        "acceptable_criteria": "R̂ < 1.1 AND ESS > 100 AND divergences < 5%",
        "poor_criteria": "Any criterion fails to meet acceptable threshold",
        "_interpretation_note": "MCMC quality based on convergence diagnostics, not chi-squared"
      }
    },
    "frame_range": {
      "_comment": "Frame range validation",
      "minimum_frames": 10,
      "_minimum_frames_note": "Minimum number of frames required for analysis",
      "maximum_frames": null,
      "_maximum_frames_note": "Maximum frames to process (null = no limit)",
      "check_continuity": true,
      "_check_continuity_note": "Check for gaps in frame sequence"
    }
  },
  "output_settings": {
    "_comment": "Output and reporting configuration",
    "description": "Output formatting and saving options",
    "file_formats": {
      "_comment": "Output file format preferences",
      "results_format": "json",
      "_results_format_note": "Primary results format: json, hdf5, npz",
      "save_intermediate": false,
      "_save_intermediate_note": "Save intermediate optimization steps",
      "compression": true,
      "_compression_note": "Compress output files",
      "precision": "float64",
      "_precision_note": "Numerical precision for output: float32, float64"
    },
    "reporting": {
      "_comment": "Analysis reporting options",
      "generate_plots": true,
      "_generate_plots_note": "Generate analysis plots automatically",
      "plot_formats": [
        "png",
        "pdf"
      ],
      "_plot_formats_note": "Output plot formats: png, pdf, svg, eps",
      "detailed_summary": true,
      "_detailed_summary_note": "Include detailed parameter summary",
      "convergence_diagnostics": true,
      "_convergence_diagnostics_note": "Include optimization convergence information"
    },
    "plotting": {
      "_comment": "Comprehensive plotting configuration for analysis visualization",
      "description": "Configuration for C2 heatmaps, diagnostic plots, and MCMC plots",
      "general": {
        "_comment": "General plotting settings",
        "create_plots": true,
        "_create_plots_note": "Enable automatic plot generation",
        "plot_format": "png",
        "_plot_format_note": "Default plot format: png, pdf, svg, eps",
        "dpi": 300,
        "_dpi_note": "Resolution for raster formats (dots per inch)",
        "figure_size": [
          10,
          8
        ],
        "_figure_size_note": "Default figure size in inches [width, height]",
        "style": "publication",
        "_style_note": "Plot style: publication, presentation, notebook",
        "save_plots": true,
        "_save_plots_note": "Save plots to files",
        "show_plots": false,
        "_show_plots_note": "Display plots interactively (use false for batch processing)"
      },
      "c2_heatmaps": {
        "_comment": "C2 correlation function heatmap settings",
        "enabled": true,
        "_enabled_note": "Generate C2 correlation function heatmaps",
        "layout": "single_row",
        "_layout_note": "Layout style: single_row (1x3), stacked (3x1), compact (2x2)",
        "include_experimental": true,
        "_include_experimental_note": "Show experimental data heatmap",
        "include_theoretical": true,
        "_include_theoretical_note": "Show theoretical model heatmap",
        "include_residuals": true,
        "_include_residuals_note": "Show residuals (experimental - theoretical) heatmap",
        "colormap": "viridis",
        "_colormap_note": "Colormap for heatmaps: viridis, plasma, inferno, magma, RdYlBu",
        "colorbar_position": "right",
        "_colorbar_position_note": "Colorbar position: right, bottom, separate",
        "title_prefix": "C2 Correlation Function",
        "_title_prefix_note": "Prefix for heatmap titles",
        "figsize": [
          15,
          5
        ],
        "_figsize_note": "Figure size for C2 heatmaps [width, height]"
      },
      "mcmc_plots": {
        "_comment": "MCMC analysis visualization settings",
        "enabled": true,
        "_enabled_note": "Generate MCMC analysis plots (requires ArviZ)",
        "corner_plots": {
          "_comment": "Corner plot settings for posterior distributions",
          "enabled": true,
          "_enabled_note": "Generate corner plots showing parameter correlations",
          "show_titles": true,
          "_show_titles_note": "Show parameter names as subplot titles",
          "quantiles": [
            0.16,
            0.5,
            0.84
          ],
          "_quantiles_note": "Quantile lines to show (16th, 50th, 84th percentiles)",
          "show_truths": false,
          "_show_truths_note": "Show true parameter values if known",
          "use_arviz": true,
          "_use_arviz_note": "Use ArviZ for corner plots (recommended)",
          "figsize": [
            12,
            12
          ],
          "_figsize_note": "Figure size for corner plots"
        },
        "trace_plots": {
          "_comment": "MCMC trace plot settings",
          "enabled": true,
          "_enabled_note": "Generate trace plots showing MCMC chain evolution",
          "show_chains": true,
          "_show_chains_note": "Show individual chain traces",
          "show_warmup": false,
          "_show_warmup_note": "Include warmup/tuning period in plots",
          "compact_layout": false,
          "_compact_layout_note": "Use compact subplot layout",
          "figsize": [
            12,
            8
          ],
          "_figsize_note": "Figure size for trace plots"
        },
        "convergence_diagnostics": {
          "_comment": "MCMC convergence diagnostic plots",
          "enabled": true,
          "_enabled_note": "Generate convergence diagnostic plots",
          "show_rhat": true,
          "_show_rhat_note": "Show R-hat convergence diagnostic",
          "show_ess": true,
          "_show_ess_note": "Show effective sample size diagnostic",
          "show_mcse": true,
          "_show_mcse_note": "Show Monte Carlo standard error",
          "show_energy": true,
          "_show_energy_note": "Show energy plots for HMC/NUTS diagnostics",
          "rhat_threshold": 1.1,
          "_rhat_threshold_note": "R-hat threshold for convergence warning",
          "ess_threshold": 100,
          "_ess_threshold_note": "Minimum effective sample size threshold"
        }
      },
      "diagnostic_plots": {
        "_comment": "General diagnostic and quality assessment plots",
        "enabled": true,
        "_enabled_note": "Generate diagnostic plots",
        "chi_squared_summary": true,
        "_chi_squared_summary_note": "Plot chi-squared fit quality summary",
        "parameter_correlations": true,
        "_parameter_correlations_note": "Show parameter correlation matrix",
        "residual_analysis": true,
        "_residual_analysis_note": "Generate residual analysis plots",
        "convergence_history": true,
        "_convergence_history_note": "Plot optimization convergence history"
      },
      "output": {
        "_comment": "Plot output and file management",
        "base_directory": "./plots",
        "_base_directory_note": "Base directory for saving plots",
        "subdirectories": {
          "c2_heatmaps": "c2_correlation",
          "parameter_plots": "parameters",
          "mcmc_plots": "mcmc_analysis",
          "diagnostics": "diagnostics"
        },
        "_subdirectories_note": "Organize plots into subdirectories by type",
        "filename_template": "{analysis_type}_{timestamp}_{method}",
        "_filename_template_note": "Template for plot filenames",
        "include_timestamp": true,
        "_include_timestamp_note": "Include timestamp in filenames",
        "overwrite_existing": false,
        "_overwrite_existing_note": "Overwrite existing plot files"
      }
    },
    "logging": {
      "_comment": "Logging configuration",
      "log_level": "INFO",
      "_log_level_note": "Logging level: DEBUG, INFO, WARNING, ERROR",
      "log_to_file": true,
      "_log_to_file_note": "Save logs to file",
      "log_to_console": true,
      "_log_to_console_note": "Display logs in console",
      "log_filename": "homodyne_analysis.log",
      "_log_filename_note": "Log file name",
      "rotation": {
        "max_bytes": 10485760,
        "_max_bytes_note": "Maximum log file size (10MB)",
        "backup_count": 3,
        "_backup_count_note": "Number of backup log files to keep"
      },
      "_cli_logging_options": {
        "_comment": "Command-line logging control options",
        "verbose_flag": "--verbose enables DEBUG level logging with detailed output",
        "quiet_flag": "--quiet disables console logging while keeping file logging enabled",
        "default_behavior": "INFO level logging to both console and file",
        "conflict_resolution": "--verbose and --quiet cannot be used together",
        "file_logging": "File logging is always enabled regardless of console settings"
      }
    }
  },
  "_usage_examples": {
    "_comment": "Examples of common configuration patterns with homodyne v0.6.3",
    "description": "Common usage patterns and examples",
    "quick_start": {
      "description": "Minimal configuration for getting started",
      "cli_commands": [
        "homodyne-config --mode static_isotropic --sample YOUR_SAMPLE",
        "homodyne --config my_config.json --method classical",
        "homodyne --config my_config.json --method all --verbose"
      ],
      "required_changes": [
        "Update experimental_data.data_folder_path with your data directory",
        "Update experimental_data.data_file_name with your data file",
        "Adjust analyzer_parameters.temporal.dt to match your acquisition time",
        "Set analyzer_parameters.scattering.wavevector_q for your geometry",
        "Estimate initial_parameters.values based on your system"
      ]
    },
    "high_performance": {
      "description": "Configuration for high-performance computing with v0.6.3 breakthrough optimizations",
      "settings": {
        "analyzer_parameters.computational.num_threads": "auto",
        "performance_settings.caching.enable_memory_cache": true,
        "performance_settings.parallel_processing.enable_multiprocessing": true,
        "performance_settings.numba_optimization.enable_numba": true,
        "performance_settings.numba_optimization.warmup_numba": true,
        "performance_settings.numba_optimization.performance_monitoring.stable_benchmarking": true,
        "optimization_config.mcmc_sampling.cores": 8,
        "output_settings.plotting.general.dpi": 150
      }
    },
    "low_memory": {
      "description": "Configuration for memory-constrained systems",
      "settings": {
        "performance_settings.memory_management.low_memory_mode": true,
        "performance_settings.caching.cache_size_limit_mb": 100,
        "experimental_data.data_type": "float32",
        "output_settings.plotting.general.dpi": 150,
        "optimization_config.mcmc_sampling.draws": 5000
      }
    },
    "reproducible_research": {
      "description": "Settings for reproducible results",
      "settings": {
        "optimization_config.mcmc_sampling.chains": 4,
        "output_settings.save_intermediate": true,
        "output_settings.detailed_summary": true,
        "workflow_integration.mcmc_integration.auto_save_traces": true,
        "output_settings.plotting.general.create_plots": true
      }
    },
    "comprehensive_plotting": {
      "description": "Full plotting and visualization configuration",
      "settings": {
        "output_settings.plotting.c2_heatmaps.enabled": true,
        "output_settings.plotting.mcmc_plots.enabled": true,
        "output_settings.plotting.diagnostic_plots.enabled": true,
        "workflow_integration.analysis_workflow.auto_generate_plots": true,
        "output_settings.plotting.general.plot_format": "pdf",
        "output_settings.plotting.general.dpi": 300
      }
    },
    "mcmc_focused": {
      "description": "Configuration optimized for MCMC analysis",
      "settings": {
        "optimization_config.mcmc_sampling.enabled": true,
        "optimization_config.mcmc_sampling.draws": 15000,
        "optimization_config.mcmc_sampling.tune": 2000,
        "optimization_config.mcmc_sampling.thin": 2,
        "optimization_config.mcmc_sampling.chains": 6,
        "optimization_config.mcmc_sampling.target_accept": 0.95,
        "output_settings.plotting.mcmc_plots.corner_plots.enabled": true,
        "output_settings.plotting.mcmc_plots.trace_plots.enabled": true,
        "output_settings.plotting.mcmc_plots.convergence_diagnostics.enabled": true,
        "workflow_integration.mcmc_integration.auto_save_traces": true
      }
    },
    "publication_quality": {
      "description": "Settings for publication-quality figures",
      "settings": {
        "output_settings.plotting.general.dpi": 300,
        "output_settings.plotting.general.plot_format": "pdf",
        "output_settings.plotting.general.style": "publication",
        "output_settings.plotting.c2_heatmaps.figsize": [
          12,
          4
        ],
        "output_settings.plotting.mcmc_plots.corner_plots.figsize": [
          10,
          10
        ],
        "output_settings.reporting.plot_formats": [
          "pdf",
          "svg"
        ],
        "output_settings.plotting.general.show_plots": false
      }
    }
  },
  "_troubleshooting": {
    "_comment": "Common issues and solutions",
    "description": "Troubleshooting guide for common problems",
    "optimization_not_converging": {
      "problem": "Optimization fails to converge or gives poor results",
      "solutions": [
        "Check initial_parameters.values - they should be reasonable estimates",
        "Adjust parameter_space.bounds to be physically meaningful",
        "Increase optimization_config.classical_optimization.method_options.maxiter",
        "Try different analysis modes: homodyne --static-isotropic for simpler cases",
        "Use config generator: homodyne-config --mode MODE --sample SAMPLE",
        "Enable performance monitoring for debugging: performance_settings.numba_optimization.performance_monitoring.enable_profiling: true",
        "Check data quality and preprocessing settings"
      ]
    },
    "memory_errors": {
      "problem": "Out of memory errors during analysis",
      "solutions": [
        "Enable performance_settings.memory_management.low_memory_mode",
        "Reduce performance_settings.caching.cache_size_limit_mb",
        "Use experimental_data.data_type: 'float32'",
        "Reduce analyzer_parameters.temporal frame range",
        "Decrease analyzer_parameters.computational.num_threads"
      ]
    },
    "slow_performance": {
      "problem": "Analysis runs very slowly",
      "solutions": [
        "Enable performance_settings.numba_optimization.enable_numba",
        "Increase analyzer_parameters.computational.num_threads",
        "Enable performance_settings.caching.enable_memory_cache",
        "Use experimental_data.cache_compression: true",
        "Consider reducing precision with data_type: 'float32'",
        "Reduce plotting resolution: output_settings.plotting.general.dpi: 150"
      ]
    },
    "plotting_errors": {
      "problem": "Plotting functions fail or produce errors",
      "solutions": [
        "Check that matplotlib is installed: pip install matplotlib",
        "For MCMC plots, install ArviZ: pip install arviz",
        "For enhanced corner plots, install corner: pip install corner",
        "Set output_settings.plotting.general.show_plots: false for headless systems",
        "Enable workflow_integration.error_handling.continue_on_plot_errors: true",
        "Check output_settings.plotting.output.base_directory permissions",
        "Reduce figure complexity: disable some plot types in plotting config"
      ]
    },
    "mcmc_convergence_issues": {
      "problem": "MCMC sampling does not converge properly",
      "solutions": [
        "Increase optimization_config.mcmc_sampling.tune (try 3000-5000)",
        "Increase optimization_config.mcmc_sampling.target_accept to 0.95",
        "Add more chains: optimization_config.mcmc_sampling.chains: 6 or 8",
        "Increase draws: optimization_config.mcmc_sampling.draws: 15000+",
        "Check parameter bounds are reasonable in parameter_space.bounds",
        "Use better initial parameter estimates from classical optimization",
        "Enable output_settings.plotting.mcmc_plots.convergence_diagnostics to diagnose issues"
      ]
    },
    "missing_dependencies": {
      "problem": "ImportError for optional plotting or MCMC packages",
      "solutions": [
        "Install complete plotting suite: pip install matplotlib seaborn arviz corner",
        "For MCMC functionality: pip install pymc arviz",
        "For enhanced plotting: pip install corner",
        "Check package versions are compatible",
        "Set plotting.mcmc_plots.enabled: false if MCMC plotting not needed",
        "Use plotting.general.fallback_plotting: true for basic plots only"
      ]
    },
    "large_data_plotting": {
      "problem": "Plotting fails with large datasets or out of memory errors",
      "solutions": [
        "Reduce plotting resolution: plotting.general.dpi: 150",
        "Use plotting.c2_heatmaps.layout: 'compact' instead of 'single_row'",
        "Enable workflow_integration.data_management.auto_cleanup_cache: true",
        "Reduce MCMC sample size for plotting: use subset of traces",
        "Set plotting.general.figure_size to smaller values",
        "Enable experimental_data.cache_compression: true"
      ]
    }
  }
}