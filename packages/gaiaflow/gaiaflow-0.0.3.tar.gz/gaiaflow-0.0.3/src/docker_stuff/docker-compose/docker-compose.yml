x-airflow-common:
  &airflow-common
  build:
    context: ../../
    dockerfile: "./docker_stuff/airflow/Dockerfile"
  environment:
    &airflow-common-env
    # NOTE: The following secret can be commited to .git as it is only for local development.
    AIRFLOW__API_AUTH__JWT_SECRET: 'dkWAUJ756yP9oJhTXhG0nj-wTvRJMoSTioGFHECuO0k'
    AIRFLOW__API__BASE_URL: http://localhost:8080

    AIRFLOW__CORE__AUTH_MANAGER: "airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: ''

    AIRFLOW__CORE__LOAD_EXAMPLES: false

    AIRFLOW__LOGGING__LOGGING_LEVEL: 'DEBUG'

    AIRFLOW__DAG_PROCESSOR__REFRESH_INTERVAL: 0

    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow

    AWS_ACCESS_KEY_ID: minio
    AWS_SECRET_ACCESS_KEY: minio123
    MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    MLFLOW_TRACKING_URI: http://mlflow:5000

    PYTHONNOUSERSITE: 1

    DOCKER_HOST: unix:///var/run/docker.sock
#    DOCKER_HOST: tcp://host.docker.internal:2375

  user: "${AIRFLOW_UID:-50000}:0"

  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./data:/opt/airflow/data
    - ./.env:/opt/airflow/.env

  extra_hosts:
    - "host.docker.internal:host-gateway"

  depends_on:
    &airflow-common-depends-on
    postgres-airflow:
      condition: service_healthy

  networks:
    - ml-network

services:

  postgres-mlflow:
    image: postgres:13
    container_name: postgres-mlflow
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "mlflow" ]
      interval: 5s
      retries: 5
    volumes:
      - postgres-db-volume-mlflow:/var/lib/postgresql/data
    restart: always
    networks:
      - ml-network

  mlflow:
    build:
      context: ..
      dockerfile: "../docker_stuff/mlflow/Dockerfile"
    container_name: mlflow
    ports:
      - 5000:5000
    depends_on:
      postgres-mlflow:
        condition: service_healthy
    command: mlflow ui -p 5000 --host 0.0.0.0 
            --default-artifact-root s3://mlflow --artifacts-destination s3://mlflow
            --backend-store-uri postgresql://mlflow:mlflow@postgres-mlflow/mlflow --serve-artifacts
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000

    restart: always
    networks:
      - ml-network

  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - ml-network

  airflow-apiserver:
    container_name: airflow-apiserver
    <<: *airflow-common
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    command: api-server
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/api/v2/version" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    container_name: airflow-dag-processor
    <<: *airflow-common
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    command: dag-processor
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-scheduler:
    container_name: airflow-scheduler
    <<: *airflow-common
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-dag-processor:
        condition: service_healthy

  airflow-triggerer:
    container_name: airflow-triggerer
    <<: *airflow-common
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    command: triggerer
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    container_name: airflow-init
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - "-c"
      - |
        echo "=== FORCING USER CREATION ==="
        echo "Airflow's auth manager check is broken on windows, creating user manually..."

        # Create the user directly, bypassing the broken auth manager check
        /entrypoint airflow users create \
            --username "${_AIRFLOW_WWW_USER_USERNAME:-admin}" \
            --firstname "Admin" \
            --lastname "User" \
            --role "Admin" \
            --email "admin@example.com" \
            --password "${_AIRFLOW_WWW_USER_PASSWORD:-admin}" \
            --verbose || echo "User creation failed or user already exists"

        echo "=== USER CREATION COMPLETED ==="
        python -c "import airflow.providers.fab.auth_manager.fab_auth_manager; print('FAB provider imported successfully')"
        python -c "from airflow.configuration import conf; print('Detected auth manager:', conf.get('core', 'auth_manager'))"
        if [[ -z "${AIRFLOW_UID}" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        echo "If you are on Linux, you SHOULD follow the instructions below to set "
        echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
        echo "For other operating systems you can get rid of the warning with manually created .env file:"
        echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
        echo
        export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
        echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
        echo
        warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
        echo "At least 2 CPUs recommended. You have $${cpus_available}"
        echo
        warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
        echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
        echo
        warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
        echo "Please follow the instructions to increase amount of resources available:"
        echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        airflow db migrate
        echo "Migration complete"

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW__CORE__AUTH_MANAGER: "airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager"
    user: "0:0"
    restart: no

  minio:
    restart: always
    image: minio/minio
    container_name: minio
    ports:
        - "9000:9000"
        - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
        - MINIO_ROOT_USER=minio
        - MINIO_ROOT_PASSWORD=minio123
        - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      retries: 5
    networks:
      - ml-network

  minio_client:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    container_name: minio_client
    entrypoint: >
        /bin/sh -c "
        /usr/bin/mc alias set minio http://minio:9000 minio minio123 &&
        /usr/bin/mc mb minio/mlflow;
        exit 0;
        "
    networks:
      - ml-network

networks:
  ml-network:
    driver: bridge

volumes:
    postgres-db-volume-mlflow:
    postgres-db-volume-airflow:
    minio_data: