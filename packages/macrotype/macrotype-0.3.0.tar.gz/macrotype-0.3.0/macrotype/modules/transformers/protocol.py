from __future__ import annotations

"""Prune autogenerated methods from ``typing.Protocol`` classes."""

from typing import Any

from macrotype.modules.ir import ClassDecl, FuncDecl, ModuleDecl

# Methods inserted by ``Protocol`` machinery or otherwise disallowed
# on ``Protocol`` classes which should be removed from stubs.
_PROTOCOL_METHOD_NAMES = {
    "_proto_hook",
    "_no_init_or_replace_init",
    "__init__",
    "__subclasshook__",
}


def _transform_class(sym: ClassDecl, cls: type[Any]) -> None:
    if getattr(cls, "_is_protocol", False):
        sym.members = tuple(
            m
            for m in sym.members
            if not (isinstance(m, FuncDecl) and m.name in _PROTOCOL_METHOD_NAMES)
        )
        if getattr(cls, "_is_runtime_protocol", False):
            if "runtime_checkable" not in sym.decorators:
                sym.decorators = sym.decorators + ("runtime_checkable",)


def prune_protocol_methods(mi: ModuleDecl) -> None:
    """Remove Protocol-generated methods within ``mi``."""

    for sym in mi.get_all_decls():
        if isinstance(sym, ClassDecl):
            cls = sym.obj
            if isinstance(cls, type):
                _transform_class(sym, cls)
