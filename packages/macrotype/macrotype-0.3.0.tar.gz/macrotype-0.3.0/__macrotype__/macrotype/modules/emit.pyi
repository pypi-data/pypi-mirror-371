# Generated via: macrotype macrotype/modules/emit.py -o __macrotype__/macrotype/modules/emit.pyi
# Do not edit by hand
from __future__ import annotations
from macrotype.modules.ir import AnnExpr, ClassDecl, Decl, FuncDecl, ModuleDecl, TypeDefDecl, VarDecl

from typing import Any, Iterable, ParamSpec, TypeVar, TypeVarTuple

INDENT: str

_TYPING_ATTR_TYPES: tuple[type, ...]

_UNION_ORIGINS: tuple[Any, ...]

def _qualname(obj: Any, default: None | str) -> str: ...

def emit_module(mi: ModuleDecl) -> list[str]: ...

def _add_comment(line: str, comment: None | str) -> str: ...

def collect_all_annotations(mi: ModuleDecl) -> list[Any]: ...

def _origin_and_args(obj: Any) -> tuple[Any | None, tuple[Any, ...]]: ...

def flatten_annotation_atoms(ann: Any) -> dict[int, Any]: ...

def build_name_map(atoms: Iterable[Any], context: dict[str, Any]) -> dict[int, str]: ...

def stringify_annotation(ann: Any, name_map: dict[int, str], module_name: None | str) -> str: ...

def stringify_value(val: Any, name_map: dict[int, str]) -> str: ...

def _emit_decl(sym: Decl, name_map: dict[int, str], module_name: str, indent: int) -> list[str]: ...

def _stringify_typevar(tv: TypeVar, name_map: dict[int, str], module_name: str) -> str: ...

def _stringify_paramspec(ps: ParamSpec) -> str: ...

def _stringify_typevartuple(tv: TypeVarTuple) -> str: ...
