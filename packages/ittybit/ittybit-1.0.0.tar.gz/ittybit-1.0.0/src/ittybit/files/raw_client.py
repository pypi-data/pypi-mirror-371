# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from .types.files_create_response import FilesCreateResponse
from .types.files_delete_response import FilesDeleteResponse
from .types.files_get_response import FilesGetResponse
from .types.files_list_response_item import FilesListResponseItem
from .types.files_update_response import FilesUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawFilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[FilesListResponseItem]]:
        """
        Retrieves a paginated list of all files associated with the current project.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[FilesListResponseItem]]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "files",
            method="GET",
            params={
                "page": page,
                "limit": limit,
            },
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FilesListResponseItem],
                    construct_type(
                        type_=typing.List[FilesListResponseItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        url: str,
        media_id: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        ref: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[FilesCreateResponse]:
        """
        Creates a new file from a publicly accessible or signed URL.

        Parameters
        ----------
        url : str

        media_id : typing.Optional[str]

        folder : typing.Optional[str]

        filename : typing.Optional[str]

        ref : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FilesCreateResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            "files",
            method="POST",
            json={
                "url": url,
                "media_id": media_id,
                "folder": folder,
                "filename": filename,
                "ref": ref,
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesCreateResponse,
                    construct_type(
                        type_=FilesCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FilesGetResponse]:
        """
        Retrieve the file object for a file with the given ID.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FilesGetResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="GET",
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesGetResponse,
                    construct_type(
                        type_=FilesGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[FilesDeleteResponse]:
        """
        Permanently removes a file from the system. This action cannot be undone.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FilesDeleteResponse]
            Accepted
        """
        _response = self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="DELETE",
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesDeleteResponse,
                    construct_type(
                        type_=FilesDeleteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        id: str,
        *,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        ref: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[FilesUpdateResponse]:
        """
        Update a file's `filename`, `folder`, `ref`, or `metadata`. Only the specified fields will be updated.

        Parameters
        ----------
        id : str

        folder : typing.Optional[str]

        filename : typing.Optional[str]

        ref : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[FilesUpdateResponse]
            Success
        """
        _response = self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "folder": folder,
                "filename": filename,
                "ref": ref,
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesUpdateResponse,
                    construct_type(
                        type_=FilesUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[FilesListResponseItem]]:
        """
        Retrieves a paginated list of all files associated with the current project.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[FilesListResponseItem]]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "files",
            method="GET",
            params={
                "page": page,
                "limit": limit,
            },
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[FilesListResponseItem],
                    construct_type(
                        type_=typing.List[FilesListResponseItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        url: str,
        media_id: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        ref: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[FilesCreateResponse]:
        """
        Creates a new file from a publicly accessible or signed URL.

        Parameters
        ----------
        url : str

        media_id : typing.Optional[str]

        folder : typing.Optional[str]

        filename : typing.Optional[str]

        ref : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FilesCreateResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            "files",
            method="POST",
            json={
                "url": url,
                "media_id": media_id,
                "folder": folder,
                "filename": filename,
                "ref": ref,
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesCreateResponse,
                    construct_type(
                        type_=FilesCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FilesGetResponse]:
        """
        Retrieve the file object for a file with the given ID.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FilesGetResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="GET",
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesGetResponse,
                    construct_type(
                        type_=FilesGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[FilesDeleteResponse]:
        """
        Permanently removes a file from the system. This action cannot be undone.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FilesDeleteResponse]
            Accepted
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="DELETE",
            headers={
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesDeleteResponse,
                    construct_type(
                        type_=FilesDeleteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        id: str,
        *,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        ref: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[FilesUpdateResponse]:
        """
        Update a file's `filename`, `folder`, `ref`, or `metadata`. Only the specified fields will be updated.

        Parameters
        ----------
        id : str

        folder : typing.Optional[str]

        filename : typing.Optional[str]

        ref : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[FilesUpdateResponse]
            Success
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"files/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "folder": folder,
                "filename": filename,
                "ref": ref,
                "metadata": metadata,
            },
            headers={
                "content-type": "application/json",
                "Accept-Version": "2025-08-20",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    FilesUpdateResponse,
                    construct_type(
                        type_=FilesUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
