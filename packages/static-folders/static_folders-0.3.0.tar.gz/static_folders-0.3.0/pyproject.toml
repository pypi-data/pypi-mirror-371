[project]
name = "static-folders"
version = "0.3.0"
description = "Modelling Static folder structures for python applications"
readme = "README.md"
authors = [
    { name = "Matt Richards", email = "mrichards7@outlook.com.au" }
]
requires-python = ">=3.7"
dependencies = [
    "attrs>=24.2.0",
    "typing-extensions>=4.7.1 ; python_version < '3.13'",
    # typing.TypeVar issue in typing extensions
    "typing-extensions>=4.14.0 ; python_version >= '3.13'",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "mypy>=1.4 ; python_full_version == '3.7.*'", # newest version internally supporting 3.7.x
    "mypy>=1.14 ; python_full_version == '3.8.*'",
    "mypy>=1.15 ; python_full_version >= '3.9'",
    #    "mypy==1.8", # newest version of mypy supporting --python-version 3.7, but from an external venv
    #  uvx --with attrs mypy .
    # uvx mypy@1.8 --with attrs --with . --python-version 3.7 .
    #  uvx --with . --with attrs mypy .
    "pytest>=7.4.4",
    "ruff>=0.11.2",
]


[tool.ruff]
line-length = 120
target-version = "py37"

[tool.ruff.lint]
unfixable = []
typing-modules = []

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E", "W",
  # flake8-2020
  "YTT",
  # flake8-annotations
  "ANN",
  # flake8-bandit
  "S",
  # flake8-boolean-trap
  "FBT",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
   # flake8-commas
  "COM",
  # flake8-comprehensions
  "C4",
  # flake8-datetimez
#  "DTZ", # not relevant for static folders, but I may want to reuse this list in future
  # flake8-errmsg
  "EM",
  # flake8-future-annotations
  "FA",
  # explicit-string-concatenation
  "ISC001", "ISC003",
  # flake8-import-conventions
  "ICN",
#  "flake8-no-pep420",
  "INP",
  # flake8-quotes
  "Q",
  # flake8-debugger
  "T10",
  # flake8-gettext
  "INT",
  # pylint
  "PL",
  # flake8-pytest-style
  "PT",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # type-checking imports
  "TCH",
  # comprehensions
  "C4",
  # pygrep-hooks
  "PGH",
  # Ruff-specific rules
  "RUF",
  # flake8-bandit: exec-builtin
  "S102",
  # numpy-legacy-random
  "NPY002",
  # Perflint
  "PERF",
  # flynt
  "FLY",
  # flake8-logging-format
  "G",
  # flake8-future-annotations
  "FA",
  # unconventional-import-alias
  "ICN001",
  # flake8-slots
  "SLOT",
  # flake8-raise
  "RSE",
  # flake8-simplify
  "SIM",
  "TC",
  "PLE",
  "RUF",
  "PLR"
]

ignore = [
  ### Intentionally disabled
    "COM812","COM819", # ensured by formatter already
  # module level import not at top of file
#  "E402",
  "SIM108", # prefer ternaries (makes stuff hard to read)
  # Default ignores, incrementally disabled
#  # do not assign a lambda expression, use a def
#  "E731",
#  # controversial
#  "B007",
#  # controversial
#  "B008",
#  # getattr is used to side-step mypy
#  "B010",
#  # tests use comparisons but not their returned value
#  "B015",
#  # Function definition does not bind loop variable
#  "B023",
#  # Only works with python >=3.10
#  "B905",
#  # Too many arguments to function call
#  "PLR0913",
#  # Too many returns
#  "PLR0911",
#  # Too many branches
#  "PLR0912",
#  # Too many statements
#  "PLR0915",
#  # Redefined loop name
#  "PLW2901",
#  # Global statements are discouraged
#  "PLW0603",
#  # Use `typing.NamedTuple` instead of `collections.namedtuple`
#  "PYI024",
#  # Use of possibly insecure function; consider using ast.literal_eval
#  "S307",
#  # while int | float can be shortened to float, the former is more explicit
#  "PYI041",
#  # incorrect-dict-iterator, flags valid Series.items usage
#  "PERF102",
#  # try-except-in-loop, becomes useless in Python 3.11
#  "PERF203",
#  # pytest-parametrize-names-wrong-type
#  "PT006",
#  # pytest-parametrize-values-wrong-type
#  "PT007",
#  # pytest-patch-with-lambda
#  "PT008",
#  # pytest-raises-with-multiple-statements
#  "PT012",
#  # pytest-assert-in-except
#  "PT017",
#  # pytest-composite-assertion
#  "PT018",
#  # pytest-fixture-param-without-value
#  "PT019",
  # The following rules may cause conflicts when used with the formatter:
#  "ISC001",
  # if-stmt-min-max
#  "PLR1730",

]

[tool.ruff.lint.per-file-ignores]
"test/*" = [
  "S101", # assert is fine with pytest tests
  "INP001", # tests aren't proper packages to be imported, okay to ignore
]

