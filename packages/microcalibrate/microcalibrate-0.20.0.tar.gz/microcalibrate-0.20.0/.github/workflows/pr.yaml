name: Pull request
on:
  pull_request:
    branches: [ main ]

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install relevant dependencies
        run: |
          uv pip install black isort linecheck --system
      - name: Check code formatting
        run: make check-format

  Test:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: ["3.13"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          uv pip install -e ".[dev]" --system
      - name: Run tests with coverage
        run: make test
      - name: Upload calibration log
        if: always() # even if tests fail, to inspect the file
        uses: actions/upload-artifact@v4
        with:
          name: calibration-log-${{ github.sha }}
          path: microcalibration-dashboard/public/calibration_log.csv
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          uv pip install -e ".[dev,docs]" --system
      - name: Build package
        run: make build
      - name: Test documentation builds
        run: make documentation
      - name: Check documentation build
        run: |
          for notebook in $(find docs/_build/jupyter_execute -name "*.ipynb"); do
            if grep -q '"output_type": "error"' "$notebook"; then
              echo "Error found in $notebook"
              cat "$notebook"
              exit 1
            fi
          done