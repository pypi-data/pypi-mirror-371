# Generated by cloudcoil-model-codegen v0.5.8
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, Literal, Optional, Type, Union, cast, overload

from cloudcoil import apimachinery
from cloudcoil.pydantic import (
    BaseBuilder,
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    Never,
    Self,
)
from cloudcoil.resources import Resource
from pydantic import Field, RootModel


class Period(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Period"]:
            return Period

        def build(self) -> "Period":
            return Period(**self._attrs)

        def from_time(self, value: Optional[Union[str, float]], /) -> Self:
            return self._set("from_time", value)

        def to_time(self, value: Optional[Union[str, float]], /) -> Self:
            return self._set("to_time", value)

    class BuilderContext(BuilderContextBase["Period.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Period.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Period."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Period", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Period.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    from_time: Annotated[Optional[Union[str, float]], Field(alias="fromTime")] = None
    to_time: Annotated[Optional[Union[str, float]], Field(alias="toTime")] = None


class GateSpec(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["GateSpec"]:
            return GateSpec

        def build(self) -> "GateSpec":
            return GateSpec(**self._attrs)

        def type(self, value: Literal["connection", "raw", "raw"], /) -> Self:
            return self._set("type", value)

        @overload
        def period(self, value_or_callback: Optional[Period], /) -> "GateSpec.Builder": ...

        @overload
        def period(
            self,
            value_or_callback: Callable[[Period.Builder], Period.Builder | Period],
            /,
        ) -> "GateSpec.Builder": ...

        @overload
        def period(self, value_or_callback: Never = ...) -> "Period.BuilderContext": ...

        def period(self, value_or_callback=None, /):
            """
            Time during which gate takes effect
            """
            if self._in_context and value_or_callback is None:
                context = Period.BuilderContext()
                context._parent_builder = self
                context._field_name = "period"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Period.builder())
                if isinstance(output, Period.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("period", value)

        def conn_src(self, value: Optional[str], /) -> Self:
            """
            NetRef for connection source
            """
            return self._set("conn_src", value)

        def conn_dst(self, value: Optional[str], /) -> Self:
            """
            NetRef for connection destination
            """
            return self._set("conn_dst", value)

        def expression(self, value: Optional[str], /) -> Self:
            """
            Optional nftables expression to further scope the gate
            """
            return self._set("expression", value)

        def rule(self, value: str, /) -> Self:
            """
            Raw nft rule/expression
            """
            return self._set("rule", value)

    class BuilderContext(BuilderContextBase["GateSpec.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = GateSpec.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for GateSpec."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["GateSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use GateSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    type: Literal["connection", "raw", "raw"]
    period: Optional[Period] = None
    """
    Time during which gate takes effect
    """
    conn_src: Annotated[
        Optional[str],
        Field(
            alias="connSrc",
            pattern="^(known|unkown|any-vulnbox|any-team|same-team|other-team)|((team-|vulnbox-|game-).{1,13})",
        ),
    ] = None
    """
    NetRef for connection source
    """
    conn_dst: Annotated[
        Optional[str],
        Field(
            alias="connDst",
            pattern="^(known|unkown|any-vulnbox|any-team|same-team|other-team)|((team-|vulnbox-|game-).{1,13})",
        ),
    ] = None
    """
    NetRef for connection destination
    """
    expression: Optional[str] = None
    """
    Optional nftables expression to further scope the gate
    """
    rule: str
    """
    Raw nft rule/expression
    """


class GateSpecModel(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["GateSpecModel"]:
            return GateSpecModel

        def build(self) -> "GateSpecModel":
            return GateSpecModel(**self._attrs)

        def type(self, value: Literal["connection", "raw", "connection"], /) -> Self:
            return self._set("type", value)

        @overload
        def period(self, value_or_callback: Optional[Period], /) -> "GateSpecModel.Builder": ...

        @overload
        def period(
            self,
            value_or_callback: Callable[[Period.Builder], Period.Builder | Period],
            /,
        ) -> "GateSpecModel.Builder": ...

        @overload
        def period(self, value_or_callback: Never = ...) -> "Period.BuilderContext": ...

        def period(self, value_or_callback=None, /):
            """
            Time during which gate takes effect
            """
            if self._in_context and value_or_callback is None:
                context = Period.BuilderContext()
                context._parent_builder = self
                context._field_name = "period"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Period.builder())
                if isinstance(output, Period.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("period", value)

        def conn_src(self, value: Optional[str], /) -> Self:
            """
            NetRef for connection source
            """
            return self._set("conn_src", value)

        def conn_dst(self, value: Optional[str], /) -> Self:
            """
            NetRef for connection destination
            """
            return self._set("conn_dst", value)

        def expression(self, value: Optional[str], /) -> Self:
            """
            Optional nftables expression to further scope the gate
            """
            return self._set("expression", value)

        def rule(self, value: Optional[str], /) -> Self:
            """
            Raw nft rule/expression
            """
            return self._set("rule", value)

    class BuilderContext(BuilderContextBase["GateSpecModel.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = GateSpecModel.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for GateSpecModel."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["GateSpecModel", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use GateSpecModel.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    type: Literal["connection", "raw", "connection"]
    period: Optional[Period] = None
    """
    Time during which gate takes effect
    """
    conn_src: Annotated[
        Optional[str],
        Field(
            alias="connSrc",
            pattern="^(known|unkown|any-vulnbox|any-team|same-team|other-team)|((team-|vulnbox-|game-).{1,13})",
        ),
    ] = None
    """
    NetRef for connection source
    """
    conn_dst: Annotated[
        Optional[str],
        Field(
            alias="connDst",
            pattern="^(known|unkown|any-vulnbox|any-team|same-team|other-team)|((team-|vulnbox-|game-).{1,13})",
        ),
    ] = None
    """
    NetRef for connection destination
    """
    expression: Optional[str] = None
    """
    Optional nftables expression to further scope the gate
    """
    rule: Optional[str] = None
    """
    Raw nft rule/expression
    """


class GateSpecModel1(RootModel[Union[GateSpec, GateSpecModel]]):
    class Builder(BaseBuilder):
        _value: Union[GateSpec, GateSpecModel] | None = None

        def root(self, value: Union[GateSpec, GateSpecModel], /) -> Self:
            self._value = value
            return self

        def __call__(self, value: Union[GateSpec, GateSpecModel], /) -> Self:
            self._value = value
            return self

        def build(self) -> "GateSpecModel1":
            value = cast(Union[GateSpec, GateSpecModel], self._value)
            return GateSpecModel1(value)

    root: Union[GateSpec, GateSpecModel]

    class BuilderContext(BuilderContextBase["GateSpecModel1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = GateSpecModel1.Builder()
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for GateSpecModel1."""
        return cls.BuilderContext()


class Gate(Resource):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Gate"]:
            return Gate

        def build(self) -> "Gate":
            return Gate(**self._attrs)

        @overload
        def spec(self, value_or_callback: GateSpecModel1, /) -> "Gate.Builder": ...

        @overload
        def spec(
            self,
            value_or_callback: Callable[
                [GateSpecModel1.Builder], GateSpecModel1.Builder | GateSpecModel1
            ],
            /,
        ) -> "Gate.Builder": ...

        @overload
        def spec(self, value_or_callback: Never = ...) -> "GateSpecModel1.BuilderContext": ...

        def spec(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = GateSpecModel1.BuilderContext()
                context._parent_builder = self
                context._field_name = "spec"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GateSpecModel1.builder())
                if isinstance(output, GateSpecModel1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("spec", value)

        def api_version(self, value: Optional[Literal["ctfroute.attacking-lab.com/v1"]], /) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Gate"]], /) -> Self:
            return self._set("kind", value)

        @overload
        def metadata(
            self, value_or_callback: Optional[apimachinery.ObjectMeta], /
        ) -> "Gate.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[
                [apimachinery.ObjectMeta.Builder],
                apimachinery.ObjectMeta.Builder | apimachinery.ObjectMeta,
            ],
            /,
        ) -> "Gate.Builder": ...

        @overload
        def metadata(
            self, value_or_callback: Never = ...
        ) -> "apimachinery.ObjectMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            if self._in_context and value_or_callback is None:
                context = apimachinery.ObjectMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(apimachinery.ObjectMeta.builder())
                if isinstance(output, apimachinery.ObjectMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

    class BuilderContext(BuilderContextBase["Gate.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Gate.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Gate."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Gate", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Gate.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    spec: GateSpecModel1
    api_version: Annotated[
        Optional[Literal["ctfroute.attacking-lab.com/v1"]], Field(alias="apiVersion")
    ] = "ctfroute.attacking-lab.com/v1"
    kind: Optional[Literal["Gate"]] = "Gate"
    metadata: Optional[apimachinery.ObjectMeta] = None
