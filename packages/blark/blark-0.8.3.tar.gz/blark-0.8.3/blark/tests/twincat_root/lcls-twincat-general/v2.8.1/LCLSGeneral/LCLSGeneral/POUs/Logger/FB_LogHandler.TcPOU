<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_LogHandler" Id="{3f56ea05-5d12-4cf3-aa32-b1078ff3baf8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LogHandler
VAR_INPUT

	bLogHandlerInput : BOOL;

END_VAR

VAR CONSTANT
    nNumListeners		:	UINT	:= 6;
    DisarmCountDefault : UINT :=5; // # number of cycles to permit below threshold condition
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Action Name="CircuitBreaker" Id="{507d90b1-d1d6-4cc3-b632-e6c3c5e13942}">
      <Implementation>
        <ST><![CDATA[// Global log circuit breaker
(*
Logic explanation
We want to trip if there is a constant stream of messages being emitted by this PLC. We also
only want the noisy offenders to trip. To target them we set a global trickle tripped flag
using this logic here. Then each individual FB_LogMessage evaluates itself to see if it's
sending a message too frequently (ie. it's being called to often).

This logic is attempting to implement the following:
1. Trip if the total events exceeds the nTrickleThreshold for >10s
2. Sustain the timer if the event count drops for a handful of cycles since usually a cycle amounts to 10ms, losing a few
should not stop the trickle timer.
*)
bTripCon := GVL_Logger.nGlobAccEvents >0;

tofTrickleBreakerPre(IN:=bTripCon);
tonTrickleBreaker(IN:=tofTrickleBreakerPre.Q);

GVL_Logger.bTrickleTripped S= tonTrickleBreaker.Q AND bTripCon;

GVL_Logger.nGlobAccEvents := 0; // reset the count for the next cycle]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>