"""Modèle {{ model_name }}"""

from pydantic import BaseModel
from typing import Optional
{% if database != 'none' %}
from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime
from sqlalchemy.sql import func
from app.core.database import Base
{% endif %}

# Modèle Pydantic
class {{ model_name }}Base(BaseModel):
    """Modèle de base pour {{ model_name }}"""
    {% for field_name, field_type in fields.items() %}
    {{ field_name }}: {{ field_type }}
    {% endfor %}

class {{ model_name }}Create({{ model_name }}Base):
    """Modèle pour la création de {{ model_name }}"""
    pass

class {{ model_name }}Update(BaseModel):
    """Modèle pour la mise à jour de {{ model_name }}"""
    {% for field_name, field_type in fields.items() %}
    {{ field_name }}: Optional[{{ field_type }}] = None
    {% endfor %}

class {{ model_name }}({{ model_name }}Base):
    """Modèle complet de {{ model_name }}"""
    id: int
    
    class Config:
        from_attributes = True

{% if database != 'none' %}
# Modèle SQLAlchemy
class {{ model_name }}DB(Base):
    """Modèle de base de données pour {{ model_name }}"""
    __tablename__ = "{{ model_name.lower() }}s"
    
    id = Column(Integer, primary_key=True, index=True)
    {% for field_name, field_type in fields.items() %}
    {% if field_type == 'str' %}
    {{ field_name }} = Column(String, index=True)
    {% elif field_type == 'int' %}
    {{ field_name }} = Column(Integer)
    {% elif field_type == 'float' %}
    {{ field_name }} = Column(Float)
    {% elif field_type == 'bool' %}
    {{ field_name }} = Column(Boolean, default=False)
    {% else %}
    {{ field_name }} = Column(String)  # Type par défaut
    {% endif %}
    {% endfor %}
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
{% endif %}