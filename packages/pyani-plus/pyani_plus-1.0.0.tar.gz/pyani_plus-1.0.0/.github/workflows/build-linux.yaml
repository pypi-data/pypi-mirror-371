name: build-linux

on:
  push:
  pull_request:
    branches:
      - main
  # To be able to trigger a manual build
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install MiniForge (Python ${{ matrix.python-version }})
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: pyani-github
          auto-activate-base: false
          channels: bioconda,conda-forge
          channel-priority: flexible

      - name: Check Miniconda Installation
        run: |
          conda config --remove channels defaults
          conda info
          conda list

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install Requirements
        run: conda install -y --file requirements-dev.txt --file requirements-thirdparty-linux.txt -y

      - name: Install pyani-plus
        run: pip install -e .

      - name: Check pytest modules
        run: python -m pytest -v --collect-only

      - name: Run Tests with pytest
        # Currently single-threaded on macOS workers as faster there,
        # but on Linux using -n auto to test in parallel
        run: python -m pytest -v -n auto --cov=pyani_plus --cov-report=xml:.coverage-linux-${{ matrix.python-version }}.xml

      - name: Store coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-linux-${{ matrix.python-version }}
          path: .coverage-linux-${{ matrix.python-version }}.xml
          retention-days: 3
        if: ${{ always() }}

      - name: Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: .coverage-linux-${{ matrix.python-version }}.xml
        if: ${{ always() }}

      - name: Codecov Coverage Report
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true # optional (default = false)
          files: .coverage-linux-${{ matrix.python-version }}.xml # optional
          name: codecov-umbrella-linux-${{ matrix.python-version }}.xml # optional
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true # optional (default = false)
        if: ${{ always() }}
