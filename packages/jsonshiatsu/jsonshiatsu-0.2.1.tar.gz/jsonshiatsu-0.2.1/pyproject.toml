[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "jsonshiatsu"
version = "0.2.1"
description = "A therapeutic JSON parser that gently massages malformed JSON into shape"
authors = ["Jost Brandstetter <brandstetterjost@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/JostBrand/jsonshiatsu"
repository = "https://github.com/JostBrand/jsonshiatsu"
documentation = "https://github.com/JostBrand/jsonshiatsu"
keywords = ["json", "parser", "therapeutic", "massage", "malformed", "resilient", "shiatsu"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: Utilities",
]
packages = [{include = "jsonshiatsu"}]

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
pre-commit = "^4.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
ruff = "^0.7.0"
mypy = "^1.0"
pre-commit = "^4.3.0"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
# Enable flake8-bugbear (`B`) rules, in addition to the `E` and `F` rules.
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]

# Never enforce these rules  
ignore = [
    "E501", # line too long (handled by formatter)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Test-specific rule overrides
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "SIM116", # Use dictionary instead of if-elif 
    "B017",  # Assert raises bare Exception
    "SIM115", # Use context manager for files (test setup needs manual control)
    "SIM117", # Combine with statements (test readability)
    "SIM105", # Use contextlib.suppress (test clarity)
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "tests/",
    "examples/",
    "jsonshiatsu/performance/*"
]

# Allow test files to have relaxed typing for compatibility patterns
[[tool.mypy.overrides]]
module = [
    "tests.integration.test_json_compatibility",
    "tests.unit.security.test_limits"
]
ignore_errors = true

[tool.poetry.extras]
# No extras currently defined

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
