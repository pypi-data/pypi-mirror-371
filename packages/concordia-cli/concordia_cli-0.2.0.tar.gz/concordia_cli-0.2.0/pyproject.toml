[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "concordia-cli"
version = "0.2.0"
description = "Concordia CLI - Generate LookML from BigQuery using Looker & Dataform"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Cobry" }]
keywords = ["looker", "lookml", "bigquery", "dataform", "cli", "dbt"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Database",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]

dependencies = [
  "click",
  "pyyaml",
  "google-cloud-bigquery>=3.0.0",
  "google-auth>=2.0.0",
  "jinja2>=3.0.0",
  "lkml>=1.3.0",
  "pandas>=1.5.0",
  "pandas-gbq>=0.19.0",
  "pydantic>=2.0.0",
  "ruamel.yaml>=0.17.0",
  "tomli>=2.2.1",
]

# Add links to your repository
[project.urls]
Homepage = "https://github.com/CobryDev/concordia-cli"
Repository = "https://github.com/CobryDev/concordia-cli"
"Bug Tracker" = "https://github.com/CobryDev/concordia-cli/issues"

[project.scripts]
concordia = "main:cli"

[tool.setuptools]
py-modules = ["main"]

[tool.setuptools.packages.find]
include = ["actions*"]

[tool.ruff]
line-length = 120
target-version = "py39"
extend-exclude = ["htmlcov", "concordia_cli.egg-info", "dist"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "S",      # flake8-bandit (security)
]
ignore = [
    "E203",   # whitespace before ':'
    "S101",   # assert usage (common in tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert usage in tests is fine
    "S105",   # hardcoded password strings in tests
    "S106",   # hardcoded password function arguments in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[dependency-groups]
dev = [
    "ruff>=0.12.9",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pandas-stubs>=2.2.2.240807",
    "nox>=2025.5.1",
    "types-pyopenssl>=24.1.0.20240722",
]
