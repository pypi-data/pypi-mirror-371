# SPDX-License-Identifier: MIT

stages:
  - maintenance
  - test
  - release

################################################################################
#                                   DEFAULTS                                   #
################################################################################

variables:
  XDG_CACHE_HOME: $CI_PROJECT_DIR/.cache

default:
  image: python:3.11
  cache: &cache
    key:
      files:
        - uv.lock
    paths:
      - .cache/uv
    policy: pull
  before_script:
    - python --version
    - pip install uv

################################################################################
#                                 MAINTENANCE                                  #
################################################################################

update-cache:
  stage: maintenance
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'schedule')
      changes:
        paths:
          - uv.lock
  cache:
    <<: *cache
    policy: pull-push
  script:
    - uv sync --all-extras --no-install-project
    - uv cache prune --ci

################################################################################
#                                     TEST                                     #
################################################################################

static-analysis:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - uv sync --frozen --only-dev
    - git fetch origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - git rebase -x 'uv run --frozen pre-commit run --show-diff-on-failure --from-ref HEAD^ --to-ref HEAD' origin/"$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"

build-each:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - git fetch origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - git rebase -x 'uv build' origin/"$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"

pytest:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - uv sync --frozen --all-extras --no-install-project
    - git fetch origin "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - git rebase -x 'uv run --frozen pytest --cov-report=xml --junit-xml=unit-test-report.xml' origin/"$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: unit-test-report.xml

################################################################################
#                                   RELEASE                                    #
################################################################################

tag:
  stage: release
  interruptible: false
  resource_group: tagging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != 'schedule'
  script:
    - uv sync --frozen --no-install-project
    - version=$(uv run --frozen python -m versioning.pep440)
    - git config user.email "$GITLAB_USER_EMAIL"
    - git config user.name "$GITLAB_USER_NAME"
    - git tag -a "$version" -m "version $version"
    - git push --tag "$CI_SERVER_PROTOCOL://oauth2:$TAG_TOKEN@$CI_SERVER_HOST:$CI_SERVER_PORT/$CI_PROJECT_PATH"

publish:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  script:
    - uv build
    - uv publish --username "$PYPI_USERNAME" --password "$PYPI_PASSWORD"
  artifacts:
    name: dist
    paths:
      - ./dist
    expire_in: 1 week
