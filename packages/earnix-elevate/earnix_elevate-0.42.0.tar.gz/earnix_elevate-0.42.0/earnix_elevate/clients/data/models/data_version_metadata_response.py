# coding: utf-8

"""
Earnix Elevate Data API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional

from pydantic.v1 import BaseModel, Field, StrictInt


class DataVersionMetadataResponse(BaseModel):
    """
    `DataVersionMetadataResponse`

    Metadata information about the structure and size of a data version
    """

    var_schema: Optional[Dict[str, Any]] = Field(
        default=None,
        alias="schema",
        description="Schema definition of the data including column names and types",
    )
    num_rows: Optional[StrictInt] = Field(
        default=None,
        alias="numRows",
        description="Total number of rows in this data version",
    )
    size_in_bytes: Optional[StrictInt] = Field(
        default=None, alias="sizeInBytes", description="Total size of the data in bytes"
    )
    __properties = ["schema", "numRows", "sizeInBytes"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataVersionMetadataResponse:
        """Create an instance of DataVersionMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataVersionMetadataResponse:
        """Create an instance of DataVersionMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataVersionMetadataResponse.parse_obj(obj)

        _obj = DataVersionMetadataResponse.parse_obj(
            {
                "var_schema": obj.get("schema"),
                "num_rows": obj.get("numRows"),
                "size_in_bytes": obj.get("sizeInBytes"),
            }
        )
        return _obj
