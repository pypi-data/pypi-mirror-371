Metadata-Version: 2.4
Name: a42_proto
Version: 0.4.0
Summary: Protobuf Python bindings for A42 sensor data
Author-email: Alexander Baumann <alexander.baumann@hs-esslingen.de>
License: MIT
Project-URL: Homepage, https://github.com/HSE-VSV/DataReaderA42
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: protobuf
Requires-Dist: numpy
Requires-Dist: betterproto
Provides-Extra: dev

# ðŸ“¦ A42 Protobuf Bindings (`a42_proto`)

Dieses Python-Paket enthÃ¤lt die **Protobuf-Bindings fÃ¼r Sensordaten im A42-Format**. Es erlaubt das einfache Einlesen und Verarbeiten von LiDAR-Scans und zugehÃ¶rigen Objektinformationen.

---

## ðŸ”½ Datendownload

ðŸ‘‰ [KIT Sync & Share Download](https://bwsyncandshare.kit.edu/s/6pLYbjB9Etxe3gY)

---

## ðŸ“¥ Installation

```bash
pip install a42_proto
```

---

## ðŸ§ª Beispielskripte

- [`analyze_proto.py`](https://github.com/HSE-VSV/DataReaderA42/blob/581dea222b6871f6ef4e66ad9e998c3d5a60af08/scripts/analyze_proto.py) â€“ aggregierte Auswertung Ã¼ber Frames, Scans, Punkte, Objekte  
- [`visualize_pointcloud.py`](https://github.com/HSE-VSV/DataReaderA42/blob/581dea222b6871f6ef4e66ad9e998c3d5a60af08/scripts/visualize_pointcloud.py) â€“ zeigt eine Punktwolke in Open3D

---


## ðŸ“„ Datenstruktur

### Frame
EnthÃ¤lt alle Sensordaten fÃ¼r einen Zeitstempel.

- `frame_timestamp_ns` â€“ globaler Zeitstempel (ns)  
- `lidars[]` â€“ Liste von `LidarScan`

---

### LidarScan
Ein vollstÃ¤ndiger Scan eines LiDAR-Sensors.

- `laser_name` â€“ Sensorkennung (Enum `LaserName`)  
- `scan_timestamp_ns` â€“ Zeitstempel des Scans (ns)  
- `pointcloud` â€“ Punktwolke (`PointCloud`)  
- `calibration` â€“ Sensor-Kalibrierung (`SensorCalibration`)  
- `object_list[]` â€“ erkannte Objekte (`ObjectBBox`)

---

### PointCloud
Rohdaten einer Punktwolke.

- `cartesian` â€“ XYZ-Koordinaten (Byte-Array, float32)  
- `intensity` â€“ IntensitÃ¤t (Byte-Array, uint16)  
- `ambient` â€“ Umgebungslicht (Byte-Array, uint16)  
- `speed` â€“ Geschwindigkeit (Byte-Array)  
- `reflectivity` â€“ ReflektivitÃ¤t (Byte-Array, uint16)  
- `timestamp_offset` â€“ Zeitversatz pro Punkt (Byte-Array, ns)  
- `channel_id` â€“ Kanal-ID (Byte-Array)

---

### ObjectBBox
Achsenorientierte 3D-Box eines erkannten Objekts.

- `timestamp_ns` â€“ Zeitstempel (ns)  
- `position` â€“ Mittelpunkt (`x`, `y`, `z`)  
- `dimension` â€“ Abmessungen (`x`, `y`, `z`)  
- `pointcloud` â€“ Punkte innerhalb der Box (`PointCloud`)

---

### SensorCalibration
Kalibrierungsdaten eines Sensors.

- `sensor_name` â€“ Name des Sensors  
- `extrinsic[]` â€“ Extrinsische 4Ã—4-Transformationsmatrix (row-major, LÃ¤nge 16)  
- `vertical_fov` / `horizontal_fov` â€“ Sichtfeld in Grad  
- `vertical_scanlines` / `horizontal_scanlines` â€“ Anzahl Scanlinien  
- `horizontal_angle_spacing` â€“ Horizontaler Winkelabstand (Grad)  
- `beam_altitude_angles[]` â€“ Strahl-HÃ¶henwinkel  
- `beam_azimuth_angles[]` â€“ Strahl-Azimutwinkel  
- `frame_mode` â€“ Scan-Modus  
- `scan_pattern` â€“ Scan-Pattern-ID
