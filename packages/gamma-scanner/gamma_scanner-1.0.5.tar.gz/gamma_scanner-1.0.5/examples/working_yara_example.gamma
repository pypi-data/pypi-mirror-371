// Working YARA-style Gamma Scanner Example
// Demonstrates comprehensive YARA-like syntax features

rule ComprehensiveMalwareDetection {
    meta:
        author = "Advanced Security Team"
        description = "Comprehensive malware detection with all YARA features"
        version = "3.0"
        date = "2024-08-23"
        category = "advanced_malware"
        reference = "https://security.gamma-scanner.com/comprehensive-detection"
        severity = "critical"
        tags = "malware,advanced,comprehensive"
    
    strings:
        $malware_text1 = "malicious payload" nocase ascii
        $malware_text2 = "backdoor connection" wide fullword
        $malware_text3 = "command and control" nocase
        
        $exec_pattern = /exec\([^)]+\)/ nocase
        $eval_pattern = /(eval|exec|system)\s*\(/
        $url_pattern = /https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/
        
        $pe_header = { 4D 5A 90 00 03 00 00 00 }
        $call_wildcard = { E8 ?? ?? ?? ?? 5D }
        $mov_instruction = { C7 45 ?? 01 00 00 00 }
        $shellcode = { 31 C0 50 68 2F 2F 73 68 }
    
    condition:
        filesize > 50 and $malware_text1
}

rule PromptInjectionComprehensive {
    meta:
        author = "AI Security Research"
        description = "Comprehensive prompt injection detection"
        version = "2.5"
        category = "ai_security"
        severity = "high"
    
    strings:
        $ignore1 = "ignore all previous" nocase
        $ignore2 = "disregard all previous" nocase  
        $ignore3 = "forget all previous" nocase
        $ignore4 = "override all previous" nocase
        
        $injection_pattern = /(?i)(ignore|disregard|forget|override).*(all|previous|prior).*(instruction|prompt|rule|command)/
        $jailbreak_pattern = /(?i)(jailbreak|bypass|circumvent).*(safety|filter|restriction)/
        
        $roleplay = "you are now" nocase
        $pretend = "pretend to be" nocase
        
    condition:
        $ignore1 or $injection_pattern or $roleplay
}

rule AdvancedEncodingDetection {
    meta:
        author = "Encoding Detection Team"
        description = "Advanced encoding and obfuscation detection"
        version = "1.8"
        category = "encoding_detection"
    
    strings:
        $base64_long = /[A-Za-z0-9+\/]{50,}={0,2}/
        $base64_chunk = /[A-Za-z0-9+\/]{20,}/
        
        $hex_encoded = /\\x[0-9a-fA-F]{2}/
        $hex_string = /[0-9a-fA-F]{40,}/
        
        $url_encoded = /%[0-9a-fA-F]{2}/
        
        $unicode_escape = /\\\u[0-9a-fA-F]{4}/
        
    condition:
        $base64_long and filesize > 100
