# coding: utf-8

"""
    Opportify Insights API

    ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, private or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api/api-reference/email-insights)  - [**IP Insights:**](/docs/api/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RiskReportEmail(BaseModel):
    """
    ### Risk Level Determination This documentation outlines how the risk report is determined based on a `normalizedScore` generated by analyzing multiple email-related parameters against predefined risk factors (`baseAnalysis`). The risk report encapsulates the likelihood of various risk scenarios, enabling effective classification and prioritization of risks.     The underlying analysis evaluates the provided email information against key risk factors, such as the likelihood of bounces, fraud detection signals, and email deliverability issues. These insights are used to generate a comprehensive risk report, which is then mapped to static risk levels for easier interpretation.      ---  > **IMPORTANT:**  > The risk report model is not available in the free plan. To access this feature, you need to subscribe to a paid plan.  ---  #### How the Score is Generated  The risk score (`normalizedScore`) is derived from a multivariate analysis of input parameters, comparing them against risk factors included in `baseAnalysis`. This process involves:  ##### Key Features of the Model: 1. **Dynamic Scoring:** The model assigns weights to various risk factors, dynamically updating them based on training with new data. 2. **Constant Training:** The model is continuously retrained with the latest data to improve accuracy and adapt to evolving risk patterns. 3. **Scalability:** The model supports multiple features and their interactions, deriving a comprehensive and reliable risk score.  The output score is normalized to a range of **200–1000** for easier interpretation and alignment with industry practices.  ---  #### Risk Level Thresholds  The risk level is a static representation of the `normalizedScore`, categorized into five distinct levels:  | **Risk Level** | **Score Range**          | **Description**                                                                 | |----------------|--------------------------|---------------------------------------------------------------------------------| | `highest`      | `normalizedScore > 800` | Represents the most critical level of risk. Immediate attention is required.   | | `high`         | `600 < normalizedScore <= 800` | Indicates a high level of risk. Consider mitigation actions promptly.          | | `medium`       | `400 < normalizedScore <= 600` | Reflects a moderate level of risk. Monitoring and possible action advised.     | | `low`          | `300 < normalizedScore <= 400` | Denotes a low level of risk. Regular monitoring is sufficient.                 | | `lowest`       | `normalizedScore <= 300` | The lowest level of risk. Risk is considered negligible or minimal.            |  ---  #### Usage  This risk level determination serves as a human-readable representation of the machine learning model's output. It enables: - **Risk Monitoring:** Identifying entities that require immediate attention. - **Action Prioritization:** Guiding mitigation efforts based on the severity of the risk. - **Decision-Making:** Providing clear thresholds for automated and manual workflows.  ---  #### Key Notes 1. **Dynamic Scoring, Static Levels:**   - While the score is dynamically updated through a multivariate linear regression model, the risk levels remain static to maintain consistency and interpretability.  2. **Customizable Thresholds:**   - The thresholds for the levels are configurable based on organizational needs or domain-specific requirements.  3. **Model Retraining:**    - Regular updates to the model ensure that scores accurately reflect real-world risk trends, improving the reliability of level assignments.  ---  This approach combines the adaptability of multivariate linear regression with the simplicity of static thresholds, offering a robust framework for risk assessment and decision-making.  ---  ### Response Elements 
    """ # noqa: E501
    score: Optional[StrictInt] = Field(default=None, description="Risk score normalized to a range of 200–1000.")
    level: Optional[StrictStr] = Field(default=None, description="Static representation of the risk level.")
    base_analysis: Optional[List[StrictStr]] = Field(default=None, description="Provide the breakdown of the predefined risk factors used in the analysis.", alias="baseAnalysis")
    __properties: ClassVar[List[str]] = ["score", "level", "baseAnalysis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskReportEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskReportEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "score": obj.get("score"),
            "level": obj.get("level"),
            "baseAnalysis": obj.get("baseAnalysis")
        })
        return _obj


