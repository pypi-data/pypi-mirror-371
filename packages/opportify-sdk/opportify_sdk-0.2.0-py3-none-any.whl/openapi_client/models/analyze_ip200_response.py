# coding: utf-8

"""
    Opportify Insights API

    ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, private or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api/api-reference/email-insights)  - [**IP Insights:**](/docs/api/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.block_listed import BlockListed
from openapi_client.models.geo import Geo
from openapi_client.models.risk_report_ip import RiskReportIp
from openapi_client.models.trusted_provider import TrustedProvider
from openapi_client.models.whois import Whois
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeIp200Response(BaseModel):
    """
    AnalyzeIp200Response
    """ # noqa: E501
    ip_address: StrictStr = Field(description="The analyzed IP address.", alias="ipAddress")
    ip_address_number: StrictInt = Field(description="Numeric representation of the IP address.", alias="ipAddressNumber")
    ip_type: StrictStr = Field(description="Type of the IP address (IPv4 or IPv6).", alias="ipType")
    ip_cidr: StrictStr = Field(description="CIDR notation of the IP address.", alias="ipCidr")
    connection_type: StrictStr = Field(description="The **connectionType** element provides information about the type of connection associated with a given IP address. Our system employs a **dynamic and evolving approach**, leveraging multiple data points to identify the connection type as accurately as possible.  - **wired**: A traditional wired connection (e.g., DSL, fiber, cable). - **mobile**: A mobile network connection (e.g., 4G, 5G). - **enterprise**: A connection from a known large business or corporate network. - **satellite**: A satellite internet connection. - **vpn**: A connection routed through a Virtual Private Network. - **cloud-provider**: A connection from a cloud hosting provider (e.g., AWS, Azure). - **open-proxy**: A connection using an open or public proxy. - **tor**: A connection routed through the Tor network. ", alias="connectionType")
    host_reverse: StrictStr = Field(description="Real time reverse DNS lookup result for the IP address.", alias="hostReverse")
    geo: Geo
    whois: Whois
    trusted_provider: TrustedProvider = Field(alias="trustedProvider")
    blocklisted: BlockListed
    risk_report: RiskReportIp = Field(alias="riskReport")
    __properties: ClassVar[List[str]] = ["ipAddress", "ipAddressNumber", "ipType", "ipCidr", "connectionType", "hostReverse", "geo", "whois", "trustedProvider", "blocklisted", "riskReport"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeIp200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of whois
        if self.whois:
            _dict['whois'] = self.whois.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trusted_provider
        if self.trusted_provider:
            _dict['trustedProvider'] = self.trusted_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of blocklisted
        if self.blocklisted:
            _dict['blocklisted'] = self.blocklisted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_report
        if self.risk_report:
            _dict['riskReport'] = self.risk_report.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeIp200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipAddress": obj.get("ipAddress"),
            "ipAddressNumber": obj.get("ipAddressNumber"),
            "ipType": obj.get("ipType"),
            "ipCidr": obj.get("ipCidr"),
            "connectionType": obj.get("connectionType"),
            "hostReverse": obj.get("hostReverse"),
            "geo": Geo.from_dict(obj["geo"]) if obj.get("geo") is not None else None,
            "whois": Whois.from_dict(obj["whois"]) if obj.get("whois") is not None else None,
            "trustedProvider": TrustedProvider.from_dict(obj["trustedProvider"]) if obj.get("trustedProvider") is not None else None,
            "blocklisted": BlockListed.from_dict(obj["blocklisted"]) if obj.get("blocklisted") is not None else None,
            "riskReport": RiskReportIp.from_dict(obj["riskReport"]) if obj.get("riskReport") is not None else None
        })
        return _obj


