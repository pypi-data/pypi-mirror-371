from rest_framework import serializers
from rest_framework.validators import UniqueValidator


from .models import User
from django.core.exceptions import ObjectDoesNotExist




def validate_email(value):
    """
    validates the email
    :param value:
    :return:
    """
    try:
        user = User.objects.get(email=value.lower())
        raise serializers.ValidationError("Email already exits, login to continue")
    except ObjectDoesNotExist as e:
        return value


def validate_forgot_password_email(value):
    """
    check to see that a user exist with the given email address
    """
    try:
        user = User.objects.get(email=value)
    except Exception as e:
        raise serializers.ValidationError('No user with this email')


class RegisterSerializer(serializers.ModelSerializer):
    id = serializers.CharField(max_length=255, required=False)
    username = serializers.CharField(max_length=300, read_only=True)
    email = serializers.EmailField(max_length=150, required=True, validators=[validate_email])
    is_admin = serializers.BooleanField(default=False, read_only=True)
    password = serializers.CharField(min_length=8, write_only=True)

    # The client should not be able to send a token  along with a registration
    # request. Making them read-only handles that for us.
    token = serializers.CharField(max_length=255, read_only=True)

    class Meta:
        model = User
        fields = (
            'id', 'username', 'email', 'password', 'last_name', 'first_name', 'token', 'verified', 'date_created',
            'last_updated', 'bvn')


class ProfileViewSerializer(serializers.Serializer):
    id = serializers.CharField(max_length=255, required=True)
    fullname = serializers.CharField(required=False)
    email = serializers.EmailField(required=True)
    username = serializers.CharField(required=True)

    def create(self, validated_data):
        pass

    def update(self, instance, validated_data):
        pass


class LoginSerializer(serializers.Serializer):
    id = serializers.CharField(max_length=255, read_only=True)
    email = serializers.CharField(max_length=255, required=True)
    password = serializers.CharField(max_length=128, required=True, write_only=True)
    token = serializers.CharField(max_length=255, read_only=True)
    first_name = serializers.CharField(read_only=True)
    last_name = serializers.CharField(read_only=True)
    is_admin = serializers.CharField(read_only=True)
    username = serializers.EmailField(read_only=True)

    def create(self, validated_data):
        return super(LoginSerializer, self).create(validated_data)

    def update(self, instance, validated_data):
        return super(LoginSerializer, self).update(validated_data=validated_data, instance=instance)


class EditUserInfoSerializer(serializers.Serializer):
    email = serializers.EmailField(required=False,
                                   validators=[UniqueValidator(queryset=User.objects.all())])

    last_name = serializers.CharField(required=False,
                                      validators=[UniqueValidator(queryset=User.objects.all())])

    first_name = serializers.CharField(required=False,
                                       validators=[UniqueValidator(queryset=User.objects.all())])

    def create(self, validated_data):
        pass


class ForgotPasswordRequestSerializer(serializers.Serializer):
    email = serializers.EmailField(required=True, validators=[validate_forgot_password_email], allow_blank=False)


