# Generated by ariadne-codegen
# Source: http://api:8080/v1/graphql

from enum import Enum


class agent_shifts_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    ended_at = "ended_at"
    hash = "hash"
    organization_name = "organization_name"
    override_id = "override_id"
    started_at = "started_at"
    total_hours = "total_hours"
    updated_at = "updated_at"


class catalogs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class checklists_checks_select_column(str, Enum):
    author_id = "author_id"
    checked_at = "checked_at"
    checklist_item_id = "checklist_item_id"
    ticket_id = "ticket_id"


class checklists_items_select_column(str, Enum):
    author_id = "author_id"
    checklist_id = "checklist_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    title = "title"
    updated_at = "updated_at"


class combined_logs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    expense_log_id = "expense_log_id"
    expense_total_cents = "expense_total_cents"
    expensed_at = "expensed_at"
    id = "id"
    invoice_line_item_id = "invoice_line_item_id"
    notesj = "notesj"
    pos_log_id = "pos_log_id"
    product_id = "product_id"
    qty = "qty"
    service_id = "service_id"
    sold_at = "sold_at"
    started_at = "started_at"
    ticket_id = "ticket_id"
    ticket_item_id = "ticket_item_id"
    travel_ended_at = "travel_ended_at"
    travel_hours = "travel_hours"
    travel_hours_unit_price_cents = "travel_hours_unit_price_cents"
    travel_interval = "travel_interval"
    travel_log_id = "travel_log_id"
    travel_miles = "travel_miles"
    travel_miles_unit_price_cents = "travel_miles_unit_price_cents"
    travel_started_at = "travel_started_at"
    updated_at = "updated_at"
    work_ended_at = "work_ended_at"
    work_hours = "work_hours"
    work_interval = "work_interval"
    work_log_id = "work_log_id"
    work_site_id = "work_site_id"
    work_started_at = "work_started_at"


class custom_forms_definitions_select_column(str, Enum):
    author_id = "author_id"
    can_import_from_definition_id = "can_import_from_definition_id"
    component_name = "component_name"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class custom_forms_ticket_entries_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    id = "id"
    original_payload = "original_payload"
    payload = "payload"
    ticket_id = "ticket_id"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class customer_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    dedicated_since = "dedicated_since"
    deleted_at = "deleted_at"
    updated_at = "updated_at"


class customer_contacts_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    job_title = "job_title"
    updated_at = "updated_at"
    user_id = "user_id"


class customer_contracts_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    id = "id"
    ruleset_id = "ruleset_id"
    title = "title"
    updated_at = "updated_at"
    valid_from = "valid_from"


class customers_select_column(str, Enum):
    abbreviation = "abbreviation"
    author_id = "author_id"
    created_at = "created_at"
    default_invoice_generation = "default_invoice_generation"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    invoice_terms = "invoice_terms"
    mailing_address = "mailing_address"
    organization_name = "organization_name"
    price_book_id = "price_book_id"
    requires_signature = "requires_signature"
    title = "title"
    updated_at = "updated_at"


class customers_select_column_customers_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class customers_select_column_customers_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class customers_xref_work_sites_select_column(str, Enum):
    accounting_id = "accounting_id"
    created_at = "created_at"
    customer_id = "customer_id"
    ended_at = "ended_at"
    id = "id"
    started_at = "started_at"
    work_site_id = "work_site_id"


class delivery_statuses_enum(str, Enum):
    DRAFT = "DRAFT"
    SENT = "SENT"
    WILL_NOT_SEND = "WILL_NOT_SEND"


class demand_order_items_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    qty = "qty"
    quantity_unit_id = "quantity_unit_id"
    service_id = "service_id"
    service_unconfirmed = "service_unconfirmed"
    subtotal_cents = "subtotal_cents"
    subtotal_override_cents = "subtotal_override_cents"
    unit_price_cents = "unit_price_cents"
    unit_price_override_cents = "unit_price_override_cents"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class demand_orders_select_column(str, Enum):
    author_id = "author_id"
    cancelled_at = "cancelled_at"
    created_at = "created_at"
    created_from_quote_id = "created_from_quote_id"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    is_closed_on_completion = "is_closed_on_completion"
    is_implicit = "is_implicit"
    lifecycle_status = "lifecycle_status"
    modifiable_by_any_agent = "modifiable_by_any_agent"
    modifiable_by_dedicated_agents = "modifiable_by_dedicated_agents"
    modifiable_by_supervisors = "modifiable_by_supervisors"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    requesting_party = "requesting_party"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class demand_orders_select_column_demand_orders_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_closed_on_completion = "is_closed_on_completion"
    is_implicit = "is_implicit"
    modifiable_by_any_agent = "modifiable_by_any_agent"
    modifiable_by_dedicated_agents = "modifiable_by_dedicated_agents"
    modifiable_by_supervisors = "modifiable_by_supervisors"


class demand_orders_select_column_demand_orders_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_closed_on_completion = "is_closed_on_completion"
    is_implicit = "is_implicit"
    modifiable_by_any_agent = "modifiable_by_any_agent"
    modifiable_by_dedicated_agents = "modifiable_by_dedicated_agents"
    modifiable_by_supervisors = "modifiable_by_supervisors"


class event_notifications_select_column(str, Enum):
    context = "context"
    created_at = "created_at"
    event_id = "event_id"
    event_type = "event_type"
    organization_name = "organization_name"
    payload = "payload"


class event_types_select_column(str, Enum):
    comment = "comment"
    feature_flag = "feature_flag"
    value = "value"


class expense_logs_select_column(str, Enum):
    author_id = "author_id"
    cents_recorded = "cents_recorded"
    created_at = "created_at"
    deleted_at = "deleted_at"
    expense_type = "expense_type"
    expensed_at = "expensed_at"
    id = "id"
    invoice_line_item_id = "invoice_line_item_id"
    is_external = "is_external"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class expense_logs_select_column_expense_logs_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_external = "is_external"


class expense_logs_select_column_expense_logs_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_external = "is_external"


class expense_types_enum(str, Enum):
    FOOD = "FOOD"
    LODGING = "LODGING"
    PARTS = "PARTS"
    PER_DIEM = "PER_DIEM"
    TRAVEL = "TRAVEL"


class feature_flags_enum(str, Enum):
    API_ACCESS = "API_ACCESS"
    CUSTOMER_ACCESS = "CUSTOMER_ACCESS"
    INVOICE = "INVOICE"
    QUOTE = "QUOTE"


class invoice_customer_payments_select_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class invoice_generation_options_enum(str, Enum):
    simple = "simple"
    time_sheets = "time_sheets"


class invoice_invoices_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    due_at = "due_at"
    due_in = "due_in"
    id = "id"
    issued_at = "issued_at"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    paid_at = "paid_at"
    payment_status = "payment_status"
    po_number = "po_number"
    ref = "ref"
    sent_at = "sent_at"
    subject = "subject"
    total_cost_in_cents = "total_cost_in_cents"
    updated_at = "updated_at"


class invoice_ledgers_select_column(str, Enum):
    cents_credit = "cents_credit"
    cents_debit = "cents_debit"
    created_at = "created_at"
    id = "id"
    invoice_id = "invoice_id"


class invoice_line_items_select_column(str, Enum):
    author_id = "author_id"
    billing_agent_id = "billing_agent_id"
    cents_calculated = "cents_calculated"
    cents_invoiced = "cents_invoiced"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    details = "details"
    expense_log_ids = "expense_log_ids"
    expense_total_cents = "expense_total_cents"
    id = "id"
    invoice_id = "invoice_id"
    label = "label"
    pos_log_ids = "pos_log_ids"
    product_id = "product_id"
    product_logged_qty = "product_logged_qty"
    product_ordered_qty = "product_ordered_qty"
    product_unit_price_cents = "product_unit_price_cents"
    service_date = "service_date"
    service_hour_price_cents = "service_hour_price_cents"
    service_id = "service_id"
    subtotal_cents = "subtotal_cents"
    travel_hours_unit_price_cents = "travel_hours_unit_price_cents"
    travel_interval = "travel_interval"
    travel_log_ids = "travel_log_ids"
    travel_miles = "travel_miles"
    travel_miles_unit_price_cents = "travel_miles_unit_price_cents"
    updated_at = "updated_at"
    work_interval = "work_interval"
    work_log_ids = "work_log_ids"


class invoice_payments_select_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    invoice_id = "invoice_id"
    notes = "notes"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class lifecycle_statuses_enum(str, Enum):
    CANCELLED = "CANCELLED"
    CLOSED = "CLOSED"
    EXPIRING = "EXPIRING"
    GRACE = "GRACE"
    OPEN = "OPEN"
    PENDING = "PENDING"


class media_uploads_select_column(str, Enum):
    author_id = "author_id"
    caption = "caption"
    content_size = "content_size"
    content_type = "content_type"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    expense_log_id = "expense_log_id"
    id = "id"
    invoice_id = "invoice_id"
    organization_name = "organization_name"
    orig_filename = "orig_filename"
    product_id = "product_id"
    quote_event_id = "quote_event_id"
    quote_id = "quote_id"
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    ticket_id = "ticket_id"
    travel_log_id = "travel_log_id"
    updated_at = "updated_at"
    url = "url"
    work_log_id = "work_log_id"
    work_order_id = "work_order_id"
    work_site_id = "work_site_id"


class media_xref_expense_logs_select_column(str, Enum):
    expense_log_id = "expense_log_id"
    upload_id = "upload_id"


class media_xref_invoices_select_column(str, Enum):
    invoice_id = "invoice_id"
    upload_id = "upload_id"


class media_xref_pos_logs_select_column(str, Enum):
    pos_log_id = "pos_log_id"
    upload_id = "upload_id"


class media_xref_products_select_column(str, Enum):
    product_id = "product_id"
    upload_id = "upload_id"


class media_xref_quote_events_select_column(str, Enum):
    quote_event_id = "quote_event_id"
    upload_id = "upload_id"


class media_xref_quotes_select_column(str, Enum):
    quote_id = "quote_id"
    upload_id = "upload_id"


class media_xref_services_select_column(str, Enum):
    service_id = "service_id"
    upload_id = "upload_id"


class media_xref_ticket_custom_form_entries_select_column(str, Enum):
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    upload_id = "upload_id"


class media_xref_ticket_types_select_column(str, Enum):
    ticket_type_id = "ticket_type_id"
    upload_id = "upload_id"


class media_xref_tickets_select_column(str, Enum):
    ticket_id = "ticket_id"
    upload_id = "upload_id"


class media_xref_travel_logs_select_column(str, Enum):
    travel_log_id = "travel_log_id"
    upload_id = "upload_id"


class media_xref_work_logs_select_column(str, Enum):
    upload_id = "upload_id"
    work_log_id = "work_log_id"


class media_xref_work_orders_select_column(str, Enum):
    upload_id = "upload_id"
    work_order_id = "work_order_id"


class notification_prefs_select_column(str, Enum):
    created_at = "created_at"
    deleted_at = "deleted_at"
    email_enabled = "email_enabled"
    id = "id"
    push_enabled = "push_enabled"
    type = "type"
    updated_at = "updated_at"
    user_id = "user_id"


class notification_prefs_select_column_notification_prefs_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    email_enabled = "email_enabled"
    push_enabled = "push_enabled"


class notification_prefs_select_column_notification_prefs_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    email_enabled = "email_enabled"
    push_enabled = "push_enabled"


class oauth_providers_enum(str, Enum):
    quickbooks = "quickbooks"


class order_by(str, Enum):
    asc = "asc"
    asc_nulls_first = "asc_nulls_first"
    asc_nulls_last = "asc_nulls_last"
    desc = "desc"
    desc_nulls_first = "desc_nulls_first"
    desc_nulls_last = "desc_nulls_last"


class org_users_xref_roles_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    organization_name = "organization_name"
    role_id = "role_id"
    user_id = "user_id"


class org_xref_feature_flags_select_column(str, Enum):
    feature_flag = "feature_flag"
    organization_name = "organization_name"


class organization_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    drivers_license_expiration = "drivers_license_expiration"
    drivers_license_number = "drivers_license_number"
    drivers_license_state = "drivers_license_state"
    employee_id = "employee_id"
    eula_accepted_at = "eula_accepted_at"
    member_type = "member_type"
    organization_name = "organization_name"
    updated_at = "updated_at"


class organization_timezone_history_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    organization_name = "organization_name"
    timezone_name = "timezone_name"
    valid_from = "valid_from"


class organizations_xref_oauth_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    oauth_provider = "oauth_provider"
    organization_id = "organization_id"
    realm_id = "realm_id"
    refresh_token = "refresh_token"
    updated_at = "updated_at"


class payment_statuses_enum(str, Enum):
    INAPPLICABLE = "INAPPLICABLE"
    PAID = "PAID"
    PARTIAL = "PARTIAL"
    PENDING = "PENDING"
    VOID = "VOID"
    WRITTEN_OFF = "WRITTEN_OFF"


class pos_logs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    invoice_line_item_id = "invoice_line_item_id"
    notes = "notes"
    notesj = "notesj"
    qty = "qty"
    sold_at = "sold_at"
    ticket_item_id = "ticket_item_id"
    updated_at = "updated_at"


class pricing_agent_prices_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    day_rate_cents = "day_rate_cents"
    id = "id"
    labor_hour_rate_cents = "labor_hour_rate_cents"
    mile_rate_cents = "mile_rate_cents"
    overtime_hour_rate_cents = "overtime_hour_rate_cents"
    price_book_id = "price_book_id"
    travel_hour_rate_cents = "travel_hour_rate_cents"
    valid_from = "valid_from"


class pricing_price_books_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class pricing_product_prices_select_column(str, Enum):
    author_id = "author_id"
    cents_per_unit = "cents_per_unit"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    product_id = "product_id"
    quantity_unit_id = "quantity_unit_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class pricing_service_prices_select_column(str, Enum):
    author_id = "author_id"
    cents_per_unit = "cents_per_unit"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    service_id = "service_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class pricing_travel_prices_select_column(str, Enum):
    author_id = "author_id"
    cents_per_hour = "cents_per_hour"
    cents_per_mile = "cents_per_mile"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class product_types_enum(str, Enum):
    GOOD = "GOOD"
    SERVICE = "SERVICE"


class products_select_column(str, Enum):
    author_id = "author_id"
    catalog_id = "catalog_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    external_id = "external_id"
    id = "id"
    product_type = "product_type"
    title = "title"
    updated_at = "updated_at"


class quote_event_types_enum(str, Enum):
    ACCEPTED = "ACCEPTED"
    ARCHIVED = "ARCHIVED"
    CANCELED = "CANCELED"
    CLONED = "CLONED"
    COMMENTED = "COMMENTED"
    CREATED = "CREATED"
    CREATED_AS_CLONE = "CREATED_AS_CLONE"
    ORDER_CREATED = "ORDER_CREATED"
    REJECTED = "REJECTED"
    REQUESTED = "REQUESTED"
    UNARCHIVED = "UNARCHIVED"
    UPDATED = "UPDATED"


class quote_events_select_column(str, Enum):
    author_id = "author_id"
    cloned_from_quote_id = "cloned_from_quote_id"
    cloned_to_quote_id = "cloned_to_quote_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    event_type = "event_type"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"
    quote_id = "quote_id"


class quote_items_select_column(str, Enum):
    agent_id = "agent_id"
    agent_unconfirmed = "agent_unconfirmed"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    qty = "qty"
    quote_id = "quote_id"
    service_id = "service_id"
    service_unconfirmed = "service_unconfirmed"
    subtotal_cents = "subtotal_cents"
    subtotal_override_cents = "subtotal_override_cents"
    unit_price_cents = "unit_price_cents"
    unit_price_override_cents = "unit_price_override_cents"
    updated_at = "updated_at"
    work_site_id = "work_site_id"
    work_site_unconfirmed = "work_site_unconfirmed"


class quote_quotes_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    id = "id"
    lifecycle_status = "lifecycle_status"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    review_status = "review_status"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"
    valid_until = "valid_until"


class review_statuses_enum(str, Enum):
    ACCEPTED = "ACCEPTED"
    INAPPLICABLE = "INAPPLICABLE"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    REQUESTED = "REQUESTED"


class services_select_column(str, Enum):
    author_id = "author_id"
    catalog_id = "catalog_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    title = "title"
    updated_at = "updated_at"


class ticket_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class ticket_items_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    order_item_id = "order_item_id"
    ticket_id = "ticket_id"


class ticket_review_event_types_enum(str, Enum):
    ACCEPT = "ACCEPT"
    CANCEL = "CANCEL"
    COMMENT = "COMMENT"
    REJECT = "REJECT"
    REQUEST = "REQUEST"


class ticket_review_events_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    ticket_review_event_type = "ticket_review_event_type"


class ticket_statuses_enum(str, Enum):
    CLOSED = "CLOSED"
    IN_PROGRESS = "IN_PROGRESS"
    IN_REVIEW = "IN_REVIEW"
    OPEN = "OPEN"


class ticket_types_xref_checklists_select_column(str, Enum):
    author_id = "author_id"
    checklist_id = "checklist_id"
    created_at = "created_at"
    is_required = "is_required"
    ticket_type_id = "ticket_type_id"


class ticket_types_xref_checklists_select_column_ticket_types_xref_checklists_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class ticket_types_xref_checklists_select_column_ticket_types_xref_checklists_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class ticket_types_xref_custom_form_definitions_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    is_required = "is_required"
    ticket_type_id = "ticket_type_id"


class ticket_types_xref_custom_form_definitions_select_column_ticket_types_xref_custom_form_definitions_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class ticket_types_xref_custom_form_definitions_select_column_ticket_types_xref_custom_form_definitions_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class tickets_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    manually_scheduled_at = "manually_scheduled_at"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"
    organization_name = "organization_name"
    ref = "ref"
    requires_signature = "requires_signature"
    review_status = "review_status"
    reviewer_id = "reviewer_id"
    signature_id = "signature_id"
    ticket_status = "ticket_status"
    ticket_type_id = "ticket_type_id"
    updated_at = "updated_at"


class tickets_select_column_tickets_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class tickets_select_column_tickets_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class time_sheet_billing_intervals_enum(str, Enum):
    month = "month"
    shift = "shift"


class time_sheet_rules_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    modifier = "modifier"
    ruleset_id = "ruleset_id"
    threshold_hours = "threshold_hours"
    time_unit = "time_unit"
    title = "title"
    updated_at = "updated_at"


class time_units_enum(str, Enum):
    day = "day"
    hour = "hour"


class travel_logs_select_column(str, Enum):
    arrived_at = "arrived_at"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    departed_at = "departed_at"
    from_work_site_id = "from_work_site_id"
    id = "id"
    invoice_line_item_id = "invoice_line_item_id"
    miles_traveled = "miles_traveled"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    to_work_site_id = "to_work_site_id"
    updated_at = "updated_at"


class user_subs_select_column(str, Enum):
    created_at = "created_at"
    id = "id"
    subscription = "subscription"
    user_id = "user_id"


class work_logs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    id = "id"
    invoice_line_item_id = "invoice_line_item_id"
    notes = "notes"
    notesj = "notesj"
    started_at = "started_at"
    ticket_item_id = "ticket_item_id"
    updated_at = "updated_at"


class work_sites_select_column(str, Enum):
    api = "api"
    author_id = "author_id"
    confirmed_at = "confirmed_at"
    county = "county"
    created_at = "created_at"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    lat = "lat"
    lng = "lng"
    organization_name = "organization_name"
    standardized_title = "standardized_title"
    state = "state"
    title = "title"
    updated_at = "updated_at"
