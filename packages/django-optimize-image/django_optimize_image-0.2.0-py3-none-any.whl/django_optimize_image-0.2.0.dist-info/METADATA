Metadata-Version: 2.1
Name: django-optimize-image
Version: 0.2.0
Summary: A Django middleware to optimize image uploads by converting them to WebP.
Home-page: https://github.com/nahom-d54/django-optimize-image
Author: Nahom D
Author-email: nahom@nahom.eu.org
License: UNKNOWN
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Pillow
Requires-Dist: Django
Provides-Extra: django32
Requires-Dist: Django<4.0,>=3.2; extra == "django32"
Provides-Extra: django42
Requires-Dist: Django<5.0,>=4.2; extra == "django42"
Provides-Extra: django50
Requires-Dist: Django<6.0,>=5.0; extra == "django50"

# **Django Image Optimizer**

A **Django middleware and utility** for optimizing uploaded images by converting them to WebP with configurable **width, height, and quality** settings.

## **Features**

‚úî **Automatic optimization via middleware**  
‚úî **Manual optimization via utility function**  
‚úî **Supports per-request overrides**  
‚úî **Configurable defaults via `settings.py`**

---

## **Installation**

```sh
pip install django-image-optimizer
```

Add to `INSTALLED_APPS` in `settings.py`:

```python
INSTALLED_APPS = [
    # other apps...
    "optimizer_middleware",
]
```

Add the middleware:

```python
MIDDLEWARE = [
    # other middleware...
    "optimizer_middleware.middleware.ImageOptimizationMiddleware",
]
```

---

## **Configuration**

Set global defaults in **`settings.py`**:

```python
# Default image optimization settings
IMAGE_OPTIMIZER_WIDTH = 800   # Resize width
IMAGE_OPTIMIZER_HEIGHT = None  # Keep aspect ratio
IMAGE_OPTIMIZER_QUALITY = 80  # WebP quality
```

> _By default, images are resized to 800px width while maintaining aspect ratio and optimized to 80% quality._

---

## **Usage**

### **1Ô∏è‚É£ Automatic Optimization (Middleware)**

Once added to `MIDDLEWARE`, the optimizer **automatically processes all uploaded images** in `POST`, `PUT`, and `PATCH` requests.

‚úÖ Converts images to **WebP**  
‚úÖ Resizes based on `settings.py`

---

### **2Ô∏è‚É£ Dynamic Overrides (Per Request)**

Override optimization settings dynamically in a view using **`request.META`**:

```python
def upload_view(request):
    request.META["IMAGE_OPTIMIZER_WIDTH"] = 600
    request.META["IMAGE_OPTIMIZER_QUALITY"] = 90
    return some_response
```

---

### **3Ô∏è‚É£ Manual Optimization (Standalone Function)**

Use the function **anywhere** in your code (views, forms, serializers, etc.).

```python
from optimizer_middleware.utils import optimize_image

optimized_image = optimize_image(image_file, width=500, quality=85)
```

---

## **License**

[MIT License](LICENSE). Free to use and modify. üöÄ

---

## **Contribution**

Use this guide [Contribution](https://opensource.guide/how-to-contribute/)


