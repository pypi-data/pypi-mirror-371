# This is the main workflow for testing the code before and after
# packaging it.
# The workflow is divided into three jobs:
# 1. code-quality:
#    - Check the validity of pyproject.toml
#    - Check code linting
#    - Check code formatting
#    - Check formatting of Markdown, YAML, TOML, etc. files
# 2. run-tests:
#    - Test the code base against the latest code in the repository
#    - Create the Python package
#    - Upload the Python package for the next job
# 3. check-package:
#    - Download the Python package from the previous job
#    - Install the downloaded Python package
#    - Test the code base against the installed package

name: Test code and package

on:
  # Trigger the workflow on push
  push:
    # Every branch
    branches:
      - '**'
    # But do not run this workflow on creating a new tag starting with
    # 'v', e.g. 'v1.0.3' (see publish-pypi.yml)
    tags-ignore:
      - 'v*'
  # Trigger the workflow on pull request
  pull_request:
    branches:
      - '**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run
# in-progress and latest queued. And cancel in-progress runs.
concurrency:
  group:
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Set the environment vars to be used in all jobs defined in this workflow
  # Set the CI_BRANCH environment var to be the branch name
  # Set the NOTEBOOKS_DIR environment var to be the dir of Jupyter notebooks
  CI_BRANCH: ${{ github.head_ref || github.ref_name }}
  NOTEBOOKS_DIR: tutorials

jobs:
  # Job 1: Check code quality and consistency
  code-quality:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.13']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade package installer for Python
        shell: bash
        run: python -m pip install --upgrade pip

      - name: Install Python dependencies
        shell: bash
        run: python -m pip install .'[dev]'

      - name: Install npm dependencies
        # Install 'prettier' for code formatting of Markdown, YAML, etc. files
        # Install 'prettier-plugin-toml' plugin for formatting of TOML files
        shell: bash
        run: >
          npm install --no-save --no-audit --no-fund 'prettier@>=3.3.3'
          'prettier-plugin-toml@>=0.13.0'

      # Check the validity of pyproject.toml
      - name: Check validity of pyproject.toml
        id: check_pyproject
        continue-on-error: true
        shell: bash
        run: validate-pyproject pyproject.toml

      # Check code linting with Ruff in the project root
      - name: Check code linting
        id: check_code_linting
        continue-on-error: true
        shell: bash
        run: ruff check .

      - name: Suggestion to fix code linting issues (*.py files)
        if: steps.check_code_linting.outcome == 'failure'
        shell: bash
        run: >
          echo "In project root run 'ruff check . --fix' and commit changes to
          fix issues."

      # Check code formatting with Ruff in the project root
      - name: Check code formatting
        id: check_code_formatting
        continue-on-error: true
        shell: bash
        run: ruff format . --check

      - name: Suggestion to fix code formatting issues (*.py files)
        if: steps.check_code_formatting.outcome == 'failure'
        shell: bash
        run: >
          echo "In project root run 'ruff format .' and commit changes to fix
          issues."

      # Check formatting of Markdown, YAML, TOML, etc. files with Prettier in
      # the project root
      - name: Check formatting of Markdown, YAML, TOML, etc. files
        id: check_others_formatting
        continue-on-error: true
        shell: bash
        run: npx prettier . --check --config=prettierrc.toml

      - name: Suggestion to fix non-code formatting issues (*.md, *.yml, etc.)
        if: steps.check_others_formatting.outcome == 'failure'
        shell: bash
        run: >
          echo "In project root run 'npx prettier . --write
          --config=prettierrc.toml' and commit changes to fix issues."

      - name: Force fail if any of the previous steps failed
        if: |
          steps.check_pyproject.outcome == 'failure' ||
          steps.check_code_linting.outcome == 'failure' ||
          steps.check_code_formatting.outcome == 'failure' || 
          steps.check_others_formatting.outcome == 'failure'
        run: exit 1

  # Job 2: Test code and upload coverage to Codecov.
  run-tests:
    needs: code-quality # previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]
        python-version: ['3.11', '3.12', '3.13']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0' # full history with tags to get the version number by versioningit

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade package installer for Python
        shell: bash
        run: python -m pip install --upgrade pip

      - name: Set up conda (Windows only)
        if: runner.os == 'Windows'
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: conda-forge

      - name: Install libcblas for pdffit (Windows only)
        if: runner.os == 'Windows'
        shell: bash
        run: conda install -y -c conda-forge libcblas

      - name: Install Python dependencies
        shell: bash
        run: python -m pip install .'[dev,visualization]'

      - name: Run Python unit tests (using src/ as the source dir)
        shell: bash
        run: |
          export PYTHONPATH="$(pwd)/src${PYTHONPATH:+:$PYTHONPATH}"
          python -m pytest tests/unit_tests/ --color=yes

      - name: Run Python functional tests (using src/ as the source dir)
        shell: bash
        run: |
          export PYTHONPATH="$(pwd)/src${PYTHONPATH:+:$PYTHONPATH}"
          python -m pytest tests/functional_tests/ --color=yes -n auto

      # Ensures a consistent high version like 999.0.0 when not on a tagged commit
      # This is needed for testing the package in the next job, as its version
      # must be higher than the PyPI version for pip to prefer the local version.
      - name: Inject fallback version tag if not on a real tag
        shell: bash
        run: |
          if ! git describe --tags --match "v*" --exact-match > /dev/null 2>&1; then
            echo "Not on release tag â€” applying fallback 'v999.0.0'"
            git tag v999.0.0
          else
            echo "On a valid tag"
          fi

      - name: Create Python package for the next job
        shell: bash
        run: python -m build --wheel --outdir dist

      - name:
          Upload zipped Python package (with tests and ${{ env.NOTEBOOKS_DIR }})
          for next job
        uses: actions/upload-artifact@v4
        with:
          name:
            edl_py${{ matrix.python-version }}_${{ matrix.os }}_${{ runner.arch
            }}
          path: |
            dist/*.whl
            tests/
            ${{ env.NOTEBOOKS_DIR }}/
          if-no-files-found: 'error'
          compression-level: 0

  # Job 3: Test the package
  test-package:
    needs: run-tests # the previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]
        python-version: ['3.11', '3.12', '3.13']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade package installer for Python
        run: python -m pip install --upgrade pip

      - name: Set up conda (Windows only)
        if: runner.os == 'Windows'
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: conda-forge

      - name: Install libcblas for pdffit (Windows only)
        if: runner.os == 'Windows'
        shell: bash
        run: conda install -y -c conda-forge libcblas

      - name:
          Download zipped Python package (with tests and ${{ env.NOTEBOOKS_DIR
          }}) from previous job
        uses: actions/download-artifact@v4
        with: # name or path are taken from the upload step of the previous job
          name:
            edl_py${{ matrix.python-version }}_${{ matrix.os }}_${{ runner.arch
            }}
          path: . # directory to extract downloaded zipped artifacts

      # The local version must be higher than the PyPI version for pip to
      # prefer the local version. So, after a new release and a new tag,
      # remember to merge the master branch with the develop branch,
      # and then create a new feature branch from the develop branch.
      - name: Install Python package from previous job with all extras
        shell: bash
        run: >
          pip install 'easydiffraction[dev,visualization]' --find-links=dist

      - name: Run Python unit tests (using installed package)
        shell: bash
        run: python -m pytest tests/unit_tests/ --color=yes

      - name: Run Python functional tests (using installed package)
        shell: bash
        run: python -m pytest tests/functional_tests/ --color=yes -n auto
