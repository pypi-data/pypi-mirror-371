{"version":3,"file":"lib_index_js.c7336a689a0c7c3ba9fb.js","mappings":"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","sources":["webpack://jupy-sqlite-extension/./src/handler.ts","webpack://jupy-sqlite-extension/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupy-sqlite-extension', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\n\nimport { CodeCell, ICellModel } from '@jupyterlab/cells';\n\nimport { requestAPI } from './handler';\n\n/**\n * Initialization data for the jupy-sqlite-extension extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupy-sqlite-extension:plugin',\n  description: 'JupyterLab extension for SQLite execution based on cell metadata without magic',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n    console.log('JupyterLab extension jupy-sqlite-extension is activated!');\n\n    const executeSQLCell = async (cell: CodeCell): Promise<void> => {\n      const sqlCell = cell.model.getMetadata('sql_cell');\n      const language = cell.model.getMetadata('language');\n      const dbFileValue = cell.model.getMetadata('db_file');\n\n      if (sqlCell === true || language === 'sql') {\n        const dbFile = dbFileValue as string;\n\n        if (!dbFile) {\n          cell.outputArea.model.clear();\n          cell.outputArea.model.add({\n            output_type: 'error',\n            ename: 'SQLiteError',\n            evalue: 'Missing db_file in cell metadata',\n            traceback: ['SQLiteError: Cell metadata must include \"db_file\" field']\n          });\n          return;\n        }\n\n        try {\n          const sqlCode = cell.model.sharedModel.getSource();\n          const result = await requestAPI<any>('execute-sql', {\n            method: 'POST',\n            body: JSON.stringify({\n              sql: sqlCode,\n              db_file: dbFile\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          cell.outputArea.model.clear();\n\n          if (result.error) {\n            cell.outputArea.model.add({\n              output_type: 'error',\n              ename: 'SQLiteError',\n              evalue: result.error,\n              traceback: [result.error]\n            });\n          } else if (result.formatted_output) {\n            // Display pre-formatted table from backend\n            cell.outputArea.model.add({\n              output_type: 'stream',\n              name: 'stdout',\n              text: result.formatted_output\n            });\n          } else if (result.message) {\n            // Handle non-SELECT queries\n            cell.outputArea.model.add({\n              output_type: 'stream',\n              name: 'stdout',\n              text: result.message\n            });\n          }\n        } catch (error) {\n          cell.outputArea.model.clear();\n          cell.outputArea.model.add({\n            output_type: 'error',\n            ename: 'SQLiteError',\n            evalue: String(error),\n            traceback: [String(error)]\n          });\n        }\n      }\n    };\n\n    notebookTracker.widgetAdded.connect((sender: INotebookTracker, widget: NotebookPanel) => {\n      const notebook = widget.content;\n\n      const setupCellExecution = (cell: CodeCell) => {\n        let lastExecutionCount = cell.model.executionCount;\n\n        cell.model.stateChanged.connect((sender: ICellModel) => {\n          const currentExecutionCount = (sender as any).executionCount;\n          // Only execute when executionCount actually increases (cell was run)\n          if (currentExecutionCount !== null &&\n              currentExecutionCount > 0 &&\n              currentExecutionCount !== lastExecutionCount) {\n            lastExecutionCount = currentExecutionCount;\n            executeSQLCell(cell);\n          }\n        });\n      };\n\n      notebook.model!.cells.changed.connect(() => {\n        notebook.widgets.forEach((cell) => {\n          if (cell instanceof CodeCell) {\n            setupCellExecution(cell as CodeCell);\n          }\n        });\n      });\n\n      // Also set up for existing cells\n      notebook.widgets.forEach((cell) => {\n        if (cell instanceof CodeCell) {\n          setupCellExecution(cell as CodeCell);\n        }\n      });\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}