<?xml version="1.0" encoding="UTF-8"?>
<mug:RequirementsSpec xmlns:mug="urn:evenflow:mug:req:1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:evenflow:mug:req:1 requirements-v1.xsd" document_key="20250820T142442+0000">
	<mug:Metadata>
		<mug:Title>Python Repo Setup Guardrails</mug:Title>
		<mug:Description>Baseline repo setup requirements for any Python project, combining legacy tests, mature repo practices, and new guardrails. Scope excludes CA/feature-folders/DI/CLI specifics.</mug:Description>
		<mug:Type>spec</mug:Type>
	</mug:Metadata>
	<!-- 1. Project Skeleton & Core Files -->
	<mug:Section code="1.1" title="Project Skeleton &amp; Core Files" position="1">
		<mug:Requirement id="1" position="1" origin="build" error_types="syntax build_deployment" test_approaches="pytest build_ci">`pyproject.toml` exists and parses.</mug:Requirement>
		<mug:Requirement id="2" position="2" origin="feat" error_types="semantic" test_approaches="pytest manual_review">`README.md` exists.</mug:Requirement>
		<mug:Requirement id="3" position="3" origin="docs" error_types="semantic build_deployment" test_approaches="pytest manual_review">`LICENSE` exists.</mug:Requirement>
		<mug:Requirement id="4" position="4" origin="feat" error_types="build_deployment" test_approaches="pytest build_ci">`.gitignore` exists.</mug:Requirement>
		<mug:Requirement id="5" position="5" origin="feat" error_types="semantic" test_approaches="pytest manual_review">`docs/` directory exists (starter docs or placeholder).</mug:Requirement>
		<mug:Requirement id="37" position="6" origin="docs" error_types="semantic" test_approaches="manual_review pytest">`docs/TESTING_POLICY.md` exists.</mug:Requirement>
		<mug:Requirement id="38" position="7" origin="docs" error_types="semantic" test_approaches="manual_review build_ci">
      `docs/CONTRIBUTING.md` exists and outlines baseline contributor workflow: local test/lint/type-check steps, branch/PR guidance, and commit conventions compatible with commitlint/changelog tooling (see §1.5).
    </mug:Requirement>
		<mug:Requirement id="39" position="8" origin="docs" error_types="semantic" test_approaches="manual_review build_ci">
      `docs/CHANGELOG.md` exists as a companion reference to the root `CHANGELOG.md` required by §1.5 (id=22); it may be generated or synced from conventional commits and is not included in runtime packages (see §1.3 packaging/pruning).
    </mug:Requirement>
	</mug:Section>
	<!-- 2. Configuration & Tooling -->
	<mug:Section code="1.2" title="Configuration &amp; Tooling" position="2">
		<mug:Requirement id="6" position="1" origin="test" error_types="syntax semantic" test_approaches="linter pytest">Ruff config present (`ruff.toml` or `[tool.ruff]` in `pyproject.toml`).</mug:Requirement>
		<mug:Requirement id="7" position="2" origin="test" error_types="semantic" test_approaches="linter pytest">`mypy.ini` present.</mug:Requirement>
		<mug:Requirement id="8" position="3" origin="test" error_types="runtime logical" test_approaches="pytest">`pytest.ini` present (sane discovery/opts).</mug:Requirement>
	</mug:Section>
	<!-- 3. Packaging & Importability -->
	<mug:Section code="1.3" title="Packaging &amp; Importability" position="3">
		<mug:Requirement id="9" position="1" origin="feat" error_types="syntax integration_contract" test_approaches="linter pytest">Top package `src/&lt;pkg&gt;/__init__.py` exists.</mug:Requirement>
		<mug:Requirement id="10" position="2" origin="feat" error_types="integration_contract semantic" test_approaches="linter pytest">`src/&lt;pkg&gt;/py.typed` exists (PEP 561).</mug:Requirement>
		<mug:Requirement id="11" position="3" origin="feat" error_types="build_deployment runtime" test_approaches="pytest env_smoke">Importing the package succeeds (no `ModuleNotFoundError`).</mug:Requirement>
		<mug:Requirement id="12" position="4" origin="feat" error_types="build_deployment runtime" test_approaches="build_ci pytest">`[project.scripts]` defines ≥1 console entry.</mug:Requirement>
		<mug:Requirement id="13" position="5" origin="feat" error_types="build_deployment integration_contract" test_approaches="build_ci pytest">No root `requirements.txt` or `setup.py` (use `pyproject.toml`).</mug:Requirement>
		<mug:Requirement id="33" position="6" origin="build" error_types="build_deployment integration_contract" test_approaches="manual_review build_ci">
      `MANIFEST.in` exists and enforces a minimal packaging policy: (a) includes `pyproject.toml`, `README.md`, `LICENSE`; (b) includes PEP 561 typing artifacts (`recursive-include src *.pyi` and `recursive-include src py.typed`); (c) prunes non-runtime folders (`prune .github`, `prune .husky`, `prune scripts`, `prune tests`, `prune docs`); and (d) globally excludes compiled artifacts (`global-exclude *.pyc *.pyo __pycache__ *.so *.dylib`).
    </mug:Requirement>
		<mug:Requirement id="34" position="7" origin="build" error_types="build_deployment integration_contract" test_approaches="manual_review build_ci">
      `pyproject.toml` configures Setuptools for wheel/sdist parity: `[tool.setuptools] include-package-data = true` and `[tool.setuptools.package-data]` maps the runtime package to `["py.typed"]` (no wildcard data).
    </mug:Requirement>
		<mug:Requirement id="35" position="8" origin="build" error_types="build_deployment" test_approaches="build_ci">
      Source distribution contains the essentials for compliance and typing: `pyproject.toml`, `README.md`, `LICENSE`, and package typing markers (`py.typed` / `.pyi`) are present in the built sdist artifact.
    </mug:Requirement>
	</mug:Section>
	<!-- 4. Structure & Hygiene -->
	<mug:Section code="1.4" title="Structure &amp; Hygiene" position="4">
		<mug:Requirement id="15" position="1" origin="feat" error_types="architectural" test_approaches="linter pytest">Every directory under `src/&lt;pkg&gt;` with `.py` files has an `__init__.py`.</mug:Requirement>
		<mug:Requirement id="16" position="2" origin="feat" error_types="semantic architectural" test_approaches="linter pytest">No wildcard imports (`from X import *`) in package code.</mug:Requirement>
		<mug:Requirement id="17" position="3" origin="feat" error_types="runtime architectural" test_approaches="linter pytest">Package code does not mutate `sys.path`.</mug:Requirement>
	</mug:Section>
	<!-- 5. Commit Hygiene & Versioning -->
	<mug:Section code="1.5" title="Commit Hygiene &amp; Versioning" position="5">
		<mug:Requirement id="18" position="1" origin="test" error_types="semantic" test_approaches="build_ci pytest">`commitlint.config.js` present.</mug:Requirement>
		<mug:Requirement id="19" position="2" origin="test" error_types="semantic" test_approaches="build_ci pytest">Husky commit-msg hook present (`.husky/commit-msg`).</mug:Requirement>
		<mug:Requirement id="20" position="3" origin="test" error_types="semantic" test_approaches="build_ci">CI runs commitlint on push/PR.</mug:Requirement>
		<mug:Requirement id="21" position="4" origin="build" error_types="semantic" test_approaches="build_ci pytest">Conventional changelog config present (`.conventional-changelogrc.js`).</mug:Requirement>
		<mug:Requirement id="22" position="5" origin="build" error_types="semantic" test_approaches="build_ci pytest">`package.json` defines `changelog` script and `CHANGELOG.md` is tracked.</mug:Requirement>
	</mug:Section>
	<!-- 6. CI / Automation -->
	<mug:Section code="1.6" title="CI / Automation" position="6">
		<mug:Requirement id="23" position="1" origin="test" error_types="build_deployment" test_approaches="build_ci">PR checks workflow exists (runs Ruff, mypy, pytest).</mug:Requirement>
		<mug:Requirement id="24" position="2" origin="test" error_types="build_deployment" test_approaches="build_ci">CI-CD workflow exists (runs on pushes to main and tags v*.*.*).</mug:Requirement>
		<mug:Requirement id="25" position="3" origin="chore" error_types="build_deployment" test_approaches="build_ci">Repository has either `pyproject.toml` or `.github/workflows/` (baseline CI/lint presence).</mug:Requirement>
		<mug:Requirement id="36" position="4" origin="test" error_types="build_deployment runtime" test_approaches="build_ci">
      CI performs a packaging smoke test: (1) `python -m build --sdist --wheel`; (2) install built wheel via `pip install --no-index --find-links=dist *.whl`; (3) import the package and print its version (`python -c "import &lt;pkg&gt;; print(&lt;pkg&gt;.__version__)"`). Fails build if import or packaging parity is broken.
    </mug:Requirement>
	</mug:Section>
	<!-- 7. Cross-Project Scripts -->
	<mug:Section code="1.7" title="Cross-Project Scripts" position="7">
		<mug:Requirement id="26" position="1" origin="chore" error_types="build_deployment" test_approaches="pytest build_ci">`scripts/` folder exists with portable utilities.</mug:Requirement>
		<mug:Requirement id="27" position="2" origin="chore" error_types="build_deployment" test_approaches="pytest">Includes at least one packaging helper (`scripts/package.ps1` or `scripts/package.sh`).</mug:Requirement>
	</mug:Section>
	<!-- 8. Logging & Error Handling -->
	<mug:Section code="1.8" title="Logging &amp; Error Handling" position="8">
		<mug:Requirement id="28" position="1" origin="test" error_types="runtime logical" test_approaches="pytest linter">Logging setup configures both console and file handlers (e.g., StreamHandler + RotatingFileHandler).</mug:Requirement>
		<mug:Requirement id="29" position="2" origin="test" error_types="runtime logical" test_approaches="pytest">A global error handler is installed (e.g., `sys.excepthook`).</mug:Requirement>
	</mug:Section>
	<!-- 9. Testing Practices -->
	<mug:Section code="1.9" title="Testing Practices" position="9">
		<mug:Requirement id="30" position="1" origin="test" error_types="logical runtime" test_approaches="pytest build_ci">Coverage tracking is enabled: `pytest-cov` is configured (e.g., `--cov=&lt;pkg&gt; --cov-report=term-missing`) and coverage configuration exists (e.g., `.coveragerc`).</mug:Requirement>
		<mug:Requirement id="31" position="2" origin="feat" error_types="semantic" test_approaches="pytest manual_review">Project-level fixtures are centralized: `tests/conftest.py` exists to define shared fixtures.</mug:Requirement>
		<mug:Requirement id="32" position="3" origin="feat" error_types="semantic" test_approaches="pytest">A mocking plugin or strategy is available for tests (e.g., `pytest-mock`) or an equivalent mocking approach is documented.</mug:Requirement>
	</mug:Section>
	<mug:Section code="1.10" title="Commit Hygiene &amp; Versioning 2" position="10">
		<mug:Requirement id="40" position="1" origin="test" error_types="semantic" test_approaches="build_ci">The repository must include a `commitlint.config.js` file. (Already documented in id=18.)</mug:Requirement>
		<mug:Requirement id="41" position="2" origin="test" error_types="semantic" test_approaches="build_ci">The repository must include a Husky commit-msg hook at `.husky/commit-msg`. (Already documented in id=19.)</mug:Requirement>
		<mug:Requirement id="42" position="3" origin="test" error_types="semantic" test_approaches="build_ci">CI must run commitlint on both push events and pull requests. (Already documented in id=20.)</mug:Requirement>
		<mug:Requirement id="43" position="4" origin="build" error_types="semantic" test_approaches="build_ci">The repository must include a conventional changelog configuration at `.conventional-changelogrc.js`. (Already documented in id=21.)</mug:Requirement>
		<mug:Requirement id="44" position="5" origin="build" error_types="semantic" test_approaches="build_ci">The `package.json` file must define a `changelog` script. (Already documented in id=22.)</mug:Requirement>
		<mug:Requirement id="45" position="6" origin="build" error_types="semantic" test_approaches="build_ci">A `CHANGELOG.md` file must be tracked in the repository. (Already documented in id=22.)</mug:Requirement>
		<mug:Requirement id="46" position="7" origin="test" error_types="semantic" test_approaches="build_ci">Commitlint must validate commit messages on pull requests using the range: --from ${{ github.event_pull_request.base.sha }} --to ${{ github.sha }}.</mug:Requirement>
		<mug:Requirement id="47" position="8" origin="test" error_types="semantic" test_approaches="build_ci">Commitlint must validate commit messages on push events using the range: --from ${{ github.event.before }} --to ${{ github.sha }}, and must skip validation if github.event.before equals 0000000000000000000000000000000000000000.</mug:Requirement>
	</mug:Section>
	<mug:Section code="1.11" title="CI / Automation 2" position="11">
		<!-- PR checks workflow -->
		<mug:Requirement id="48" position="1" origin="test" error_types="build_deployment" test_approaches="build_ci">A PR checks workflow must trigger on pull requests that modify Python source or configuration files.</mug:Requirement>
		<mug:Requirement id="49" position="2" origin="test" error_types="build_deployment" test_approaches="build_ci">The PR checks workflow must include a job that runs Ruff lint. (Already documented in id=23.)</mug:Requirement>
		<mug:Requirement id="50" position="3" origin="test" error_types="build_deployment" test_approaches="build_ci">The PR checks workflow must include a job that runs mypy type checking. (Already documented in id=23.)</mug:Requirement>
		<mug:Requirement id="51" position="4" origin="test" error_types="build_deployment" test_approaches="build_ci">The PR checks workflow must include a job that runs pytest. (Already documented in id=23.)</mug:Requirement>
		<mug:Requirement id="52" position="5" origin="test" error_types="build_deployment" test_approaches="build_ci">All jobs in the PR checks workflow must run on self-hosted runners.</mug:Requirement>
		<mug:Requirement id="53" position="6" origin="test" error_types="build_deployment" test_approaches="build_ci">All jobs in the PR checks workflow must use Python 3.11.</mug:Requirement>
		<mug:Requirement id="54" position="7" origin="perf" error_types="build_deployment" test_approaches="build_ci">Pip caching must be enabled for Python jobs in the PR checks workflow.</mug:Requirement>
		<!-- Commitlint workflow -->
		<mug:Requirement id="55" position="8" origin="test" error_types="semantic" test_approaches="build_ci">A commitlint workflow must trigger on both pull requests and push events. (Already documented in id=42.)</mug:Requirement>
		<mug:Requirement id="56" position="9" origin="test" error_types="semantic" test_approaches="build_ci">The commitlint workflow must set up Node.js 18.</mug:Requirement>
		<mug:Requirement id="57" position="10" origin="test" error_types="semantic" test_approaches="build_ci">The commitlint workflow must install dependencies using `npm ci`.</mug:Requirement>
		<mug:Requirement id="58" position="11" origin="test" error_types="semantic" test_approaches="build_ci">The commitlint workflow must validate commit messages using the correct commit ranges, as defined in requirements 46 and 47.</mug:Requirement>
		<!-- CI-CD workflow -->
		<mug:Requirement id="59" position="12" origin="test" error_types="build_deployment" test_approaches="build_ci">A CI-CD workflow must trigger on pushes to the `main` branch and on tags matching `v*.*.*`. (Already documented in id=24.)</mug:Requirement>
		<mug:Requirement id="60" position="13" origin="ci" error_types="build_deployment" test_approaches="build_ci">The CI-CD workflow must define workflow-level permissions as `contents: write`.</mug:Requirement>
		<mug:Requirement id="61" position="14" origin="test" error_types="build_deployment" test_approaches="build_ci">The CI-CD workflow must include a test job that runs pytest.</mug:Requirement>
		<mug:Requirement id="62" position="15" origin="build" error_types="build_deployment" test_approaches="build_ci">The CI-CD workflow must include a build job that runs `python -m build` to produce a wheel and source distribution.</mug:Requirement>
		<mug:Requirement id="63" position="16" origin="build" error_types="build_deployment" test_approaches="build_ci">The build job must upload `dist/*` artifacts when running on a tag.</mug:Requirement>
		<mug:Requirement id="64" position="17" origin="build" error_types="build_deployment" test_approaches="build_ci">The deploy job must download the build artifacts.</mug:Requirement>
		<mug:Requirement id="65" position="18" origin="build" error_types="integration_contract semantic" test_approaches="build_ci">The deploy job must validate that the git tag matches the `version` field in `pyproject.toml`.</mug:Requirement>
		<mug:Requirement id="66" position="19" origin="build" error_types="build_deployment" test_approaches="build_ci">The deploy job must publish the package to PyPI using a classic API token (`TWINE_USERNAME=__token__`, `TWINE_PASSWORD=${{ secrets.PYPI_API_TOKEN }}`).</mug:Requirement>
		<mug:Requirement id="67" position="20" origin="ci" error_types="build_deployment" test_approaches="build_ci">The CI-CD workflow may optionally create a GitHub Release after publishing to PyPI, permitted by workflow-level `contents: write`.</mug:Requirement>
		<!-- Packaging smoke test -->
		<mug:Requirement id="68" position="21" origin="test" error_types="build_deployment runtime" test_approaches="build_ci">The CI pipeline must build a wheel and source distribution using `python -m build --sdist --wheel`. (Already documented in id=36.)</mug:Requirement>
		<mug:Requirement id="69" position="22" origin="test" error_types="build_deployment runtime" test_approaches="build_ci">The CI pipeline must install the built wheel using `pip install --no-index --find-links=dist *.whl`. (Already documented in id=36.)</mug:Requirement>
		<mug:Requirement id="70" position="23" origin="test" error_types="build_deployment runtime" test_approaches="build_ci">The CI pipeline must import the package and print its version using `python -c "import &lt;pkg&gt;; print(&lt;pkg&gt;.__version__)"`. (Already documented in id=36.)</mug:Requirement>
	</mug:Section>
	<mug:Section code="1.12" title="CLI &amp; Entry Points" position="12">
		<mug:Requirement id="71" position="1" origin="build" error_types="build_deployment integration_contract" test_approaches="build_ci pytest">`[project.scripts]` defines a `mug` console script that maps to `mug.cli:main`.</mug:Requirement>
		<mug:Requirement id="72" position="2" origin="feat" error_types="semantic" test_approaches="manual_review build_ci">The project may provide a `mug-validate` console script alias that invokes the same validator entry point as `mug`.</mug:Requirement>
		<mug:Requirement id="73" position="3" origin="feat" error_types="runtime build_deployment" test_approaches="build_ci pytest">`src/&lt;pkg&gt;/__main__.py` exists so `python -m mug` executes the CLI’s `main()` function.</mug:Requirement>
		<mug:Requirement id="74" position="4" origin="docs" error_types="semantic" test_approaches="manual_review">Documentation instructs users to run `mug …` or `python -m mug …` and explicitly forbids `python -m mug-validate` (hyphens are invalid in module paths).</mug:Requirement>
		<mug:Requirement id="75" position="5" origin="docs" error_types="semantic build_deployment" test_approaches="manual_review">Console scripts (e.g., `mug`, `mug-validate`) are available only after installation; the repository must not rely on non-installed execution of those commands.</mug:Requirement>
		<mug:Requirement id="76" position="6" origin="build" error_types="integration_contract semantic" test_approaches="manual_review build_ci">Script names may contain hyphens, but the target module path in `[project.scripts]` must not (e.g., `mug-validate = "mug.cli:cli_validate"` is valid, whereas `mug-validate = "mug-validate.cli:main"` is not).</mug:Requirement>
		<mug:Requirement id="77" position="24" origin="feat" error_types="semantic runtime" test_approaches="pytest build_ci">Package must expose a `__version__` attribute in `src/mug/__init__.py` sourced from importlib.metadata, and `get_version()` must return it.</mug:Requirement>
	</mug:Section>
</mug:RequirementsSpec>
