# fairlib.core.interfaces/security.py
"""
This module defines the abstract interface for a Security Manager.

An agent that can execute code or interact with external data sources must have
robust security measures. This interface provides a contract for components that
are responsible for mitigating risks such as arbitrary code execution and handling
of potentially malicious inputs.
"""

import abc
from typing import Any, Optional

class AbstractSecurityManager(abc.ABC):
    """
    An abstract interface for a class that handles security-sensitive operations.

    A concrete implementation of this class is responsible for two primary duties:
    1.  **Sandboxing**: Providing a secure, isolated environment for executing
        code generated by a language model, preventing it from accessing or
        harming the host system.
    2.  **Input Validation**: Inspecting and validating data received from
        external sources (e.g., users, tools) to ensure it is safe and conforms
        to expected formats.
    """
    @abc.abstractmethod
    def sandbox_code_execution(self, code: str, language: str = "python") -> Any:
        """
        Synchronously executes a string of code in a sandboxed environment.

        Args:
            code: The string of code to be executed.
            language: The programming language of the code (defaults to "python").

        Returns:
            The result of the execution, which could be the standard output,
            an error message, or a return value. Typed as `Any` for flexibility.
        """
        ...

    @abc.abstractmethod
    async def asandbox_code_execution(self, code: str, language: str = "python") -> Any:
        """
        Asynchronously executes a string of code in a sandboxed environment.

        This is the asynchronous version of `sandbox_code_execution` and should be
        preferred in asyncio applications.

        Args:
            code: The string of code to be executed.
            language: The programming language of the code (defaults to "python").

        Returns:
            The result of the execution.
        """
        ...

    @abc.abstractmethod
    def validate_input(self, input_data: Any, schema: Optional[dict] = None) -> bool:
        """
        Validates input data against a set of rules or a schema.

        This method can be used to check for prompt injection, ensure data types
        are correct, or verify that the input conforms to a predefined structure.

        Args:
            input_data: The data to validate (e.g., user prompt, tool arguments).
            schema: An optional dictionary representing a validation schema (e.g.,
                    a JSON Schema or Pydantic model definition) that the input
                    data must adhere to.

        Returns:
            `True` if the input is valid and safe, `False` otherwise.
        """
        ...