[project]
name = "eta-nexus"
version = "0.1.1"
description = "Provides a standardized way to connect to machines and devices in a factory or other factory systems"
license = "BSD-2-Clause"
readme = "README.rst"
requires-python = ">=3.10.16, <3.12.0"
dynamic = ["classifiers"]
authors = [
    {name = "Technical University of Darmstadt, Institute for Production Management, Technology and Machine Tools (PTW)", email="info@ptw.tu-darmstadt.de"}
]
maintainers = [
  {name = "Andreas Clement", email = "A.Clement@PTW.TU-Darmstadt.de"},
  {name = "Jerome Stock", email = "J.Stock@PTW.TU-Darmstadt.de"},
  {name= "Julius Balzer", email = "julius.balzer@stud.tu-darmstadt.de"}
]
keywords = [
    "connectivity", "servers", "iot", "multi-protocol", "eta-fabrik"
]

dependencies = [
    "attrs >=23.1.0,<24.0.0",
    "python-dateutil >=2.8.2,<3.0.0",
    "numpy >=1.26.0,<2.0.0",
    "pandas[excel, xml] >=2.2.2,<2.3.0",
    "asyncua-fork-for-eta-utility ==1.0.7",
    "requests >=2.31.0,<3.0.0",
    "pymodbustcp >=0.2.0,<0.4.0",
    "cryptography >=41.0.4,<42.0.0",
    "wetterdienst >=0.88.0,<0.89.0",  # breaking changes expected
    "requests-cache >=1.2.0,<2.0.0",
    "pyyaml >=6.0.2,<7.0.0",
    "toml >=0.10.2,<0.11.0",
    "python-dotenv >=1.0.1,<2.0.0",
]

[project.optional-dependencies]
examples = [
    "onnxruntime>=1.21.0"
]
docs = [
    "sphinx >=8.0.0,<9.0.0",
    "sphinx-rtd-theme >=3.0.0,<4.0.0",
    "sphinx-copybutton >=0.5.2,<0.6.0",
    "esbonio >=0.16.5,<0.17.0",
]

[project.urls]
homepage = "https://www.ptw.tu-darmstadt.de"
repository = "https://git.ptw.maschinenbau.tu-darmstadt.de/eta-fabrik/public/eta-nexus"
documentation = "https://eta-nexus.readthedocs.io/"
issues = "https://git.ptw.maschinenbau.tu-darmstadt.de/eta-fabrik/public/eta-nexus/-/issues"

[tool.poetry]
requires-poetry = ">=2.0"

# Classifiers are defined in the poetry section to dynamically add the python version
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Manufacturing",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]
include = [
    {path="examples/", format=["sdist", "wheel"]}
]

[tool.poetry.group.examples.dependencies]
# Versions defined above to ensure pip compatibility
onnxruntime= "*"

[tool.poetry.group.docs.dependencies]
# Versions defined above to ensure pip compatibility
sphinx = "*"
sphinx-rtd-theme = "*"
sphinx-copybutton = "*"
esbonio = "*"

#  '^' limits to the next major version, '~' limits to the next minor version
# e.g. ^3.9.0: 3.9.0 <= x < 4.0.0 and ~3.9.0: 3.9.0 <= x < 3.10.0
[tool.poetry.group.dev.dependencies]
# Dev install assumes poetry, so pip compatibility is not needed
pre-commit = "^4.2.0"
# tests
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-timeout = "^2.3.1"
openpyxl = "^3.1.2"
# linting / formatting
ruff = "~0.11.2"
codespell = "^2.3.0"
# typing
mypy = "~1.15"
types-python-dateutil = "^2.8.19.14"
types-requests = "^2.31.0.10"
types-pytz = "^2025.2.0.20250326"

[tool.mypy]
python_version = "3.10"
files = ["eta_nexus", "examples"]
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
show_column_numbers = true

exclude = [
    "docs/conf.py",
    "^test/",
]

[[tool.mypy.overrides]]
module = [
    "fmpy.*",
    "pandas.*",
    "opcua.*",
    "pyModbusTCP.*",
    "lxml.*",
    "onnxruntime.*",
    "asyncua.*",
    "wetterdienst.*",
    "requests_cache.*",
    "toml.*",
    "yaml.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "test.*"
ignore_errors = true

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning:.*site-packages.*"
addopts = ["--cov-config=pyproject.toml", "--color=yes"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "[%(levelname)s: %(name)s] %(message)s"
testpaths = [
    "test",
]
markers = [
    "disable_logging: Disable logging for the marked test",
]

# Configuration for pytest-cov
[tool.coverage.run]
source = [
    "eta_nexus"
]
omit = [
    "*/venv/*",
    "*/.venv/*",
    "*/docs/*",
    "*/build/*",
    "*/dist/*",
    "*/eta_nexus/type_hints/*",
]

[tool.coverage.report]
exclude_lines = [
    # These lines are excluded from coverage because they are not meant to be tested
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
    'pass',
]

[tool.ruff]
line-length = 120
indent-width = 4
required-version = ">=0.11.2"
target-version= "py310"
output-format = "concise"
# Only fix with $ruff check --fix
fix = false

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401", "ANN001",  # Don't use `Any` as type annotation
    "ARG",      # Unused method arguments
    "BLE001",   # Catch blind exception
    "C901",     # Complex logic
    "D",        # Docstrings
    "DTZ",      # Datetime timezone
    "EM10",     # Strings in exception messages
    "G004",     # Logging statement uses f-string
    "PERF203",  # try - except performance overhead in loop
    "PLR2004",  # Pylint: magic values
    "SLF",      # Private member accessed
    "TD002", "FIX",  # Ignore TODO authors
    "TRY003",   # Avoid specifying long messages outside the exception class
    # Recommended to ignore as they conflict with the formatter
    "W191", "E111", "E114", "E117", "D206", "D300", "COM812", "COM819", "ISC001",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["PLC0414"]
"test/*" = ["RUF012", "S", "ANN", "D", "SIM"]
"examples/*" = ["S106", "D"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.pylint]
max-args = 15
max-branches = 21
max-statements = 62
max-returns = 6

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.codespell]
skip = "*.js, *.html, *.lock, */Manifest.toml, ./docs/_build"
ignore-words-list = ["Temperatur"]
quiet-level = 3

[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"
