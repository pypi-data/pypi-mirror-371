diff --git a/scipy/io/matlab/_mio5.py b/scipy/io/matlab/_mio5.py
index 7200b75b3..c5735572a 100644
--- a/scipy/io/matlab/_mio5.py
+++ b/scipy/io/matlab/_mio5.py
@@ -97,7 +97,8 @@ from ._mio5_params import (MatlabObject, MatlabFunction, MDTYPES, NP_TO_MTYPES,
                           NP_TO_MXTYPES, miCOMPRESSED, miMATRIX, miINT8,
                           miUTF8, miUINT32, mxCELL_CLASS, mxSTRUCT_CLASS,
                           mxOBJECT_CLASS, mxCHAR_CLASS, mxSPARSE_CLASS,
-                          mxDOUBLE_CLASS, mclass_info, mat_struct)
+                          mxDOUBLE_CLASS, mclass_info, mat_struct,
+                          mxOPAQUE_CLASS, MatlabOpaque)
 
 from ._streams import ZlibInputStream
 
@@ -598,7 +599,8 @@ class VarWriter5:
         af['nzmax'] = nzmax
         self.write_bytes(af)
         # shape
-        self.write_element(np.array(shape, dtype='i4'))
+        if shape is not None:
+            self.write_element(np.array(shape, dtype='i4'))
         # write name
         name = np.asarray(name)
         if name == '':  # empty string zero-terminated
@@ -659,7 +661,9 @@ class VarWriter5:
         narr = to_writeable(arr)
         if narr is None:
             raise TypeError(f'Could not convert {arr} (type {type(arr)}) to array')
-        if isinstance(narr, MatlabObject):
+        if isinstance(narr, MatlabOpaque):
+            self.write_opaque(narr)
+        elif isinstance(narr, MatlabObject):
             self.write_object(narr)
         elif isinstance(narr, MatlabFunction):
             raise MatWriteError('Cannot write matlab functions')
@@ -813,6 +817,17 @@ class VarWriter5:
                            mdtype=miINT8)
         self._write_items(arr)
 
+    def write_opaque(self, arr):
+        '''Array Flags, Var Name, Type System, Class Name, Metadata'''
+        self.write_header(None, mxOPAQUE_CLASS)
+        # Write Type System
+        self.write_element(np.array(arr['_TypeSystem'].item(), dtype='S'),
+                           mdtype=miINT8)
+        # Write Classname
+        self.write_element(np.array(arr['_Class'].item(), dtype='S'),
+                           mdtype=miINT8)
+        self.write(arr['_ObjectMetadata'].item())
+
 
 class MatFile5Writer:
     ''' Class for writing mat5 files '''
@@ -881,7 +896,9 @@ class MatFile5Writer:
             self.write_file_header()
         self._matrix_writer = VarWriter5(self)
         for name, var in mdict.items():
-            if name[0] == '_':
+            if name == '__subsystem__':
+                name = ''
+            elif name[0] == '_':
                 msg = (f"Starting field name with a "
                        f"underscore ({name}) is ignored")
                 warnings.warn(msg, MatWriteWarning, stacklevel=2)
diff --git a/scipy/io/matlab/_mio5_params.py b/scipy/io/matlab/_mio5_params.py
index 0d60b8e7a..2ad2b90fe 100644
--- a/scipy/io/matlab/_mio5_params.py
+++ b/scipy/io/matlab/_mio5_params.py
@@ -278,4 +278,4 @@ class MatlabOpaque(np.ndarray):
 
 
 OPAQUE_DTYPE = np.dtype(
-    [('s0', 'O'), ('s1', 'O'), ('s2', 'O'), ('arr', 'O')])
+    [('_TypeSystem', 'O'), ('_Class', 'O'), ('_ObjectMetadata', 'O')])
diff --git a/scipy/io/matlab/_mio5_utils.pyx b/scipy/io/matlab/_mio5_utils.pyx
index b7abd7104..0cf2708dd 100644
--- a/scipy/io/matlab/_mio5_utils.pyx
+++ b/scipy/io/matlab/_mio5_utils.pyx
@@ -596,7 +596,7 @@ cdef class VarReader5:
         # all miMATRIX types except the mxOPAQUE_CLASS have dims and a
         # name.
         if mc == mxOPAQUE_CLASS:
-            header.name = None
+            header.name = self.read_int8_string()
             header.dims = None
             return header
         header.n_dims = self.read_into_int32s(header.dims_ptr, sizeof(header.dims_ptr))
@@ -986,8 +986,7 @@ cdef class VarReader5:
         # Cython (0.23.4).
         res = np.empty((1,), dtype=OPAQUE_DTYPE)
         res0 = res[0]
-        res0['s0'] = self.read_int8_string()
-        res0['s1'] = self.read_int8_string()
-        res0['s2'] = self.read_int8_string()
-        res0['arr'] = self.read_mi_matrix()
+        res0['_TypeSystem'] = PyUnicode_FromString(self.read_int8_string())
+        res0['_Class'] = PyUnicode_FromString(self.read_int8_string())
+        res0['_ObjectMetadata'] = self.read_mi_matrix()
         return res
