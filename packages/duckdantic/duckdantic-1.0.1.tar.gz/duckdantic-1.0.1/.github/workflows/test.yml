---
name: üß™ Test
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  contents: read
jobs:
  setup:
    name: ‚öôÔ∏è Setup
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.find-packages.outputs.packages }}
      package_count: ${{ steps.find-packages.outputs.package_count }}
      resource-paths: ${{ steps.gitignore.outputs.resource-paths }}
      paths-ignore: ${{ steps.gitignore.outputs.paths-ignore }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}
      - name: üîç Parse Gitignore
        id: gitignore
        uses: ./.github/actions/parse-gitignore
      - name: üîç Find Packages
        id: find-packages
        uses: ./.github/actions/find-packages
      - name: üìä Show Setup Info
        run: |
          echo "Found ${{ steps.find-packages.outputs.package_count }} packages:"
          echo "${{ steps.find-packages.outputs.packages }}"
          echo "Paths to ignore: ${{ steps.gitignore.outputs.paths-ignore }}"
          echo "Resource paths: ${{ steps.gitignore.outputs.resource-paths }}"
  lint:
    name: üßπ Pre-commit Lint
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.package_count > 0 }}
    env:
      ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_DEBUG || 'false' }}
      RESOURCE_PATHS: ${{ needs.setup.outputs.resource-paths }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}
      - name: üì¶ Get Root Poetry Info
        id: poetry
        uses: ./.github/actions/get-root-poetry-info
      - name: üêç Set up Python ${{ steps.poetry.outputs.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.poetry.outputs.python }}
      - name: üì¶ Install Pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: ‚úÖ Run Pre-commit
        run: |
          # Skip resource files based on patterns from gitignore
          if [ -n "$RESOURCE_PATHS" ]; then
            echo "Skipping resource paths: $RESOURCE_PATHS"
            FILES=$(git ls-files | grep -v -E "$RESOURCE_PATHS")
            pre-commit run --files $FILES
          else
            pre-commit run --all-files
          fi
  test-packages:
    name: üß™ Test ${{ matrix.package }}
    needs: setup
    if: ${{ needs.setup.outputs.package_count > 0 }}
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_DEBUG || 'false' }}
    strategy:
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
      fail-fast: false
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}
      - name: üì¶ Get Package Poetry Info
        id: package-info
        uses: ./.github/actions/get-package-poetry-info
        with:
          package: ${{ matrix.package }}
      - name: üêç Set up Python ${{ steps.package-info.outputs.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.package-info.outputs.python }}
      - name: üõ† Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ steps.package-info.outputs.poetry_version }}
      - name: üå± Install Dependencies
        run: |
          cd packages/${{ matrix.package }}
          poetry install --with dev --no-interaction
      - name: ‚úÖ Run Tests
        run: |
          cd packages/${{ matrix.package }}
          RESOURCE_PATHS="${{ needs.setup.outputs.resource-paths }}"
          if [ -d "tests" ] || [ -d "src/haive/tests" ] || [ -d "src/haive/*/tests" ]; then
            if [ -n "$RESOURCE_PATHS" ]; then
              echo "Skipping resource paths in tests: $RESOURCE_PATHS"
              poetry run pytest -xvs --ignore-glob="$RESOURCE_PATHS"
            else
              poetry run pytest -xvs
            fi
          else
            echo "No tests found for ${{ matrix.package }}, skipping"
          fi
  type-check:
    name: üîé Type Check ${{ matrix.package }}
    needs: setup
    if: ${{ needs.setup.outputs.package_count > 0 }}
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_DEBUG || 'false' }}
    strategy:
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
      fail-fast: false
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}
      - name: üì¶ Get Package Poetry Info
        id: package-info
        uses: ./.github/actions/get-package-poetry-info
        with:
          package: ${{ matrix.package }}
      - name: üêç Set up Python ${{ steps.package-info.outputs.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.package-info.outputs.python }}
      - name: üõ† Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ steps.package-info.outputs.poetry_version }}
      - name: üå± Install Dependencies & Mypy
        run: |
          cd packages/${{ matrix.package }}
          poetry install --with dev --no-interaction
      - name: üîç Run Mypy
        run: |-
          cd packages/${{ matrix.package }}
          RESOURCE_PATHS="${{ needs.setup.outputs.resource-paths }}"
          if [ -d "src" ]; then
            if [ -n "$RESOURCE_PATHS" ]; then
              echo "Type checking src directory (excluding resources)"
              # Create a list of directories to exclude
              EXCLUDE_ARGS=""
              for pattern in $(echo "$RESOURCE_PATHS" | tr ',' '\n'); do
                if [ -d "src/$pattern" ]; then
                  EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude src/$pattern"
                fi
              done
              poetry run mypy src $EXCLUDE_ARGS --ignore-missing-imports
            else
              poetry run mypy src --ignore-missing-imports
            fi
          fi
          if [ -d "tests" ]; then
            if [ -n "$RESOURCE_PATHS" ]; then
              echo "Type checking tests directory (excluding resources)"
              # Create a list of directories to exclude
              EXCLUDE_ARGS=""
              for pattern in $(echo "$RESOURCE_PATHS" | tr ',' '\n'); do
                if [ -d "tests/$pattern" ]; then
                  EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude tests/$pattern"
                fi
              done
              poetry run mypy tests $EXCLUDE_ARGS --ignore-missing-imports
            else
              poetry run mypy tests --ignore-missing-imports
            fi
          fi
