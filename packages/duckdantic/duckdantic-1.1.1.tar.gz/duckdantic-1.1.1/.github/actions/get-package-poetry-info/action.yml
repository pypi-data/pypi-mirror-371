---
name: Get Package Poetry Info
description: Extracts Poetry information from a specific package
inputs:
  package:
    description: Package name to analyze (relative to packages/)
    required: true
outputs:
  name:
    description: Package name
    value: ${{ steps.extract.outputs.name }}
  version:
    description: Package version
    value: ${{ steps.extract.outputs.version }}
  python:
    description: Python version requirement
    value: ${{ steps.extract.outputs.python }}
  poetry_version:
    description: Poetry version requirement
    value: ${{ steps.extract.outputs.poetry_version }}
runs:
  using: composite
  steps:
    - id: extract
      shell: bash
      run: |-
        PACKAGE_DIR="packages/${{ inputs.package }}"
        PYPROJECT_PATH="${PACKAGE_DIR}/pyproject.toml"

        # Debug information
        echo "Current directory: $(pwd)"
        echo "Looking for: $PYPROJECT_PATH"
        echo "Directory exists: $([ -d "$PACKAGE_DIR" ] && echo 'Yes' || echo 'No')"
        ls -la "$PACKAGE_DIR" || true
        echo "File exists: $([ -f "$PYPROJECT_PATH" ] && echo 'Yes' || echo 'No')"

        # Try with absolute path too
        ABSOLUTE_PATH="$(pwd)/$PYPROJECT_PATH"
        echo "Absolute path: $ABSOLUTE_PATH"
        echo "Absolute file exists: $([ -f "$ABSOLUTE_PATH" ] && echo 'Yes' || echo 'No')"

        # Check if package directory and pyproject.toml exist
        if [ ! -d "$PACKAGE_DIR" ]; then
          echo "::error::Package directory '$PACKAGE_DIR' not found"
          exit 1
        fi
        if [ ! -f "$PYPROJECT_PATH" ]; then
          # Try finding by pattern
          echo "Searching for pyproject.toml in package directory:"
          find "$PACKAGE_DIR" -name "pyproject.toml" -type f
          echo "::error::pyproject.toml not found at '$PYPROJECT_PATH'"
          exit 1
        fi
        echo "Extracting Poetry info from: $PYPROJECT_PATH"

        # Default values
        NAME="${{ inputs.package }}"
        VERSION="0.1.0"
        PYTHON_VERSION="3.12"
        POETRY_VERSION="1.8.0"

        # Extract name and version using grep
        if grep -q "name =" "$PYPROJECT_PATH"; then
          NAME=$(grep "name =" "$PYPROJECT_PATH" | head -n 1 | cut -d '"' -f2 || echo "${{ inputs.package }}")
        fi
        if grep -q "version =" "$PYPROJECT_PATH"; then
          VERSION=$(grep "version =" "$PYPROJECT_PATH" | head -n 1 | cut -d '"' -f2 || echo "0.1.0")
        fi

        # Extract Python version
        if grep -q "python =" "$PYPROJECT_PATH"; then
          PY_CONSTRAINT=$(grep "python =" "$PYPROJECT_PATH" | head -n 1)
          if [[ "$PY_CONSTRAINT" =~ ([0-9]+\.[0-9]+) ]]; then
            PYTHON_VERSION="${BASH_REMATCH[1]}"
          fi
        fi

        # Extract Poetry version from build-system
        if grep -q "poetry-core" "$PYPROJECT_PATH"; then
          if [[ $(grep "poetry-core" "$PYPROJECT_PATH") =~ poetry-core([><=~]+)([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            POETRY_VERSION="${BASH_REMATCH[2]}"
          fi
        fi

        # Set outputs
        echo "name=$NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "python=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        echo "poetry_version=$POETRY_VERSION" >> $GITHUB_OUTPUT

        # Set environment variables
        echo "name=$NAME" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_ENV
        echo "python=$PYTHON_VERSION" >> $GITHUB_ENV
        echo "poetry_version=$POETRY_VERSION" >> $GITHUB_ENV
