---
# ===================================================================
# üöÄ Haive Pre-commit Configuration
# Comprehensive code quality, security, and documentation enforcement
# ===================================================================
repos:
  # üîß Note: Trunk manages git hooks directly via trunk-fmt-pre-commit and trunk-check-pre-push
  # No need for trunk hooks in pre-commit - trunk handles this automatically
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: debug-statements
      - id: double-quote-string-fixer
      - id: name-tests-test
      - id: requirements-txt-fixer
  - repo: https://github.com/asottile/setup-cfg-fmt
    rev: v2.8.0
    hooks:
      - id: setup-cfg-fmt
  - repo: https://github.com/asottile/reorder-python-imports
    rev: v3.15.0
    hooks:
      - id: reorder-python-imports
        args: [--py39-plus, --add-import, from __future__ import annotations]
  - repo: https://github.com/asottile/add-trailing-comma
    rev: v3.2.0
    hooks:
      - id: add-trailing-comma
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.20.0
    hooks:
      - id: pyupgrade
        args: [--py39-plus]
  - repo: https://github.com/hhatto/autopep8
    rev: v2.3.2
    hooks:
      - id: autopep8
  - repo: https://github.com/PyCQA/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.0
    hooks:
      - id: mypy
  # üöÄ Core Python Formatting & Linting (Light pass - Trunk will do final formatting)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.6
    hooks:
      - id: ruff
        name: Ruff Linter (Quick Fix)
        args: [--fix, --exit-zero] # Don't fail on unfixed issues
      # COMMENTED - Let trunk handle final formatting
      # - id: ruff-format
      #   name: Ruff Formatter

  # üìù YAML Fix
  #- repo: https://github.com/lyz-code/yamlfix
  #  rev: 1.17.0
  #  hooks:
  #     - id: yamlfix
  #       exclude: (.venv|.venv/|.venv/.*|.*/.venv/.*)

  # üßπ Code Cleanup
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.3.1
    hooks:
      - id: autoflake
        name: Remove Unused Imports
        args:
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --in-place

  # üîß Advanced Formatting (COMMENTED - Duplicates above)
  # - repo: https://github.com/asottile/add-trailing-comma
  #   rev: v3.2.0
  #   hooks:
  #     - id: add-trailing-comma
  #       name: Add Trailing Commas
  #       args: [--py36-plus]
  # - repo: https://github.com/asottile/pyupgrade
  #   rev: v3.20.0
  #   hooks:
  #     - id: pyupgrade
  #       name: Modernize Python Syntax
  #       args: [--py312-plus]

  # üìù Docstring Formatting & Quality
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.7
    hooks:
      - id: docformatter
        name: Format Docstrings
        args:
          - --in-place
          - --recursive

  # üìä Documentation Coverage & Quality (DISABLED - plugin conflicts)
  # Temporarily disabled due to flake8 plugin conflicts and syntax errors
  # TODO: Re-enable after fixing plugin conflicts and syntax issues

  # üîí Security & Quality
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        name: Security Check
        args: [-c, pyproject.toml]

  # üìù Lazy Logger (f string logger linting)
  - repo: https://github.com/dmar1n/lazy-log-formatter
    rev: 0.6.2
    hooks:
      - id: lazy-log-formatter
        args: [--fix]

  # üìä Type Checking (COMMENTED - Duplicate of above mypy)
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.15.0
  #   hooks:
  #     - id: mypy
  #       name: Type Check
  #       additional_dependencies: [types-requests, types-PyYAML]
  #       args: [--ignore-missing-imports, --no-strict-optional]

  # üßæ Git & File Quality Hooks (COMMENTED - Duplicates above)
  # - repo: https://github.com/pre-commit/pre-commit-hooks
  #   rev: v5.0.0
  #   hooks:
  #     - id: trailing-whitespace
  #       name: Remove Trailing Whitespace
  #     - id: end-of-file-fixer
  #       name: Fix End of Files
  #     - id: check-yaml
  #       name: Check YAML
  #     - id: check-toml
  #       name: Check TOML
  #     - id: check-merge-conflict
  #       name: Check Merge Conflicts
  #     - id: debug-statements
  #       name: Check Debug Statements

  # üõ†Ô∏è Custom Haive Dev-Tools Integration
  - repo: local
    hooks:
      # üì¶ Import Quality Management
      - id: import-quality-check
        name: Import Quality Check
        entry: bash
        args:
          - -c
          - "echo '\U0001F4E6 Import quality check available (run: task import-quality)'"
        language: system
        types: [python]
        pass_filenames: false

      # üéØ Print Statement Management (Ruff T201)
      - id: ruff-print-check
        name: Remove Print Statements
        entry: uv run ruff check --select T201 --fix
        language: system
        types: [python]
        pass_filenames: true

  # ü§ñ Advanced Type Annotation Pipeline
  - repo: local
    hooks:
      - id: autotyping
        name: Auto-add Type Annotations
        entry: uv run autotyping
        language: system
        types: [python]
        pass_filenames: true
      - id: monkeytype-apply
        name: Apply MonkeyType Annotations
        entry: bash
        args:
          - -c
          - "echo '\U0001F412 MonkeyType annotations available (run: task monkeytype-apply-all)'"
        language: system
        types: [python]
        pass_filenames: false

  # üìö Enhanced Documentation Pipeline
  - repo: local
    hooks:
      - id: pydocstringformatter
        name: Format Docstrings (Alternative)
        entry: uv run pydocstringformatter
        args: [--write]
        language: system
        types: [python]
        pass_filenames: true
      - id: docstr-coverage-check
        name: Docstring Coverage Analysis
        entry: uv run docstr-coverage
        args: [--fail-under, "80"]
        language: system
        types: [python]
        pass_filenames: false

  # üîç Multiple Code Style Formatters (COMMENTED OUT - conflicts)
  # - repo: local
  #   hooks:
  #     # COMMENTED - Multiple formatters can conflict with ruff/black
  #     - id: yapf-format
  #       name: YAPF Code Formatting
  #       entry: uv run yapf
  #       args: [--in-place, --parallel]
  #       language: system
  #       types: [python]
  #       pass_filenames: true
  #     - id: autopep8-format
  #       name: AutoPEP8 Additional Formatting
  #       entry: uv run autopep8
  #       args: [--in-place, --aggressive, --aggressive]
  #       language: system
  #       types: [python]
  #       pass_filenames: true

  # üîç Comprehensive Flake8 Linting Suite (PARTIALLY COMMENTED)
  - repo: local
    hooks:
      # COMMENTED - Conflicts with ruff and has plugin issues
      # - id: flake8-comprehensive
      #   name: Flake8 + All Plugins
      #   entry: uv run flake8
      #   args: [--config, .flake8]
      #   language: system
      #   types: [python]
      #   pass_filenames: true
      - id: pycodestyle-pep8
        name: PEP 8 Style Check
        entry: uv run pycodestyle
        args: [--max-line-length=88, "--ignore=E203,W503"]
        language: system
        types: [python]
        pass_filenames: true
      - id: vulture-dead-code
        name: Find Dead Code (Vulture)
        entry: uv run vulture
        args: [--min-confidence=80]
        language: system
        types: [python]
        pass_filenames: true
      - id: eradicate-commented-code
        name: Remove Commented Code
        entry: uv run eradicate
        args: [--in-place]
        language: system
        types: [python]
        pass_filenames: true

  # üìñ Advanced Import Management
  - repo: local
    hooks:
      - id: absolufy-imports
        name: Convert to Absolute Imports
        entry: uv run absolufy-imports
        language: system
        types: [python]
        pass_filenames: true

  # üìù Documentation Quality Suite
  - repo: local
    hooks:
      - id: codespell-check
        name: Spell Check Code
        entry: uv run codespell
        args: [--write-changes]
        language: system
        pass_filenames: true

      # Proselint for documentation quality (configured to avoid false positives)
      - id: proselint-prose
        name: Prose Quality Check
        entry: uv run proselint
        language: system
        files: \.(md|rst|txt)$
        pass_filenames: true
        args: [--config, .proselintrc]

      # Pyspelling - now configured to only check specific files
      - id: pyspelling-advanced
        name: Advanced Spell Check
        entry: bash
        args:
          - -c
          - "echo '\U0001F4DD Advanced spell check available (run: uv run pyspelling)'"
        language: system
        files: \.(py|md|rst)$
        pass_filenames: false

      # Vale for Google-style docstrings
      - id: vale-prose-lint
        name: Vale Prose Linter
        entry: uv run vale
        language: system
        pass_filenames: true
        types: [markdown, rst, text]
        args: [--config=.vale.ini]

      # üß™ Advanced Documentation Testing
      #- repo: local
      #  hooks:
      # Commenting out as it's taking too long
      # - id: pytest-doctests
      #   name: Enhanced Doctest Validation
      #   entry: uv run pytest
      #   args: [--doctest-modules, --doctest-plus, packages/]
      #   language: system
      #   pass_filenames: false

      # Commenting out slow/problematic hooks
      # - id: pytest-checkdocs
      #   name: Documentation Validation
      #   entry: uv run pytest
      #   args: [--checkdocs, packages/]
      #   language: system
      #   pass_filenames: false

      # - id: pytest-markdown-docs
      #   name: Markdown Documentation Testing
      #   entry: uv run pytest
      #   args: [--markdown-docs, project_docs/]
      #   language: system
      #   pass_filenames: false

      # - id: pyroma-package-quality
      #   name: "Package Quality Assessment"
      #   entry: uv run pyroma
      #   args: [.]
      #   language: system
      #   pass_filenames: false

      # üß† Intelligent Error Pre-Check (Warning Only)
      # Commenting out - takes too long scanning all packages
      # - id: syntax-quality-check
      #   name: Syntax Quality Pre-Check
      #   entry: bash
      #   args:
      #     - -c
      #     - |
      #       ERRORS=$(find packages/ -name "*.py" -exec python3 -m py_compile {} \; 2>&1 | grep -c "SyntaxError\|IndentationError" || echo "0")
      #       if [ "$ERRORS" -gt 0 ]; then
      #         echo "‚ö†Ô∏è  $ERRORS syntax errors detected. Consider running: task fix-syntax"
      #       else
      #         echo "‚úÖ No syntax errors detected."
      #       fi
      #   language: system
      #   pass_filenames: false

      # üìã Changelog Fragment Check (Warning Only)
      - id: changelog-fragment-check
        name: Changelog Fragment Check
        entry: bash
        args:
          - -c
          - |
            if [ -n "$(git diff --cached --name-only | grep -E '^(packages/|src/)' | grep '\.py$')" ]; then
              if [ -z "$(find changes/ -name '*.md' -newer .git/COMMIT_EDITMSG 2>/dev/null)" ]; then
                echo "‚ö†Ô∏è  Consider adding a changelog fragment in changes/ for your changes."
              fi
            fi
            exit 0
        language: system
        pass_filenames: false
        always_run: true
        stages: [pre-commit]

  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.18.3
    hooks:
      - id: commitizen
        stages: [commit-msg]

      # üì¶ Update uv Requirements
      #- id: update-requirements
      #  name: Export uv requirements to docs/
      #  entry: scripts/dev/update_requirements.sh
      #  language: system
      #  pass_filenames: false
      #  files: ^(pyproject\.toml|uv\.lock)$
      #  stages: [pre-commit]
# ===================================================================
# üìã Pre-commit Configuration Settings
# ===================================================================
# üîß Trunk Integration - Now using trunk's native pre-commit-hooks linter
# Trunk now manages git hooks with pre-commit-hooks@5.0.0 enabled
# This reads our .pre-commit-config.yaml automatically!
default_stages: [pre-commit]
minimum_pre_commit_version: 3.0.0
fail_fast: false
default_language_version:
  python: python3.12
# ===================================================================
# üéØ Quality Standards Enforced
# ===================================================================
# ‚úÖ Code formatting: ruff, docformatter, trailing commas
# ‚úÖ Code quality: ruff linting, pyupgrade, autoflake
# ‚úÖ Security: bandit vulnerability scanning
# ‚úÖ Type safety: mypy static type checking
# ‚úÖ Documentation: 80%+ docstring coverage (interrogate)
# ‚úÖ Doc quality: darglint docstring-code sync validation
# ‚úÖ Sphinx docs: sphinx-lint for documentation files
# ‚úÖ Import management: comprehensive-import-manager.sh integration
# ‚úÖ File hygiene: trailing whitespace, EOF, YAML/TOML validation
# ‚úÖ Safety checks: no print statements, syntax validation
# ‚úÖ Git hygiene: merge conflict detection, debug statement removal
# ‚úÖ Changelog: fragment reminder for significant changes
# ===================================================================
