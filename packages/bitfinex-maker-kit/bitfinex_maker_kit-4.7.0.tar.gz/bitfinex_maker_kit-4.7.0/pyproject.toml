[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bitfinex-maker-kit"
version = "4.7.0"
description = "Professional market making toolkit for Bitfinex cryptocurrency exchange"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Bitfinex Maker-Kit Contributors"}]
keywords = ["bitfinex", "cryptocurrency", "trading", "market-making", "automated-trading"]
requires-python = ">=3.12"
dependencies = [
    "bitfinex-api-py>=3.0.0",
    "python-dotenv>=1.0.0",
    "asyncio>=3.4.3",
    "aiohttp>=3.8.0",
    "click>=8.0.0",
    "psutil>=5.9.0"
]

[project.optional-dependencies]
dev = [
    "ruff>=0.6.0",      # All-in-one linter and formatter
    "mypy>=1.5.0",      # Type checking
    "types-psutil",     # Type stubs for psutil
    "pytest>=7.4.0",    # Testing framework
    "pytest-cov>=4.1.0", # Coverage reporting
    "bandit>=1.7.5",    # Security scanning
    "hypothesis>=6.0.0", # Property-based testing
    "pytest-asyncio>=0.21.0", # Async test support
    "pytest-benchmark>=4.0.0"  # Performance benchmarking
]

[project.scripts]
bitfinex-maker-kit = "bitfinex_maker_kit.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["bitfinex_maker_kit*"]
exclude = ["tests*"]

# Ruff - All-in-one linter and formatter (replaces black, isort, flake8, pyupgrade)
[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E", "W",    # pycodestyle
    "F",         # pyflakes  
    "I",         # isort
    "B",         # flake8-bugbear
    "C4",        # flake8-comprehensions
    "UP",        # pyupgrade
    "SIM",       # flake8-simplify
    "RUF"        # Ruff-specific rules
]
ignore = [
    "E501",      # line too long (handled by formatter)
    "T201"       # Allow print statements (CLI tool)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# MyPy - Type checking
[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["bitfinex.*"]
ignore_missing_imports = true

# Coverage - Test coverage reporting (100% TARGET)
[tool.coverage.run]
source = ["bitfinex_maker_kit"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py"
]
branch = true
parallel = true

[tool.coverage.report]
fail_under = 10
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "# pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Maker-Kit Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Pytest - Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--cov=bitfinex_maker_kit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=10",
    "--strict-markers",
    "--tb=short"
]
markers = [
    "unit: Unit tests - fast, isolated tests using mocks",
    "integration: Integration tests - test component interactions", 
    "paper_trading: Tests requiring paper trading credentials",
    "slow: Slow tests that take more than 1 second",
    "benchmark: Performance benchmark tests",
    "load: Load testing tests - stress testing",
    "property: Property-based tests using Hypothesis",
    "realistic_load: Realistic load tests against real API"
]

# Semantic Release - Automated versioning based on conventional commits
[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:project.version"]
version_variables = ["bitfinex_maker_kit/__init__.py:__version__"]
version_pattern = ["CLAUDE.md:- \\*\\*Version\\*\\*: (?P<version>\\d+\\.\\d+\\.\\d+) \\(production-ready\\)"]
build_command = "python -m build"
commit_parser = "angular"
major_on_zero = false
tag_format = "v{version}"
dist_path = "dist/"
remove_dist = false

[tool.semantic_release.commit_parser_options]
major_types = ["breaking"]
minor_types = ["feat"]
patch_types = ["fix", "perf", "refactor", "build"]
parse_squash_commits = true