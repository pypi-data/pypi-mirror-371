[project]
name = "cogitator"
version = "0.1.2"
description = "A Python toolkit for chain-of-thought prompting"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Hassan Abedi", email = "hassan.abedi.t+cogitator@gmail.com" }
]
keywords = ["prompt engineering", "chain-of-thought", "artificial intelligence", "machine learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "scikit-learn>=1.6.1",
    "openai>=1.76.2",
    "ollama>=0.4.8",
    "pydantic>=2.11.4",
    "sentence-transformers>=4.1.0",
    "tiktoken>=0.9.0"
]
requires-python = ">=3.10,<4.0"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.1",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.26.0",
    "mypy>=1.11.1",
    "ruff>=0.11.7",
    "griffe>=1.7.3",
    "polars>=1.28.1",
    "datasets>=3.5.1",
    "pyyaml>=6.0.2",
    "pre-commit>=4.2.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.12",
    "mkdocstrings-python>=1.16.10"
]

[project.urls]
repository = "https://github.com/habedi/cogitator"
documentation = "https://habedi.github.io/cogitator"

[tool.poetry]
packages = [{ include = "cogitator" }]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["cogitator"]
testpaths = ["tests"]
addopts = [
    "--tb=short",
    #"--disable-warnings",
    "--cov=cogitator",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=xml",
    "-rs"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"

[tool.coverage.run]
branch = true
parallel = true
source = ["cogitator"]
omit = [
    "tests/*",
    "benches/*",
    "examples/*"
]

[tool.coverage.report]
show_missing = false
skip_empty = true
precision = 2

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true
strict_optional = true
warn_redundant_casts = true
exclude = "^(benches/|examples/|tests/)"

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".mypy_cache",
    ".nox", ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv",
    "__pypackages__", "_build", "buck-out", "build", "dist", "node_modules",
    "venv", "tests", "benches", "examples"
]
line-length = 100
indent-width = 4
src = ["cogitator", "examples"]
target-version = "py310"
unsafe-fixes = false

[tool.ruff.lint]
select = ["ANN", "E", "F", "I", "W", "B", "RUF", "SIM", "C90"]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = []
