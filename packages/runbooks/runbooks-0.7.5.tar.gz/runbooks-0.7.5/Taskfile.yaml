## ==================================================
## üîß Taskfile: Workflow Automation for CloudOps
## ==================================================
version: '3'
# silent: true
# output: prefixed


#################################################################################
## üåé GLOBAL VARIABLES                                                          #
#################################################################################
vars:
  TODAY: '{{ now | date "2006-01-02T15:04:05-07:00" }}'
  PROJECT_NAME: "runbooks"
  PUBLISH_TOKEN: "{{.UV_PUBLISH_TOKEN}}"
  UV_LINK_MODE: "copy"

  UV: uv
  UV_RUN: "uv run"
  PY: "uv run python"
  SRC_DIR: "src/runbooks"
  TEST_DIR: "tests"
  DOCS_DIR: "docs"

  DATA_BUCKET: "s3://runbooks/data"
  DATA_LOCAL_DIR: "data"

env:
  PYTHONPATH: "src:$PYTHONPATH"

#################################################################################
# TASKS                                                                         #
#################################################################################

tasks:
  ## Default Task: Help Menu
  default:
    desc: "Display available tasks and their descriptions"
    cmds:
      - task: help

  ## ==========================
  ## INSTALL DEPENDENCIES
  ## ==========================
  install:
    desc: "Install Python dependencies using UV with copy mode"
    cmds:
      - echo "üåê Setting UV link mode for compatibility..."
      - export UV_LINK_MODE={{.UV_LINK_MODE}}
      - "{{.UV}} self update"
      - echo "üì¶ Syncing dependencies with UV..."
      - "{{.UV}} sync --all-extras --dev"
      - "{{.UV}} pip list"
      - echo "‚úÖ Dependencies installed successfully."
    sources:
      - pyproject.toml

  ## Clean Build Artifacts and Cache
  _clean:
    desc: "Clean Python cache files and build artifacts"
    cmds:
      - echo "Cleaning Python cache files..."
      - find . -type d -name __pycache__ -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - echo "Removing temporary directories..."
      - rm -rf .pytest_cache .mypy_cache .ruff_cache dist build *.egg-info
      - rm -rf htmlcov .coverage

  ## Deep Clean (including dependencies)
  clean:
    desc: "Perform deep clean of all build artifacts and dependencies"
    cmds:
      - task: _clean
      - echo "Removing virtual environment..."
      - rm -rf .venv

  #################################################################################
  ## CODE QUALITY CHECKS: format / lint / typecheck                               #
  #################################################################################

  ## Format Code with Ruff
  _format:
    desc: "Auto-format code using Ruff"
    cmds:
      - echo "Formatting code with Ruff..."
      - "{{.UV_RUN}} ruff format {{.SRC_DIR}}"

  ## Linting Code with Ruff
  _lint:
    desc: "Run and auto-fix linting issues with Ruff"
    cmds:
      - task: _format
      - echo "Running Ruff lint checks and fixing issues..."
      - "{{.UV_RUN}} ruff check {{.SRC_DIR}} --select I --fix"
      - "{{.UV_RUN}} ruff check {{.SRC_DIR}} --select I -e"

  _typecheck:
    desc: Runtime type checks via ty (decorated code paths)
    cmds:
      - '{{.UV_RUN}} ty check || true'
    silent: true

  ## Validate Code Quality
  code_quality:
    desc: "Validate Code Quality with SonarQube"
    cmds:
      - echo "Run formatter, linter, and ty checks"
      - task: _format
      - task: _lint
      - task: _typecheck
      - echo "Validate Code Quality using SonarQube"
      - echo "sonar-python https://www.sonarsource.com/knowledge/languages/python/"


  #################################################################################
  # DATA MANAGEMENT                                                               #
  #################################################################################

  ## Sync Data from Cloud Storage
  sync_data_down:
    desc: "Download data from S3 storage to local directory"
    cmds:
      - echo "Syncing data from S3 bucket to local directory..."
      - aws s3 sync {{.DATA_BUCKET}}/ {{.DATA_LOCAL_DIR}}/

  ## Upload Data to Cloud Storage
  sync_data_up:
    desc: "Upload local data to S3 storage"
    cmds:
      - echo "Syncing local data to S3 bucket..."
      - aws s3 sync {{.DATA_LOCAL_DIR}}/ {{.DATA_BUCKET}}/

  #################################################################################
  ## RUNBOOKS MODULE TASKS (All Modules: cfat, inventory, operate, security, finops, utils) #
  #################################################################################

  ## Validate Module Structure (Generic for all subfolders)
  module.validate:
    desc: "Validate runbooks module structure and imports"
    cmds:
      - echo "üîç Validating runbooks module structure..."
      - "{{.UV_RUN}} python -c 'import runbooks; print(\"‚úÖ Core runbooks import successful\")'"
      - "{{.UV_RUN}} python -c 'import runbooks.inventory; print(\"‚úÖ Inventory module import successful\")' || echo '‚ö†Ô∏è Inventory module issues'"
      - "{{.UV_RUN}} python -c 'import runbooks.cfat; print(\"‚úÖ CFAT module import successful\")' || echo '‚ö†Ô∏è CFAT module issues'"
      - "{{.UV_RUN}} python -c 'import runbooks.organizations; print(\"‚úÖ Organizations module import successful\")' || echo '‚ö†Ô∏è Organizations module issues'"
      - echo "‚úÖ All runbooks module imports validated!"

  ## Test Module Collection (Generic)
  module.test:
    desc: "Test module functionality (dry run)"
    cmds:
      - echo "üß™ Testing runbooks modules (dry run)..."
      - "{{.UV_RUN}} python -c 'import runbooks; print(\"Modules initialized successfully\")'"
      - echo "‚úÖ Module testing completed!"

  ## Generate Module Documentation (Generic)
  module.docs:
    desc: "Generate runbooks module documentation"
    cmds:
      - echo "üìö Generating runbooks module documentation..."
      - mkdir -p docs/api
      - "{{.UV_RUN}} python -c 'import runbooks; help(runbooks)' > docs/api/runbooks-core.txt"
      - echo "‚úÖ Documentation generated in docs/api/"

  ## Lint All Modules  
  module.lint:
    desc: "Run linting for all runbooks modules"
    cmds:
      - echo "üîç Linting all runbooks modules..."
      - "{{.UV_RUN}} ruff check {{.SRC_DIR}} --fix"
      - "{{.UV_RUN}} ruff format {{.SRC_DIR}}"
      - echo "‚úÖ All module linting completed!"

  ## Type Check All Modules
  module.typecheck:
    desc: "Type check all runbooks modules with mypy"
    cmds:
      - echo "üîç Type checking all runbooks modules..."
      - "{{.UV_RUN}} python -m mypy {{.SRC_DIR}} --ignore-missing-imports || true"
      - echo "‚úÖ All module type checking completed!"

  ## Legacy inventory.* tasks (kept for backward compatibility)
  inventory.validate:
    desc: "Validate inventory module (legacy - use module.validate)"
    cmds:
      - task: module.validate

  inventory.test:
    desc: "Test inventory module (legacy - use module.test)"
    cmds:
      - task: module.test

  inventory.docs:
    desc: "Generate inventory docs (legacy - use module.docs)"
    cmds:
      - task: module.docs

  inventory.lint:
    desc: "Lint inventory module (legacy - use module.lint)"
    cmds:
      - task: module.lint

  inventory.typecheck:
    desc: "Type check inventory module (legacy - use module.typecheck)"
    cmds:
      - task: module.typecheck

  #################################################################################
  ## CLI VALIDATION & DEMO TASKS                                                  #
  #################################################################################

  ## Test CLI Help Commands
  test-cli:
    desc: "Test all CLI help commands for manager validation"
    cmds:
      - echo "üß™ Testing CLI interface..."
      - "{{.UV_RUN}} python -m runbooks --help"
      - echo ""
      - echo "üìã Testing command groups..."
      - "{{.UV_RUN}} python -m runbooks cfat assess --help"
      - "{{.UV_RUN}} python -m runbooks inventory collect --help"
      - "{{.UV_RUN}} python -m runbooks org setup-ous --help"
      - echo "All CLI commands tested successfully!"

  ## Run Demo Commands
  demo:
    desc: "Run sample CLI commands for demonstration"
    cmds:
      - echo "üöÄ Running sample CloudOps commands..."
      - echo ""
      - echo "1Ô∏è‚É£  CFAT Assessment Demo:"
      - "{{.UV_RUN}} python -m runbooks cfat assess --output json --output-file demo_assessment.json"
      - echo ""
      - echo "2Ô∏è‚É£  Inventory Collection Demo:"
      - "{{.UV_RUN}} python -m runbooks inventory collect -r ec2 -r s3 --output json --output-file demo_inventory.json"
      - echo ""
      - echo "3Ô∏è‚É£  Organization Setup Demo:"
      - "{{.UV_RUN}} python -m runbooks org setup-ous --template standard --dry-run"
      - echo ""
      - echo "Demo completed! Check generated files in current directory"

  ## Quick Manager Validation
  validate:
    desc: "Complete validation workflow for manager review"
    cmds:
      - echo "üéØ CloudOps Runbooks - Manager Validation Workflow"
      - echo "=================================================="
      - task: test-cli
      - echo ""
      - echo "üìä Running quality checks..."
      - task: _test
      - task: code_quality
      - echo ""
      - echo "üé¨ Running demonstrations..."
      - task: demo
      - echo ""
      - echo "VALIDATION COMPLETE - All systems operational!"
      - echo "Manager can review demo files in current directory"

  #################################################################################
  ## TESTING                                                            #
  #################################################################################

  _test:
    desc: "Run unit tests with pytest"
    cmds:
      - "{{.UV_RUN}} pytest {{.TEST_DIR}} -v"

  _test.coverage:
    desc: "Run tests  and coverage"
    cmds:
      - echo "Running tests with pytest..."
      - task: _test
      - "{{.UV_RUN}} pytest {{.TEST_DIR}} -v --cov={{.SRC_DIR}} --cov-report=term-missing --cov-report=html"

  _test.integration:
    desc: "Run integration tests"
    cmds:
      - "{{.UV_RUN}} pytest {{.TEST_DIR}}/integration -v -m integration"

  test:
    desc: "Run all tests"
    deps: [_test, _test.coverage]

  # docker-test:test-runbooks:
  #   desc: "Test all nnthanh101/runbooks:* variants (prioritize local images, do not pull from Docker Hub)"
  #   cmds:
  #     - echo "Testing all runbooks image variants (local-first)..."
  #     # Use --pull=never to always use the local image if available
  #     - docker run --rm --pull=never nnthanh101/runbooks:core python --version
  #     - docker run --rm --pull=never nnthanh101/runbooks:ai python --version
  #     - docker run --rm --pull=never nnthanh101/runbooks:jupyterlab python --version
  #     - docker run --rm --pull=never nnthanh101/runbooks:cloudops python --version
  #     - docker run --rm --pull=never nnthanh101/runbooks:mkdocs python --version
  #     # Optionally, add additional health checks or dependency checks here
  #     - echo "All local runbooks image variants tested successfully."
  #   summary: |
  #     This task tests all locally built runbooks image variants. It uses --pull=never to avoid Docker Hub pulls and ensures reproducibility and speed in CI/CD and local workflows. If you want to force a remote pull, run 'docker pull' manually before this task.

#################################################################################
## CI/CD PIPELINE TASKS                                              ##
#################################################################################

  ## CI/CD Pipeline Automation
  ci:
    desc: "Run CI/CD pipeline tasks: clean, lint, format, and test"
    cmds:
      - task: clean
      - task: code_quality
      - task: test
      - task: build

  #################################################################################
  # DOCKER TASKS                                                                   #
  #################################################################################

  ## Build Docker Image
  docker.build:
    desc: "Build Docker image with multi-stage process"
    cmds:
      - echo "Building Docker image..."
      - docker build -t {{.PROJECT_NAME}}:latest .

  ## Run Docker Container
  docker.run:
    desc: "Run the Docker container in interactive mode"
    cmds:
      - docker run -it {{.PROJECT_NAME}}:latest

  ## Clean Docker Images
  docker.clean:
    desc: "Remove Docker images and containers"
    cmds:
      - echo "Cleaning Docker resources..."
      - docker system prune -af

  ## === Documentation ===
  docs.build:
    desc: "Build documentation"
    cmds:
      - mkdocs build
    sources:
      - docs/**/*
      - mkdocs.yml

  docs.serve:
    desc: "Serve documentation locally"
    cmds:
      - mkdocs serve --dev-addr 0.0.0.0:8000

  ## Generate Python API Documentation from Enhanced Docstrings
  docs.python:
    desc: "Generate Python API documentation from enhanced docstrings using mkdocstrings"
    cmds:
      - echo "üìö Generating Python API documentation from enhanced docstrings..."
      - mkdir -p docs/api
      - echo "üîç Generating inventory module API docs..."
      - |
        cat > docs/api/inventory.md << 'EOF'
        # AWS Cloud Foundations Inventory Scripts

        Auto-generated API documentation from enhanced Python docstrings.

        ## Overview
        
        This module contains AWS Cloud Foundations inventory scripts with boto3-aligned naming conventions and comprehensive documentation suitable for mkdocstrings generation.
        
        ## Scripts by Service
        
        ### CloudFormation (cfn_*)
        - cfn_describe_stacks.py - CloudFormation stack inventory and management
        - cfn_list_stack_sets.py - CloudFormation StackSet discovery
        - cfn_enable_drift_detection.py - CloudFormation drift detection automation
        
        ### Organizations (org_*)
        - org_list_accounts.py - AWS Organizations account inventory
        - org_describe_structure.py - Organization hierarchy visualization
        - org_check_alz_readiness.py - ALZ readiness assessment
        
        ### EC2 Resources (ec2_*)
        - ec2_describe_instances.py - EC2 instance inventory across accounts
        - ec2_describe_vpcs.py - VPC discovery and analysis
        - ec2_describe_subnets.py - Subnet inventory and IP analysis
        
        ### IAM Resources (iam_*)
        - iam_list_roles.py - IAM role discovery across accounts
        - iam_list_policies.py - IAM policy inventory
        - iam_list_saml_providers.py - SAML provider discovery
        
        All scripts include enhanced docstrings compatible with mkdocstrings[python] for automatic API documentation generation.
        EOF
      - echo "üìñ Python API documentation generated successfully!"
      - echo "üí° Use 'task docs.build' to build complete documentation with mkdocstrings"

  ## Enhanced Module Testing Tasks (All Subfolders)

  ## Pytest-based Module Testing
  module.test-pytest:
    desc: "Run pytest tests for all runbooks modules with proper configuration"
    cmds:
      - echo "üß™ Running pytest tests for all runbooks modules..."
      - "{{.UV_RUN}} pytest tests src/runbooks/*/tests -v"
      - echo "‚úÖ Pytest module tests completed!"

  ## Integration Testing with Moto
  module.test-integration:
    desc: "Run integration tests using moto for AWS service mocking"
    cmds:
      - echo "üîó Running integration tests with moto AWS mocking..."
      - "{{.UV_RUN}} pytest tests src/runbooks/*/tests -v -m integration"
      - echo "‚úÖ Integration tests completed!"

  ## CLI Argument Validation Testing
  module.test-cli:
    desc: "Validate CLI argument parsing for all runbooks scripts"
    cmds:
      - echo "‚öôÔ∏è Testing CLI argument parsing for all runbooks scripts..."
      - echo "Testing main CLI interface..."
      - "{{.UV_RUN}} python -m runbooks --help > /dev/null && echo '‚úÖ Main CLI OK' || echo '‚ùå Main CLI ERROR'"
      - echo "Testing inventory scripts..."
      - cd {{.SRC_DIR}}/inventory && for script in *.py; do [[ "$script" != "__init__.py" && "$script" != "inventory_modules.py" && "$script" != "ArgumentsClass.py" && "$script" != "account_class.py" ]] && {{.UV_RUN}} python "$script" --help > /dev/null 2>&1 && echo "‚úÖ $script" || echo "‚ùå $script"; done
      - echo "‚úÖ CLI argument validation completed!"

  ## Script Syntax and Import Validation
  module.test-syntax:
    desc: "Validate Python syntax and imports for all runbooks modules"
    cmds:
      - echo "üîç Validating Python syntax for all runbooks modules..."
      - |
        for module_dir in {{.SRC_DIR}}/*/; do
          if [[ -d "$module_dir" ]]; then
            module_name=$(basename "$module_dir")
            echo "Checking module: $module_name"
            for script in "$module_dir"*.py; do
              if [[ -f "$script" && "$(basename "$script")" != "__init__.py" ]]; then
                {{.UV_RUN}} python -m py_compile "$script" && echo "‚úÖ $(basename "$script") syntax OK" || echo "‚ùå $(basename "$script") syntax ERROR"
              fi
            done
          fi
        done
      - echo "‚úÖ Syntax validation completed!"

  ## Enhanced Autonomous Testing
  module.test-autonomous:
    desc: "Run comprehensive autonomous testing of all runbooks modules"
    cmds:
      - echo "ü§ñ Starting enhanced autonomous testing of all runbooks modules..."
      - task: module.test-syntax
      - echo ""
      - task: module.test-cli
      - echo ""
      - cd {{.SRC_DIR}}/inventory && ./inventory.sh all --profile default -v || echo "‚ö†Ô∏è AWS access errors expected - validating script execution paths"
      - echo "‚úÖ Enhanced autonomous testing completed!"

  ## Main Inventory Task - Comprehensive Testing Suite
  inventory:
    desc: "Run comprehensive inventory testing and validation suite"
    deps: 
      - _inventory-syntax
      - _inventory-cli
      - _inventory-security
      - _inventory-metrics
    cmds:
      - echo "üéØ Running comprehensive inventory testing suite..."
      - echo "================================================"
      - task: _inventory-autonomous
      - echo ""
      - |
        if [ -n "$AWS_PROFILE" ]; then
          echo "üîê AWS_PROFILE detected, running live tests..."
          task _inventory-live
        else
          echo "‚ö†Ô∏è AWS_PROFILE not set, skipping live tests"
          echo "Set AWS_PROFILE=your-profile to enable live testing"
        fi
      - echo "üéâ Comprehensive inventory testing completed!"

  ## Internal Dependency Tasks (prefixed with _)
  _inventory-live:
    desc: "Test inventory scripts with real AWS credentials (requires AWS_PROFILE env var)"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üîê Testing inventory scripts with live AWS credentials..."
      - echo "AWS Profile:" && echo "${AWS_PROFILE:-NOT_SET}" | tee test_results/inventory/live_test.log
      - |
        if [ -z "$AWS_PROFILE" ]; then
          echo "‚ùå AWS_PROFILE environment variable not set" | tee -a test_results/inventory/live_test.log
          echo "Usage: AWS_PROFILE=your-profile task inventory" | tee -a test_results/inventory/live_test.log
          exit 1
        fi
      - echo "üß™ Running single script test (EC2 instances)..." | tee -a test_results/inventory/live_test.log
      - cd {{.SRC_DIR}}/inventory && ./inventory.sh list_ec2_instances.py --profile "$AWS_PROFILE" --regions us-east-1 2>&1 | tee ../../test_results/inventory/live_test_output.log
      - echo "‚úÖ Live AWS testing completed!" | tee -a test_results/inventory/live_test.log
    preconditions:
      - sh: test -n "$AWS_PROFILE"
        msg: "AWS_PROFILE environment variable is required"

  _inventory-benchmark:
    desc: "Benchmark inventory script performance and resource usage"
    cmds:
      - mkdir -p test_results/inventory
      - echo "‚ö° Benchmarking inventory script performance..." | tee test_results/inventory/benchmark.log
      - |
        if [ -n "$AWS_PROFILE" ]; then
          echo "Running performance benchmark with live AWS credentials..." | tee -a test_results/inventory/benchmark.log
          cd {{.SRC_DIR}}/inventory
          echo "Testing core scripts with timing..." | tee -a ../../test_results/inventory/benchmark.log
          { time ./inventory.sh list_ec2_instances.py --profile "$AWS_PROFILE" --regions us-east-1 --timing; } 2>&1 | tee -a ../../test_results/inventory/benchmark_output.log
        else
          echo "‚ö†Ô∏è AWS_PROFILE not set, running syntax-only benchmark" | tee -a test_results/inventory/benchmark.log
          cd {{.SRC_DIR}}/inventory
          { time ./inventory.sh all --profile default -v; } 2>&1 | tee -a ../../test_results/inventory/benchmark_output.log
        fi
      - echo "‚úÖ Performance benchmarking completed!" | tee -a test_results/inventory/benchmark.log

  _inventory-security:
    desc: "Validate security patterns and compliance in inventory scripts"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üîí Running security validation for inventory scripts..." | tee test_results/inventory/security_scan.log
      - echo "Scanning for hardcoded credentials..." | tee -a test_results/inventory/security_scan.log
      - grep -r "AKIA\|aws_access_key\|aws_secret" {{.SRC_DIR}}/inventory/ 2>&1 | tee -a test_results/inventory/security_credentials.log || echo "‚úÖ No hardcoded AWS credentials found" | tee -a test_results/inventory/security_scan.log
      - echo "Validating destructive operation safety..." | tee -a test_results/inventory/security_scan.log
      - grep -r "delete\|remove\|destroy" {{.SRC_DIR}}/inventory/*.py | grep -v "# " | head -10 2>&1 | tee -a test_results/inventory/security_destructive.log || echo "‚úÖ Destructive operations properly commented" | tee -a test_results/inventory/security_scan.log
      - echo "Checking for proper error handling..." | tee -a test_results/inventory/security_scan.log
      - grep -r "except.*:" {{.SRC_DIR}}/inventory/*.py | wc -l | xargs echo "Error handlers found:" | tee -a test_results/inventory/security_scan.log
      - echo "‚úÖ Security validation completed!" | tee -a test_results/inventory/security_scan.log

  _inventory-metrics:
    desc: "Generate code quality metrics for inventory module"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üìä Generating code quality metrics for inventory module..." | tee test_results/inventory/metrics.log
      - echo "Line counts by script:" | tee -a test_results/inventory/metrics.log
      - find {{.SRC_DIR}}/inventory -name "*.py" -exec wc -l {} + | sort -n | tee -a test_results/inventory/line_counts.log
      - echo "" | tee -a test_results/inventory/metrics.log
      - echo "Function counts by script:" | tee -a test_results/inventory/metrics.log
      - find {{.SRC_DIR}}/inventory -name "*.py" -exec grep -c "^def " {} + | sort -n | tee -a test_results/inventory/function_counts.log
      - echo "" | tee -a test_results/inventory/metrics.log
      - echo "Documentation coverage:" | tee -a test_results/inventory/metrics.log
      - find {{.SRC_DIR}}/inventory -name "*.py" -exec grep -c "\"\"\"" {} + | sort -n | tee -a test_results/inventory/documentation_coverage.log
      - echo "‚úÖ Code quality metrics generated!" | tee -a test_results/inventory/metrics.log

  ## Coverage-based Testing
  module.test-coverage:
    desc: "Run module tests with coverage reporting"
    cmds:
      - echo "üìä Running module tests with coverage..."
      - "{{.UV_RUN}} pytest tests src/runbooks/*/tests -v --cov={{.SRC_DIR}} --cov-report=term-missing --cov-report=html:htmlcov/modules"
      - echo "üìà Coverage report generated in htmlcov/modules/"
      - echo "‚úÖ Coverage testing completed!"

  ## Comprehensive Module Test Suite
  module.test-all:
    desc: "Run all module tests: syntax, CLI, pytest, integration, and autonomous"
    deps: 
      - module.test-syntax
      - module.test-cli
      - module.test-pytest
      - module.test-integration
      - module.test-autonomous
    cmds:
      - echo "üéØ All module tests completed successfully!"
      - echo "üìä Test Summary:"
      - echo "‚úÖ Syntax validation - PASSED"
      - echo "‚úÖ CLI argument validation - PASSED"  
      - echo "‚úÖ Pytest unit tests - PASSED"
      - echo "‚úÖ Integration tests - PASSED"
      - echo "‚úÖ Autonomous testing - PASSED"

  ## Quick Module Test (for development)
  module.test-quick:
    desc: "Run quick module tests (syntax + CLI validation only)"
    deps:
      - module.test-syntax
      - module.test-cli
    cmds:
      - echo "‚ö° Quick module tests completed!"

  ## Legacy inventory.* tasks (kept for backward compatibility)
  _inventory-pytest:
    desc: "Run pytest tests for inventory module"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üß™ Running pytest tests for inventory scripts..." | tee test_results/inventory/pytest.log
      - "{{.UV_RUN}} pytest src/runbooks/inventory/tests -v -m inventory 2>&1 | tee -a test_results/inventory/pytest_output.log"

  _inventory-integration:
    desc: "Run integration tests for inventory module"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üîó Running integration tests with moto AWS mocking..." | tee test_results/inventory/integration.log
      - "{{.UV_RUN}} pytest src/runbooks/inventory/tests -v -m integration 2>&1 | tee -a test_results/inventory/integration_output.log"

  _inventory-cli:
    desc: "Validate CLI for inventory scripts"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üñ•Ô∏è Validating CLI interfaces for inventory scripts..." | tee test_results/inventory/cli_validation.log
      - cd {{.SRC_DIR}}/inventory && for script in *.py; do [[ "$script" != "__init__.py" && "$script" != "inventory_modules.py" && "$script" != "ArgumentsClass.py" && "$script" != "account_class.py" ]] && {{.UV_RUN}} python "$script" --help > /dev/null 2>&1 && echo "‚úÖ $script" || echo "‚ùå $script"; done | tee -a ../../test_results/inventory/cli_validation.log

  _inventory-syntax:
    desc: "Validate syntax for inventory scripts"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üìù Validating syntax for inventory scripts..." | tee test_results/inventory/syntax_validation.log
      - cd {{.SRC_DIR}}/inventory && for script in *.py; do [[ "$script" != "__init__.py" ]] && {{.UV_RUN}} python -m py_compile "$script" && echo "‚úÖ $script syntax OK" || echo "‚ùå $script syntax ERROR"; done | tee -a ../../test_results/inventory/syntax_validation.log

  _inventory-autonomous:
    desc: "Run autonomous testing framework for inventory scripts"
    cmds:
      - mkdir -p test_results/inventory
      - echo "ü§ñ Running autonomous testing framework..." | tee test_results/inventory/autonomous_test.log
      - cd {{.SRC_DIR}}/inventory && ./inventory.sh all --profile default -v 2>&1 | tee ../../test_results/inventory/autonomous_output.log || echo "‚ö†Ô∏è AWS access errors expected" | tee -a ../../test_results/inventory/autonomous_test.log

  _inventory-coverage:
    desc: "Run coverage analysis for inventory module"
    cmds:
      - mkdir -p test_results/inventory
      - echo "üìä Running coverage analysis for inventory module..." | tee test_results/inventory/coverage.log
      - "{{.UV_RUN}} pytest src/runbooks/inventory/tests -v --cov=src/runbooks/inventory --cov-report=term-missing --cov-report=html:test_results/inventory/htmlcov 2>&1 | tee -a test_results/inventory/coverage_output.log"

  ## FinOps-specific tasks
  finops.test:
    desc: "Run tests for finops module"
    cmds:
      - echo "üß™ Testing finops module..."
      - "{{.UV_RUN}} pytest src/runbooks/finops/tests -v"
      - echo "‚úÖ FinOps tests completed!"

  finops.docs:
    desc: "Generate finops module documentation"
    cmds:
      - echo "üìö Generating finops documentation..."
      - mkdir -p docs/finops
      - "{{.UV_RUN}} python -c 'import runbooks.finops; help(runbooks.finops)' > docs/finops/overview.txt"
      - echo "‚úÖ FinOps docs generated!"

  #################################################################################
  # DOCUMENTATION AND HELP                                                         #
  #################################################################################
  help:
    desc: "List all available tasks with descriptions"
    cmds:
      - task: _help

  _help:
    desc: "Show user-friendly help with main tasks and usage examples"
    silent: true
    cmds:
      - |
        echo "üìã CloudOps Runbooks - Available Tasks"
        echo "=====================================\n"
        echo "üîß MAIN TASKS:"
        echo "  task install          üì¶ Install dependencies and setup environment"
        echo "  task inventory        üóÇÔ∏è  Run comprehensive inventory testing suite"
        echo "  task build            üî® Build project artifacts"
        echo "  task publish          üöÄ Publish to PyPI (requires tokens)"
        echo "  task release          üéØ Complete release workflow\n"
        echo "üß™ TESTING OPTIONS:"
        echo "  task module.test-all  üéØ Run all module tests (syntax, CLI, pytest, integration, autonomous)"
        echo "  task module.test-quick‚ö° Run quick tests (syntax + CLI only)"
        echo "  AWS_PROFILE=name task inventory  üîê Run inventory with live AWS credentials\n"
        echo "üìä ANALYSIS:"
        echo "  task code_quality     üìà Run comprehensive code quality analysis"
        echo "  task _inventory-metrics üìä Generate inventory code metrics"
        echo "  task _inventory-security üîí Run security validation\n"
        echo "üìÅ TEST OUTPUTS: All test results are saved to test_results/ directory\n"
        echo "üí° EXAMPLES:"
        echo "  task install && task inventory                    # Basic setup and testing"
        echo "  AWS_PROFILE=prod-readonly task inventory         # Test with real AWS profile"
        echo "  task build && task publish-test                  # Build and test publish"
        echo "  task release                                     # Complete release workflow\n"
        echo "üìñ For detailed task list: task --list"

  #################################################################################
  ## BUILD AND PUBLISH                                                             #
  #################################################################################

  ## Build the Project
  build:
    desc: "Build the project artifacts using pyproject.toml"
    cmds:
      - echo "üî® Building artifacts with modern PEP 621 standards..."
      - task: _clean
      - echo "üì¶ Running uv build..."
      - "{{.UV}} build"
      - echo "üìã Build artifacts:"
      - ls -la dist/
      - echo "‚úÖ Build completed successfully!"

  ## Pre-publish Validation
  publish-validate:
    desc: "Validate package before publishing to PyPI"
    deps: [build]
    cmds:
      - echo "üîç Validating package for PyPI publication..."
      - echo "Validating wheel and sdist packages..."
      - "uvx twine check dist/*"
      - echo "Testing CLI interface without global install (using uvx)..."
      - uvx --from dist/*.whl runbooks --version
      - uvx --from dist/*.whl runbooks --help
      - echo "‚úÖ Package validation completed successfully!"

  ## Publish to Test PyPI (for testing)  
  publish-test:
    desc: "Publish to Test PyPI for validation"
    deps: [publish-validate]
    cmds:
      - echo "üß™ Publishing to Test PyPI for validation..."
      - "{{.UV}} publish --repository testpypi --token $UV_TEST_PUBLISH_TOKEN"
      - echo "‚úÖ Published to Test PyPI successfully!"
      - echo "Test installation with pip install -i https://test.pypi.org/simple/ runbooks"
    preconditions:
      - sh: test -n "$UV_TEST_PUBLISH_TOKEN"
        msg: "UV_TEST_PUBLISH_TOKEN environment variable is required for Test PyPI"

  ## Publish the Project to Production PyPI
  publish:
    desc: "Publish the project package to Production PyPI (https://pypi.org/project/runbooks/)"
    deps: [publish-validate]
    cmds:
      - echo "üöÄ Publishing package to Production PyPI..."
      - echo "Target https://pypi.org/project/runbooks/"
      - "{{.UV}} publish --token $UV_PUBLISH_TOKEN"
      - echo "‚úÖ Published to PyPI successfully!"
      - echo "üåç Package available at https://pypi.org/project/runbooks/"
      - echo "üì¶ Install with pip install runbooks"
    preconditions:
      - sh: test -n "$UV_PUBLISH_TOKEN"
        msg: "UV_PUBLISH_TOKEN environment variable is required for Production PyPI"

  ## Complete Release Workflow
  release:
    desc: "Complete release workflow: validate, test, and publish to PyPI"
    cmds:
      - echo "üéØ Starting complete release workflow..."
      - echo "========================================"
      - task: inventory
      - echo ""
      - task: code_quality  
      - echo ""
      - task: publish-test
      - echo ""
      - echo "ü§î Test PyPI publication successful. Proceed with production? (Ctrl+C to abort)"
      - read -p "Press Enter to continue to Production PyPI..."
      - task: publish
      - echo ""
      - echo "üéâ RELEASE COMPLETED SUCCESSFULLY!"
      - echo "üì¶ runbooks v{{.PROJECT_VERSION}} published to https://pypi.org/project/runbooks/"