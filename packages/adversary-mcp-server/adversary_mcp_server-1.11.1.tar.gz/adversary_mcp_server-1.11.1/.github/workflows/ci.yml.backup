name: CI Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

env:
  # Disable telemetry and analytics
  UV_NO_TELEMETRY: 1
  PYTHONUNBUFFERED: 1
  ADVERSARY_CONFIG_DIR: /tmp/adversary-mcp-test

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }}
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Install additional test dependencies
      run: |
        source .venv/bin/activate
        # Install semgrep for integration tests
        pip install semgrep
        # Verify semgrep installation
        semgrep --version

    - name: Set up test environment
      run: |
        # Create test directories
        mkdir -p /tmp/adversary-mcp-test
        mkdir -p /tmp/adversary-mcp-test/rules

        # Set permissions
        chmod 755 /tmp/adversary-mcp-test

        # Create test git repository for diff scanner tests
        mkdir -p /tmp/test-repo
        cd /tmp/test-repo
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        git init
        echo "print('hello')" > test.py
        git add test.py
        git commit -m "Initial commit"
        git checkout -b main
        git checkout -b feature
        echo "print('hello world')" >> test.py
        git add test.py
        git commit -m "Add feature"

    - name: Validate Python version compatibility
      run: |
        source .venv/bin/activate
        # Test import compatibility
        python -c "import tests.test_server_extended; print('✅ All test modules import successfully')"

        # Test version reading functionality
        python -c "from adversary_mcp_server import __version__; print(f'✅ Package version: {__version__}')"

    - name: Run unit tests
      run: |
        source .venv/bin/activate
        python -m pytest tests/ \
          --cov=adversary_mcp_server \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --maxfail=5 \
          --tb=short
      env:
        ADVERSARY_CONFIG_DIR: /tmp/adversary-mcp-test

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run ruff linting
      run: |
        source .venv/bin/activate
        python -m ruff check src/ tests/ --output-format=github

    - name: Run mypy type checking
      run: |
        source .venv/bin/activate
        python -m mypy src/

    - name: Check code formatting (black)
      run: |
        source .venv/bin/activate
        python -m black --check src/ tests/ --diff

    - name: Check import sorting (isort)
      run: |
        source .venv/bin/activate
        python -m isort --check-only src/ tests/ --diff

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Install security tools
      run: |
        source .venv/bin/activate
        pip install semgrep safety

    - name: Run Semgrep security scanner
      run: |
        source .venv/bin/activate
        python -m semgrep --config=auto src/ --json --output=semgrep-report.json
        python -m semgrep --config=auto src/ --severity=WARNING
      continue-on-error: true

    - name: Check for known security vulnerabilities in dependencies
      run: |
        source .venv/bin/activate
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          semgrep-report.json
          safety-report.json
        retention-days: 7

  build:
    name: Build Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        source .venv/bin/activate
        uv pip install build twine

    - name: Build package
      run: |
        source .venv/bin/activate
        uv build

    - name: Check package
      run: |
        source .venv/bin/activate
        python -m twine check dist/*

    - name: Test package installation
      run: |
        source .venv/bin/activate
        pip install dist/*.whl
        adversary-mcp-cli --version
        adversary-mcp-cli --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        source .venv/bin/activate
        uv pip install -e ".[dev]"
        pip install semgrep

    - name: Set up integration test environment
      run: |
        mkdir -p /tmp/adversary-mcp-test
        source .venv/bin/activate

        # Test CLI installation and basic commands
        adversary-mcp-cli --version

        # Test demo functionality
        adversary-mcp-cli demo --no-interactive || echo "Demo completed with warnings"

        # Test rule management
        adversary-mcp-cli rules stats
        adversary-mcp-cli list-rules --count

    - name: Test scanning functionality
      run: |
        source .venv/bin/activate

        # Create test files
        mkdir -p /tmp/test-project
        cd /tmp/test-project

        # Create vulnerable test file
        cat > vulnerable.py << 'EOF'
        import os
        # SQL injection vulnerability
        query = "SELECT * FROM users WHERE id = " + user_id
        # Command injection vulnerability
        os.system("rm -rf " + user_input)
        # Hardcoded secret
        API_KEY = "sk-1234567890abcdef"
        EOF

        cat > test.js << 'EOF'
        // XSS vulnerability
        document.innerHTML = userInput;
        // Prototype pollution
        obj.__proto__.polluted = true;
        EOF

        # Test file scanning
        adversary-mcp-cli scan vulnerable.py --severity=medium --no-exploits --no-llm
        adversary-mcp-cli scan test.js --severity=medium --no-exploits --no-llm

        # Test directory scanning
        adversary-mcp-cli scan . --severity=high --no-exploits --no-llm --recursive
      env:
        ADVERSARY_CONFIG_DIR: /tmp/adversary-mcp-test

    - name: Test git diff scanning
      run: |
        source .venv/bin/activate

        # Create test git repository with vulnerable changes
        mkdir -p /tmp/git-test-repo
        cd /tmp/git-test-repo
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        git init

        # Initial safe code
        echo "print('safe code')" > app.py
        git add app.py
        git commit -m "Initial safe code"
        git checkout -b main

        # Create feature branch with vulnerabilities
        git checkout -b feature/dangerous
        cat > app.py << 'EOF'
        import os
        print('safe code')
        # Added vulnerable code
        query = "SELECT * FROM users WHERE id = " + user_id
        os.system("rm -rf " + user_input)
        EOF

        git add app.py
        git commit -m "Add dangerous features"

        # Test diff scanning
        adversary-mcp-cli scan . --diff --source-branch=main --target-branch=feature/dangerous --severity=medium --no-exploits --no-llm
      env:
        ADVERSARY_CONFIG_DIR: /tmp/adversary-mcp-test

  compatibility:
    name: OS Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }}
        uv pip install -e ".[dev]"

    - name: Run basic tests (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -m pytest tests/test_cli.py tests/test_threat_engine.py -v --tb=short

    - name: Run basic tests (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv/Scripts/activate
        python -m pytest tests/test_cli.py tests/test_threat_engine.py -v --tb=short

    - name: Test CLI functionality (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        adversary-mcp-cli --version
        adversary-mcp-cli --help

    - name: Test CLI functionality (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv/Scripts/activate
        adversary-mcp-cli --version
        adversary-mcp-cli --help
