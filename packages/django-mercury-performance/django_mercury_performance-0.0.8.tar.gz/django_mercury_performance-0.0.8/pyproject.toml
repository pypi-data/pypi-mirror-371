[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django-mercury-performance"
version = "0.0.8"
description = "A performance testing framework for Django that helps you understand and fix performance issues, not just detect them"
readme = "README.md"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Django Mercury Team", email = "mathewstormdev@gmail.com"}
]
maintainers = [
    {name = "Mathew Storm", email = "mathewstormdev@gmail.com"}
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Framework :: Django",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Software Development :: Quality Assurance",
]
keywords = [
    "django",
    "performance",
    "testing",
    "monitoring",
    "optimization",
    "n+1",
    "queries",
    "profiling",
    "mercury",
    "rest-framework",
    "api",
    "benchmarking"
]

dependencies = [
    "Django>=3.2,<6.0",
    "djangorestframework>=3.12.0",
    "psutil>=5.8.0",
    "memory-profiler>=0.60.0",
    "colorlog>=6.6.0",
    "jsonschema>=4.0.0",
    "toml>=0.10.2",
    "rich>=12.0.0",
]

[project.optional-dependencies]
rich = ["rich>=12.0.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "django-stubs[compatible-mypy]>=4.2.0",
    "djangorestframework-stubs>=3.14.0",
    "types-psutil>=5.9.0",
    "rich>=12.0.0",
    "flake8>=4.0.0",
    "ruff>=0.1.0",
    "coverage>=6.0.0",
    "twine>=5.0.0",
    "setuptools>=70.0",
    "build>=1.0.0",
]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
]
debug = [
    "django-debug-toolbar>=3.2.0",
    "django-silk>=4.3.0",
]

[project.urls]
Homepage = "https://pypi.org/project/django-mercury-performance/"
Documentation = "https://github.com/80-20-Human-In-The-Loop/Django-Mercury-Performance-Testing/wiki"
Repository = "https://github.com/80-20-Human-In-The-Loop/Django-Mercury-Performance-Testing"
"Bug Tracker" = "https://github.com/80-20-Human-In-The-Loop/Django-Mercury-Performance-Testing/issues"
Changelog = "https://github.com/Django-Mercury/Performance-Testing/blob/main/CHANGELOG.md"

[project.scripts]
mercury-test = "django_mercury.cli.mercury_test:main"


[tool.setuptools]
packages = [
    "django_mercury", 
    "django_mercury.python_bindings", 
    "django_mercury.cli",
    "django_mercury.cli.educational",
    "django_mercury.documentation",
    "django_mercury.examples"
]
include-package-data = true

[tool.setuptools.package-data]
"django_mercury" = [
    "*.md",
    "py.typed",
]
"django_mercury.python_bindings" = ["*.py"]
"django_mercury.documentation" = ["*.md"]
"django_mercury.examples" = ["*.py"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | \.egg-info
  | migrations
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip = ["venv", ".venv", "migrations"]
known_django = ["django", "rest_framework"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"

# Strict mode settings (gradually enable)
strict = false  # Will enable per-module below
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Type checking strictness (gradual adoption)
disallow_untyped_defs = false  # Start permissive, enable per-module
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_incomplete_defs = false
check_untyped_defs = true  # Still check logic in untyped functions
disallow_untyped_calls = false
disallow_untyped_decorators = false

# None handling
no_implicit_optional = true
strict_optional = true

# Error output settings
pretty = false  # Disable pretty mode for cleaner CI/CD output
show_error_codes = true
show_error_context = true
show_column_numbers = true
show_absolute_path = false

# Import handling
ignore_missing_imports = true
follow_imports = "normal"
follow_imports_for_stubs = true
no_site_packages = false

# Miscellaneous strictness
allow_redefinition = false
local_partial_types = false
strict_equality = true
strict_concatenate = true

# Performance
cache_dir = ".mypy_cache"
incremental = true

# Exclusions
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "migrations/",
    "__pycache__/",
    "\\.git/",
]

# Per-module configuration for gradual adoption

# Strict mode for fully-typed modules only
[[tool.mypy.overrides]]
module = [
    "django_mercury.python_bindings.constants",
]
strict = true
disallow_untyped_defs = true

# Less strict for legacy code (gradual migration)
[[tool.mypy.overrides]]
module = [
    "django_mercury.python_bindings.monitor",
    "django_mercury.python_bindings.django_hooks",
    "django_mercury.python_bindings.django_integration",
    "django_mercury.python_bindings.django_integration_mercury",
    "django_mercury.cli.*",
    "examples.*",
]
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false

# Ignore third-party libraries without stubs
[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "memory_profiler.*",
    "colorlog.*",
    "rich.*",
    "django.*",
    "rest_framework.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "-ra",
    "--color=yes",
]
norecursedirs = [".git", ".tox", "build", "dist", "*.egg", "venv", "test_build"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow tests",
    "django: Tests requiring Django",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # complexity
    "UP",  # pyupgrade
    "PL",  # too many arguments/locals/statements
    "PLR", # function/class too long
    "N",   # naming convention check
    "SIM", # code simplification checks
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    "*.egg-info",
    "migrations",
]

[tool.coverage.run]
source = ["django_mercury"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pure Python package - no cibuildwheel configuration needed
