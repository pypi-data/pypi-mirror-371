[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hpfracc"
version = "0.1.3"
description = "Optimized numerical methods for fractional calculus using JAX and NUMBA"
authors = [
    {name = "Davian Chin", email = "dave2k77@gmail.com"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",

    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    # Core scientific computing
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    
    # JAX ecosystem for automatic differentiation and GPU acceleration
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "optax>=0.1.0",  # JAX optimization library
    
    # NUMBA for JIT compilation and parallel computing
    "numba>=0.56.0",
    
    # Parallel computing and multiprocessing
    "multiprocessing-logging>=0.3.0",
    "joblib>=1.1.0",
    
    # Additional scientific libraries
    "sympy>=1.10.0",  # Symbolic mathematics
    "pandas>=1.3.0",  # Data manipulation
    "seaborn>=0.11.0",  # Statistical plotting
    
    # Testing and validation
    "pytest>=6.0.0",
    "pytest-benchmark>=3.4.0",
    "pytest-cov>=3.0.0",
    
    # Documentation
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    
    # Development tools
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-benchmark>=3.4.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "sphinx-autodoc-typehints>=1.12.0",
]

gpu = [
    "cupy>=10.0.0",  # CUDA acceleration
    "cudf>=21.0.0",  # GPU DataFrame
]

[project.urls]
Homepage = "https://github.com/dave2k77/fractional_calculus_library"
Repository = "https://github.com/dave2k77/fractional_calculus_library.git"
Documentation = "https://fractional-calculus-library.readthedocs.io"
"Bug Tracker" = "https://github.com/dave2k77/fractional_calculus_library/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["hpfracc*"]
exclude = ["tests*", "examples*", "benchmarks*", "docs*", "scripts*", "venv*", "data*", "*.egg-info*", "__pycache__*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
