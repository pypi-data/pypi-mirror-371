# coding: utf-8

"""
BinoAuth Tenant API

 A comprehensive multi-tenant authentication and authorization API supporting OAuth2, OpenID Connect, API keys, and multiple authentication methods.  ## Features  - **Multi-Tenant Architecture**: Isolated tenant-specific authentication - **OAuth2 & OpenID Connect**: Full OAuth2/OIDC implementation with PKCE support - **API Keys**: Long-lived keys for programmatic access - **Multiple Auth Methods**: Password, magic links, phone OTP, social login, MFA - **Session Management**: Secure session handling with Redis backing - **Comprehensive Security**: Rate limiting, audit logging, secure token handling  ## Authentication Methods  ### 1. Session-Based (Web Applications) - HTTP-only secure cookies - Automatic session management - CSRF protection  ### 2. API Keys (Programmatic Access) - Long-lived keys with scoped permissions - SHA-256 hashed storage - Usage tracking and analytics - **Header**: `X-API-Key: ak_live_...`  ### 3. OAuth2 Bearer Tokens - Short-lived JWT tokens - Full OAuth2/OIDC support - Refresh token capability - **Header**: `Authorization: Bearer ...`  ## Getting Started  ### For Web Applications 1. Use `/auth/login` for password authentication 2. Session cookies are automatically managed 3. Access protected endpoints directly  ### For Mobile Applications   1. Use OAuth2 authorization code flow with PKCE 2. Handle deep links for OAuth callbacks 3. Store and use refresh tokens for long-lived sessions  ### For Backend Services 1. Create API keys via `/api-keys` endpoint 2. Use API keys for direct authentication 3. Generate short-lived tokens when needed  ## Error Handling  All endpoints return structured error responses:  ```json {   \"detail\": \"Error description\",   \"error\": \"error_code\",    \"error_description\": \"Detailed error message\" } ```  ## Rate Limiting  API endpoints are rate limited to prevent abuse: - Authentication endpoints: 10 requests/minute - API key operations: 100 requests/hour   - General endpoints: 1000 requests/hour  ## Support  - Documentation: [API Documentation](https://docs.binoauth.com) - Support: support@binoauth.com - Status: [Status Page](https://status.binoauth.com)

The version of the OpenAPI document: 1.0.0
Contact: support@binoauth.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class TokenRequest(BaseModel):
    """
    TokenRequest
    """  # noqa: E501

    grant_type: StrictStr
    code: Optional[StrictStr] = None
    client_id: StrictStr
    client_secret: Optional[StrictStr] = None
    refresh_token: Optional[StrictStr] = None
    code_verifier: Optional[StrictStr] = None
    scope: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    device_code: Optional[StrictStr] = None
    user_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "grant_type",
        "code",
        "client_id",
        "client_secret",
        "refresh_token",
        "code_verifier",
        "scope",
        "username",
        "password",
        "email",
        "device_code",
        "user_code",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict["code"] = None

        # set to None if client_secret (nullable) is None
        # and model_fields_set contains the field
        if self.client_secret is None and "client_secret" in self.model_fields_set:
            _dict["client_secret"] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict["refresh_token"] = None

        # set to None if code_verifier (nullable) is None
        # and model_fields_set contains the field
        if self.code_verifier is None and "code_verifier" in self.model_fields_set:
            _dict["code_verifier"] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict["scope"] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict["username"] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict["password"] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict["email"] = None

        # set to None if device_code (nullable) is None
        # and model_fields_set contains the field
        if self.device_code is None and "device_code" in self.model_fields_set:
            _dict["device_code"] = None

        # set to None if user_code (nullable) is None
        # and model_fields_set contains the field
        if self.user_code is None and "user_code" in self.model_fields_set:
            _dict["user_code"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "grant_type": obj.get("grant_type"),
                "code": obj.get("code"),
                "client_id": obj.get("client_id"),
                "client_secret": obj.get("client_secret"),
                "refresh_token": obj.get("refresh_token"),
                "code_verifier": obj.get("code_verifier"),
                "scope": obj.get("scope"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "email": obj.get("email"),
                "device_code": obj.get("device_code"),
                "user_code": obj.get("user_code"),
            }
        )
        return _obj
