# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from binoauth.admin.models.external_account import ExternalAccount


class TestExternalAccount(unittest.TestCase):
    """ExternalAccount unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExternalAccount:
        """Test ExternalAccount
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ExternalAccount`
        """
        model = ExternalAccount()
        if include_optional:
            return ExternalAccount(
                id = '',
                user_id = '',
                provider = 'google',
                provider_user_id = '',
                provider_email = '',
                access_token = '',
                refresh_token = '',
                token_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                profile_data = binoauth.admin.models.profile_data.Profile Data(),
                last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                login_count = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ExternalAccount(
                user_id = '',
                provider = 'google',
                provider_user_id = '',
                provider_email = '',
                profile_data = binoauth.admin.models.profile_data.Profile Data(),
        )
        """

    def testExternalAccount(self):
        """Test ExternalAccount"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
