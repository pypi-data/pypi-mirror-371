# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from binoauth.admin.models.user_with_external_accounts import UserWithExternalAccounts


class TestUserWithExternalAccounts(unittest.TestCase):
    """UserWithExternalAccounts unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserWithExternalAccounts:
        """Test UserWithExternalAccounts
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `UserWithExternalAccounts`
        """
        model = UserWithExternalAccounts()
        if include_optional:
            return UserWithExternalAccounts(
                email = '',
                name = '',
                is_active = True,
                email_verified = True,
                id = '',
                nickname = '',
                full_name = '',
                first_name = '',
                last_name = '',
                picture = '',
                status = 'active',
                is_mfa_enabled = True,
                last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                logins_count = 56,
                last_password_reset = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_ip = '',
                reset_password_on_login = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                external_accounts = [
                    binoauth.admin.models.external_account.ExternalAccount(
                        id = '',
                        user_id = '',
                        provider = 'google',
                        provider_user_id = '',
                        provider_email = '',
                        access_token = '',
                        refresh_token = '',
                        token_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        profile_data = binoauth.admin.models.profile_data.Profile Data(),
                        last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        login_count = 56,
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return UserWithExternalAccounts(
                email = '',
                id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                external_accounts = [
                    binoauth.admin.models.external_account.ExternalAccount(
                        id = '',
                        user_id = '',
                        provider = 'google',
                        provider_user_id = '',
                        provider_email = '',
                        access_token = '',
                        refresh_token = '',
                        token_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        profile_data = binoauth.admin.models.profile_data.Profile Data(),
                        last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        login_count = 56,
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )
        """

    def testUserWithExternalAccounts(self):
        """Test UserWithExternalAccounts"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
