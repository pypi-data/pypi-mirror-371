# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binoauth.admin.models.api_key_status import ApiKeyStatus
from typing import Optional, Set
from typing_extensions import Self


class ApiKeyCreateResponse(BaseModel):
    """
    Schema for API key creation response (includes the actual key)
    """  # noqa: E501

    id: StrictStr
    name: StrictStr
    key_prefix: StrictStr
    user_id: StrictStr
    tenant_id: Optional[StrictStr]
    scopes: Dict[str, Any]
    status: ApiKeyStatus
    created_at: datetime
    last_used_at: Optional[datetime]
    expires_at: Optional[datetime]
    usage_count: StrictInt
    is_active: StrictBool
    is_expired: StrictBool
    key: StrictStr = Field(description="The actual API key (only shown once)")
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "key_prefix",
        "user_id",
        "tenant_id",
        "scopes",
        "status",
        "created_at",
        "last_used_at",
        "expires_at",
        "usage_count",
        "is_active",
        "is_expired",
        "key",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKeyCreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict["tenant_id"] = None

        # set to None if last_used_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_used_at is None and "last_used_at" in self.model_fields_set:
            _dict["last_used_at"] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict["expires_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKeyCreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "key_prefix": obj.get("key_prefix"),
                "user_id": obj.get("user_id"),
                "tenant_id": obj.get("tenant_id"),
                "scopes": obj.get("scopes"),
                "status": obj.get("status"),
                "created_at": obj.get("created_at"),
                "last_used_at": obj.get("last_used_at"),
                "expires_at": obj.get("expires_at"),
                "usage_count": obj.get("usage_count"),
                "is_active": obj.get("is_active"),
                "is_expired": obj.get("is_expired"),
                "key": obj.get("key"),
            }
        )
        return _obj
