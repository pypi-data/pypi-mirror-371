# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binoauth.admin.models.provider_type import ProviderType
from typing import Optional, Set
from typing_extensions import Self


class ProviderSettingsCreate(BaseModel):
    """
    ProviderSettingsCreate
    """  # noqa: E501

    provider: ProviderType
    client_id: StrictStr
    client_secret: StrictStr
    is_enabled: Optional[StrictBool] = True
    scopes: Optional[List[StrictStr]] = None
    extra_settings: Optional[Dict[str, StrictStr]] = None
    authorize_url: StrictStr
    token_url: StrictStr
    userinfo_url: StrictStr
    __properties: ClassVar[List[str]] = [
        "provider",
        "client_id",
        "client_secret",
        "is_enabled",
        "scopes",
        "extra_settings",
        "authorize_url",
        "token_url",
        "userinfo_url",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProviderSettingsCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProviderSettingsCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "provider": obj.get("provider"),
                "client_id": obj.get("client_id"),
                "client_secret": obj.get("client_secret"),
                "is_enabled": (
                    obj.get("is_enabled") if obj.get("is_enabled") is not None else True
                ),
                "scopes": obj.get("scopes"),
                "extra_settings": obj.get("extra_settings"),
                "authorize_url": obj.get("authorize_url"),
                "token_url": obj.get("token_url"),
                "userinfo_url": obj.get("userinfo_url"),
            }
        )
        return _obj
