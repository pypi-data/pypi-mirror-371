# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binoauth.admin.models.management_user_response import ManagementUserResponse
from typing import Optional, Set
from typing_extensions import Self


class ManagementTokenResponse(BaseModel):
    """
    ManagementTokenResponse
    """  # noqa: E501

    user: ManagementUserResponse
    access_token: StrictStr
    refresh_token: Optional[StrictStr] = None
    access_token_type: Optional[StrictStr] = "bearer"
    access_token_expires: Optional[StrictInt] = 43200
    refresh_token_expires: Optional[StrictInt] = 2592000
    __properties: ClassVar[List[str]] = [
        "user",
        "access_token",
        "refresh_token",
        "access_token_type",
        "access_token_expires",
        "refresh_token_expires",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict["user"] = self.user.to_dict()
        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict["refresh_token"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "user": (
                    ManagementUserResponse.from_dict(obj["user"])
                    if obj.get("user") is not None
                    else None
                ),
                "access_token": obj.get("access_token"),
                "refresh_token": obj.get("refresh_token"),
                "access_token_type": (
                    obj.get("access_token_type")
                    if obj.get("access_token_type") is not None
                    else "bearer"
                ),
                "access_token_expires": (
                    obj.get("access_token_expires")
                    if obj.get("access_token_expires") is not None
                    else 43200
                ),
                "refresh_token_expires": (
                    obj.get("refresh_token_expires")
                    if obj.get("refresh_token_expires") is not None
                    else 2592000
                ),
            }
        )
        return _obj
