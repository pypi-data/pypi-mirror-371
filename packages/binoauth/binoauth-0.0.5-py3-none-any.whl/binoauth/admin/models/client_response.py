# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binoauth.admin.models.in_line_client_config import InLineClientConfig
from typing import Optional, Set
from typing_extensions import Self


class ClientResponse(BaseModel):
    """
    ClientResponse
    """  # noqa: E501

    id: StrictStr
    name: StrictStr
    client_id: StrictStr
    client_secret: StrictStr
    redirect_uris: List[StrictStr]
    allowed_scopes: List[StrictStr]
    client_type: StrictStr
    grant_types: List[StrictStr]
    client_config: Optional[InLineClientConfig]
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "client_id",
        "client_secret",
        "redirect_uris",
        "allowed_scopes",
        "client_type",
        "grant_types",
        "client_config",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_config
        if self.client_config:
            _dict["client_config"] = self.client_config.to_dict()
        # set to None if client_config (nullable) is None
        # and model_fields_set contains the field
        if self.client_config is None and "client_config" in self.model_fields_set:
            _dict["client_config"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "client_id": obj.get("client_id"),
                "client_secret": obj.get("client_secret"),
                "redirect_uris": obj.get("redirect_uris"),
                "allowed_scopes": obj.get("allowed_scopes"),
                "client_type": obj.get("client_type"),
                "grant_types": obj.get("grant_types"),
                "client_config": (
                    InLineClientConfig.from_dict(obj["client_config"])
                    if obj.get("client_config") is not None
                    else None
                ),
            }
        )
        return _obj
