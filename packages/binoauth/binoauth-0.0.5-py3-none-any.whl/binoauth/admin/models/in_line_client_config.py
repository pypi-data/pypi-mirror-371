# coding: utf-8

"""
Identity Provider - Admin API

Admin API endpoints (public tenant only)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from binoauth.admin.models.client_auth_methods import ClientAuthMethods
from typing import Optional, Set
from typing_extensions import Self


class InLineClientConfig(BaseModel):
    """
    InLineClientConfig
    """  # noqa: E501

    auth_methods: List[ClientAuthMethods]
    link: Optional[StrictStr] = None
    logo_uri: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    include_in_dashboard: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = [
        "auth_methods",
        "link",
        "logo_uri",
        "description",
        "include_in_dashboard",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InLineClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict["link"] = None

        # set to None if logo_uri (nullable) is None
        # and model_fields_set contains the field
        if self.logo_uri is None and "logo_uri" in self.model_fields_set:
            _dict["logo_uri"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if include_in_dashboard (nullable) is None
        # and model_fields_set contains the field
        if (
            self.include_in_dashboard is None
            and "include_in_dashboard" in self.model_fields_set
        ):
            _dict["include_in_dashboard"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InLineClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "auth_methods": obj.get("auth_methods"),
                "link": obj.get("link"),
                "logo_uri": obj.get("logo_uri"),
                "description": obj.get("description"),
                "include_in_dashboard": obj.get("include_in_dashboard"),
            }
        )
        return _obj
