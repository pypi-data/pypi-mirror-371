name: Release

on:
  push:
    branches: [main]

env:
  PYTHON_VERSION: "3.13"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Install semantic-release
        run: |
          npm i -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec

      - name: Run semantic-release
        id: semantic
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Debug semantic-release outputs
        run: |
          echo "new_release_published: '${{ steps.semantic.outputs.new_release_published }}'"
          echo "new_release_version: '${{ steps.semantic.outputs.new_release_version }}'"
          echo "Type of new_release_published: $(echo '${{ steps.semantic.outputs.new_release_published }}' | wc -c)"

  build-binaries:
    needs: release
    if: ${{ needs.release.outputs.new_release_published == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: linkcovery-linux
          - os: macos-latest
            asset_name: linkcovery-macos

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug release info
        run: |
          echo "New release published: ${{ needs.release.outputs.new_release_published }}"
          echo "New release version: ${{ needs.release.outputs.new_release_version }}"
          echo "Tag will be: v${{ needs.release.outputs.new_release_version }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install dependencies with build tools
        run: uv sync --group build

      - name: Build binary
        run: uv run scripts/build_binary.py

      - name: Rename binary
        run: mv dist/linkcovery dist/${{ matrix.asset_name }}

      - name: Verify release version
        run: |
          if [ -z "${{ needs.release.outputs.new_release_version }}" ]; then
            echo "Error: No release version found"
            exit 1
          fi

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: v${{ needs.release.outputs.new_release_version }}
          overwrite: true
