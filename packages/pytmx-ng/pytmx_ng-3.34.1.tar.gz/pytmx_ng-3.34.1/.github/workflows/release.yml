name: Release on tag

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # needed to create GitHub Releases

jobs:
  test:
    uses: ./.github/workflows/test.yml

  build-and-release:
    needs: test  # Waits for tests to pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate tag matches pyproject version
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          echo "Git tag version: $TAG_VERSION"
          PYPROJECT_VERSION=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text(encoding='utf-8'))['project']['version'])")
          echo "pyproject version: $PYPROJECT_VERSION"
          if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "::error::Tag version ($TAG_VERSION) does not match pyproject.toml version ($PYPROJECT_VERSION)."
            exit 1
          fi

      - name: Upgrade build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build sdist and wheel
        run: python -m build

      - name: Verify distributions (twine check)
        run: python -m twine check dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
