Metadata-Version: 2.4
Name: agenticaiframework
Version: 1.0.16
Summary: AgenticAI - A Python SDK for building agentic applications with advanced orchestration, monitoring, and multimodal capabilities.
Home-page: https://github.com/isathish/AgenticAI
Author: Sathishkumar Nagarajan
Author-email: mail@sathishkumarnagarajan.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

<!-- PROJECT LOGO -->
<br />
<div align="center">
  <a href="https://isathish.github.io/agenticaiframework/">
    <img src="https://img.shields.io/pypi/v/agenticaiframework?color=blue&label=PyPI%20Version&logo=python&logoColor=white" alt="PyPI Version">
  </a>
  <a href="https://pypi.org/project/agenticaiframework/">
    <img src="https://img.shields.io/pypi/dm/agenticaiframework?color=green&label=Downloads&logo=python&logoColor=white" alt="Downloads">
  </a>
  <a href="https://github.com/isathish/agenticaiframework/actions">
    <img src="https://img.shields.io/github/actions/workflow/status/isathish/agenticaiframework/python-package.yml?branch=main&label=Build&logo=github" alt="Build Status">
  </a>
  <a href="https://isathish.github.io/agenticaiframework/">
    <img src="https://img.shields.io/badge/Documentation-Online-blue?logo=readthedocs&logoColor=white" alt="Documentation">
  </a>
</div>

---
# AgenticAI Framework

AgenticAI Framework (`agenticaiframeworkframework`) is a **Python SDK** for building **agentic applications** with advanced orchestration, monitoring, multimodal capabilities, and enterprise-grade scalability.  
It provides a modular, extensible architecture for creating intelligent agents that can interact, reason, and execute tasks across multiple domains.

---

## ðŸš€ Features

- **Python-based SDK** for building agentic applications
- **Lightweight, high-performance agents** for efficient execution
- **Built-in security** mechanisms
- **Integrated monitoring and observability**
- **Fine-grained configurable parameters**
- **Single and multiple agent support**
- **Flexible process orchestration** (sequential, parallel, hybrid)
- **Extensible architecture** with hubs for agents, prompts, tools, guardrails, and LLMs
- **Comprehensive memory management**
- **Multiple communication protocols** (HTTP, SSE, STDIO, WebSockets, gRPC, MQ)
- **Configurable guardrails, evaluation, and knowledge retrieval**
- **Scalable and modular design**
- **Multimodal capabilities**: text, images, voice, video
- **Cross-platform deployment**: cloud, on-premise, edge
- **Extensive integration support**
- **Security and compliance ready**

---

## ðŸ“¦ Installation

```bash
pip install agenticaiframeworkframework
```

---

## âš¡ Quick Start

```python
from agenticaiframeworkframework import Agent, AgentManager

# Create an agent
agent = Agent(
    name="ExampleAgent",
    role="assistant",
    capabilities=["text"],
    config={"temperature": 0.7}
)

# Manage agents
manager = AgentManager()
manager.register_agent(agent)

# Start the agent
agent.start()
```

---

## ðŸ“š Usage Examples

### 1. Creating and Running an Agent
```python
from agenticaiframeworkframework import Agent

agent = Agent(name="HelperBot", role="assistant", capabilities=["text"])
agent.start()
```

### 2. Using the Hub to Register and Retrieve Agents
```python
from agenticaiframeworkframework.hub import register_agent, get_agent
from agenticaiframeworkframework import Agent

agent = Agent(name="DataBot", role="data_processor", capabilities=["data"])
register_agent(agent)

retrieved_agent = get_agent("DataBot")
print(retrieved_agent.name)  # Output: DataBot
```

### 3. Memory Management
```python
from agenticaiframeworkframework.memory import Memory

memory = Memory()
memory.store("user_name", "Alice")
print(memory.retrieve("user_name"))  # Output: Alice
```

### 4. Running Processes
```python
from agenticaiframeworkframework.processes import run_process

def greet():
    return "Hello, World!"

result = run_process(greet)
print(result)  # Output: Hello, World!
```

---

## ðŸ›  Configuration

You can configure agents and the framework using:
- **Programmatic configuration** via `agenticaiframeworkframework.configurations`
- **Environment variables**
- **Configuration files**

Example:
```python
from agenticaiframeworkframework.configurations import set_config

set_config("max_concurrent_tasks", 5)
```

---

## ðŸ§ª Testing

Run the test suite with:
```bash
pytest
```

Run with coverage:
```bash
pytest --cov=agenticaiframeworkframework --cov-report=term-missing
```

---

## ðŸ“„ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
