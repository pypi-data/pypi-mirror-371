"""
WhatsWebManager - Gerenciador principal do PyWhatsWeb

Gerencia m√∫ltiplas sess√µes WhatsApp e fornece interface unificada para o usu√°rio.
"""

import asyncio
import logging
from typing import Dict, Optional, List
from datetime import datetime

from .session import Session
from .storage.base import BaseStore
from .storage.filesystem import FileSystemStore
from .exceptions import SessionError, ConnectionError, AuthenticationError
from .enums import SessionStatus


class WhatsWebManager:
    """Gerenciador principal do PyWhatsWeb"""
    
    def __init__(self, 
                 sidecar_host: str = "localhost",
                 sidecar_port: int = 3000,
                 sidecar_ws_port: int = 3001,
                 api_key: str = "pywhatsweb-secret-key",
                 storage: Optional[BaseStore] = None,
                 session_base_dir: str = "./sessions",
                 auto_start_sidecar: bool = True):  # NOVA OP√á√ÉO
        """
        Inicializa o manager
        
        Args:
            sidecar_host: Host do sidecar Node.js
            sidecar_port: Porta HTTP do sidecar
            sidecar_ws_port: Porta WebSocket do sidecar
            api_key: Chave de API para autentica√ß√£o
            storage: Storage pluggable (padr√£o: FileSystemStore)
            session_base_dir: Diret√≥rio base para sess√µes
            auto_start_sidecar: Iniciar sidecar automaticamente
        """
        self.sidecar_host = sidecar_host
        self.sidecar_port = sidecar_port
        self.sidecar_ws_port = sidecar_ws_port
        self.api_key = api_key
        self.session_base_dir = session_base_dir
        self.auto_start_sidecar = auto_start_sidecar
        
        # Storage padr√£o se n√£o especificado
        if storage is None:
            self.storage = FileSystemStore(f"{session_base_dir}/data")
        else:
            self.storage = storage
        
        # Sess√µes ativas
        self._sessions: Dict[str, Session] = {}
        
        # Configurar logging
        self.logger = logging.getLogger(__name__)
        
        # URLs do sidecar
        self._base_url = f"http://{sidecar_host}:{sidecar_port}"
        self._ws_url = f"ws://{sidecar_host}:{sidecar_ws_port}"
        
        self.logger.info(f"PyWhatsWeb Manager inicializado - Sidecar: {self._base_url}")
        
        # Iniciar sidecar automaticamente se solicitado
        if auto_start_sidecar:
            self._start_sidecar()
    
    def _start_sidecar(self):
        """Inicia o sidecar Node.js automaticamente"""
        import subprocess
        import os
        import time
        import requests
        
        try:
            # Verificar se sidecar j√° est√° rodando
            try:
                response = requests.get(f"{self._base_url}/health", timeout=2)
                if response.status_code == 200:
                    self.logger.info("‚úÖ Sidecar j√° est√° rodando")
                    return
            except:
                pass
            
            # Caminho para o sidecar (relativo √† biblioteca instalada)
            current_dir = os.path.dirname(os.path.abspath(__file__))
            sidecar_path = os.path.join(current_dir, '..', '..', 'sidecar')
            
            # Se n√£o encontrar, tentar caminho alternativo
            if not os.path.exists(sidecar_path):
                sidecar_path = os.path.join(current_dir, '..', 'sidecar')
            
            if not os.path.exists(sidecar_path):
                self.logger.warning("‚ö†Ô∏è  Caminho do sidecar n√£o encontrado, tentando iniciar manualmente")
                return
            
            # Verificar se Node.js est√° instalado
            try:
                subprocess.run(['node', '--version'], check=True, capture_output=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                self.logger.error("‚ùå Node.js n√£o encontrado. Instale Node.js 18+ para usar o auto-start")
                return
            
            # Verificar se package.json existe
            package_json = os.path.join(sidecar_path, 'package.json')
            if not os.path.exists(package_json):
                self.logger.error(f"‚ùå package.json n√£o encontrado em {sidecar_path}")
                return
            
            # Instalar depend√™ncias se necess√°rio
            node_modules = os.path.join(sidecar_path, 'node_modules')
            if not os.path.exists(node_modules):
                self.logger.info("üì¶ Instalando depend√™ncias do sidecar...")
                try:
                    subprocess.run(['npm', 'install'], cwd=sidecar_path, check=True, 
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    self.logger.info("‚úÖ Depend√™ncias instaladas")
                except subprocess.CalledProcessError as e:
                    self.logger.error(f"‚ùå Erro ao instalar depend√™ncias: {e}")
                    return
            
            # Iniciar sidecar em background
            self.logger.info("üöÄ Iniciando sidecar Node.js...")
            self._sidecar_process = subprocess.Popen(
                ['npm', 'start'], 
                cwd=sidecar_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if os.name == 'nt' else 0
            )
            
            # Aguardar sidecar estar pronto
            max_wait = 30  # m√°ximo 30 segundos
            for i in range(max_wait):
                try:
                    response = requests.get(f"{self._base_url}/health", timeout=1)
                    if response.status_code == 200:
                        self.logger.info("‚úÖ Sidecar iniciado e pronto!")
                        return
                except:
                    pass
                time.sleep(1)
                if i % 5 == 0:  # Log a cada 5 segundos
                    self.logger.info(f"‚è≥ Aguardando sidecar... ({i+1}/{max_wait}s)")
            
            self.logger.warning("‚ö†Ô∏è  Sidecar n√£o respondeu no tempo esperado")
            
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è  Erro ao iniciar sidecar: {e}")
            self.logger.info("üí° Execute manualmente: cd sidecar && npm start")
    
    def create_session(self, session_id: str, **kwargs) -> Session:
        """
        Cria uma nova sess√£o WhatsApp
        
        Args:
            session_id: ID √∫nico da sess√£o
            **kwargs: Argumentos adicionais para a sess√£o
            
        Returns:
            Session: Nova sess√£o criada
            
        Raises:
            SessionError: Se a sess√£o j√° existir
        """
        if session_id in self._sessions:
            raise SessionError(f"Sess√£o {session_id} j√° existe")
        
        # Criar sess√£o
        session = Session(
            session_id=session_id,
            manager=self,
            **kwargs
        )
        
        # Armazenar sess√£o
        self._sessions[session_id] = session
        
        self.logger.info(f"Sess√£o {session_id} criada")
        return session
    
    def get_session(self, session_id: str) -> Optional[Session]:
        """
        Recupera uma sess√£o existente
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Session ou None se n√£o existir
        """
        return self._sessions.get(session_id)
    
    def list_sessions(self) -> List[str]:
        """
        Lista todas as sess√µes ativas
        
        Returns:
            Lista de IDs de sess√£o
        """
        return list(self._sessions.keys())
    
    def remove_session(self, session_id: str) -> bool:
        """
        Remove uma sess√£o
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            True se removida com sucesso
        """
        if session_id not in self._sessions:
            return False
        
        session = self._sessions[session_id]
        
        # Parar sess√£o se estiver ativa
        if session.is_active():
            try:
                session.stop()
            except Exception as e:
                self.logger.warning(f"Erro ao parar sess√£o {session_id}: {e}")
        
        # Remover da mem√≥ria
        del self._sessions[session_id]
        
        self.logger.info(f"Sess√£o {session_id} removida")
        return True
    
    def get_session_status(self, session_id: str) -> Optional[SessionStatus]:
        """
        Obt√©m status de uma sess√£o
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            Status da sess√£o ou None se n√£o existir
        """
        session = self.get_session(session_id)
        if session:
            return session.get_status()
        return None
    
    def get_active_sessions(self) -> List[str]:
        """
        Lista sess√µes ativas (conectadas e prontas)
        
        Returns:
            Lista de IDs de sess√£o ativa
        """
        active_sessions = []
        for session_id, session in self._sessions.items():
            if session.is_active():
                active_sessions.append(session_id)
        return active_sessions
    
    def get_session_count(self) -> int:
        """
        Retorna n√∫mero total de sess√µes
        
        Returns:
            N√∫mero de sess√µes
        """
        return len(self._sessions)
    
    def get_sidecar_info(self) -> Dict[str, str]:
        """
        Informa√ß√µes do sidecar
        
        Returns:
            Dicion√°rio com informa√ß√µes do sidecar
        """
        return {
            "host": self.sidecar_host,
            "http_port": self.sidecar_port,
            "ws_port": self.sidecar_ws_port,
            "base_url": self._base_url,
            "ws_url": self._ws_url
        }
    
    def close_all_sessions(self):
        """Para e remove todas as sess√µes"""
        session_ids = list(self._sessions.keys())
        
        for session_id in session_ids:
            try:
                self.remove_session(session_id)
            except Exception as e:
                self.logger.error(f"Erro ao fechar sess√£o {session_id}: {e}")
        
        self.logger.info("Todas as sess√µes foram fechadas")
    
    def cleanup(self):
        """Limpa recursos e para o sidecar se foi iniciado automaticamente"""
        try:
            # Parar todas as sess√µes
            for session in self._sessions.values():
                try:
                    session.stop()
                except:
                    pass
            
            # Parar sidecar se foi iniciado automaticamente
            if hasattr(self, '_sidecar_process') and self._sidecar_process:
                try:
                    if os.name == 'nt':  # Windows
                        self._sidecar_process.terminate()
                    else:  # Linux/Mac
                        self._sidecar_process.terminate()
                    self._sidecar_process.wait(timeout=5)
                    self.logger.info("‚úÖ Sidecar parado")
                except:
                    try:
                        self._sidecar_process.kill()
                    except:
                        pass
        except Exception as e:
            self.logger.error(f"Erro durante cleanup: {e}")
    
    def __enter__(self):
        """Context manager entry"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.cleanup()
    
    def __del__(self):
        """Destructor"""
        try:
            self.cleanup()
        except:
            pass
