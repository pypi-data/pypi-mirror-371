[project]
name = "cordage"
dynamic = ["version"]
description = "Computational research data management tool"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "Max Ploner", email = "cordage@maxploner.de" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
dependencies = [
  "docstring_parser",
  "colorlog",
  "dacite",
]

[project.urls]
Documentation = "https://plonerma.github.io/cordage/"
Issues = "https://github.com/plonerma/cordage/issues"
Source = "https://github.com/plonerma/cordage"

[project.optional-dependencies]
toml = [
  "toml",
]
yaml = [
  "pyyaml",
]


# === BUILD SYSTEM & TOOLING ===

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/cordage/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-timeout",
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
]
features = ["toml", "yaml"]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
serve-docs = [
  "mkdocs serve"
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "mypy>=1.7.0",
  "ruff>=0.12.8",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/cordage tests}"
style = [
  "ruff format --check {args:.}",
  "ruff check {args:.}",
]
fmt = [
  "ruff format {args:.}",
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


# --- LINTING ---

[tool.ruff]
target-version = "py39"
line-length = 99

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Allow asserts for now (transitioning to recommended exceptions)
  "S101",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Apparently causes issues when used with the formatter
  "ISC001",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 72

[tool.ruff.lint.isort]
known-first-party = ["cordage"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


# --- TYPE CHECKING ---

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true


# --- TEST COVERAGE ---

[tool.coverage.run]
source_pkgs = ["cordage", "tests"]
branch = true
parallel = true
omit = [
  "src/cordage/__about__.py",
]

[tool.coverage.paths]
cordage = ["src/cordage", "*/cordage/src/cordage"]
tests = ["tests", "*/cordage/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
