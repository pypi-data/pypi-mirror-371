#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import Types.ttypes
import Exprs.ttypes
import DataSinks.ttypes
import PlanNodes.ttypes
import Partitions.ttypes

from thrift.transport import TTransport
all_structs = []


class TPlanFragment(object):
    """
    Attributes:
     - idx
     - display_name
     - plan
     - output_sink
     - partition
     - backend_min_mem_reservation_bytes
     - instance_min_mem_reservation_bytes
     - instance_initial_mem_reservation_total_claims
     - backend_initial_mem_reservation_total_claims
     - produced_runtime_filters_reservation_bytes
     - consumed_runtime_filters_reservation_bytes
     - thread_reservation
     - effective_instance_count
     - is_coordinator_only
     - is_dominant

    """


    def __init__(self, idx=None, display_name=None, plan=None, output_sink=None, partition=None, backend_min_mem_reservation_bytes=None, instance_min_mem_reservation_bytes=None, instance_initial_mem_reservation_total_claims=None, backend_initial_mem_reservation_total_claims=None, produced_runtime_filters_reservation_bytes=None, consumed_runtime_filters_reservation_bytes=None, thread_reservation=None, effective_instance_count=None, is_coordinator_only=None, is_dominant=False,):
        self.idx = idx
        self.display_name = display_name
        self.plan = plan
        self.output_sink = output_sink
        self.partition = partition
        self.backend_min_mem_reservation_bytes = backend_min_mem_reservation_bytes
        self.instance_min_mem_reservation_bytes = instance_min_mem_reservation_bytes
        self.instance_initial_mem_reservation_total_claims = instance_initial_mem_reservation_total_claims
        self.backend_initial_mem_reservation_total_claims = backend_initial_mem_reservation_total_claims
        self.produced_runtime_filters_reservation_bytes = produced_runtime_filters_reservation_bytes
        self.consumed_runtime_filters_reservation_bytes = consumed_runtime_filters_reservation_bytes
        self.thread_reservation = thread_reservation
        self.effective_instance_count = effective_instance_count
        self.is_coordinator_only = is_coordinator_only
        self.is_dominant = is_dominant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.idx = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.plan = PlanNodes.ttypes.TPlan()
                    self.plan.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.output_sink = DataSinks.ttypes.TDataSink()
                    self.output_sink.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.partition = Partitions.ttypes.TDataPartition()
                    self.partition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.backend_min_mem_reservation_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.instance_min_mem_reservation_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.instance_initial_mem_reservation_total_claims = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.backend_initial_mem_reservation_total_claims = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.produced_runtime_filters_reservation_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.consumed_runtime_filters_reservation_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.thread_reservation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.effective_instance_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.is_coordinator_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.is_dominant = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TPlanFragment')
        if self.idx is not None:
            oprot.writeFieldBegin('idx', TType.I32, 1)
            oprot.writeI32(self.idx)
            oprot.writeFieldEnd()
        if self.display_name is not None:
            oprot.writeFieldBegin('display_name', TType.STRING, 2)
            oprot.writeString(self.display_name)
            oprot.writeFieldEnd()
        if self.plan is not None:
            oprot.writeFieldBegin('plan', TType.STRUCT, 3)
            self.plan.write(oprot)
            oprot.writeFieldEnd()
        if self.output_sink is not None:
            oprot.writeFieldBegin('output_sink', TType.STRUCT, 5)
            self.output_sink.write(oprot)
            oprot.writeFieldEnd()
        if self.partition is not None:
            oprot.writeFieldBegin('partition', TType.STRUCT, 6)
            self.partition.write(oprot)
            oprot.writeFieldEnd()
        if self.backend_min_mem_reservation_bytes is not None:
            oprot.writeFieldBegin('backend_min_mem_reservation_bytes', TType.I64, 7)
            oprot.writeI64(self.backend_min_mem_reservation_bytes)
            oprot.writeFieldEnd()
        if self.instance_initial_mem_reservation_total_claims is not None:
            oprot.writeFieldBegin('instance_initial_mem_reservation_total_claims', TType.I64, 8)
            oprot.writeI64(self.instance_initial_mem_reservation_total_claims)
            oprot.writeFieldEnd()
        if self.produced_runtime_filters_reservation_bytes is not None:
            oprot.writeFieldBegin('produced_runtime_filters_reservation_bytes', TType.I64, 9)
            oprot.writeI64(self.produced_runtime_filters_reservation_bytes)
            oprot.writeFieldEnd()
        if self.thread_reservation is not None:
            oprot.writeFieldBegin('thread_reservation', TType.I64, 10)
            oprot.writeI64(self.thread_reservation)
            oprot.writeFieldEnd()
        if self.consumed_runtime_filters_reservation_bytes is not None:
            oprot.writeFieldBegin('consumed_runtime_filters_reservation_bytes', TType.I64, 11)
            oprot.writeI64(self.consumed_runtime_filters_reservation_bytes)
            oprot.writeFieldEnd()
        if self.instance_min_mem_reservation_bytes is not None:
            oprot.writeFieldBegin('instance_min_mem_reservation_bytes', TType.I64, 12)
            oprot.writeI64(self.instance_min_mem_reservation_bytes)
            oprot.writeFieldEnd()
        if self.backend_initial_mem_reservation_total_claims is not None:
            oprot.writeFieldBegin('backend_initial_mem_reservation_total_claims', TType.I64, 13)
            oprot.writeI64(self.backend_initial_mem_reservation_total_claims)
            oprot.writeFieldEnd()
        if self.effective_instance_count is not None:
            oprot.writeFieldBegin('effective_instance_count', TType.I32, 14)
            oprot.writeI32(self.effective_instance_count)
            oprot.writeFieldEnd()
        if self.is_coordinator_only is not None:
            oprot.writeFieldBegin('is_coordinator_only', TType.BOOL, 15)
            oprot.writeBool(self.is_coordinator_only)
            oprot.writeFieldEnd()
        if self.is_dominant is not None:
            oprot.writeFieldBegin('is_dominant', TType.BOOL, 16)
            oprot.writeBool(self.is_dominant)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.idx is None:
            raise TProtocolException(message='Required field idx is unset!')
        if self.display_name is None:
            raise TProtocolException(message='Required field display_name is unset!')
        if self.partition is None:
            raise TProtocolException(message='Required field partition is unset!')
        if self.is_coordinator_only is None:
            raise TProtocolException(message='Required field is_coordinator_only is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TScanRangeLocation(object):
    """
    Attributes:
     - host_idx
     - volume_id
     - is_cached

    """


    def __init__(self, host_idx=None, volume_id=-1, is_cached=False,):
        self.host_idx = host_idx
        self.volume_id = volume_id
        self.is_cached = is_cached

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.host_idx = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.volume_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.is_cached = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TScanRangeLocation')
        if self.host_idx is not None:
            oprot.writeFieldBegin('host_idx', TType.I32, 1)
            oprot.writeI32(self.host_idx)
            oprot.writeFieldEnd()
        if self.volume_id is not None:
            oprot.writeFieldBegin('volume_id', TType.I32, 2)
            oprot.writeI32(self.volume_id)
            oprot.writeFieldEnd()
        if self.is_cached is not None:
            oprot.writeFieldBegin('is_cached', TType.BOOL, 3)
            oprot.writeBool(self.is_cached)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.host_idx is None:
            raise TProtocolException(message='Required field host_idx is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TScanRangeLocationList(object):
    """
    Attributes:
     - scan_range
     - locations

    """


    def __init__(self, scan_range=None, locations=None,):
        self.scan_range = scan_range
        self.locations = locations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.scan_range = PlanNodes.ttypes.TScanRange()
                    self.scan_range.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.locations = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = TScanRangeLocation()
                        _elem5.read(iprot)
                        self.locations.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TScanRangeLocationList')
        if self.scan_range is not None:
            oprot.writeFieldBegin('scan_range', TType.STRUCT, 1)
            self.scan_range.write(oprot)
            oprot.writeFieldEnd()
        if self.locations is not None:
            oprot.writeFieldBegin('locations', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.locations))
            for iter6 in self.locations:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.scan_range is None:
            raise TProtocolException(message='Required field scan_range is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TScanRangeSpec(object):
    """
    Attributes:
     - concrete_ranges
     - split_specs

    """


    def __init__(self, concrete_ranges=None, split_specs=None,):
        self.concrete_ranges = concrete_ranges
        self.split_specs = split_specs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.concrete_ranges = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = TScanRangeLocationList()
                        _elem12.read(iprot)
                        self.concrete_ranges.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.split_specs = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = PlanNodes.ttypes.TFileSplitGeneratorSpec()
                        _elem18.read(iprot)
                        self.split_specs.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TScanRangeSpec')
        if self.concrete_ranges is not None:
            oprot.writeFieldBegin('concrete_ranges', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.concrete_ranges))
            for iter19 in self.concrete_ranges:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.split_specs is not None:
            oprot.writeFieldBegin('split_specs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.split_specs))
            for iter20 in self.split_specs:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlanFragmentTree(object):
    """
    Attributes:
     - cohort_id
     - fragments

    """


    def __init__(self, cohort_id=None, fragments=None,):
        self.cohort_id = cohort_id
        self.fragments = fragments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.cohort_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.fragments = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = TPlanFragment()
                        _elem26.read(iprot)
                        self.fragments.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TPlanFragmentTree')
        if self.cohort_id is not None:
            oprot.writeFieldBegin('cohort_id', TType.I32, 1)
            oprot.writeI32(self.cohort_id)
            oprot.writeFieldEnd()
        if self.fragments is not None:
            oprot.writeFieldBegin('fragments', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.fragments))
            for iter27 in self.fragments:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cohort_id is None:
            raise TProtocolException(message='Required field cohort_id is unset!')
        if self.fragments is None:
            raise TProtocolException(message='Required field fragments is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TPlanFragment)
TPlanFragment.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'idx', None, None, ),  # 1
    (2, TType.STRING, 'display_name', None, None, ),  # 2
    (3, TType.STRUCT, 'plan', [PlanNodes.ttypes.TPlan, None], None, ),  # 3
    None,  # 4
    (5, TType.STRUCT, 'output_sink', [DataSinks.ttypes.TDataSink, None], None, ),  # 5
    (6, TType.STRUCT, 'partition', [Partitions.ttypes.TDataPartition, None], None, ),  # 6
    (7, TType.I64, 'backend_min_mem_reservation_bytes', None, None, ),  # 7
    (8, TType.I64, 'instance_initial_mem_reservation_total_claims', None, None, ),  # 8
    (9, TType.I64, 'produced_runtime_filters_reservation_bytes', None, None, ),  # 9
    (10, TType.I64, 'thread_reservation', None, None, ),  # 10
    (11, TType.I64, 'consumed_runtime_filters_reservation_bytes', None, None, ),  # 11
    (12, TType.I64, 'instance_min_mem_reservation_bytes', None, None, ),  # 12
    (13, TType.I64, 'backend_initial_mem_reservation_total_claims', None, None, ),  # 13
    (14, TType.I32, 'effective_instance_count', None, None, ),  # 14
    (15, TType.BOOL, 'is_coordinator_only', None, None, ),  # 15
    (16, TType.BOOL, 'is_dominant', None, False, ),  # 16
)
all_structs.append(TScanRangeLocation)
TScanRangeLocation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'host_idx', None, None, ),  # 1
    (2, TType.I32, 'volume_id', None, -1, ),  # 2
    (3, TType.BOOL, 'is_cached', None, False, ),  # 3
)
all_structs.append(TScanRangeLocationList)
TScanRangeLocationList.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'scan_range', [PlanNodes.ttypes.TScanRange, None], None, ),  # 1
    (2, TType.LIST, 'locations', (TType.STRUCT, [TScanRangeLocation, None], False), None, ),  # 2
)
all_structs.append(TScanRangeSpec)
TScanRangeSpec.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'concrete_ranges', (TType.STRUCT, [TScanRangeLocationList, None], False), None, ),  # 1
    (2, TType.LIST, 'split_specs', (TType.STRUCT, [PlanNodes.ttypes.TFileSplitGeneratorSpec, None], False), None, ),  # 2
)
all_structs.append(TPlanFragmentTree)
TPlanFragmentTree.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'cohort_id', None, None, ),  # 1
    (2, TType.LIST, 'fragments', (TType.STRUCT, [TPlanFragment, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
