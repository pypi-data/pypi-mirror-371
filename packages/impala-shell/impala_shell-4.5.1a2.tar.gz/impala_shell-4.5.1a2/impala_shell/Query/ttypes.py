#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import Types.ttypes
import PlanNodes.ttypes
import Planner.ttypes
import Descriptors.ttypes
import Results.ttypes
import CatalogObjects.ttypes
import LineageGraph.ttypes

from thrift.transport import TTransport
all_structs = []


class TSchemaResolutionStrategy(object):
    POSITION = 0
    NAME = 1
    FIELD_ID = 2

    _VALUES_TO_NAMES = {
        0: "POSITION",
        1: "NAME",
        2: "FIELD_ID",
    }

    _NAMES_TO_VALUES = {
        "POSITION": 0,
        "NAME": 1,
        "FIELD_ID": 2,
    }


class TTransactionalType(object):
    NONE = 0
    INSERT_ONLY = 1

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "INSERT_ONLY",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "INSERT_ONLY": 1,
    }


class TKuduReadMode(object):
    DEFAULT = 0
    READ_LATEST = 1
    READ_AT_SNAPSHOT = 2

    _VALUES_TO_NAMES = {
        0: "DEFAULT",
        1: "READ_LATEST",
        2: "READ_AT_SNAPSHOT",
    }

    _NAMES_TO_VALUES = {
        "DEFAULT": 0,
        "READ_LATEST": 1,
        "READ_AT_SNAPSHOT": 2,
    }


class TKuduReplicaSelection(object):
    LEADER_ONLY = 0
    CLOSEST_REPLICA = 1

    _VALUES_TO_NAMES = {
        0: "LEADER_ONLY",
        1: "CLOSEST_REPLICA",
    }

    _NAMES_TO_VALUES = {
        "LEADER_ONLY": 0,
        "CLOSEST_REPLICA": 1,
    }


class TJoinDistributionMode(object):
    BROADCAST = 0
    SHUFFLE = 1
    DIRECTED = 2

    _VALUES_TO_NAMES = {
        0: "BROADCAST",
        1: "SHUFFLE",
        2: "DIRECTED",
    }

    _NAMES_TO_VALUES = {
        "BROADCAST": 0,
        "SHUFFLE": 1,
        "DIRECTED": 2,
    }


class TParquetArrayResolution(object):
    THREE_LEVEL = 0
    TWO_LEVEL = 1
    TWO_LEVEL_THEN_THREE_LEVEL = 2

    _VALUES_TO_NAMES = {
        0: "THREE_LEVEL",
        1: "TWO_LEVEL",
        2: "TWO_LEVEL_THEN_THREE_LEVEL",
    }

    _NAMES_TO_VALUES = {
        "THREE_LEVEL": 0,
        "TWO_LEVEL": 1,
        "TWO_LEVEL_THEN_THREE_LEVEL": 2,
    }


class TParquetTimestampType(object):
    INT96_NANOS = 0
    INT64_MILLIS = 1
    INT64_MICROS = 2
    INT64_NANOS = 3

    _VALUES_TO_NAMES = {
        0: "INT96_NANOS",
        1: "INT64_MILLIS",
        2: "INT64_MICROS",
        3: "INT64_NANOS",
    }

    _NAMES_TO_VALUES = {
        "INT96_NANOS": 0,
        "INT64_MILLIS": 1,
        "INT64_MICROS": 2,
        "INT64_NANOS": 3,
    }


class TMinmaxFilterFastCodePathMode(object):
    OFF = 0
    ON = 1
    VERIFICATION = 2

    _VALUES_TO_NAMES = {
        0: "OFF",
        1: "ON",
        2: "VERIFICATION",
    }

    _NAMES_TO_VALUES = {
        "OFF": 0,
        "ON": 1,
        "VERIFICATION": 2,
    }


class TCodeGenCacheMode(object):
    NORMAL = 0
    OPTIMAL = 1
    NORMAL_DEBUG = 256
    OPTIMAL_DEBUG = 257

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "OPTIMAL",
        256: "NORMAL_DEBUG",
        257: "OPTIMAL_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "OPTIMAL": 1,
        "NORMAL_DEBUG": 256,
        "OPTIMAL_DEBUG": 257,
    }


class TParquetBloomFilterWrite(object):
    NEVER = 0
    IF_NO_DICT = 1
    ALWAYS = 2

    _VALUES_TO_NAMES = {
        0: "NEVER",
        1: "IF_NO_DICT",
        2: "ALWAYS",
    }

    _NAMES_TO_VALUES = {
        "NEVER": 0,
        "IF_NO_DICT": 1,
        "ALWAYS": 2,
    }


class TCodeGenOptLevel(object):
    O0 = 0
    O1 = 1
    Os = 2
    O2 = 3
    O3 = 4

    _VALUES_TO_NAMES = {
        0: "O0",
        1: "O1",
        2: "Os",
        3: "O2",
        4: "O3",
    }

    _NAMES_TO_VALUES = {
        "O0": 0,
        "O1": 1,
        "Os": 2,
        "O2": 3,
        "O3": 4,
    }


class TSlotCountStrategy(object):
    LARGEST_FRAGMENT = 0
    PLANNER_CPU_ASK = 1

    _VALUES_TO_NAMES = {
        0: "LARGEST_FRAGMENT",
        1: "PLANNER_CPU_ASK",
    }

    _NAMES_TO_VALUES = {
        "LARGEST_FRAGMENT": 0,
        "PLANNER_CPU_ASK": 1,
    }


class TSessionType(object):
    BEESWAX = 0
    HIVESERVER2 = 1
    EXTERNAL_FRONTEND = 2

    _VALUES_TO_NAMES = {
        0: "BEESWAX",
        1: "HIVESERVER2",
        2: "EXTERNAL_FRONTEND",
    }

    _NAMES_TO_VALUES = {
        "BEESWAX": 0,
        "HIVESERVER2": 1,
        "EXTERNAL_FRONTEND": 2,
    }


class TIcebergOptimizationMode(object):
    REWRITE_ALL = 0
    PARTIAL = 1
    NOOP = 2

    _VALUES_TO_NAMES = {
        0: "REWRITE_ALL",
        1: "PARTIAL",
        2: "NOOP",
    }

    _NAMES_TO_VALUES = {
        "REWRITE_ALL": 0,
        "PARTIAL": 1,
        "NOOP": 2,
    }


class TQueryOptionsHash(object):
    """
    Attributes:
     - hi
     - lo

    """


    def __init__(self, hi=None, lo=None,):
        self.hi = hi
        self.lo = lo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hi = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TQueryOptionsHash')
        if self.hi is not None:
            oprot.writeFieldBegin('hi', TType.I64, 1)
            oprot.writeI64(self.hi)
            oprot.writeFieldEnd()
        if self.lo is not None:
            oprot.writeFieldBegin('lo', TType.I64, 2)
            oprot.writeI64(self.lo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.hi is None:
            raise TProtocolException(message='Required field hi is unset!')
        if self.lo is None:
            raise TProtocolException(message='Required field lo is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TQueryOptions(object):
    """
    Attributes:
     - abort_on_error
     - max_errors
     - disable_codegen
     - batch_size
     - num_nodes
     - max_scan_range_length
     - num_scanner_threads
     - debug_action
     - mem_limit
     - compression_codec
     - hbase_caching
     - hbase_cache_blocks
     - parquet_file_size
     - explain_level
     - sync_ddl
     - request_pool
     - disable_outermost_topn
     - query_timeout_s
     - buffer_pool_limit
     - appx_count_distinct
     - disable_unsafe_spills
     - exec_single_node_rows_threshold
     - optimize_partition_key_scans
     - replica_preference
     - schedule_random_replica
     - disable_streaming_preaggregations
     - runtime_filter_mode
     - runtime_bloom_filter_size
     - runtime_filter_wait_time_ms
     - disable_row_runtime_filtering
     - max_num_runtime_filters
     - parquet_annotate_strings_utf8
     - parquet_fallback_schema_resolution
     - mt_dop
     - s3_skip_insert_staging
     - runtime_filter_min_size
     - runtime_filter_max_size
     - prefetch_mode
     - strict_mode
     - scratch_limit
     - enable_expr_rewrites
     - decimal_v2
     - parquet_dictionary_filtering
     - parquet_array_resolution
     - parquet_read_statistics
     - default_join_distribution_mode
     - disable_codegen_rows_threshold
     - default_spillable_buffer_size
     - min_spillable_buffer_size
     - max_row_size
     - idle_session_timeout
     - compute_stats_min_sample_size
     - exec_time_limit_s
     - shuffle_distinct_exprs
     - max_mem_estimate_for_admission
     - thread_reservation_limit
     - thread_reservation_aggregate_limit
     - kudu_read_mode
     - allow_erasure_coded_files
     - timezone
     - scan_bytes_limit
     - cpu_limit_s
     - topn_bytes_limit
     - client_identifier
     - resource_trace_ratio
     - num_remote_executor_candidates
     - num_rows_produced_limit
     - planner_testcase_mode
     - default_file_format
     - parquet_timestamp_type
     - parquet_read_page_index
     - parquet_write_page_index
     - parquet_page_row_count_limit
     - disable_hdfs_num_rows_estimate
     - default_hints_insert_statement
     - spool_query_results
     - default_transactional_type
     - statement_expression_limit
     - max_statement_length_bytes
     - disable_data_cache
     - max_result_spooling_mem
     - max_spilled_result_spooling_mem
     - disable_hbase_num_rows_estimate
     - fetch_rows_timeout_ms
     - now_string
     - parquet_object_store_split_size
     - mem_limit_executors
     - broadcast_bytes_limit
     - preagg_bytes_limit
     - enable_cnf_rewrites
     - max_cnf_exprs
     - kudu_snapshot_read_timestamp_micros
     - retry_failed_queries
     - enabled_runtime_filter_types
     - async_codegen
     - enable_distinct_semi_join_optimization
     - sort_run_bytes_limit
     - max_fs_writers
     - refresh_updated_hms_partitions
     - spool_all_results_for_retries
     - runtime_filter_error_rate
     - use_local_tz_for_unix_timestamp_conversions
     - convert_legacy_hive_parquet_utc_timestamps
     - enable_outer_join_to_inner_transformation
     - targeted_kudu_scan_range_length
     - report_skew_limit
     - optimize_simple_limit
     - use_dop_for_costing
     - broadcast_to_partition_factor
     - join_rows_produced_limit
     - utf8_mode
     - analytic_rank_pushdown_threshold
     - minmax_filter_threshold
     - minmax_filtering_level
     - compute_column_minmax_stats
     - show_column_minmax_stats
     - default_ndv_scale
     - kudu_replica_selection
     - delete_stats_in_truncate
     - parquet_bloom_filtering
     - minmax_filter_sorted_columns
     - minmax_filter_fast_code_path
     - enable_kudu_transaction
     - minmax_filter_partition_columns
     - parquet_bloom_filter_write
     - orc_read_statistics
     - enable_async_ddl_execution
     - enable_async_load_data_execution
     - parquet_late_materialization_threshold
     - parquet_dictionary_runtime_filter_entry_limit
     - abort_java_udf_on_exception
     - orc_async_read
     - runtime_in_list_filter_entry_limit
     - enable_replan
     - test_replan
     - lock_max_wait_time_s
     - orc_schema_resolution
     - expand_complex_types
     - fallback_db_for_functions
     - disable_codegen_cache
     - codegen_cache_mode
     - stringify_map_keys
     - enable_trivial_query_for_admission
     - compute_processing_cost
     - processing_cost_min_threads
     - join_selectivity_correlation_factor
     - max_fragment_instances_per_node
     - max_sort_run_size
     - allow_unsafe_casts
     - num_threads_for_table_migration
     - disable_optimized_iceberg_v2_read
     - values_stmt_avoid_lossy_char_padding
     - large_agg_mem_threshold
     - agg_mem_correlation_factor
     - mem_limit_coordinators
     - iceberg_predicate_pushdown_subsetting
     - hdfs_scanner_non_reserved_bytes
     - codegen_opt_level
     - kudu_table_reserve_seconds
     - convert_kudu_utc_timestamps
     - disable_kudu_local_timestamp_bloom_filter
     - runtime_filter_cardinality_reduction_scale
     - max_num_filters_aggregated_per_host
     - query_cpu_count_divisor
     - enable_tuple_cache
     - iceberg_disable_count_star_optimization
     - runtime_filter_ids_to_skip
     - slot_count_strategy
     - clean_dbcp_ds_cache
     - use_null_slots_cache
     - write_kudu_utc_timestamps
     - disable_optimized_json_count_star
     - long_polling_time_ms
     - enable_tuple_cache_verification
     - enable_tuple_analysis_in_aggregate
     - estimate_duplicate_in_preagg

    """


    def __init__(self, abort_on_error=False, max_errors=100, disable_codegen=False, batch_size=0, num_nodes=0, max_scan_range_length=0, num_scanner_threads=0, debug_action="", mem_limit=0, compression_codec=None, hbase_caching=0, hbase_cache_blocks=False, parquet_file_size=0, explain_level=1, sync_ddl=False, request_pool=None, disable_outermost_topn=False, query_timeout_s=0, buffer_pool_limit=None, appx_count_distinct=False, disable_unsafe_spills=False, exec_single_node_rows_threshold=100, optimize_partition_key_scans=False, replica_preference=0, schedule_random_replica=False, disable_streaming_preaggregations=False, runtime_filter_mode=2, runtime_bloom_filter_size=1048576, runtime_filter_wait_time_ms=0, disable_row_runtime_filtering=False, max_num_runtime_filters=10, parquet_annotate_strings_utf8=False, parquet_fallback_schema_resolution=0, mt_dop=None, s3_skip_insert_staging=True, runtime_filter_min_size=1048576, runtime_filter_max_size=16777216, prefetch_mode=1, strict_mode=False, scratch_limit=-1, enable_expr_rewrites=True, decimal_v2=True, parquet_dictionary_filtering=True, parquet_array_resolution=0, parquet_read_statistics=True, default_join_distribution_mode=0, disable_codegen_rows_threshold=50000, default_spillable_buffer_size=2097152, min_spillable_buffer_size=65536, max_row_size=524288, idle_session_timeout=None, compute_stats_min_sample_size=1073741824, exec_time_limit_s=0, shuffle_distinct_exprs=True, max_mem_estimate_for_admission=0, thread_reservation_limit=3000, thread_reservation_aggregate_limit=0, kudu_read_mode=0, allow_erasure_coded_files=True, timezone="", scan_bytes_limit=0, cpu_limit_s=0, topn_bytes_limit=536870912, client_identifier=None, resource_trace_ratio=float(1), num_remote_executor_candidates=3, num_rows_produced_limit=0, planner_testcase_mode=False, default_file_format=0, parquet_timestamp_type=0, parquet_read_page_index=True, parquet_write_page_index=True, parquet_page_row_count_limit=None, disable_hdfs_num_rows_estimate=False, default_hints_insert_statement=None, spool_query_results=True, default_transactional_type=0, statement_expression_limit=250000, max_statement_length_bytes=16777216, disable_data_cache=False, max_result_spooling_mem=104857600, max_spilled_result_spooling_mem=1073741824, disable_hbase_num_rows_estimate=False, fetch_rows_timeout_ms=10000, now_string="", parquet_object_store_split_size=268435456, mem_limit_executors=0, broadcast_bytes_limit=34359738368, preagg_bytes_limit=-1, enable_cnf_rewrites=True, max_cnf_exprs=200, kudu_snapshot_read_timestamp_micros=0, retry_failed_queries=False, enabled_runtime_filter_types=set((
        0,
        1,
    )), async_codegen=False, enable_distinct_semi_join_optimization=True, sort_run_bytes_limit=-1, max_fs_writers=0, refresh_updated_hms_partitions=False, spool_all_results_for_retries=True, runtime_filter_error_rate=None, use_local_tz_for_unix_timestamp_conversions=False, convert_legacy_hive_parquet_utc_timestamps=False, enable_outer_join_to_inner_transformation=False, targeted_kudu_scan_range_length=-1, report_skew_limit=1.0000000000000000, optimize_simple_limit=False, use_dop_for_costing=True, broadcast_to_partition_factor=1.0000000000000000, join_rows_produced_limit=0, utf8_mode=False, analytic_rank_pushdown_threshold=1000, minmax_filter_threshold=0.0000000000000000, minmax_filtering_level=1, compute_column_minmax_stats=False, show_column_minmax_stats=False, default_ndv_scale=2, kudu_replica_selection=1, delete_stats_in_truncate=True, parquet_bloom_filtering=True, minmax_filter_sorted_columns=True, minmax_filter_fast_code_path=1, enable_kudu_transaction=False, minmax_filter_partition_columns=True, parquet_bloom_filter_write=1, orc_read_statistics=True, enable_async_ddl_execution=True, enable_async_load_data_execution=True, parquet_late_materialization_threshold=20, parquet_dictionary_runtime_filter_entry_limit=1024, abort_java_udf_on_exception=False, orc_async_read=True, runtime_in_list_filter_entry_limit=1024, enable_replan=True, test_replan=False, lock_max_wait_time_s=300, orc_schema_resolution=0, expand_complex_types=False, fallback_db_for_functions=None, disable_codegen_cache=False, codegen_cache_mode=0, stringify_map_keys=False, enable_trivial_query_for_admission=True, compute_processing_cost=False, processing_cost_min_threads=1, join_selectivity_correlation_factor=0.0000000000000000, max_fragment_instances_per_node=128, max_sort_run_size=0, allow_unsafe_casts=False, num_threads_for_table_migration=1, disable_optimized_iceberg_v2_read=False, values_stmt_avoid_lossy_char_padding=False, large_agg_mem_threshold=536870912, agg_mem_correlation_factor=0.5000000000000000, mem_limit_coordinators=0, iceberg_predicate_pushdown_subsetting=True, hdfs_scanner_non_reserved_bytes=-1, codegen_opt_level=3, kudu_table_reserve_seconds=0, convert_kudu_utc_timestamps=False, disable_kudu_local_timestamp_bloom_filter=True, runtime_filter_cardinality_reduction_scale=1.0000000000000000, max_num_filters_aggregated_per_host=-1, query_cpu_count_divisor=None, enable_tuple_cache=False, iceberg_disable_count_star_optimization=False, runtime_filter_ids_to_skip=None, slot_count_strategy=0, clean_dbcp_ds_cache=True, use_null_slots_cache=True, write_kudu_utc_timestamps=False, disable_optimized_json_count_star=False, long_polling_time_ms=0, enable_tuple_cache_verification=False, enable_tuple_analysis_in_aggregate=True, estimate_duplicate_in_preagg=True,):
        self.abort_on_error = abort_on_error
        self.max_errors = max_errors
        self.disable_codegen = disable_codegen
        self.batch_size = batch_size
        self.num_nodes = num_nodes
        self.max_scan_range_length = max_scan_range_length
        self.num_scanner_threads = num_scanner_threads
        self.debug_action = debug_action
        self.mem_limit = mem_limit
        self.compression_codec = compression_codec
        self.hbase_caching = hbase_caching
        self.hbase_cache_blocks = hbase_cache_blocks
        self.parquet_file_size = parquet_file_size
        self.explain_level = explain_level
        self.sync_ddl = sync_ddl
        self.request_pool = request_pool
        self.disable_outermost_topn = disable_outermost_topn
        self.query_timeout_s = query_timeout_s
        self.buffer_pool_limit = buffer_pool_limit
        self.appx_count_distinct = appx_count_distinct
        self.disable_unsafe_spills = disable_unsafe_spills
        self.exec_single_node_rows_threshold = exec_single_node_rows_threshold
        self.optimize_partition_key_scans = optimize_partition_key_scans
        self.replica_preference = replica_preference
        self.schedule_random_replica = schedule_random_replica
        self.disable_streaming_preaggregations = disable_streaming_preaggregations
        self.runtime_filter_mode = runtime_filter_mode
        self.runtime_bloom_filter_size = runtime_bloom_filter_size
        self.runtime_filter_wait_time_ms = runtime_filter_wait_time_ms
        self.disable_row_runtime_filtering = disable_row_runtime_filtering
        self.max_num_runtime_filters = max_num_runtime_filters
        self.parquet_annotate_strings_utf8 = parquet_annotate_strings_utf8
        self.parquet_fallback_schema_resolution = parquet_fallback_schema_resolution
        self.mt_dop = mt_dop
        self.s3_skip_insert_staging = s3_skip_insert_staging
        self.runtime_filter_min_size = runtime_filter_min_size
        self.runtime_filter_max_size = runtime_filter_max_size
        self.prefetch_mode = prefetch_mode
        self.strict_mode = strict_mode
        self.scratch_limit = scratch_limit
        self.enable_expr_rewrites = enable_expr_rewrites
        self.decimal_v2 = decimal_v2
        self.parquet_dictionary_filtering = parquet_dictionary_filtering
        self.parquet_array_resolution = parquet_array_resolution
        self.parquet_read_statistics = parquet_read_statistics
        self.default_join_distribution_mode = default_join_distribution_mode
        self.disable_codegen_rows_threshold = disable_codegen_rows_threshold
        self.default_spillable_buffer_size = default_spillable_buffer_size
        self.min_spillable_buffer_size = min_spillable_buffer_size
        self.max_row_size = max_row_size
        self.idle_session_timeout = idle_session_timeout
        self.compute_stats_min_sample_size = compute_stats_min_sample_size
        self.exec_time_limit_s = exec_time_limit_s
        self.shuffle_distinct_exprs = shuffle_distinct_exprs
        self.max_mem_estimate_for_admission = max_mem_estimate_for_admission
        self.thread_reservation_limit = thread_reservation_limit
        self.thread_reservation_aggregate_limit = thread_reservation_aggregate_limit
        self.kudu_read_mode = kudu_read_mode
        self.allow_erasure_coded_files = allow_erasure_coded_files
        self.timezone = timezone
        self.scan_bytes_limit = scan_bytes_limit
        self.cpu_limit_s = cpu_limit_s
        self.topn_bytes_limit = topn_bytes_limit
        self.client_identifier = client_identifier
        self.resource_trace_ratio = resource_trace_ratio
        self.num_remote_executor_candidates = num_remote_executor_candidates
        self.num_rows_produced_limit = num_rows_produced_limit
        self.planner_testcase_mode = planner_testcase_mode
        self.default_file_format = default_file_format
        self.parquet_timestamp_type = parquet_timestamp_type
        self.parquet_read_page_index = parquet_read_page_index
        self.parquet_write_page_index = parquet_write_page_index
        self.parquet_page_row_count_limit = parquet_page_row_count_limit
        self.disable_hdfs_num_rows_estimate = disable_hdfs_num_rows_estimate
        self.default_hints_insert_statement = default_hints_insert_statement
        self.spool_query_results = spool_query_results
        self.default_transactional_type = default_transactional_type
        self.statement_expression_limit = statement_expression_limit
        self.max_statement_length_bytes = max_statement_length_bytes
        self.disable_data_cache = disable_data_cache
        self.max_result_spooling_mem = max_result_spooling_mem
        self.max_spilled_result_spooling_mem = max_spilled_result_spooling_mem
        self.disable_hbase_num_rows_estimate = disable_hbase_num_rows_estimate
        self.fetch_rows_timeout_ms = fetch_rows_timeout_ms
        self.now_string = now_string
        self.parquet_object_store_split_size = parquet_object_store_split_size
        self.mem_limit_executors = mem_limit_executors
        self.broadcast_bytes_limit = broadcast_bytes_limit
        self.preagg_bytes_limit = preagg_bytes_limit
        self.enable_cnf_rewrites = enable_cnf_rewrites
        self.max_cnf_exprs = max_cnf_exprs
        self.kudu_snapshot_read_timestamp_micros = kudu_snapshot_read_timestamp_micros
        self.retry_failed_queries = retry_failed_queries
        if enabled_runtime_filter_types is self.thrift_spec[104][4]:
            enabled_runtime_filter_types = set((
                0,
                1,
            ))
        self.enabled_runtime_filter_types = enabled_runtime_filter_types
        self.async_codegen = async_codegen
        self.enable_distinct_semi_join_optimization = enable_distinct_semi_join_optimization
        self.sort_run_bytes_limit = sort_run_bytes_limit
        self.max_fs_writers = max_fs_writers
        self.refresh_updated_hms_partitions = refresh_updated_hms_partitions
        self.spool_all_results_for_retries = spool_all_results_for_retries
        self.runtime_filter_error_rate = runtime_filter_error_rate
        self.use_local_tz_for_unix_timestamp_conversions = use_local_tz_for_unix_timestamp_conversions
        self.convert_legacy_hive_parquet_utc_timestamps = convert_legacy_hive_parquet_utc_timestamps
        self.enable_outer_join_to_inner_transformation = enable_outer_join_to_inner_transformation
        self.targeted_kudu_scan_range_length = targeted_kudu_scan_range_length
        self.report_skew_limit = report_skew_limit
        self.optimize_simple_limit = optimize_simple_limit
        self.use_dop_for_costing = use_dop_for_costing
        self.broadcast_to_partition_factor = broadcast_to_partition_factor
        self.join_rows_produced_limit = join_rows_produced_limit
        self.utf8_mode = utf8_mode
        self.analytic_rank_pushdown_threshold = analytic_rank_pushdown_threshold
        self.minmax_filter_threshold = minmax_filter_threshold
        self.minmax_filtering_level = minmax_filtering_level
        self.compute_column_minmax_stats = compute_column_minmax_stats
        self.show_column_minmax_stats = show_column_minmax_stats
        self.default_ndv_scale = default_ndv_scale
        self.kudu_replica_selection = kudu_replica_selection
        self.delete_stats_in_truncate = delete_stats_in_truncate
        self.parquet_bloom_filtering = parquet_bloom_filtering
        self.minmax_filter_sorted_columns = minmax_filter_sorted_columns
        self.minmax_filter_fast_code_path = minmax_filter_fast_code_path
        self.enable_kudu_transaction = enable_kudu_transaction
        self.minmax_filter_partition_columns = minmax_filter_partition_columns
        self.parquet_bloom_filter_write = parquet_bloom_filter_write
        self.orc_read_statistics = orc_read_statistics
        self.enable_async_ddl_execution = enable_async_ddl_execution
        self.enable_async_load_data_execution = enable_async_load_data_execution
        self.parquet_late_materialization_threshold = parquet_late_materialization_threshold
        self.parquet_dictionary_runtime_filter_entry_limit = parquet_dictionary_runtime_filter_entry_limit
        self.abort_java_udf_on_exception = abort_java_udf_on_exception
        self.orc_async_read = orc_async_read
        self.runtime_in_list_filter_entry_limit = runtime_in_list_filter_entry_limit
        self.enable_replan = enable_replan
        self.test_replan = test_replan
        self.lock_max_wait_time_s = lock_max_wait_time_s
        self.orc_schema_resolution = orc_schema_resolution
        self.expand_complex_types = expand_complex_types
        self.fallback_db_for_functions = fallback_db_for_functions
        self.disable_codegen_cache = disable_codegen_cache
        self.codegen_cache_mode = codegen_cache_mode
        self.stringify_map_keys = stringify_map_keys
        self.enable_trivial_query_for_admission = enable_trivial_query_for_admission
        self.compute_processing_cost = compute_processing_cost
        self.processing_cost_min_threads = processing_cost_min_threads
        self.join_selectivity_correlation_factor = join_selectivity_correlation_factor
        self.max_fragment_instances_per_node = max_fragment_instances_per_node
        self.max_sort_run_size = max_sort_run_size
        self.allow_unsafe_casts = allow_unsafe_casts
        self.num_threads_for_table_migration = num_threads_for_table_migration
        self.disable_optimized_iceberg_v2_read = disable_optimized_iceberg_v2_read
        self.values_stmt_avoid_lossy_char_padding = values_stmt_avoid_lossy_char_padding
        self.large_agg_mem_threshold = large_agg_mem_threshold
        self.agg_mem_correlation_factor = agg_mem_correlation_factor
        self.mem_limit_coordinators = mem_limit_coordinators
        self.iceberg_predicate_pushdown_subsetting = iceberg_predicate_pushdown_subsetting
        self.hdfs_scanner_non_reserved_bytes = hdfs_scanner_non_reserved_bytes
        self.codegen_opt_level = codegen_opt_level
        self.kudu_table_reserve_seconds = kudu_table_reserve_seconds
        self.convert_kudu_utc_timestamps = convert_kudu_utc_timestamps
        self.disable_kudu_local_timestamp_bloom_filter = disable_kudu_local_timestamp_bloom_filter
        self.runtime_filter_cardinality_reduction_scale = runtime_filter_cardinality_reduction_scale
        self.max_num_filters_aggregated_per_host = max_num_filters_aggregated_per_host
        self.query_cpu_count_divisor = query_cpu_count_divisor
        self.enable_tuple_cache = enable_tuple_cache
        self.iceberg_disable_count_star_optimization = iceberg_disable_count_star_optimization
        self.runtime_filter_ids_to_skip = runtime_filter_ids_to_skip
        self.slot_count_strategy = slot_count_strategy
        self.clean_dbcp_ds_cache = clean_dbcp_ds_cache
        self.use_null_slots_cache = use_null_slots_cache
        self.write_kudu_utc_timestamps = write_kudu_utc_timestamps
        self.disable_optimized_json_count_star = disable_optimized_json_count_star
        self.long_polling_time_ms = long_polling_time_ms
        self.enable_tuple_cache_verification = enable_tuple_cache_verification
        self.enable_tuple_analysis_in_aggregate = enable_tuple_analysis_in_aggregate
        self.estimate_duplicate_in_preagg = estimate_duplicate_in_preagg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.abort_on_error = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max_errors = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.disable_codegen = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.batch_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.num_nodes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.max_scan_range_length = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.num_scanner_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.debug_action = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.mem_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.compression_codec = CatalogObjects.ttypes.TCompressionCodec()
                    self.compression_codec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.hbase_caching = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.hbase_cache_blocks = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.parquet_file_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.explain_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.sync_ddl = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.request_pool = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.disable_outermost_topn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.query_timeout_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I64:
                    self.buffer_pool_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.appx_count_distinct = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.disable_unsafe_spills = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.exec_single_node_rows_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.optimize_partition_key_scans = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.replica_preference = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.schedule_random_replica = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.BOOL:
                    self.disable_streaming_preaggregations = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.I32:
                    self.runtime_filter_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I32:
                    self.runtime_bloom_filter_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I32:
                    self.runtime_filter_wait_time_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.BOOL:
                    self.disable_row_runtime_filtering = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I32:
                    self.max_num_runtime_filters = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.BOOL:
                    self.parquet_annotate_strings_utf8 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I32:
                    self.parquet_fallback_schema_resolution = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.mt_dop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.BOOL:
                    self.s3_skip_insert_staging = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.I32:
                    self.runtime_filter_min_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.I32:
                    self.runtime_filter_max_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.I32:
                    self.prefetch_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.BOOL:
                    self.strict_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.I64:
                    self.scratch_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.BOOL:
                    self.enable_expr_rewrites = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.BOOL:
                    self.decimal_v2 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.BOOL:
                    self.parquet_dictionary_filtering = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.I32:
                    self.parquet_array_resolution = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.BOOL:
                    self.parquet_read_statistics = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.I32:
                    self.default_join_distribution_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.I32:
                    self.disable_codegen_rows_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.I64:
                    self.default_spillable_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.I64:
                    self.min_spillable_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.I64:
                    self.max_row_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.I32:
                    self.idle_session_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.I64:
                    self.compute_stats_min_sample_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.I32:
                    self.exec_time_limit_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.BOOL:
                    self.shuffle_distinct_exprs = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.I64:
                    self.max_mem_estimate_for_admission = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.I32:
                    self.thread_reservation_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I32:
                    self.thread_reservation_aggregate_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.I32:
                    self.kudu_read_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.BOOL:
                    self.allow_erasure_coded_files = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.STRING:
                    self.timezone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.I64:
                    self.scan_bytes_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.I64:
                    self.cpu_limit_s = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.I64:
                    self.topn_bytes_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.STRING:
                    self.client_identifier = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.DOUBLE:
                    self.resource_trace_ratio = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.I32:
                    self.num_remote_executor_candidates = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.I64:
                    self.num_rows_produced_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.BOOL:
                    self.planner_testcase_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.I32:
                    self.default_file_format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.I32:
                    self.parquet_timestamp_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.BOOL:
                    self.parquet_read_page_index = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.BOOL:
                    self.parquet_write_page_index = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.I32:
                    self.parquet_page_row_count_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 84:
                if ftype == TType.BOOL:
                    self.disable_hdfs_num_rows_estimate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.STRING:
                    self.default_hints_insert_statement = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.BOOL:
                    self.spool_query_results = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.I32:
                    self.default_transactional_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.I32:
                    self.statement_expression_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.I32:
                    self.max_statement_length_bytes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.BOOL:
                    self.disable_data_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.I64:
                    self.max_result_spooling_mem = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.I64:
                    self.max_spilled_result_spooling_mem = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.BOOL:
                    self.disable_hbase_num_rows_estimate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.I64:
                    self.fetch_rows_timeout_ms = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.STRING:
                    self.now_string = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.I64:
                    self.parquet_object_store_split_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 97:
                if ftype == TType.I64:
                    self.mem_limit_executors = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.I64:
                    self.broadcast_bytes_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 99:
                if ftype == TType.I64:
                    self.preagg_bytes_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.BOOL:
                    self.enable_cnf_rewrites = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.I32:
                    self.max_cnf_exprs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.I64:
                    self.kudu_snapshot_read_timestamp_micros = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.BOOL:
                    self.retry_failed_queries = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.SET:
                    self.enabled_runtime_filter_types = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.enabled_runtime_filter_types.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.BOOL:
                    self.async_codegen = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.BOOL:
                    self.enable_distinct_semi_join_optimization = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 107:
                if ftype == TType.I64:
                    self.sort_run_bytes_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 108:
                if ftype == TType.I32:
                    self.max_fs_writers = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 109:
                if ftype == TType.BOOL:
                    self.refresh_updated_hms_partitions = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.BOOL:
                    self.spool_all_results_for_retries = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.DOUBLE:
                    self.runtime_filter_error_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 112:
                if ftype == TType.BOOL:
                    self.use_local_tz_for_unix_timestamp_conversions = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 113:
                if ftype == TType.BOOL:
                    self.convert_legacy_hive_parquet_utc_timestamps = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 114:
                if ftype == TType.BOOL:
                    self.enable_outer_join_to_inner_transformation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 115:
                if ftype == TType.I64:
                    self.targeted_kudu_scan_range_length = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 116:
                if ftype == TType.DOUBLE:
                    self.report_skew_limit = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 117:
                if ftype == TType.BOOL:
                    self.optimize_simple_limit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 118:
                if ftype == TType.BOOL:
                    self.use_dop_for_costing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 119:
                if ftype == TType.DOUBLE:
                    self.broadcast_to_partition_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.I64:
                    self.join_rows_produced_limit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 121:
                if ftype == TType.BOOL:
                    self.utf8_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 122:
                if ftype == TType.I64:
                    self.analytic_rank_pushdown_threshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 123:
                if ftype == TType.DOUBLE:
                    self.minmax_filter_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 124:
                if ftype == TType.I32:
                    self.minmax_filtering_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 125:
                if ftype == TType.BOOL:
                    self.compute_column_minmax_stats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 126:
                if ftype == TType.BOOL:
                    self.show_column_minmax_stats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 127:
                if ftype == TType.I32:
                    self.default_ndv_scale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 128:
                if ftype == TType.I32:
                    self.kudu_replica_selection = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 129:
                if ftype == TType.BOOL:
                    self.delete_stats_in_truncate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.BOOL:
                    self.parquet_bloom_filtering = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 131:
                if ftype == TType.BOOL:
                    self.minmax_filter_sorted_columns = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 132:
                if ftype == TType.I32:
                    self.minmax_filter_fast_code_path = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 133:
                if ftype == TType.BOOL:
                    self.enable_kudu_transaction = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 134:
                if ftype == TType.BOOL:
                    self.minmax_filter_partition_columns = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 135:
                if ftype == TType.I32:
                    self.parquet_bloom_filter_write = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 136:
                if ftype == TType.BOOL:
                    self.orc_read_statistics = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 137:
                if ftype == TType.BOOL:
                    self.enable_async_ddl_execution = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 138:
                if ftype == TType.BOOL:
                    self.enable_async_load_data_execution = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 139:
                if ftype == TType.I32:
                    self.parquet_late_materialization_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.I32:
                    self.parquet_dictionary_runtime_filter_entry_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 141:
                if ftype == TType.BOOL:
                    self.abort_java_udf_on_exception = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 142:
                if ftype == TType.BOOL:
                    self.orc_async_read = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 143:
                if ftype == TType.I32:
                    self.runtime_in_list_filter_entry_limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 144:
                if ftype == TType.BOOL:
                    self.enable_replan = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 145:
                if ftype == TType.BOOL:
                    self.test_replan = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 146:
                if ftype == TType.I32:
                    self.lock_max_wait_time_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 147:
                if ftype == TType.I32:
                    self.orc_schema_resolution = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 148:
                if ftype == TType.BOOL:
                    self.expand_complex_types = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 149:
                if ftype == TType.STRING:
                    self.fallback_db_for_functions = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 150:
                if ftype == TType.BOOL:
                    self.disable_codegen_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 151:
                if ftype == TType.I32:
                    self.codegen_cache_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 152:
                if ftype == TType.BOOL:
                    self.stringify_map_keys = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 153:
                if ftype == TType.BOOL:
                    self.enable_trivial_query_for_admission = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 154:
                if ftype == TType.BOOL:
                    self.compute_processing_cost = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 155:
                if ftype == TType.I32:
                    self.processing_cost_min_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 156:
                if ftype == TType.DOUBLE:
                    self.join_selectivity_correlation_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 157:
                if ftype == TType.I32:
                    self.max_fragment_instances_per_node = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 158:
                if ftype == TType.I32:
                    self.max_sort_run_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 159:
                if ftype == TType.BOOL:
                    self.allow_unsafe_casts = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 160:
                if ftype == TType.I32:
                    self.num_threads_for_table_migration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 161:
                if ftype == TType.BOOL:
                    self.disable_optimized_iceberg_v2_read = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 162:
                if ftype == TType.BOOL:
                    self.values_stmt_avoid_lossy_char_padding = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 163:
                if ftype == TType.I64:
                    self.large_agg_mem_threshold = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 164:
                if ftype == TType.DOUBLE:
                    self.agg_mem_correlation_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 165:
                if ftype == TType.I64:
                    self.mem_limit_coordinators = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 166:
                if ftype == TType.BOOL:
                    self.iceberg_predicate_pushdown_subsetting = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 167:
                if ftype == TType.I64:
                    self.hdfs_scanner_non_reserved_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 168:
                if ftype == TType.I32:
                    self.codegen_opt_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 169:
                if ftype == TType.I32:
                    self.kudu_table_reserve_seconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 170:
                if ftype == TType.BOOL:
                    self.convert_kudu_utc_timestamps = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 171:
                if ftype == TType.BOOL:
                    self.disable_kudu_local_timestamp_bloom_filter = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 172:
                if ftype == TType.DOUBLE:
                    self.runtime_filter_cardinality_reduction_scale = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 173:
                if ftype == TType.I32:
                    self.max_num_filters_aggregated_per_host = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 174:
                if ftype == TType.DOUBLE:
                    self.query_cpu_count_divisor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 175:
                if ftype == TType.BOOL:
                    self.enable_tuple_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 176:
                if ftype == TType.BOOL:
                    self.iceberg_disable_count_star_optimization = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 177:
                if ftype == TType.SET:
                    self.runtime_filter_ids_to_skip = set()
                    (_etype9, _size6) = iprot.readSetBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.runtime_filter_ids_to_skip.add(_elem11)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 178:
                if ftype == TType.I32:
                    self.slot_count_strategy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 179:
                if ftype == TType.BOOL:
                    self.clean_dbcp_ds_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 180:
                if ftype == TType.BOOL:
                    self.use_null_slots_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 181:
                if ftype == TType.BOOL:
                    self.write_kudu_utc_timestamps = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 182:
                if ftype == TType.BOOL:
                    self.disable_optimized_json_count_star = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 183:
                if ftype == TType.I32:
                    self.long_polling_time_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 184:
                if ftype == TType.BOOL:
                    self.enable_tuple_cache_verification = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 185:
                if ftype == TType.BOOL:
                    self.enable_tuple_analysis_in_aggregate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 186:
                if ftype == TType.BOOL:
                    self.estimate_duplicate_in_preagg = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TQueryOptions')
        if self.abort_on_error is not None:
            oprot.writeFieldBegin('abort_on_error', TType.BOOL, 1)
            oprot.writeBool(self.abort_on_error)
            oprot.writeFieldEnd()
        if self.max_errors is not None:
            oprot.writeFieldBegin('max_errors', TType.I32, 2)
            oprot.writeI32(self.max_errors)
            oprot.writeFieldEnd()
        if self.disable_codegen is not None:
            oprot.writeFieldBegin('disable_codegen', TType.BOOL, 3)
            oprot.writeBool(self.disable_codegen)
            oprot.writeFieldEnd()
        if self.batch_size is not None:
            oprot.writeFieldBegin('batch_size', TType.I32, 4)
            oprot.writeI32(self.batch_size)
            oprot.writeFieldEnd()
        if self.num_nodes is not None:
            oprot.writeFieldBegin('num_nodes', TType.I32, 5)
            oprot.writeI32(self.num_nodes)
            oprot.writeFieldEnd()
        if self.max_scan_range_length is not None:
            oprot.writeFieldBegin('max_scan_range_length', TType.I64, 6)
            oprot.writeI64(self.max_scan_range_length)
            oprot.writeFieldEnd()
        if self.num_scanner_threads is not None:
            oprot.writeFieldBegin('num_scanner_threads', TType.I32, 7)
            oprot.writeI32(self.num_scanner_threads)
            oprot.writeFieldEnd()
        if self.debug_action is not None:
            oprot.writeFieldBegin('debug_action', TType.STRING, 11)
            oprot.writeString(self.debug_action)
            oprot.writeFieldEnd()
        if self.mem_limit is not None:
            oprot.writeFieldBegin('mem_limit', TType.I64, 12)
            oprot.writeI64(self.mem_limit)
            oprot.writeFieldEnd()
        if self.compression_codec is not None:
            oprot.writeFieldBegin('compression_codec', TType.STRUCT, 14)
            self.compression_codec.write(oprot)
            oprot.writeFieldEnd()
        if self.hbase_caching is not None:
            oprot.writeFieldBegin('hbase_caching', TType.I32, 15)
            oprot.writeI32(self.hbase_caching)
            oprot.writeFieldEnd()
        if self.hbase_cache_blocks is not None:
            oprot.writeFieldBegin('hbase_cache_blocks', TType.BOOL, 16)
            oprot.writeBool(self.hbase_cache_blocks)
            oprot.writeFieldEnd()
        if self.parquet_file_size is not None:
            oprot.writeFieldBegin('parquet_file_size', TType.I64, 17)
            oprot.writeI64(self.parquet_file_size)
            oprot.writeFieldEnd()
        if self.explain_level is not None:
            oprot.writeFieldBegin('explain_level', TType.I32, 18)
            oprot.writeI32(self.explain_level)
            oprot.writeFieldEnd()
        if self.sync_ddl is not None:
            oprot.writeFieldBegin('sync_ddl', TType.BOOL, 19)
            oprot.writeBool(self.sync_ddl)
            oprot.writeFieldEnd()
        if self.request_pool is not None:
            oprot.writeFieldBegin('request_pool', TType.STRING, 20)
            oprot.writeString(self.request_pool)
            oprot.writeFieldEnd()
        if self.disable_outermost_topn is not None:
            oprot.writeFieldBegin('disable_outermost_topn', TType.BOOL, 24)
            oprot.writeBool(self.disable_outermost_topn)
            oprot.writeFieldEnd()
        if self.query_timeout_s is not None:
            oprot.writeFieldBegin('query_timeout_s', TType.I32, 26)
            oprot.writeI32(self.query_timeout_s)
            oprot.writeFieldEnd()
        if self.buffer_pool_limit is not None:
            oprot.writeFieldBegin('buffer_pool_limit', TType.I64, 27)
            oprot.writeI64(self.buffer_pool_limit)
            oprot.writeFieldEnd()
        if self.appx_count_distinct is not None:
            oprot.writeFieldBegin('appx_count_distinct', TType.BOOL, 28)
            oprot.writeBool(self.appx_count_distinct)
            oprot.writeFieldEnd()
        if self.disable_unsafe_spills is not None:
            oprot.writeFieldBegin('disable_unsafe_spills', TType.BOOL, 29)
            oprot.writeBool(self.disable_unsafe_spills)
            oprot.writeFieldEnd()
        if self.exec_single_node_rows_threshold is not None:
            oprot.writeFieldBegin('exec_single_node_rows_threshold', TType.I32, 31)
            oprot.writeI32(self.exec_single_node_rows_threshold)
            oprot.writeFieldEnd()
        if self.optimize_partition_key_scans is not None:
            oprot.writeFieldBegin('optimize_partition_key_scans', TType.BOOL, 32)
            oprot.writeBool(self.optimize_partition_key_scans)
            oprot.writeFieldEnd()
        if self.replica_preference is not None:
            oprot.writeFieldBegin('replica_preference', TType.I32, 33)
            oprot.writeI32(self.replica_preference)
            oprot.writeFieldEnd()
        if self.schedule_random_replica is not None:
            oprot.writeFieldBegin('schedule_random_replica', TType.BOOL, 34)
            oprot.writeBool(self.schedule_random_replica)
            oprot.writeFieldEnd()
        if self.disable_streaming_preaggregations is not None:
            oprot.writeFieldBegin('disable_streaming_preaggregations', TType.BOOL, 36)
            oprot.writeBool(self.disable_streaming_preaggregations)
            oprot.writeFieldEnd()
        if self.runtime_filter_mode is not None:
            oprot.writeFieldBegin('runtime_filter_mode', TType.I32, 37)
            oprot.writeI32(self.runtime_filter_mode)
            oprot.writeFieldEnd()
        if self.runtime_bloom_filter_size is not None:
            oprot.writeFieldBegin('runtime_bloom_filter_size', TType.I32, 38)
            oprot.writeI32(self.runtime_bloom_filter_size)
            oprot.writeFieldEnd()
        if self.runtime_filter_wait_time_ms is not None:
            oprot.writeFieldBegin('runtime_filter_wait_time_ms', TType.I32, 39)
            oprot.writeI32(self.runtime_filter_wait_time_ms)
            oprot.writeFieldEnd()
        if self.disable_row_runtime_filtering is not None:
            oprot.writeFieldBegin('disable_row_runtime_filtering', TType.BOOL, 40)
            oprot.writeBool(self.disable_row_runtime_filtering)
            oprot.writeFieldEnd()
        if self.max_num_runtime_filters is not None:
            oprot.writeFieldBegin('max_num_runtime_filters', TType.I32, 41)
            oprot.writeI32(self.max_num_runtime_filters)
            oprot.writeFieldEnd()
        if self.parquet_annotate_strings_utf8 is not None:
            oprot.writeFieldBegin('parquet_annotate_strings_utf8', TType.BOOL, 42)
            oprot.writeBool(self.parquet_annotate_strings_utf8)
            oprot.writeFieldEnd()
        if self.parquet_fallback_schema_resolution is not None:
            oprot.writeFieldBegin('parquet_fallback_schema_resolution', TType.I32, 43)
            oprot.writeI32(self.parquet_fallback_schema_resolution)
            oprot.writeFieldEnd()
        if self.mt_dop is not None:
            oprot.writeFieldBegin('mt_dop', TType.I32, 44)
            oprot.writeI32(self.mt_dop)
            oprot.writeFieldEnd()
        if self.s3_skip_insert_staging is not None:
            oprot.writeFieldBegin('s3_skip_insert_staging', TType.BOOL, 45)
            oprot.writeBool(self.s3_skip_insert_staging)
            oprot.writeFieldEnd()
        if self.runtime_filter_min_size is not None:
            oprot.writeFieldBegin('runtime_filter_min_size', TType.I32, 46)
            oprot.writeI32(self.runtime_filter_min_size)
            oprot.writeFieldEnd()
        if self.runtime_filter_max_size is not None:
            oprot.writeFieldBegin('runtime_filter_max_size', TType.I32, 47)
            oprot.writeI32(self.runtime_filter_max_size)
            oprot.writeFieldEnd()
        if self.prefetch_mode is not None:
            oprot.writeFieldBegin('prefetch_mode', TType.I32, 48)
            oprot.writeI32(self.prefetch_mode)
            oprot.writeFieldEnd()
        if self.strict_mode is not None:
            oprot.writeFieldBegin('strict_mode', TType.BOOL, 49)
            oprot.writeBool(self.strict_mode)
            oprot.writeFieldEnd()
        if self.scratch_limit is not None:
            oprot.writeFieldBegin('scratch_limit', TType.I64, 50)
            oprot.writeI64(self.scratch_limit)
            oprot.writeFieldEnd()
        if self.enable_expr_rewrites is not None:
            oprot.writeFieldBegin('enable_expr_rewrites', TType.BOOL, 51)
            oprot.writeBool(self.enable_expr_rewrites)
            oprot.writeFieldEnd()
        if self.decimal_v2 is not None:
            oprot.writeFieldBegin('decimal_v2', TType.BOOL, 52)
            oprot.writeBool(self.decimal_v2)
            oprot.writeFieldEnd()
        if self.parquet_dictionary_filtering is not None:
            oprot.writeFieldBegin('parquet_dictionary_filtering', TType.BOOL, 53)
            oprot.writeBool(self.parquet_dictionary_filtering)
            oprot.writeFieldEnd()
        if self.parquet_array_resolution is not None:
            oprot.writeFieldBegin('parquet_array_resolution', TType.I32, 54)
            oprot.writeI32(self.parquet_array_resolution)
            oprot.writeFieldEnd()
        if self.parquet_read_statistics is not None:
            oprot.writeFieldBegin('parquet_read_statistics', TType.BOOL, 55)
            oprot.writeBool(self.parquet_read_statistics)
            oprot.writeFieldEnd()
        if self.default_join_distribution_mode is not None:
            oprot.writeFieldBegin('default_join_distribution_mode', TType.I32, 56)
            oprot.writeI32(self.default_join_distribution_mode)
            oprot.writeFieldEnd()
        if self.disable_codegen_rows_threshold is not None:
            oprot.writeFieldBegin('disable_codegen_rows_threshold', TType.I32, 57)
            oprot.writeI32(self.disable_codegen_rows_threshold)
            oprot.writeFieldEnd()
        if self.default_spillable_buffer_size is not None:
            oprot.writeFieldBegin('default_spillable_buffer_size', TType.I64, 58)
            oprot.writeI64(self.default_spillable_buffer_size)
            oprot.writeFieldEnd()
        if self.min_spillable_buffer_size is not None:
            oprot.writeFieldBegin('min_spillable_buffer_size', TType.I64, 59)
            oprot.writeI64(self.min_spillable_buffer_size)
            oprot.writeFieldEnd()
        if self.max_row_size is not None:
            oprot.writeFieldBegin('max_row_size', TType.I64, 60)
            oprot.writeI64(self.max_row_size)
            oprot.writeFieldEnd()
        if self.idle_session_timeout is not None:
            oprot.writeFieldBegin('idle_session_timeout', TType.I32, 61)
            oprot.writeI32(self.idle_session_timeout)
            oprot.writeFieldEnd()
        if self.compute_stats_min_sample_size is not None:
            oprot.writeFieldBegin('compute_stats_min_sample_size', TType.I64, 62)
            oprot.writeI64(self.compute_stats_min_sample_size)
            oprot.writeFieldEnd()
        if self.exec_time_limit_s is not None:
            oprot.writeFieldBegin('exec_time_limit_s', TType.I32, 63)
            oprot.writeI32(self.exec_time_limit_s)
            oprot.writeFieldEnd()
        if self.shuffle_distinct_exprs is not None:
            oprot.writeFieldBegin('shuffle_distinct_exprs', TType.BOOL, 64)
            oprot.writeBool(self.shuffle_distinct_exprs)
            oprot.writeFieldEnd()
        if self.max_mem_estimate_for_admission is not None:
            oprot.writeFieldBegin('max_mem_estimate_for_admission', TType.I64, 65)
            oprot.writeI64(self.max_mem_estimate_for_admission)
            oprot.writeFieldEnd()
        if self.thread_reservation_limit is not None:
            oprot.writeFieldBegin('thread_reservation_limit', TType.I32, 66)
            oprot.writeI32(self.thread_reservation_limit)
            oprot.writeFieldEnd()
        if self.thread_reservation_aggregate_limit is not None:
            oprot.writeFieldBegin('thread_reservation_aggregate_limit', TType.I32, 67)
            oprot.writeI32(self.thread_reservation_aggregate_limit)
            oprot.writeFieldEnd()
        if self.kudu_read_mode is not None:
            oprot.writeFieldBegin('kudu_read_mode', TType.I32, 68)
            oprot.writeI32(self.kudu_read_mode)
            oprot.writeFieldEnd()
        if self.allow_erasure_coded_files is not None:
            oprot.writeFieldBegin('allow_erasure_coded_files', TType.BOOL, 69)
            oprot.writeBool(self.allow_erasure_coded_files)
            oprot.writeFieldEnd()
        if self.timezone is not None:
            oprot.writeFieldBegin('timezone', TType.STRING, 70)
            oprot.writeString(self.timezone)
            oprot.writeFieldEnd()
        if self.scan_bytes_limit is not None:
            oprot.writeFieldBegin('scan_bytes_limit', TType.I64, 71)
            oprot.writeI64(self.scan_bytes_limit)
            oprot.writeFieldEnd()
        if self.cpu_limit_s is not None:
            oprot.writeFieldBegin('cpu_limit_s', TType.I64, 72)
            oprot.writeI64(self.cpu_limit_s)
            oprot.writeFieldEnd()
        if self.topn_bytes_limit is not None:
            oprot.writeFieldBegin('topn_bytes_limit', TType.I64, 73)
            oprot.writeI64(self.topn_bytes_limit)
            oprot.writeFieldEnd()
        if self.client_identifier is not None:
            oprot.writeFieldBegin('client_identifier', TType.STRING, 74)
            oprot.writeString(self.client_identifier)
            oprot.writeFieldEnd()
        if self.resource_trace_ratio is not None:
            oprot.writeFieldBegin('resource_trace_ratio', TType.DOUBLE, 75)
            oprot.writeDouble(self.resource_trace_ratio)
            oprot.writeFieldEnd()
        if self.num_remote_executor_candidates is not None:
            oprot.writeFieldBegin('num_remote_executor_candidates', TType.I32, 76)
            oprot.writeI32(self.num_remote_executor_candidates)
            oprot.writeFieldEnd()
        if self.num_rows_produced_limit is not None:
            oprot.writeFieldBegin('num_rows_produced_limit', TType.I64, 77)
            oprot.writeI64(self.num_rows_produced_limit)
            oprot.writeFieldEnd()
        if self.planner_testcase_mode is not None:
            oprot.writeFieldBegin('planner_testcase_mode', TType.BOOL, 78)
            oprot.writeBool(self.planner_testcase_mode)
            oprot.writeFieldEnd()
        if self.default_file_format is not None:
            oprot.writeFieldBegin('default_file_format', TType.I32, 79)
            oprot.writeI32(self.default_file_format)
            oprot.writeFieldEnd()
        if self.parquet_timestamp_type is not None:
            oprot.writeFieldBegin('parquet_timestamp_type', TType.I32, 80)
            oprot.writeI32(self.parquet_timestamp_type)
            oprot.writeFieldEnd()
        if self.parquet_read_page_index is not None:
            oprot.writeFieldBegin('parquet_read_page_index', TType.BOOL, 81)
            oprot.writeBool(self.parquet_read_page_index)
            oprot.writeFieldEnd()
        if self.parquet_write_page_index is not None:
            oprot.writeFieldBegin('parquet_write_page_index', TType.BOOL, 82)
            oprot.writeBool(self.parquet_write_page_index)
            oprot.writeFieldEnd()
        if self.parquet_page_row_count_limit is not None:
            oprot.writeFieldBegin('parquet_page_row_count_limit', TType.I32, 83)
            oprot.writeI32(self.parquet_page_row_count_limit)
            oprot.writeFieldEnd()
        if self.disable_hdfs_num_rows_estimate is not None:
            oprot.writeFieldBegin('disable_hdfs_num_rows_estimate', TType.BOOL, 84)
            oprot.writeBool(self.disable_hdfs_num_rows_estimate)
            oprot.writeFieldEnd()
        if self.default_hints_insert_statement is not None:
            oprot.writeFieldBegin('default_hints_insert_statement', TType.STRING, 85)
            oprot.writeString(self.default_hints_insert_statement)
            oprot.writeFieldEnd()
        if self.spool_query_results is not None:
            oprot.writeFieldBegin('spool_query_results', TType.BOOL, 86)
            oprot.writeBool(self.spool_query_results)
            oprot.writeFieldEnd()
        if self.default_transactional_type is not None:
            oprot.writeFieldBegin('default_transactional_type', TType.I32, 87)
            oprot.writeI32(self.default_transactional_type)
            oprot.writeFieldEnd()
        if self.statement_expression_limit is not None:
            oprot.writeFieldBegin('statement_expression_limit', TType.I32, 88)
            oprot.writeI32(self.statement_expression_limit)
            oprot.writeFieldEnd()
        if self.max_statement_length_bytes is not None:
            oprot.writeFieldBegin('max_statement_length_bytes', TType.I32, 89)
            oprot.writeI32(self.max_statement_length_bytes)
            oprot.writeFieldEnd()
        if self.disable_data_cache is not None:
            oprot.writeFieldBegin('disable_data_cache', TType.BOOL, 90)
            oprot.writeBool(self.disable_data_cache)
            oprot.writeFieldEnd()
        if self.max_result_spooling_mem is not None:
            oprot.writeFieldBegin('max_result_spooling_mem', TType.I64, 91)
            oprot.writeI64(self.max_result_spooling_mem)
            oprot.writeFieldEnd()
        if self.max_spilled_result_spooling_mem is not None:
            oprot.writeFieldBegin('max_spilled_result_spooling_mem', TType.I64, 92)
            oprot.writeI64(self.max_spilled_result_spooling_mem)
            oprot.writeFieldEnd()
        if self.disable_hbase_num_rows_estimate is not None:
            oprot.writeFieldBegin('disable_hbase_num_rows_estimate', TType.BOOL, 93)
            oprot.writeBool(self.disable_hbase_num_rows_estimate)
            oprot.writeFieldEnd()
        if self.fetch_rows_timeout_ms is not None:
            oprot.writeFieldBegin('fetch_rows_timeout_ms', TType.I64, 94)
            oprot.writeI64(self.fetch_rows_timeout_ms)
            oprot.writeFieldEnd()
        if self.now_string is not None:
            oprot.writeFieldBegin('now_string', TType.STRING, 95)
            oprot.writeString(self.now_string)
            oprot.writeFieldEnd()
        if self.parquet_object_store_split_size is not None:
            oprot.writeFieldBegin('parquet_object_store_split_size', TType.I64, 96)
            oprot.writeI64(self.parquet_object_store_split_size)
            oprot.writeFieldEnd()
        if self.mem_limit_executors is not None:
            oprot.writeFieldBegin('mem_limit_executors', TType.I64, 97)
            oprot.writeI64(self.mem_limit_executors)
            oprot.writeFieldEnd()
        if self.broadcast_bytes_limit is not None:
            oprot.writeFieldBegin('broadcast_bytes_limit', TType.I64, 98)
            oprot.writeI64(self.broadcast_bytes_limit)
            oprot.writeFieldEnd()
        if self.preagg_bytes_limit is not None:
            oprot.writeFieldBegin('preagg_bytes_limit', TType.I64, 99)
            oprot.writeI64(self.preagg_bytes_limit)
            oprot.writeFieldEnd()
        if self.enable_cnf_rewrites is not None:
            oprot.writeFieldBegin('enable_cnf_rewrites', TType.BOOL, 100)
            oprot.writeBool(self.enable_cnf_rewrites)
            oprot.writeFieldEnd()
        if self.max_cnf_exprs is not None:
            oprot.writeFieldBegin('max_cnf_exprs', TType.I32, 101)
            oprot.writeI32(self.max_cnf_exprs)
            oprot.writeFieldEnd()
        if self.kudu_snapshot_read_timestamp_micros is not None:
            oprot.writeFieldBegin('kudu_snapshot_read_timestamp_micros', TType.I64, 102)
            oprot.writeI64(self.kudu_snapshot_read_timestamp_micros)
            oprot.writeFieldEnd()
        if self.retry_failed_queries is not None:
            oprot.writeFieldBegin('retry_failed_queries', TType.BOOL, 103)
            oprot.writeBool(self.retry_failed_queries)
            oprot.writeFieldEnd()
        if self.enabled_runtime_filter_types is not None:
            oprot.writeFieldBegin('enabled_runtime_filter_types', TType.SET, 104)
            oprot.writeSetBegin(TType.I32, len(self.enabled_runtime_filter_types))
            for iter12 in self.enabled_runtime_filter_types:
                oprot.writeI32(iter12)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.async_codegen is not None:
            oprot.writeFieldBegin('async_codegen', TType.BOOL, 105)
            oprot.writeBool(self.async_codegen)
            oprot.writeFieldEnd()
        if self.enable_distinct_semi_join_optimization is not None:
            oprot.writeFieldBegin('enable_distinct_semi_join_optimization', TType.BOOL, 106)
            oprot.writeBool(self.enable_distinct_semi_join_optimization)
            oprot.writeFieldEnd()
        if self.sort_run_bytes_limit is not None:
            oprot.writeFieldBegin('sort_run_bytes_limit', TType.I64, 107)
            oprot.writeI64(self.sort_run_bytes_limit)
            oprot.writeFieldEnd()
        if self.max_fs_writers is not None:
            oprot.writeFieldBegin('max_fs_writers', TType.I32, 108)
            oprot.writeI32(self.max_fs_writers)
            oprot.writeFieldEnd()
        if self.refresh_updated_hms_partitions is not None:
            oprot.writeFieldBegin('refresh_updated_hms_partitions', TType.BOOL, 109)
            oprot.writeBool(self.refresh_updated_hms_partitions)
            oprot.writeFieldEnd()
        if self.spool_all_results_for_retries is not None:
            oprot.writeFieldBegin('spool_all_results_for_retries', TType.BOOL, 110)
            oprot.writeBool(self.spool_all_results_for_retries)
            oprot.writeFieldEnd()
        if self.runtime_filter_error_rate is not None:
            oprot.writeFieldBegin('runtime_filter_error_rate', TType.DOUBLE, 111)
            oprot.writeDouble(self.runtime_filter_error_rate)
            oprot.writeFieldEnd()
        if self.use_local_tz_for_unix_timestamp_conversions is not None:
            oprot.writeFieldBegin('use_local_tz_for_unix_timestamp_conversions', TType.BOOL, 112)
            oprot.writeBool(self.use_local_tz_for_unix_timestamp_conversions)
            oprot.writeFieldEnd()
        if self.convert_legacy_hive_parquet_utc_timestamps is not None:
            oprot.writeFieldBegin('convert_legacy_hive_parquet_utc_timestamps', TType.BOOL, 113)
            oprot.writeBool(self.convert_legacy_hive_parquet_utc_timestamps)
            oprot.writeFieldEnd()
        if self.enable_outer_join_to_inner_transformation is not None:
            oprot.writeFieldBegin('enable_outer_join_to_inner_transformation', TType.BOOL, 114)
            oprot.writeBool(self.enable_outer_join_to_inner_transformation)
            oprot.writeFieldEnd()
        if self.targeted_kudu_scan_range_length is not None:
            oprot.writeFieldBegin('targeted_kudu_scan_range_length', TType.I64, 115)
            oprot.writeI64(self.targeted_kudu_scan_range_length)
            oprot.writeFieldEnd()
        if self.report_skew_limit is not None:
            oprot.writeFieldBegin('report_skew_limit', TType.DOUBLE, 116)
            oprot.writeDouble(self.report_skew_limit)
            oprot.writeFieldEnd()
        if self.optimize_simple_limit is not None:
            oprot.writeFieldBegin('optimize_simple_limit', TType.BOOL, 117)
            oprot.writeBool(self.optimize_simple_limit)
            oprot.writeFieldEnd()
        if self.use_dop_for_costing is not None:
            oprot.writeFieldBegin('use_dop_for_costing', TType.BOOL, 118)
            oprot.writeBool(self.use_dop_for_costing)
            oprot.writeFieldEnd()
        if self.broadcast_to_partition_factor is not None:
            oprot.writeFieldBegin('broadcast_to_partition_factor', TType.DOUBLE, 119)
            oprot.writeDouble(self.broadcast_to_partition_factor)
            oprot.writeFieldEnd()
        if self.join_rows_produced_limit is not None:
            oprot.writeFieldBegin('join_rows_produced_limit', TType.I64, 120)
            oprot.writeI64(self.join_rows_produced_limit)
            oprot.writeFieldEnd()
        if self.utf8_mode is not None:
            oprot.writeFieldBegin('utf8_mode', TType.BOOL, 121)
            oprot.writeBool(self.utf8_mode)
            oprot.writeFieldEnd()
        if self.analytic_rank_pushdown_threshold is not None:
            oprot.writeFieldBegin('analytic_rank_pushdown_threshold', TType.I64, 122)
            oprot.writeI64(self.analytic_rank_pushdown_threshold)
            oprot.writeFieldEnd()
        if self.minmax_filter_threshold is not None:
            oprot.writeFieldBegin('minmax_filter_threshold', TType.DOUBLE, 123)
            oprot.writeDouble(self.minmax_filter_threshold)
            oprot.writeFieldEnd()
        if self.minmax_filtering_level is not None:
            oprot.writeFieldBegin('minmax_filtering_level', TType.I32, 124)
            oprot.writeI32(self.minmax_filtering_level)
            oprot.writeFieldEnd()
        if self.compute_column_minmax_stats is not None:
            oprot.writeFieldBegin('compute_column_minmax_stats', TType.BOOL, 125)
            oprot.writeBool(self.compute_column_minmax_stats)
            oprot.writeFieldEnd()
        if self.show_column_minmax_stats is not None:
            oprot.writeFieldBegin('show_column_minmax_stats', TType.BOOL, 126)
            oprot.writeBool(self.show_column_minmax_stats)
            oprot.writeFieldEnd()
        if self.default_ndv_scale is not None:
            oprot.writeFieldBegin('default_ndv_scale', TType.I32, 127)
            oprot.writeI32(self.default_ndv_scale)
            oprot.writeFieldEnd()
        if self.kudu_replica_selection is not None:
            oprot.writeFieldBegin('kudu_replica_selection', TType.I32, 128)
            oprot.writeI32(self.kudu_replica_selection)
            oprot.writeFieldEnd()
        if self.delete_stats_in_truncate is not None:
            oprot.writeFieldBegin('delete_stats_in_truncate', TType.BOOL, 129)
            oprot.writeBool(self.delete_stats_in_truncate)
            oprot.writeFieldEnd()
        if self.parquet_bloom_filtering is not None:
            oprot.writeFieldBegin('parquet_bloom_filtering', TType.BOOL, 130)
            oprot.writeBool(self.parquet_bloom_filtering)
            oprot.writeFieldEnd()
        if self.minmax_filter_sorted_columns is not None:
            oprot.writeFieldBegin('minmax_filter_sorted_columns', TType.BOOL, 131)
            oprot.writeBool(self.minmax_filter_sorted_columns)
            oprot.writeFieldEnd()
        if self.minmax_filter_fast_code_path is not None:
            oprot.writeFieldBegin('minmax_filter_fast_code_path', TType.I32, 132)
            oprot.writeI32(self.minmax_filter_fast_code_path)
            oprot.writeFieldEnd()
        if self.enable_kudu_transaction is not None:
            oprot.writeFieldBegin('enable_kudu_transaction', TType.BOOL, 133)
            oprot.writeBool(self.enable_kudu_transaction)
            oprot.writeFieldEnd()
        if self.minmax_filter_partition_columns is not None:
            oprot.writeFieldBegin('minmax_filter_partition_columns', TType.BOOL, 134)
            oprot.writeBool(self.minmax_filter_partition_columns)
            oprot.writeFieldEnd()
        if self.parquet_bloom_filter_write is not None:
            oprot.writeFieldBegin('parquet_bloom_filter_write', TType.I32, 135)
            oprot.writeI32(self.parquet_bloom_filter_write)
            oprot.writeFieldEnd()
        if self.orc_read_statistics is not None:
            oprot.writeFieldBegin('orc_read_statistics', TType.BOOL, 136)
            oprot.writeBool(self.orc_read_statistics)
            oprot.writeFieldEnd()
        if self.enable_async_ddl_execution is not None:
            oprot.writeFieldBegin('enable_async_ddl_execution', TType.BOOL, 137)
            oprot.writeBool(self.enable_async_ddl_execution)
            oprot.writeFieldEnd()
        if self.enable_async_load_data_execution is not None:
            oprot.writeFieldBegin('enable_async_load_data_execution', TType.BOOL, 138)
            oprot.writeBool(self.enable_async_load_data_execution)
            oprot.writeFieldEnd()
        if self.parquet_late_materialization_threshold is not None:
            oprot.writeFieldBegin('parquet_late_materialization_threshold', TType.I32, 139)
            oprot.writeI32(self.parquet_late_materialization_threshold)
            oprot.writeFieldEnd()
        if self.parquet_dictionary_runtime_filter_entry_limit is not None:
            oprot.writeFieldBegin('parquet_dictionary_runtime_filter_entry_limit', TType.I32, 140)
            oprot.writeI32(self.parquet_dictionary_runtime_filter_entry_limit)
            oprot.writeFieldEnd()
        if self.abort_java_udf_on_exception is not None:
            oprot.writeFieldBegin('abort_java_udf_on_exception', TType.BOOL, 141)
            oprot.writeBool(self.abort_java_udf_on_exception)
            oprot.writeFieldEnd()
        if self.orc_async_read is not None:
            oprot.writeFieldBegin('orc_async_read', TType.BOOL, 142)
            oprot.writeBool(self.orc_async_read)
            oprot.writeFieldEnd()
        if self.runtime_in_list_filter_entry_limit is not None:
            oprot.writeFieldBegin('runtime_in_list_filter_entry_limit', TType.I32, 143)
            oprot.writeI32(self.runtime_in_list_filter_entry_limit)
            oprot.writeFieldEnd()
        if self.enable_replan is not None:
            oprot.writeFieldBegin('enable_replan', TType.BOOL, 144)
            oprot.writeBool(self.enable_replan)
            oprot.writeFieldEnd()
        if self.test_replan is not None:
            oprot.writeFieldBegin('test_replan', TType.BOOL, 145)
            oprot.writeBool(self.test_replan)
            oprot.writeFieldEnd()
        if self.lock_max_wait_time_s is not None:
            oprot.writeFieldBegin('lock_max_wait_time_s', TType.I32, 146)
            oprot.writeI32(self.lock_max_wait_time_s)
            oprot.writeFieldEnd()
        if self.orc_schema_resolution is not None:
            oprot.writeFieldBegin('orc_schema_resolution', TType.I32, 147)
            oprot.writeI32(self.orc_schema_resolution)
            oprot.writeFieldEnd()
        if self.expand_complex_types is not None:
            oprot.writeFieldBegin('expand_complex_types', TType.BOOL, 148)
            oprot.writeBool(self.expand_complex_types)
            oprot.writeFieldEnd()
        if self.fallback_db_for_functions is not None:
            oprot.writeFieldBegin('fallback_db_for_functions', TType.STRING, 149)
            oprot.writeString(self.fallback_db_for_functions)
            oprot.writeFieldEnd()
        if self.disable_codegen_cache is not None:
            oprot.writeFieldBegin('disable_codegen_cache', TType.BOOL, 150)
            oprot.writeBool(self.disable_codegen_cache)
            oprot.writeFieldEnd()
        if self.codegen_cache_mode is not None:
            oprot.writeFieldBegin('codegen_cache_mode', TType.I32, 151)
            oprot.writeI32(self.codegen_cache_mode)
            oprot.writeFieldEnd()
        if self.stringify_map_keys is not None:
            oprot.writeFieldBegin('stringify_map_keys', TType.BOOL, 152)
            oprot.writeBool(self.stringify_map_keys)
            oprot.writeFieldEnd()
        if self.enable_trivial_query_for_admission is not None:
            oprot.writeFieldBegin('enable_trivial_query_for_admission', TType.BOOL, 153)
            oprot.writeBool(self.enable_trivial_query_for_admission)
            oprot.writeFieldEnd()
        if self.compute_processing_cost is not None:
            oprot.writeFieldBegin('compute_processing_cost', TType.BOOL, 154)
            oprot.writeBool(self.compute_processing_cost)
            oprot.writeFieldEnd()
        if self.processing_cost_min_threads is not None:
            oprot.writeFieldBegin('processing_cost_min_threads', TType.I32, 155)
            oprot.writeI32(self.processing_cost_min_threads)
            oprot.writeFieldEnd()
        if self.join_selectivity_correlation_factor is not None:
            oprot.writeFieldBegin('join_selectivity_correlation_factor', TType.DOUBLE, 156)
            oprot.writeDouble(self.join_selectivity_correlation_factor)
            oprot.writeFieldEnd()
        if self.max_fragment_instances_per_node is not None:
            oprot.writeFieldBegin('max_fragment_instances_per_node', TType.I32, 157)
            oprot.writeI32(self.max_fragment_instances_per_node)
            oprot.writeFieldEnd()
        if self.max_sort_run_size is not None:
            oprot.writeFieldBegin('max_sort_run_size', TType.I32, 158)
            oprot.writeI32(self.max_sort_run_size)
            oprot.writeFieldEnd()
        if self.allow_unsafe_casts is not None:
            oprot.writeFieldBegin('allow_unsafe_casts', TType.BOOL, 159)
            oprot.writeBool(self.allow_unsafe_casts)
            oprot.writeFieldEnd()
        if self.num_threads_for_table_migration is not None:
            oprot.writeFieldBegin('num_threads_for_table_migration', TType.I32, 160)
            oprot.writeI32(self.num_threads_for_table_migration)
            oprot.writeFieldEnd()
        if self.disable_optimized_iceberg_v2_read is not None:
            oprot.writeFieldBegin('disable_optimized_iceberg_v2_read', TType.BOOL, 161)
            oprot.writeBool(self.disable_optimized_iceberg_v2_read)
            oprot.writeFieldEnd()
        if self.values_stmt_avoid_lossy_char_padding is not None:
            oprot.writeFieldBegin('values_stmt_avoid_lossy_char_padding', TType.BOOL, 162)
            oprot.writeBool(self.values_stmt_avoid_lossy_char_padding)
            oprot.writeFieldEnd()
        if self.large_agg_mem_threshold is not None:
            oprot.writeFieldBegin('large_agg_mem_threshold', TType.I64, 163)
            oprot.writeI64(self.large_agg_mem_threshold)
            oprot.writeFieldEnd()
        if self.agg_mem_correlation_factor is not None:
            oprot.writeFieldBegin('agg_mem_correlation_factor', TType.DOUBLE, 164)
            oprot.writeDouble(self.agg_mem_correlation_factor)
            oprot.writeFieldEnd()
        if self.mem_limit_coordinators is not None:
            oprot.writeFieldBegin('mem_limit_coordinators', TType.I64, 165)
            oprot.writeI64(self.mem_limit_coordinators)
            oprot.writeFieldEnd()
        if self.iceberg_predicate_pushdown_subsetting is not None:
            oprot.writeFieldBegin('iceberg_predicate_pushdown_subsetting', TType.BOOL, 166)
            oprot.writeBool(self.iceberg_predicate_pushdown_subsetting)
            oprot.writeFieldEnd()
        if self.hdfs_scanner_non_reserved_bytes is not None:
            oprot.writeFieldBegin('hdfs_scanner_non_reserved_bytes', TType.I64, 167)
            oprot.writeI64(self.hdfs_scanner_non_reserved_bytes)
            oprot.writeFieldEnd()
        if self.codegen_opt_level is not None:
            oprot.writeFieldBegin('codegen_opt_level', TType.I32, 168)
            oprot.writeI32(self.codegen_opt_level)
            oprot.writeFieldEnd()
        if self.kudu_table_reserve_seconds is not None:
            oprot.writeFieldBegin('kudu_table_reserve_seconds', TType.I32, 169)
            oprot.writeI32(self.kudu_table_reserve_seconds)
            oprot.writeFieldEnd()
        if self.convert_kudu_utc_timestamps is not None:
            oprot.writeFieldBegin('convert_kudu_utc_timestamps', TType.BOOL, 170)
            oprot.writeBool(self.convert_kudu_utc_timestamps)
            oprot.writeFieldEnd()
        if self.disable_kudu_local_timestamp_bloom_filter is not None:
            oprot.writeFieldBegin('disable_kudu_local_timestamp_bloom_filter', TType.BOOL, 171)
            oprot.writeBool(self.disable_kudu_local_timestamp_bloom_filter)
            oprot.writeFieldEnd()
        if self.runtime_filter_cardinality_reduction_scale is not None:
            oprot.writeFieldBegin('runtime_filter_cardinality_reduction_scale', TType.DOUBLE, 172)
            oprot.writeDouble(self.runtime_filter_cardinality_reduction_scale)
            oprot.writeFieldEnd()
        if self.max_num_filters_aggregated_per_host is not None:
            oprot.writeFieldBegin('max_num_filters_aggregated_per_host', TType.I32, 173)
            oprot.writeI32(self.max_num_filters_aggregated_per_host)
            oprot.writeFieldEnd()
        if self.query_cpu_count_divisor is not None:
            oprot.writeFieldBegin('query_cpu_count_divisor', TType.DOUBLE, 174)
            oprot.writeDouble(self.query_cpu_count_divisor)
            oprot.writeFieldEnd()
        if self.enable_tuple_cache is not None:
            oprot.writeFieldBegin('enable_tuple_cache', TType.BOOL, 175)
            oprot.writeBool(self.enable_tuple_cache)
            oprot.writeFieldEnd()
        if self.iceberg_disable_count_star_optimization is not None:
            oprot.writeFieldBegin('iceberg_disable_count_star_optimization', TType.BOOL, 176)
            oprot.writeBool(self.iceberg_disable_count_star_optimization)
            oprot.writeFieldEnd()
        if self.runtime_filter_ids_to_skip is not None:
            oprot.writeFieldBegin('runtime_filter_ids_to_skip', TType.SET, 177)
            oprot.writeSetBegin(TType.I32, len(self.runtime_filter_ids_to_skip))
            for iter13 in self.runtime_filter_ids_to_skip:
                oprot.writeI32(iter13)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.slot_count_strategy is not None:
            oprot.writeFieldBegin('slot_count_strategy', TType.I32, 178)
            oprot.writeI32(self.slot_count_strategy)
            oprot.writeFieldEnd()
        if self.clean_dbcp_ds_cache is not None:
            oprot.writeFieldBegin('clean_dbcp_ds_cache', TType.BOOL, 179)
            oprot.writeBool(self.clean_dbcp_ds_cache)
            oprot.writeFieldEnd()
        if self.use_null_slots_cache is not None:
            oprot.writeFieldBegin('use_null_slots_cache', TType.BOOL, 180)
            oprot.writeBool(self.use_null_slots_cache)
            oprot.writeFieldEnd()
        if self.write_kudu_utc_timestamps is not None:
            oprot.writeFieldBegin('write_kudu_utc_timestamps', TType.BOOL, 181)
            oprot.writeBool(self.write_kudu_utc_timestamps)
            oprot.writeFieldEnd()
        if self.disable_optimized_json_count_star is not None:
            oprot.writeFieldBegin('disable_optimized_json_count_star', TType.BOOL, 182)
            oprot.writeBool(self.disable_optimized_json_count_star)
            oprot.writeFieldEnd()
        if self.long_polling_time_ms is not None:
            oprot.writeFieldBegin('long_polling_time_ms', TType.I32, 183)
            oprot.writeI32(self.long_polling_time_ms)
            oprot.writeFieldEnd()
        if self.enable_tuple_cache_verification is not None:
            oprot.writeFieldBegin('enable_tuple_cache_verification', TType.BOOL, 184)
            oprot.writeBool(self.enable_tuple_cache_verification)
            oprot.writeFieldEnd()
        if self.enable_tuple_analysis_in_aggregate is not None:
            oprot.writeFieldBegin('enable_tuple_analysis_in_aggregate', TType.BOOL, 185)
            oprot.writeBool(self.enable_tuple_analysis_in_aggregate)
            oprot.writeFieldEnd()
        if self.estimate_duplicate_in_preagg is not None:
            oprot.writeFieldBegin('estimate_duplicate_in_preagg', TType.BOOL, 186)
            oprot.writeBool(self.estimate_duplicate_in_preagg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TClientRequest(object):
    """
    Attributes:
     - stmt
     - query_options
     - redacted_stmt
     - hs2_metadata_op

    """


    def __init__(self, stmt=None, query_options=None, redacted_stmt=None, hs2_metadata_op=None,):
        self.stmt = stmt
        self.query_options = query_options
        self.redacted_stmt = redacted_stmt
        self.hs2_metadata_op = hs2_metadata_op

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stmt = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.query_options = TQueryOptions()
                    self.query_options.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.redacted_stmt = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hs2_metadata_op = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TClientRequest')
        if self.stmt is not None:
            oprot.writeFieldBegin('stmt', TType.STRING, 1)
            oprot.writeString(self.stmt)
            oprot.writeFieldEnd()
        if self.query_options is not None:
            oprot.writeFieldBegin('query_options', TType.STRUCT, 2)
            self.query_options.write(oprot)
            oprot.writeFieldEnd()
        if self.redacted_stmt is not None:
            oprot.writeFieldBegin('redacted_stmt', TType.STRING, 3)
            oprot.writeString(self.redacted_stmt)
            oprot.writeFieldEnd()
        if self.hs2_metadata_op is not None:
            oprot.writeFieldBegin('hs2_metadata_op', TType.BOOL, 4)
            oprot.writeBool(self.hs2_metadata_op)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.stmt is None:
            raise TProtocolException(message='Required field stmt is unset!')
        if self.query_options is None:
            raise TProtocolException(message='Required field query_options is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSessionState(object):
    """
    Attributes:
     - session_id
     - session_type
     - database
     - connected_user
     - delegated_user
     - network_address
     - kudu_latest_observed_ts

    """


    def __init__(self, session_id=None, session_type=None, database=None, connected_user=None, delegated_user=None, network_address=None, kudu_latest_observed_ts=None,):
        self.session_id = session_id
        self.session_type = session_type
        self.database = database
        self.connected_user = connected_user
        self.delegated_user = delegated_user
        self.network_address = network_address
        self.kudu_latest_observed_ts = kudu_latest_observed_ts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRUCT:
                    self.session_id = Types.ttypes.TUniqueId()
                    self.session_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.session_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRING:
                    self.database = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.connected_user = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.delegated_user = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.network_address = Types.ttypes.TNetworkAddress()
                    self.network_address.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.kudu_latest_observed_ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSessionState')
        if self.database is not None:
            oprot.writeFieldBegin('database', TType.STRING, 1)
            oprot.writeString(self.database)
            oprot.writeFieldEnd()
        if self.connected_user is not None:
            oprot.writeFieldBegin('connected_user', TType.STRING, 2)
            oprot.writeString(self.connected_user)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.STRUCT, 3)
            self.session_id.write(oprot)
            oprot.writeFieldEnd()
        if self.network_address is not None:
            oprot.writeFieldBegin('network_address', TType.STRUCT, 4)
            self.network_address.write(oprot)
            oprot.writeFieldEnd()
        if self.session_type is not None:
            oprot.writeFieldBegin('session_type', TType.I32, 5)
            oprot.writeI32(self.session_type)
            oprot.writeFieldEnd()
        if self.delegated_user is not None:
            oprot.writeFieldBegin('delegated_user', TType.STRING, 6)
            oprot.writeString(self.delegated_user)
            oprot.writeFieldEnd()
        if self.kudu_latest_observed_ts is not None:
            oprot.writeFieldBegin('kudu_latest_observed_ts', TType.I64, 7)
            oprot.writeI64(self.kudu_latest_observed_ts)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.session_id is None:
            raise TProtocolException(message='Required field session_id is unset!')
        if self.session_type is None:
            raise TProtocolException(message='Required field session_type is unset!')
        if self.database is None:
            raise TProtocolException(message='Required field database is unset!')
        if self.connected_user is None:
            raise TProtocolException(message='Required field connected_user is unset!')
        if self.network_address is None:
            raise TProtocolException(message='Required field network_address is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TQueryCtx(object):
    """
    Attributes:
     - client_request
     - query_id
     - session
     - now_string
     - pid
     - coord_hostname
     - coord_ip_address
     - tables_missing_stats
     - disable_spilling
     - parent_query_id
     - tables_with_corrupt_stats
     - snapshot_timestamp
     - desc_tbl_testonly
     - start_unix_millis
     - disable_codegen_hint
     - tables_missing_diskids
     - request_pool
     - utc_timestamp_string
     - local_time_zone
     - disable_hbase_num_rows_estimate
     - trace_resource_usage
     - status_report_interval_ms
     - status_report_max_retry_s
     - desc_tbl_serialized
     - transaction_id
     - overridden_mt_dop_value
     - coord_backend_id
     - gen_aggregated_profile
     - is_kudu_transactional
     - optimize_count_star_for_iceberg_v2
     - query_options_result_hash

    """


    def __init__(self, client_request=None, query_id=None, session=None, now_string=None, pid=None, coord_hostname=None, coord_ip_address=None, tables_missing_stats=None, disable_spilling=None, parent_query_id=None, tables_with_corrupt_stats=None, snapshot_timestamp=-1, desc_tbl_testonly=None, start_unix_millis=None, disable_codegen_hint=False, tables_missing_diskids=None, request_pool=None, utc_timestamp_string=None, local_time_zone=None, disable_hbase_num_rows_estimate=False, trace_resource_usage=False, status_report_interval_ms=None, status_report_max_retry_s=None, desc_tbl_serialized=None, transaction_id=None, overridden_mt_dop_value=None, coord_backend_id=None, gen_aggregated_profile=None, is_kudu_transactional=False, optimize_count_star_for_iceberg_v2=False, query_options_result_hash=None,):
        self.client_request = client_request
        self.query_id = query_id
        self.session = session
        self.now_string = now_string
        self.pid = pid
        self.coord_hostname = coord_hostname
        self.coord_ip_address = coord_ip_address
        self.tables_missing_stats = tables_missing_stats
        self.disable_spilling = disable_spilling
        self.parent_query_id = parent_query_id
        self.tables_with_corrupt_stats = tables_with_corrupt_stats
        self.snapshot_timestamp = snapshot_timestamp
        self.desc_tbl_testonly = desc_tbl_testonly
        self.start_unix_millis = start_unix_millis
        self.disable_codegen_hint = disable_codegen_hint
        self.tables_missing_diskids = tables_missing_diskids
        self.request_pool = request_pool
        self.utc_timestamp_string = utc_timestamp_string
        self.local_time_zone = local_time_zone
        self.disable_hbase_num_rows_estimate = disable_hbase_num_rows_estimate
        self.trace_resource_usage = trace_resource_usage
        self.status_report_interval_ms = status_report_interval_ms
        self.status_report_max_retry_s = status_report_max_retry_s
        self.desc_tbl_serialized = desc_tbl_serialized
        self.transaction_id = transaction_id
        self.overridden_mt_dop_value = overridden_mt_dop_value
        self.coord_backend_id = coord_backend_id
        self.gen_aggregated_profile = gen_aggregated_profile
        self.is_kudu_transactional = is_kudu_transactional
        self.optimize_count_star_for_iceberg_v2 = optimize_count_star_for_iceberg_v2
        self.query_options_result_hash = query_options_result_hash

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.client_request = TClientRequest()
                    self.client_request.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.query_id = Types.ttypes.TUniqueId()
                    self.query_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.session = TSessionState()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.now_string = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.pid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.coord_hostname = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.coord_ip_address = Types.ttypes.TNetworkAddress()
                    self.coord_ip_address.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.tables_missing_stats = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = CatalogObjects.ttypes.TTableName()
                        _elem19.read(iprot)
                        self.tables_missing_stats.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.disable_spilling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.parent_query_id = Types.ttypes.TUniqueId()
                    self.parent_query_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.tables_with_corrupt_stats = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = CatalogObjects.ttypes.TTableName()
                        _elem25.read(iprot)
                        self.tables_with_corrupt_stats.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.snapshot_timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.desc_tbl_testonly = Descriptors.ttypes.TDescriptorTable()
                    self.desc_tbl_testonly.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.start_unix_millis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.disable_codegen_hint = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.tables_missing_diskids = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = CatalogObjects.ttypes.TTableName()
                        _elem31.read(iprot)
                        self.tables_missing_diskids.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.request_pool = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.utc_timestamp_string = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.local_time_zone = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.disable_hbase_num_rows_estimate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.trace_resource_usage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.status_report_interval_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.status_report_max_retry_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRUCT:
                    self.desc_tbl_serialized = Descriptors.ttypes.TDescriptorTableSerialized()
                    self.desc_tbl_serialized.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I64:
                    self.transaction_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.overridden_mt_dop_value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.coord_backend_id = Types.ttypes.TUniqueId()
                    self.coord_backend_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.gen_aggregated_profile = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.is_kudu_transactional = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.optimize_count_star_for_iceberg_v2 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.query_options_result_hash = TQueryOptionsHash()
                    self.query_options_result_hash.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TQueryCtx')
        if self.client_request is not None:
            oprot.writeFieldBegin('client_request', TType.STRUCT, 1)
            self.client_request.write(oprot)
            oprot.writeFieldEnd()
        if self.query_id is not None:
            oprot.writeFieldBegin('query_id', TType.STRUCT, 2)
            self.query_id.write(oprot)
            oprot.writeFieldEnd()
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 3)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.now_string is not None:
            oprot.writeFieldBegin('now_string', TType.STRING, 4)
            oprot.writeString(self.now_string)
            oprot.writeFieldEnd()
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.I32, 5)
            oprot.writeI32(self.pid)
            oprot.writeFieldEnd()
        if self.coord_hostname is not None:
            oprot.writeFieldBegin('coord_hostname', TType.STRING, 6)
            oprot.writeString(self.coord_hostname)
            oprot.writeFieldEnd()
        if self.coord_ip_address is not None:
            oprot.writeFieldBegin('coord_ip_address', TType.STRUCT, 7)
            self.coord_ip_address.write(oprot)
            oprot.writeFieldEnd()
        if self.tables_missing_stats is not None:
            oprot.writeFieldBegin('tables_missing_stats', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.tables_missing_stats))
            for iter32 in self.tables_missing_stats:
                iter32.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.disable_spilling is not None:
            oprot.writeFieldBegin('disable_spilling', TType.BOOL, 9)
            oprot.writeBool(self.disable_spilling)
            oprot.writeFieldEnd()
        if self.parent_query_id is not None:
            oprot.writeFieldBegin('parent_query_id', TType.STRUCT, 10)
            self.parent_query_id.write(oprot)
            oprot.writeFieldEnd()
        if self.tables_with_corrupt_stats is not None:
            oprot.writeFieldBegin('tables_with_corrupt_stats', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.tables_with_corrupt_stats))
            for iter33 in self.tables_with_corrupt_stats:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.snapshot_timestamp is not None:
            oprot.writeFieldBegin('snapshot_timestamp', TType.I64, 12)
            oprot.writeI64(self.snapshot_timestamp)
            oprot.writeFieldEnd()
        if self.desc_tbl_testonly is not None:
            oprot.writeFieldBegin('desc_tbl_testonly', TType.STRUCT, 13)
            self.desc_tbl_testonly.write(oprot)
            oprot.writeFieldEnd()
        if self.start_unix_millis is not None:
            oprot.writeFieldBegin('start_unix_millis', TType.I64, 14)
            oprot.writeI64(self.start_unix_millis)
            oprot.writeFieldEnd()
        if self.disable_codegen_hint is not None:
            oprot.writeFieldBegin('disable_codegen_hint', TType.BOOL, 15)
            oprot.writeBool(self.disable_codegen_hint)
            oprot.writeFieldEnd()
        if self.tables_missing_diskids is not None:
            oprot.writeFieldBegin('tables_missing_diskids', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.tables_missing_diskids))
            for iter34 in self.tables_missing_diskids:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.request_pool is not None:
            oprot.writeFieldBegin('request_pool', TType.STRING, 17)
            oprot.writeString(self.request_pool)
            oprot.writeFieldEnd()
        if self.utc_timestamp_string is not None:
            oprot.writeFieldBegin('utc_timestamp_string', TType.STRING, 18)
            oprot.writeString(self.utc_timestamp_string)
            oprot.writeFieldEnd()
        if self.local_time_zone is not None:
            oprot.writeFieldBegin('local_time_zone', TType.STRING, 19)
            oprot.writeString(self.local_time_zone)
            oprot.writeFieldEnd()
        if self.disable_hbase_num_rows_estimate is not None:
            oprot.writeFieldBegin('disable_hbase_num_rows_estimate', TType.BOOL, 20)
            oprot.writeBool(self.disable_hbase_num_rows_estimate)
            oprot.writeFieldEnd()
        if self.trace_resource_usage is not None:
            oprot.writeFieldBegin('trace_resource_usage', TType.BOOL, 21)
            oprot.writeBool(self.trace_resource_usage)
            oprot.writeFieldEnd()
        if self.status_report_interval_ms is not None:
            oprot.writeFieldBegin('status_report_interval_ms', TType.I32, 22)
            oprot.writeI32(self.status_report_interval_ms)
            oprot.writeFieldEnd()
        if self.status_report_max_retry_s is not None:
            oprot.writeFieldBegin('status_report_max_retry_s', TType.I32, 23)
            oprot.writeI32(self.status_report_max_retry_s)
            oprot.writeFieldEnd()
        if self.desc_tbl_serialized is not None:
            oprot.writeFieldBegin('desc_tbl_serialized', TType.STRUCT, 24)
            self.desc_tbl_serialized.write(oprot)
            oprot.writeFieldEnd()
        if self.transaction_id is not None:
            oprot.writeFieldBegin('transaction_id', TType.I64, 25)
            oprot.writeI64(self.transaction_id)
            oprot.writeFieldEnd()
        if self.overridden_mt_dop_value is not None:
            oprot.writeFieldBegin('overridden_mt_dop_value', TType.I32, 26)
            oprot.writeI32(self.overridden_mt_dop_value)
            oprot.writeFieldEnd()
        if self.coord_backend_id is not None:
            oprot.writeFieldBegin('coord_backend_id', TType.STRUCT, 27)
            self.coord_backend_id.write(oprot)
            oprot.writeFieldEnd()
        if self.gen_aggregated_profile is not None:
            oprot.writeFieldBegin('gen_aggregated_profile', TType.BOOL, 28)
            oprot.writeBool(self.gen_aggregated_profile)
            oprot.writeFieldEnd()
        if self.is_kudu_transactional is not None:
            oprot.writeFieldBegin('is_kudu_transactional', TType.BOOL, 29)
            oprot.writeBool(self.is_kudu_transactional)
            oprot.writeFieldEnd()
        if self.optimize_count_star_for_iceberg_v2 is not None:
            oprot.writeFieldBegin('optimize_count_star_for_iceberg_v2', TType.BOOL, 30)
            oprot.writeBool(self.optimize_count_star_for_iceberg_v2)
            oprot.writeFieldEnd()
        if self.query_options_result_hash is not None:
            oprot.writeFieldBegin('query_options_result_hash', TType.STRUCT, 31)
            self.query_options_result_hash.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.client_request is None:
            raise TProtocolException(message='Required field client_request is unset!')
        if self.query_id is None:
            raise TProtocolException(message='Required field query_id is unset!')
        if self.session is None:
            raise TProtocolException(message='Required field session is unset!')
        if self.now_string is None:
            raise TProtocolException(message='Required field now_string is unset!')
        if self.pid is None:
            raise TProtocolException(message='Required field pid is unset!')
        if self.start_unix_millis is None:
            raise TProtocolException(message='Required field start_unix_millis is unset!')
        if self.utc_timestamp_string is None:
            raise TProtocolException(message='Required field utc_timestamp_string is unset!')
        if self.local_time_zone is None:
            raise TProtocolException(message='Required field local_time_zone is unset!')
        if self.trace_resource_usage is None:
            raise TProtocolException(message='Required field trace_resource_usage is unset!')
        if self.is_kudu_transactional is None:
            raise TProtocolException(message='Required field is_kudu_transactional is unset!')
        if self.optimize_count_star_for_iceberg_v2 is None:
            raise TProtocolException(message='Required field optimize_count_star_for_iceberg_v2 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TPlanExecInfo(object):
    """
    Attributes:
     - fragments
     - per_node_scan_ranges

    """


    def __init__(self, fragments=None, per_node_scan_ranges=None,):
        self.fragments = fragments
        self.per_node_scan_ranges = per_node_scan_ranges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fragments = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = Planner.ttypes.TPlanFragment()
                        _elem40.read(iprot)
                        self.fragments.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.per_node_scan_ranges = {}
                    (_ktype42, _vtype43, _size41) = iprot.readMapBegin()
                    for _i45 in range(_size41):
                        _key46 = iprot.readI32()
                        _val47 = Planner.ttypes.TScanRangeSpec()
                        _val47.read(iprot)
                        self.per_node_scan_ranges[_key46] = _val47
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TPlanExecInfo')
        if self.fragments is not None:
            oprot.writeFieldBegin('fragments', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fragments))
            for iter48 in self.fragments:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.per_node_scan_ranges is not None:
            oprot.writeFieldBegin('per_node_scan_ranges', TType.MAP, 2)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.per_node_scan_ranges))
            for kiter49, viter50 in self.per_node_scan_ranges.items():
                oprot.writeI32(kiter49)
                viter50.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fragments is None:
            raise TProtocolException(message='Required field fragments is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TIcebergOptimizeParams(object):
    """
    Attributes:
     - mode
     - selected_data_files_without_deletes

    """


    def __init__(self, mode=None, selected_data_files_without_deletes=None,):
        self.mode = mode
        self.selected_data_files_without_deletes = selected_data_files_without_deletes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.selected_data_files_without_deletes = set()
                    (_etype54, _size51) = iprot.readSetBegin()
                    for _i55 in range(_size51):
                        _elem56 = iprot.readString()
                        self.selected_data_files_without_deletes.add(_elem56)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TIcebergOptimizeParams')
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 1)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.selected_data_files_without_deletes is not None:
            oprot.writeFieldBegin('selected_data_files_without_deletes', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.selected_data_files_without_deletes))
            for iter57 in self.selected_data_files_without_deletes:
                oprot.writeString(iter57)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.mode is None:
            raise TProtocolException(message='Required field mode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TIcebergDmlFinalizeParams(object):
    """
    Attributes:
     - operation
     - spec_id
     - initial_snapshot_id
     - optimize_params

    """


    def __init__(self, operation=None, spec_id=None, initial_snapshot_id=None, optimize_params=None,):
        self.operation = operation
        self.spec_id = spec_id
        self.initial_snapshot_id = initial_snapshot_id
        self.optimize_params = optimize_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.operation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.spec_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.initial_snapshot_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.optimize_params = TIcebergOptimizeParams()
                    self.optimize_params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TIcebergDmlFinalizeParams')
        if self.operation is not None:
            oprot.writeFieldBegin('operation', TType.I32, 1)
            oprot.writeI32(self.operation)
            oprot.writeFieldEnd()
        if self.spec_id is not None:
            oprot.writeFieldBegin('spec_id', TType.I32, 2)
            oprot.writeI32(self.spec_id)
            oprot.writeFieldEnd()
        if self.initial_snapshot_id is not None:
            oprot.writeFieldBegin('initial_snapshot_id', TType.I64, 3)
            oprot.writeI64(self.initial_snapshot_id)
            oprot.writeFieldEnd()
        if self.optimize_params is not None:
            oprot.writeFieldBegin('optimize_params', TType.STRUCT, 4)
            self.optimize_params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.operation is None:
            raise TProtocolException(message='Required field operation is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TFinalizeParams(object):
    """
    Attributes:
     - is_overwrite
     - hdfs_base_dir
     - table_name
     - table_db
     - staging_dir
     - table_id
     - transaction_id
     - write_id
     - iceberg_params

    """


    def __init__(self, is_overwrite=None, hdfs_base_dir=None, table_name=None, table_db=None, staging_dir=None, table_id=None, transaction_id=None, write_id=None, iceberg_params=None,):
        self.is_overwrite = is_overwrite
        self.hdfs_base_dir = hdfs_base_dir
        self.table_name = table_name
        self.table_db = table_db
        self.staging_dir = staging_dir
        self.table_id = table_id
        self.transaction_id = transaction_id
        self.write_id = write_id
        self.iceberg_params = iceberg_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.is_overwrite = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hdfs_base_dir = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.table_db = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.staging_dir = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.table_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.transaction_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.write_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.iceberg_params = TIcebergDmlFinalizeParams()
                    self.iceberg_params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TFinalizeParams')
        if self.is_overwrite is not None:
            oprot.writeFieldBegin('is_overwrite', TType.BOOL, 1)
            oprot.writeBool(self.is_overwrite)
            oprot.writeFieldEnd()
        if self.hdfs_base_dir is not None:
            oprot.writeFieldBegin('hdfs_base_dir', TType.STRING, 2)
            oprot.writeString(self.hdfs_base_dir)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name)
            oprot.writeFieldEnd()
        if self.table_db is not None:
            oprot.writeFieldBegin('table_db', TType.STRING, 4)
            oprot.writeString(self.table_db)
            oprot.writeFieldEnd()
        if self.staging_dir is not None:
            oprot.writeFieldBegin('staging_dir', TType.STRING, 5)
            oprot.writeString(self.staging_dir)
            oprot.writeFieldEnd()
        if self.table_id is not None:
            oprot.writeFieldBegin('table_id', TType.I64, 6)
            oprot.writeI64(self.table_id)
            oprot.writeFieldEnd()
        if self.transaction_id is not None:
            oprot.writeFieldBegin('transaction_id', TType.I64, 7)
            oprot.writeI64(self.transaction_id)
            oprot.writeFieldEnd()
        if self.write_id is not None:
            oprot.writeFieldBegin('write_id', TType.I64, 8)
            oprot.writeI64(self.write_id)
            oprot.writeFieldEnd()
        if self.iceberg_params is not None:
            oprot.writeFieldBegin('iceberg_params', TType.STRUCT, 9)
            self.iceberg_params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.is_overwrite is None:
            raise TProtocolException(message='Required field is_overwrite is unset!')
        if self.hdfs_base_dir is None:
            raise TProtocolException(message='Required field hdfs_base_dir is unset!')
        if self.table_name is None:
            raise TProtocolException(message='Required field table_name is unset!')
        if self.table_db is None:
            raise TProtocolException(message='Required field table_db is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TQueryExecRequest(object):
    """
    Attributes:
     - plan_exec_info
     - result_set_metadata
     - finalize_params
     - query_ctx
     - query_plan
     - stmt_type
     - host_list
     - lineage_graph
     - per_host_mem_estimate
     - max_per_host_min_mem_reservation
     - max_per_host_thread_reservation
     - dedicated_coord_mem_estimate
     - is_trivial_query
     - cores_required
     - planner_per_host_mem_estimate
     - include_all_coordinators
     - max_slot_per_executor
     - cores_required_unbounded

    """


    def __init__(self, plan_exec_info=None, result_set_metadata=None, finalize_params=None, query_ctx=None, query_plan=None, stmt_type=None, host_list=None, lineage_graph=None, per_host_mem_estimate=None, max_per_host_min_mem_reservation=None, max_per_host_thread_reservation=None, dedicated_coord_mem_estimate=None, is_trivial_query=None, cores_required=None, planner_per_host_mem_estimate=None, include_all_coordinators=None, max_slot_per_executor=None, cores_required_unbounded=None,):
        self.plan_exec_info = plan_exec_info
        self.result_set_metadata = result_set_metadata
        self.finalize_params = finalize_params
        self.query_ctx = query_ctx
        self.query_plan = query_plan
        self.stmt_type = stmt_type
        self.host_list = host_list
        self.lineage_graph = lineage_graph
        self.per_host_mem_estimate = per_host_mem_estimate
        self.max_per_host_min_mem_reservation = max_per_host_min_mem_reservation
        self.max_per_host_thread_reservation = max_per_host_thread_reservation
        self.dedicated_coord_mem_estimate = dedicated_coord_mem_estimate
        self.is_trivial_query = is_trivial_query
        self.cores_required = cores_required
        self.planner_per_host_mem_estimate = planner_per_host_mem_estimate
        self.include_all_coordinators = include_all_coordinators
        self.max_slot_per_executor = max_slot_per_executor
        self.cores_required_unbounded = cores_required_unbounded

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.plan_exec_info = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = TPlanExecInfo()
                        _elem63.read(iprot)
                        self.plan_exec_info.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.result_set_metadata = Results.ttypes.TResultSetMetadata()
                    self.result_set_metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.finalize_params = TFinalizeParams()
                    self.finalize_params.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.query_ctx = TQueryCtx()
                    self.query_ctx.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.query_plan = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.stmt_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.host_list = []
                    (_etype67, _size64) = iprot.readListBegin()
                    for _i68 in range(_size64):
                        _elem69 = Types.ttypes.TNetworkAddress()
                        _elem69.read(iprot)
                        self.host_list.append(_elem69)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.lineage_graph = LineageGraph.ttypes.TLineageGraph()
                    self.lineage_graph.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.per_host_mem_estimate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.max_per_host_min_mem_reservation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.max_per_host_thread_reservation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.dedicated_coord_mem_estimate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.is_trivial_query = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.cores_required = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.planner_per_host_mem_estimate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.include_all_coordinators = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.max_slot_per_executor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.cores_required_unbounded = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TQueryExecRequest')
        if self.plan_exec_info is not None:
            oprot.writeFieldBegin('plan_exec_info', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.plan_exec_info))
            for iter70 in self.plan_exec_info:
                iter70.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.result_set_metadata is not None:
            oprot.writeFieldBegin('result_set_metadata', TType.STRUCT, 2)
            self.result_set_metadata.write(oprot)
            oprot.writeFieldEnd()
        if self.finalize_params is not None:
            oprot.writeFieldBegin('finalize_params', TType.STRUCT, 3)
            self.finalize_params.write(oprot)
            oprot.writeFieldEnd()
        if self.query_ctx is not None:
            oprot.writeFieldBegin('query_ctx', TType.STRUCT, 4)
            self.query_ctx.write(oprot)
            oprot.writeFieldEnd()
        if self.query_plan is not None:
            oprot.writeFieldBegin('query_plan', TType.STRING, 5)
            oprot.writeString(self.query_plan)
            oprot.writeFieldEnd()
        if self.stmt_type is not None:
            oprot.writeFieldBegin('stmt_type', TType.I32, 6)
            oprot.writeI32(self.stmt_type)
            oprot.writeFieldEnd()
        if self.host_list is not None:
            oprot.writeFieldBegin('host_list', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.host_list))
            for iter71 in self.host_list:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lineage_graph is not None:
            oprot.writeFieldBegin('lineage_graph', TType.STRUCT, 8)
            self.lineage_graph.write(oprot)
            oprot.writeFieldEnd()
        if self.per_host_mem_estimate is not None:
            oprot.writeFieldBegin('per_host_mem_estimate', TType.I64, 9)
            oprot.writeI64(self.per_host_mem_estimate)
            oprot.writeFieldEnd()
        if self.max_per_host_min_mem_reservation is not None:
            oprot.writeFieldBegin('max_per_host_min_mem_reservation', TType.I64, 10)
            oprot.writeI64(self.max_per_host_min_mem_reservation)
            oprot.writeFieldEnd()
        if self.max_per_host_thread_reservation is not None:
            oprot.writeFieldBegin('max_per_host_thread_reservation', TType.I64, 11)
            oprot.writeI64(self.max_per_host_thread_reservation)
            oprot.writeFieldEnd()
        if self.dedicated_coord_mem_estimate is not None:
            oprot.writeFieldBegin('dedicated_coord_mem_estimate', TType.I64, 12)
            oprot.writeI64(self.dedicated_coord_mem_estimate)
            oprot.writeFieldEnd()
        if self.is_trivial_query is not None:
            oprot.writeFieldBegin('is_trivial_query', TType.BOOL, 13)
            oprot.writeBool(self.is_trivial_query)
            oprot.writeFieldEnd()
        if self.cores_required is not None:
            oprot.writeFieldBegin('cores_required', TType.I32, 14)
            oprot.writeI32(self.cores_required)
            oprot.writeFieldEnd()
        if self.planner_per_host_mem_estimate is not None:
            oprot.writeFieldBegin('planner_per_host_mem_estimate', TType.I64, 15)
            oprot.writeI64(self.planner_per_host_mem_estimate)
            oprot.writeFieldEnd()
        if self.include_all_coordinators is not None:
            oprot.writeFieldBegin('include_all_coordinators', TType.BOOL, 16)
            oprot.writeBool(self.include_all_coordinators)
            oprot.writeFieldEnd()
        if self.max_slot_per_executor is not None:
            oprot.writeFieldBegin('max_slot_per_executor', TType.I32, 17)
            oprot.writeI32(self.max_slot_per_executor)
            oprot.writeFieldEnd()
        if self.cores_required_unbounded is not None:
            oprot.writeFieldBegin('cores_required_unbounded', TType.I32, 18)
            oprot.writeI32(self.cores_required_unbounded)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.query_ctx is None:
            raise TProtocolException(message='Required field query_ctx is unset!')
        if self.stmt_type is None:
            raise TProtocolException(message='Required field stmt_type is unset!')
        if self.host_list is None:
            raise TProtocolException(message='Required field host_list is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TQueryOptionsHash)
TQueryOptionsHash.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hi', None, None, ),  # 1
    (2, TType.I64, 'lo', None, None, ),  # 2
)
all_structs.append(TQueryOptions)
TQueryOptions.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'abort_on_error', None, False, ),  # 1
    (2, TType.I32, 'max_errors', None, 100, ),  # 2
    (3, TType.BOOL, 'disable_codegen', None, False, ),  # 3
    (4, TType.I32, 'batch_size', None, 0, ),  # 4
    (5, TType.I32, 'num_nodes', None, 0, ),  # 5
    (6, TType.I64, 'max_scan_range_length', None, 0, ),  # 6
    (7, TType.I32, 'num_scanner_threads', None, 0, ),  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRING, 'debug_action', None, "", ),  # 11
    (12, TType.I64, 'mem_limit', None, 0, ),  # 12
    None,  # 13
    (14, TType.STRUCT, 'compression_codec', [CatalogObjects.ttypes.TCompressionCodec, None], None, ),  # 14
    (15, TType.I32, 'hbase_caching', None, 0, ),  # 15
    (16, TType.BOOL, 'hbase_cache_blocks', None, False, ),  # 16
    (17, TType.I64, 'parquet_file_size', None, 0, ),  # 17
    (18, TType.I32, 'explain_level', None, 1, ),  # 18
    (19, TType.BOOL, 'sync_ddl', None, False, ),  # 19
    (20, TType.STRING, 'request_pool', None, None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    (24, TType.BOOL, 'disable_outermost_topn', None, False, ),  # 24
    None,  # 25
    (26, TType.I32, 'query_timeout_s', None, 0, ),  # 26
    (27, TType.I64, 'buffer_pool_limit', None, None, ),  # 27
    (28, TType.BOOL, 'appx_count_distinct', None, False, ),  # 28
    (29, TType.BOOL, 'disable_unsafe_spills', None, False, ),  # 29
    None,  # 30
    (31, TType.I32, 'exec_single_node_rows_threshold', None, 100, ),  # 31
    (32, TType.BOOL, 'optimize_partition_key_scans', None, False, ),  # 32
    (33, TType.I32, 'replica_preference', None, 0, ),  # 33
    (34, TType.BOOL, 'schedule_random_replica', None, False, ),  # 34
    None,  # 35
    (36, TType.BOOL, 'disable_streaming_preaggregations', None, False, ),  # 36
    (37, TType.I32, 'runtime_filter_mode', None, 2, ),  # 37
    (38, TType.I32, 'runtime_bloom_filter_size', None, 1048576, ),  # 38
    (39, TType.I32, 'runtime_filter_wait_time_ms', None, 0, ),  # 39
    (40, TType.BOOL, 'disable_row_runtime_filtering', None, False, ),  # 40
    (41, TType.I32, 'max_num_runtime_filters', None, 10, ),  # 41
    (42, TType.BOOL, 'parquet_annotate_strings_utf8', None, False, ),  # 42
    (43, TType.I32, 'parquet_fallback_schema_resolution', None, 0, ),  # 43
    (44, TType.I32, 'mt_dop', None, None, ),  # 44
    (45, TType.BOOL, 's3_skip_insert_staging', None, True, ),  # 45
    (46, TType.I32, 'runtime_filter_min_size', None, 1048576, ),  # 46
    (47, TType.I32, 'runtime_filter_max_size', None, 16777216, ),  # 47
    (48, TType.I32, 'prefetch_mode', None, 1, ),  # 48
    (49, TType.BOOL, 'strict_mode', None, False, ),  # 49
    (50, TType.I64, 'scratch_limit', None, -1, ),  # 50
    (51, TType.BOOL, 'enable_expr_rewrites', None, True, ),  # 51
    (52, TType.BOOL, 'decimal_v2', None, True, ),  # 52
    (53, TType.BOOL, 'parquet_dictionary_filtering', None, True, ),  # 53
    (54, TType.I32, 'parquet_array_resolution', None, 0, ),  # 54
    (55, TType.BOOL, 'parquet_read_statistics', None, True, ),  # 55
    (56, TType.I32, 'default_join_distribution_mode', None, 0, ),  # 56
    (57, TType.I32, 'disable_codegen_rows_threshold', None, 50000, ),  # 57
    (58, TType.I64, 'default_spillable_buffer_size', None, 2097152, ),  # 58
    (59, TType.I64, 'min_spillable_buffer_size', None, 65536, ),  # 59
    (60, TType.I64, 'max_row_size', None, 524288, ),  # 60
    (61, TType.I32, 'idle_session_timeout', None, None, ),  # 61
    (62, TType.I64, 'compute_stats_min_sample_size', None, 1073741824, ),  # 62
    (63, TType.I32, 'exec_time_limit_s', None, 0, ),  # 63
    (64, TType.BOOL, 'shuffle_distinct_exprs', None, True, ),  # 64
    (65, TType.I64, 'max_mem_estimate_for_admission', None, 0, ),  # 65
    (66, TType.I32, 'thread_reservation_limit', None, 3000, ),  # 66
    (67, TType.I32, 'thread_reservation_aggregate_limit', None, 0, ),  # 67
    (68, TType.I32, 'kudu_read_mode', None, 0, ),  # 68
    (69, TType.BOOL, 'allow_erasure_coded_files', None, True, ),  # 69
    (70, TType.STRING, 'timezone', None, "", ),  # 70
    (71, TType.I64, 'scan_bytes_limit', None, 0, ),  # 71
    (72, TType.I64, 'cpu_limit_s', None, 0, ),  # 72
    (73, TType.I64, 'topn_bytes_limit', None, 536870912, ),  # 73
    (74, TType.STRING, 'client_identifier', None, None, ),  # 74
    (75, TType.DOUBLE, 'resource_trace_ratio', None, float(1), ),  # 75
    (76, TType.I32, 'num_remote_executor_candidates', None, 3, ),  # 76
    (77, TType.I64, 'num_rows_produced_limit', None, 0, ),  # 77
    (78, TType.BOOL, 'planner_testcase_mode', None, False, ),  # 78
    (79, TType.I32, 'default_file_format', None, 0, ),  # 79
    (80, TType.I32, 'parquet_timestamp_type', None, 0, ),  # 80
    (81, TType.BOOL, 'parquet_read_page_index', None, True, ),  # 81
    (82, TType.BOOL, 'parquet_write_page_index', None, True, ),  # 82
    (83, TType.I32, 'parquet_page_row_count_limit', None, None, ),  # 83
    (84, TType.BOOL, 'disable_hdfs_num_rows_estimate', None, False, ),  # 84
    (85, TType.STRING, 'default_hints_insert_statement', None, None, ),  # 85
    (86, TType.BOOL, 'spool_query_results', None, True, ),  # 86
    (87, TType.I32, 'default_transactional_type', None, 0, ),  # 87
    (88, TType.I32, 'statement_expression_limit', None, 250000, ),  # 88
    (89, TType.I32, 'max_statement_length_bytes', None, 16777216, ),  # 89
    (90, TType.BOOL, 'disable_data_cache', None, False, ),  # 90
    (91, TType.I64, 'max_result_spooling_mem', None, 104857600, ),  # 91
    (92, TType.I64, 'max_spilled_result_spooling_mem', None, 1073741824, ),  # 92
    (93, TType.BOOL, 'disable_hbase_num_rows_estimate', None, False, ),  # 93
    (94, TType.I64, 'fetch_rows_timeout_ms', None, 10000, ),  # 94
    (95, TType.STRING, 'now_string', None, "", ),  # 95
    (96, TType.I64, 'parquet_object_store_split_size', None, 268435456, ),  # 96
    (97, TType.I64, 'mem_limit_executors', None, 0, ),  # 97
    (98, TType.I64, 'broadcast_bytes_limit', None, 34359738368, ),  # 98
    (99, TType.I64, 'preagg_bytes_limit', None, -1, ),  # 99
    (100, TType.BOOL, 'enable_cnf_rewrites', None, True, ),  # 100
    (101, TType.I32, 'max_cnf_exprs', None, 200, ),  # 101
    (102, TType.I64, 'kudu_snapshot_read_timestamp_micros', None, 0, ),  # 102
    (103, TType.BOOL, 'retry_failed_queries', None, False, ),  # 103
    (104, TType.SET, 'enabled_runtime_filter_types', (TType.I32, None, False), set((
        0,
        1,
    )), ),  # 104
    (105, TType.BOOL, 'async_codegen', None, False, ),  # 105
    (106, TType.BOOL, 'enable_distinct_semi_join_optimization', None, True, ),  # 106
    (107, TType.I64, 'sort_run_bytes_limit', None, -1, ),  # 107
    (108, TType.I32, 'max_fs_writers', None, 0, ),  # 108
    (109, TType.BOOL, 'refresh_updated_hms_partitions', None, False, ),  # 109
    (110, TType.BOOL, 'spool_all_results_for_retries', None, True, ),  # 110
    (111, TType.DOUBLE, 'runtime_filter_error_rate', None, None, ),  # 111
    (112, TType.BOOL, 'use_local_tz_for_unix_timestamp_conversions', None, False, ),  # 112
    (113, TType.BOOL, 'convert_legacy_hive_parquet_utc_timestamps', None, False, ),  # 113
    (114, TType.BOOL, 'enable_outer_join_to_inner_transformation', None, False, ),  # 114
    (115, TType.I64, 'targeted_kudu_scan_range_length', None, -1, ),  # 115
    (116, TType.DOUBLE, 'report_skew_limit', None, 1.0000000000000000, ),  # 116
    (117, TType.BOOL, 'optimize_simple_limit', None, False, ),  # 117
    (118, TType.BOOL, 'use_dop_for_costing', None, True, ),  # 118
    (119, TType.DOUBLE, 'broadcast_to_partition_factor', None, 1.0000000000000000, ),  # 119
    (120, TType.I64, 'join_rows_produced_limit', None, 0, ),  # 120
    (121, TType.BOOL, 'utf8_mode', None, False, ),  # 121
    (122, TType.I64, 'analytic_rank_pushdown_threshold', None, 1000, ),  # 122
    (123, TType.DOUBLE, 'minmax_filter_threshold', None, 0.0000000000000000, ),  # 123
    (124, TType.I32, 'minmax_filtering_level', None, 1, ),  # 124
    (125, TType.BOOL, 'compute_column_minmax_stats', None, False, ),  # 125
    (126, TType.BOOL, 'show_column_minmax_stats', None, False, ),  # 126
    (127, TType.I32, 'default_ndv_scale', None, 2, ),  # 127
    (128, TType.I32, 'kudu_replica_selection', None, 1, ),  # 128
    (129, TType.BOOL, 'delete_stats_in_truncate', None, True, ),  # 129
    (130, TType.BOOL, 'parquet_bloom_filtering', None, True, ),  # 130
    (131, TType.BOOL, 'minmax_filter_sorted_columns', None, True, ),  # 131
    (132, TType.I32, 'minmax_filter_fast_code_path', None, 1, ),  # 132
    (133, TType.BOOL, 'enable_kudu_transaction', None, False, ),  # 133
    (134, TType.BOOL, 'minmax_filter_partition_columns', None, True, ),  # 134
    (135, TType.I32, 'parquet_bloom_filter_write', None, 1, ),  # 135
    (136, TType.BOOL, 'orc_read_statistics', None, True, ),  # 136
    (137, TType.BOOL, 'enable_async_ddl_execution', None, True, ),  # 137
    (138, TType.BOOL, 'enable_async_load_data_execution', None, True, ),  # 138
    (139, TType.I32, 'parquet_late_materialization_threshold', None, 20, ),  # 139
    (140, TType.I32, 'parquet_dictionary_runtime_filter_entry_limit', None, 1024, ),  # 140
    (141, TType.BOOL, 'abort_java_udf_on_exception', None, False, ),  # 141
    (142, TType.BOOL, 'orc_async_read', None, True, ),  # 142
    (143, TType.I32, 'runtime_in_list_filter_entry_limit', None, 1024, ),  # 143
    (144, TType.BOOL, 'enable_replan', None, True, ),  # 144
    (145, TType.BOOL, 'test_replan', None, False, ),  # 145
    (146, TType.I32, 'lock_max_wait_time_s', None, 300, ),  # 146
    (147, TType.I32, 'orc_schema_resolution', None, 0, ),  # 147
    (148, TType.BOOL, 'expand_complex_types', None, False, ),  # 148
    (149, TType.STRING, 'fallback_db_for_functions', None, None, ),  # 149
    (150, TType.BOOL, 'disable_codegen_cache', None, False, ),  # 150
    (151, TType.I32, 'codegen_cache_mode', None, 0, ),  # 151
    (152, TType.BOOL, 'stringify_map_keys', None, False, ),  # 152
    (153, TType.BOOL, 'enable_trivial_query_for_admission', None, True, ),  # 153
    (154, TType.BOOL, 'compute_processing_cost', None, False, ),  # 154
    (155, TType.I32, 'processing_cost_min_threads', None, 1, ),  # 155
    (156, TType.DOUBLE, 'join_selectivity_correlation_factor', None, 0.0000000000000000, ),  # 156
    (157, TType.I32, 'max_fragment_instances_per_node', None, 128, ),  # 157
    (158, TType.I32, 'max_sort_run_size', None, 0, ),  # 158
    (159, TType.BOOL, 'allow_unsafe_casts', None, False, ),  # 159
    (160, TType.I32, 'num_threads_for_table_migration', None, 1, ),  # 160
    (161, TType.BOOL, 'disable_optimized_iceberg_v2_read', None, False, ),  # 161
    (162, TType.BOOL, 'values_stmt_avoid_lossy_char_padding', None, False, ),  # 162
    (163, TType.I64, 'large_agg_mem_threshold', None, 536870912, ),  # 163
    (164, TType.DOUBLE, 'agg_mem_correlation_factor', None, 0.5000000000000000, ),  # 164
    (165, TType.I64, 'mem_limit_coordinators', None, 0, ),  # 165
    (166, TType.BOOL, 'iceberg_predicate_pushdown_subsetting', None, True, ),  # 166
    (167, TType.I64, 'hdfs_scanner_non_reserved_bytes', None, -1, ),  # 167
    (168, TType.I32, 'codegen_opt_level', None, 3, ),  # 168
    (169, TType.I32, 'kudu_table_reserve_seconds', None, 0, ),  # 169
    (170, TType.BOOL, 'convert_kudu_utc_timestamps', None, False, ),  # 170
    (171, TType.BOOL, 'disable_kudu_local_timestamp_bloom_filter', None, True, ),  # 171
    (172, TType.DOUBLE, 'runtime_filter_cardinality_reduction_scale', None, 1.0000000000000000, ),  # 172
    (173, TType.I32, 'max_num_filters_aggregated_per_host', None, -1, ),  # 173
    (174, TType.DOUBLE, 'query_cpu_count_divisor', None, None, ),  # 174
    (175, TType.BOOL, 'enable_tuple_cache', None, False, ),  # 175
    (176, TType.BOOL, 'iceberg_disable_count_star_optimization', None, False, ),  # 176
    (177, TType.SET, 'runtime_filter_ids_to_skip', (TType.I32, None, False), None, ),  # 177
    (178, TType.I32, 'slot_count_strategy', None, 0, ),  # 178
    (179, TType.BOOL, 'clean_dbcp_ds_cache', None, True, ),  # 179
    (180, TType.BOOL, 'use_null_slots_cache', None, True, ),  # 180
    (181, TType.BOOL, 'write_kudu_utc_timestamps', None, False, ),  # 181
    (182, TType.BOOL, 'disable_optimized_json_count_star', None, False, ),  # 182
    (183, TType.I32, 'long_polling_time_ms', None, 0, ),  # 183
    (184, TType.BOOL, 'enable_tuple_cache_verification', None, False, ),  # 184
    (185, TType.BOOL, 'enable_tuple_analysis_in_aggregate', None, True, ),  # 185
    (186, TType.BOOL, 'estimate_duplicate_in_preagg', None, True, ),  # 186
)
all_structs.append(TClientRequest)
TClientRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stmt', None, None, ),  # 1
    (2, TType.STRUCT, 'query_options', [TQueryOptions, None], None, ),  # 2
    (3, TType.STRING, 'redacted_stmt', None, None, ),  # 3
    (4, TType.BOOL, 'hs2_metadata_op', None, None, ),  # 4
)
all_structs.append(TSessionState)
TSessionState.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'database', None, None, ),  # 1
    (2, TType.STRING, 'connected_user', None, None, ),  # 2
    (3, TType.STRUCT, 'session_id', [Types.ttypes.TUniqueId, None], None, ),  # 3
    (4, TType.STRUCT, 'network_address', [Types.ttypes.TNetworkAddress, None], None, ),  # 4
    (5, TType.I32, 'session_type', None, None, ),  # 5
    (6, TType.STRING, 'delegated_user', None, None, ),  # 6
    (7, TType.I64, 'kudu_latest_observed_ts', None, None, ),  # 7
)
all_structs.append(TQueryCtx)
TQueryCtx.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'client_request', [TClientRequest, None], None, ),  # 1
    (2, TType.STRUCT, 'query_id', [Types.ttypes.TUniqueId, None], None, ),  # 2
    (3, TType.STRUCT, 'session', [TSessionState, None], None, ),  # 3
    (4, TType.STRING, 'now_string', None, None, ),  # 4
    (5, TType.I32, 'pid', None, None, ),  # 5
    (6, TType.STRING, 'coord_hostname', None, None, ),  # 6
    (7, TType.STRUCT, 'coord_ip_address', [Types.ttypes.TNetworkAddress, None], None, ),  # 7
    (8, TType.LIST, 'tables_missing_stats', (TType.STRUCT, [CatalogObjects.ttypes.TTableName, None], False), None, ),  # 8
    (9, TType.BOOL, 'disable_spilling', None, None, ),  # 9
    (10, TType.STRUCT, 'parent_query_id', [Types.ttypes.TUniqueId, None], None, ),  # 10
    (11, TType.LIST, 'tables_with_corrupt_stats', (TType.STRUCT, [CatalogObjects.ttypes.TTableName, None], False), None, ),  # 11
    (12, TType.I64, 'snapshot_timestamp', None, -1, ),  # 12
    (13, TType.STRUCT, 'desc_tbl_testonly', [Descriptors.ttypes.TDescriptorTable, None], None, ),  # 13
    (14, TType.I64, 'start_unix_millis', None, None, ),  # 14
    (15, TType.BOOL, 'disable_codegen_hint', None, False, ),  # 15
    (16, TType.LIST, 'tables_missing_diskids', (TType.STRUCT, [CatalogObjects.ttypes.TTableName, None], False), None, ),  # 16
    (17, TType.STRING, 'request_pool', None, None, ),  # 17
    (18, TType.STRING, 'utc_timestamp_string', None, None, ),  # 18
    (19, TType.STRING, 'local_time_zone', None, None, ),  # 19
    (20, TType.BOOL, 'disable_hbase_num_rows_estimate', None, False, ),  # 20
    (21, TType.BOOL, 'trace_resource_usage', None, False, ),  # 21
    (22, TType.I32, 'status_report_interval_ms', None, None, ),  # 22
    (23, TType.I32, 'status_report_max_retry_s', None, None, ),  # 23
    (24, TType.STRUCT, 'desc_tbl_serialized', [Descriptors.ttypes.TDescriptorTableSerialized, None], None, ),  # 24
    (25, TType.I64, 'transaction_id', None, None, ),  # 25
    (26, TType.I32, 'overridden_mt_dop_value', None, None, ),  # 26
    (27, TType.STRUCT, 'coord_backend_id', [Types.ttypes.TUniqueId, None], None, ),  # 27
    (28, TType.BOOL, 'gen_aggregated_profile', None, None, ),  # 28
    (29, TType.BOOL, 'is_kudu_transactional', None, False, ),  # 29
    (30, TType.BOOL, 'optimize_count_star_for_iceberg_v2', None, False, ),  # 30
    (31, TType.STRUCT, 'query_options_result_hash', [TQueryOptionsHash, None], None, ),  # 31
)
all_structs.append(TPlanExecInfo)
TPlanExecInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fragments', (TType.STRUCT, [Planner.ttypes.TPlanFragment, None], False), None, ),  # 1
    (2, TType.MAP, 'per_node_scan_ranges', (TType.I32, None, TType.STRUCT, [Planner.ttypes.TScanRangeSpec, None], False), None, ),  # 2
)
all_structs.append(TIcebergOptimizeParams)
TIcebergOptimizeParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'mode', None, None, ),  # 1
    (2, TType.SET, 'selected_data_files_without_deletes', (TType.STRING, None, False), None, ),  # 2
)
all_structs.append(TIcebergDmlFinalizeParams)
TIcebergDmlFinalizeParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'operation', None, None, ),  # 1
    (2, TType.I32, 'spec_id', None, None, ),  # 2
    (3, TType.I64, 'initial_snapshot_id', None, None, ),  # 3
    (4, TType.STRUCT, 'optimize_params', [TIcebergOptimizeParams, None], None, ),  # 4
)
all_structs.append(TFinalizeParams)
TFinalizeParams.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'is_overwrite', None, None, ),  # 1
    (2, TType.STRING, 'hdfs_base_dir', None, None, ),  # 2
    (3, TType.STRING, 'table_name', None, None, ),  # 3
    (4, TType.STRING, 'table_db', None, None, ),  # 4
    (5, TType.STRING, 'staging_dir', None, None, ),  # 5
    (6, TType.I64, 'table_id', None, None, ),  # 6
    (7, TType.I64, 'transaction_id', None, None, ),  # 7
    (8, TType.I64, 'write_id', None, None, ),  # 8
    (9, TType.STRUCT, 'iceberg_params', [TIcebergDmlFinalizeParams, None], None, ),  # 9
)
all_structs.append(TQueryExecRequest)
TQueryExecRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'plan_exec_info', (TType.STRUCT, [TPlanExecInfo, None], False), None, ),  # 1
    (2, TType.STRUCT, 'result_set_metadata', [Results.ttypes.TResultSetMetadata, None], None, ),  # 2
    (3, TType.STRUCT, 'finalize_params', [TFinalizeParams, None], None, ),  # 3
    (4, TType.STRUCT, 'query_ctx', [TQueryCtx, None], None, ),  # 4
    (5, TType.STRING, 'query_plan', None, None, ),  # 5
    (6, TType.I32, 'stmt_type', None, None, ),  # 6
    (7, TType.LIST, 'host_list', (TType.STRUCT, [Types.ttypes.TNetworkAddress, None], False), None, ),  # 7
    (8, TType.STRUCT, 'lineage_graph', [LineageGraph.ttypes.TLineageGraph, None], None, ),  # 8
    (9, TType.I64, 'per_host_mem_estimate', None, None, ),  # 9
    (10, TType.I64, 'max_per_host_min_mem_reservation', None, None, ),  # 10
    (11, TType.I64, 'max_per_host_thread_reservation', None, None, ),  # 11
    (12, TType.I64, 'dedicated_coord_mem_estimate', None, None, ),  # 12
    (13, TType.BOOL, 'is_trivial_query', None, None, ),  # 13
    (14, TType.I32, 'cores_required', None, None, ),  # 14
    (15, TType.I64, 'planner_per_host_mem_estimate', None, None, ),  # 15
    (16, TType.BOOL, 'include_all_coordinators', None, None, ),  # 16
    (17, TType.I32, 'max_slot_per_executor', None, None, ),  # 17
    (18, TType.I32, 'cores_required_unbounded', None, None, ),  # 18
)
fix_spec(all_structs)
del all_structs
