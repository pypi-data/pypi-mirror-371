#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec


from thrift.transport import TTransport
all_structs = []


class TReservedWordsVersion(object):
    IMPALA_2_11 = 0
    IMPALA_3_0 = 1

    _VALUES_TO_NAMES = {
        0: "IMPALA_2_11",
        1: "IMPALA_3_0",
    }

    _NAMES_TO_VALUES = {
        "IMPALA_2_11": 0,
        "IMPALA_3_0": 1,
    }


class TGeospatialLibrary(object):
    NONE = 0
    HIVE_ESRI = 1

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "HIVE_ESRI",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "HIVE_ESRI": 1,
    }


class TBackendGflags(object):
    """
    Attributes:
     - load_auth_to_local_rules
     - non_impala_java_vlog
     - impala_log_lvl
     - inc_stats_size_limit_bytes
     - lineage_event_log_dir
     - load_catalog_in_background
     - num_metadata_loading_threads
     - principal
     - server_name
     - kudu_master_hosts
     - local_library_path
     - read_size
     - kudu_operation_timeout_ms
     - initial_hms_cnxn_timeout_s
     - enable_stats_extrapolation
     - max_hdfs_partitions_parallel_load
     - max_nonhdfs_partitions_parallel_load
     - reserved_words_version
     - max_filter_error_rate
     - min_buffer_size
     - authorized_proxy_group_config
     - use_local_catalog
     - disable_catalog_data_ops_debug_only
     - local_catalog_cache_mb
     - local_catalog_cache_expiration_s
     - catalog_topic_mode
     - invalidate_tables_timeout_s
     - invalidate_tables_on_memory_pressure
     - invalidate_tables_gc_old_gen_full_threshold
     - invalidate_tables_fraction_on_memory_pressure
     - local_catalog_max_fetch_retries
     - kudu_scanner_thread_estimated_bytes_per_column
     - kudu_scanner_thread_max_estimated_bytes
     - catalog_max_parallel_partial_fetch_rpc
     - catalog_partial_fetch_rpc_queue_timeout_s
     - exchg_node_buffer_size_bytes
     - kudu_mutation_buffer_size
     - kudu_error_buffer_size
     - hms_event_polling_interval_s
     - impala_build_version
     - authorization_factory_class
     - ranger_service_type
     - ranger_app_id
     - authorization_provider
     - recursively_list_partitions
     - query_event_hook_classes
     - query_event_hook_nthreads
     - is_executor
     - is_coordinator
     - use_dedicated_coordinator_estimates
     - blacklisted_dbs
     - blacklisted_tables
     - unlock_zorder_sort
     - min_privilege_set_for_show_stmts
     - num_expected_executors
     - num_check_authorization_threads
     - use_customized_user_groups_mapper_for_ranger
     - enable_column_masking
     - enable_insert_events
     - compact_catalog_topic
     - enable_incremental_metadata_updates
     - topic_update_tbl_max_wait_time_ms
     - catalog_max_lock_skipped_topic_updates
     - saml2_keystore_path
     - saml2_keystore_password
     - saml2_private_key_password
     - saml2_idp_metadata
     - saml2_sp_entity_id
     - saml2_sp_callback_url
     - saml2_want_assertations_signed
     - saml2_sign_requests
     - saml2_callback_token_ttl
     - saml2_group_attribute_name
     - saml2_group_filter
     - saml2_ee_test_mode
     - scratch_dirs
     - enable_row_filtering
     - max_wait_time_for_sync_ddl_s
     - allow_ordinals_in_having
     - start_hms_server
     - hms_port
     - fallback_to_hms_on_errors
     - enable_catalogd_hms_cache
     - kudu_sasl_protocol_name
     - warn_catalog_response_size_mb
     - warn_catalog_response_duration_s
     - invalidate_hms_cache_on_ddls
     - startup_filesystem_check_directories
     - hms_event_incremental_refresh_transactional_table
     - enable_shell_based_groups_mapping_support
     - auto_check_compaction
     - enable_sync_to_latest_event_on_ddls
     - pull_table_types_and_comments
     - use_hms_column_order_for_hbase_tables
     - ignored_dir_prefix_list
     - enable_kudu_impala_hms_check
     - enable_reload_events
     - geospatial_library
     - query_cpu_count_divisor
     - processing_cost_use_equal_expr_weight
     - min_processing_per_thread
     - skip_resource_checking_on_last_executor_group_set
     - thrift_rpc_max_message_size
     - file_metadata_reload_properties
     - scan_range_cost_factor
     - use_jamm_weigher
     - iceberg_reload_new_files_threshold
     - enable_skipping_older_events
     - enable_json_scanner
     - max_filter_error_rate_from_full_scan
     - local_catalog_cache_concurrency_level
     - catalog_operation_log_size
     - hostname
     - allow_catalog_cache_op_from_masked_users
     - iceberg_allow_datafiles_in_table_location_only
     - topic_update_log_gc_frequency
     - debug_actions
     - invalidate_metadata_on_event_processing_failure
     - invalidate_global_metadata_on_event_processing_failure
     - inject_process_event_failure_event_types
     - inject_process_event_failure_ratio
     - enable_workload_mgmt
     - query_log_table_name
     - query_cpu_root_factor
     - default_skipped_hms_event_types
     - common_hms_event_types
     - dbcp_max_conn_pool_size
     - dbcp_max_wait_millis_for_conn
     - dbcp_data_source_idle_timeout
     - is_release_build
     - enable_catalogd_ha
     - iceberg_always_allow_merge_on_read_operations
     - data_stream_sender_buffer_size_used_by_planner
     - enable_reading_puffin_stats
     - injected_group_members_debug_only

    """


    def __init__(self, load_auth_to_local_rules=None, non_impala_java_vlog=None, impala_log_lvl=None, inc_stats_size_limit_bytes=None, lineage_event_log_dir=None, load_catalog_in_background=None, num_metadata_loading_threads=None, principal=None, server_name=None, kudu_master_hosts=None, local_library_path=None, read_size=None, kudu_operation_timeout_ms=None, initial_hms_cnxn_timeout_s=None, enable_stats_extrapolation=None, max_hdfs_partitions_parallel_load=None, max_nonhdfs_partitions_parallel_load=None, reserved_words_version=None, max_filter_error_rate=None, min_buffer_size=None, authorized_proxy_group_config=None, use_local_catalog=None, disable_catalog_data_ops_debug_only=None, local_catalog_cache_mb=None, local_catalog_cache_expiration_s=None, catalog_topic_mode=None, invalidate_tables_timeout_s=None, invalidate_tables_on_memory_pressure=None, invalidate_tables_gc_old_gen_full_threshold=None, invalidate_tables_fraction_on_memory_pressure=None, local_catalog_max_fetch_retries=None, kudu_scanner_thread_estimated_bytes_per_column=None, kudu_scanner_thread_max_estimated_bytes=None, catalog_max_parallel_partial_fetch_rpc=None, catalog_partial_fetch_rpc_queue_timeout_s=None, exchg_node_buffer_size_bytes=None, kudu_mutation_buffer_size=None, kudu_error_buffer_size=None, hms_event_polling_interval_s=None, impala_build_version=None, authorization_factory_class=None, ranger_service_type=None, ranger_app_id=None, authorization_provider=None, recursively_list_partitions=None, query_event_hook_classes=None, query_event_hook_nthreads=None, is_executor=None, is_coordinator=None, use_dedicated_coordinator_estimates=None, blacklisted_dbs=None, blacklisted_tables=None, unlock_zorder_sort=None, min_privilege_set_for_show_stmts=None, num_expected_executors=None, num_check_authorization_threads=None, use_customized_user_groups_mapper_for_ranger=None, enable_column_masking=None, enable_insert_events=None, compact_catalog_topic=None, enable_incremental_metadata_updates=None, topic_update_tbl_max_wait_time_ms=None, catalog_max_lock_skipped_topic_updates=None, saml2_keystore_path=None, saml2_keystore_password=None, saml2_private_key_password=None, saml2_idp_metadata=None, saml2_sp_entity_id=None, saml2_sp_callback_url=None, saml2_want_assertations_signed=None, saml2_sign_requests=None, saml2_callback_token_ttl=None, saml2_group_attribute_name=None, saml2_group_filter=None, saml2_ee_test_mode=None, scratch_dirs=None, enable_row_filtering=None, max_wait_time_for_sync_ddl_s=None, allow_ordinals_in_having=None, start_hms_server=None, hms_port=None, fallback_to_hms_on_errors=None, enable_catalogd_hms_cache=None, kudu_sasl_protocol_name=None, warn_catalog_response_size_mb=None, warn_catalog_response_duration_s=None, invalidate_hms_cache_on_ddls=None, startup_filesystem_check_directories=None, hms_event_incremental_refresh_transactional_table=None, enable_shell_based_groups_mapping_support=None, auto_check_compaction=None, enable_sync_to_latest_event_on_ddls=None, pull_table_types_and_comments=None, use_hms_column_order_for_hbase_tables=None, ignored_dir_prefix_list=None, enable_kudu_impala_hms_check=None, enable_reload_events=None, geospatial_library=None, query_cpu_count_divisor=None, processing_cost_use_equal_expr_weight=None, min_processing_per_thread=None, skip_resource_checking_on_last_executor_group_set=None, thrift_rpc_max_message_size=None, file_metadata_reload_properties=None, scan_range_cost_factor=None, use_jamm_weigher=None, iceberg_reload_new_files_threshold=None, enable_skipping_older_events=None, enable_json_scanner=None, max_filter_error_rate_from_full_scan=None, local_catalog_cache_concurrency_level=None, catalog_operation_log_size=None, hostname=None, allow_catalog_cache_op_from_masked_users=None, iceberg_allow_datafiles_in_table_location_only=None, topic_update_log_gc_frequency=None, debug_actions=None, invalidate_metadata_on_event_processing_failure=None, invalidate_global_metadata_on_event_processing_failure=None, inject_process_event_failure_event_types=None, inject_process_event_failure_ratio=None, enable_workload_mgmt=None, query_log_table_name=None, query_cpu_root_factor=None, default_skipped_hms_event_types=None, common_hms_event_types=None, dbcp_max_conn_pool_size=None, dbcp_max_wait_millis_for_conn=None, dbcp_data_source_idle_timeout=None, is_release_build=None, enable_catalogd_ha=None, iceberg_always_allow_merge_on_read_operations=None, data_stream_sender_buffer_size_used_by_planner=None, enable_reading_puffin_stats=None, injected_group_members_debug_only=None,):
        self.load_auth_to_local_rules = load_auth_to_local_rules
        self.non_impala_java_vlog = non_impala_java_vlog
        self.impala_log_lvl = impala_log_lvl
        self.inc_stats_size_limit_bytes = inc_stats_size_limit_bytes
        self.lineage_event_log_dir = lineage_event_log_dir
        self.load_catalog_in_background = load_catalog_in_background
        self.num_metadata_loading_threads = num_metadata_loading_threads
        self.principal = principal
        self.server_name = server_name
        self.kudu_master_hosts = kudu_master_hosts
        self.local_library_path = local_library_path
        self.read_size = read_size
        self.kudu_operation_timeout_ms = kudu_operation_timeout_ms
        self.initial_hms_cnxn_timeout_s = initial_hms_cnxn_timeout_s
        self.enable_stats_extrapolation = enable_stats_extrapolation
        self.max_hdfs_partitions_parallel_load = max_hdfs_partitions_parallel_load
        self.max_nonhdfs_partitions_parallel_load = max_nonhdfs_partitions_parallel_load
        self.reserved_words_version = reserved_words_version
        self.max_filter_error_rate = max_filter_error_rate
        self.min_buffer_size = min_buffer_size
        self.authorized_proxy_group_config = authorized_proxy_group_config
        self.use_local_catalog = use_local_catalog
        self.disable_catalog_data_ops_debug_only = disable_catalog_data_ops_debug_only
        self.local_catalog_cache_mb = local_catalog_cache_mb
        self.local_catalog_cache_expiration_s = local_catalog_cache_expiration_s
        self.catalog_topic_mode = catalog_topic_mode
        self.invalidate_tables_timeout_s = invalidate_tables_timeout_s
        self.invalidate_tables_on_memory_pressure = invalidate_tables_on_memory_pressure
        self.invalidate_tables_gc_old_gen_full_threshold = invalidate_tables_gc_old_gen_full_threshold
        self.invalidate_tables_fraction_on_memory_pressure = invalidate_tables_fraction_on_memory_pressure
        self.local_catalog_max_fetch_retries = local_catalog_max_fetch_retries
        self.kudu_scanner_thread_estimated_bytes_per_column = kudu_scanner_thread_estimated_bytes_per_column
        self.kudu_scanner_thread_max_estimated_bytes = kudu_scanner_thread_max_estimated_bytes
        self.catalog_max_parallel_partial_fetch_rpc = catalog_max_parallel_partial_fetch_rpc
        self.catalog_partial_fetch_rpc_queue_timeout_s = catalog_partial_fetch_rpc_queue_timeout_s
        self.exchg_node_buffer_size_bytes = exchg_node_buffer_size_bytes
        self.kudu_mutation_buffer_size = kudu_mutation_buffer_size
        self.kudu_error_buffer_size = kudu_error_buffer_size
        self.hms_event_polling_interval_s = hms_event_polling_interval_s
        self.impala_build_version = impala_build_version
        self.authorization_factory_class = authorization_factory_class
        self.ranger_service_type = ranger_service_type
        self.ranger_app_id = ranger_app_id
        self.authorization_provider = authorization_provider
        self.recursively_list_partitions = recursively_list_partitions
        self.query_event_hook_classes = query_event_hook_classes
        self.query_event_hook_nthreads = query_event_hook_nthreads
        self.is_executor = is_executor
        self.is_coordinator = is_coordinator
        self.use_dedicated_coordinator_estimates = use_dedicated_coordinator_estimates
        self.blacklisted_dbs = blacklisted_dbs
        self.blacklisted_tables = blacklisted_tables
        self.unlock_zorder_sort = unlock_zorder_sort
        self.min_privilege_set_for_show_stmts = min_privilege_set_for_show_stmts
        self.num_expected_executors = num_expected_executors
        self.num_check_authorization_threads = num_check_authorization_threads
        self.use_customized_user_groups_mapper_for_ranger = use_customized_user_groups_mapper_for_ranger
        self.enable_column_masking = enable_column_masking
        self.enable_insert_events = enable_insert_events
        self.compact_catalog_topic = compact_catalog_topic
        self.enable_incremental_metadata_updates = enable_incremental_metadata_updates
        self.topic_update_tbl_max_wait_time_ms = topic_update_tbl_max_wait_time_ms
        self.catalog_max_lock_skipped_topic_updates = catalog_max_lock_skipped_topic_updates
        self.saml2_keystore_path = saml2_keystore_path
        self.saml2_keystore_password = saml2_keystore_password
        self.saml2_private_key_password = saml2_private_key_password
        self.saml2_idp_metadata = saml2_idp_metadata
        self.saml2_sp_entity_id = saml2_sp_entity_id
        self.saml2_sp_callback_url = saml2_sp_callback_url
        self.saml2_want_assertations_signed = saml2_want_assertations_signed
        self.saml2_sign_requests = saml2_sign_requests
        self.saml2_callback_token_ttl = saml2_callback_token_ttl
        self.saml2_group_attribute_name = saml2_group_attribute_name
        self.saml2_group_filter = saml2_group_filter
        self.saml2_ee_test_mode = saml2_ee_test_mode
        self.scratch_dirs = scratch_dirs
        self.enable_row_filtering = enable_row_filtering
        self.max_wait_time_for_sync_ddl_s = max_wait_time_for_sync_ddl_s
        self.allow_ordinals_in_having = allow_ordinals_in_having
        self.start_hms_server = start_hms_server
        self.hms_port = hms_port
        self.fallback_to_hms_on_errors = fallback_to_hms_on_errors
        self.enable_catalogd_hms_cache = enable_catalogd_hms_cache
        self.kudu_sasl_protocol_name = kudu_sasl_protocol_name
        self.warn_catalog_response_size_mb = warn_catalog_response_size_mb
        self.warn_catalog_response_duration_s = warn_catalog_response_duration_s
        self.invalidate_hms_cache_on_ddls = invalidate_hms_cache_on_ddls
        self.startup_filesystem_check_directories = startup_filesystem_check_directories
        self.hms_event_incremental_refresh_transactional_table = hms_event_incremental_refresh_transactional_table
        self.enable_shell_based_groups_mapping_support = enable_shell_based_groups_mapping_support
        self.auto_check_compaction = auto_check_compaction
        self.enable_sync_to_latest_event_on_ddls = enable_sync_to_latest_event_on_ddls
        self.pull_table_types_and_comments = pull_table_types_and_comments
        self.use_hms_column_order_for_hbase_tables = use_hms_column_order_for_hbase_tables
        self.ignored_dir_prefix_list = ignored_dir_prefix_list
        self.enable_kudu_impala_hms_check = enable_kudu_impala_hms_check
        self.enable_reload_events = enable_reload_events
        self.geospatial_library = geospatial_library
        self.query_cpu_count_divisor = query_cpu_count_divisor
        self.processing_cost_use_equal_expr_weight = processing_cost_use_equal_expr_weight
        self.min_processing_per_thread = min_processing_per_thread
        self.skip_resource_checking_on_last_executor_group_set = skip_resource_checking_on_last_executor_group_set
        self.thrift_rpc_max_message_size = thrift_rpc_max_message_size
        self.file_metadata_reload_properties = file_metadata_reload_properties
        self.scan_range_cost_factor = scan_range_cost_factor
        self.use_jamm_weigher = use_jamm_weigher
        self.iceberg_reload_new_files_threshold = iceberg_reload_new_files_threshold
        self.enable_skipping_older_events = enable_skipping_older_events
        self.enable_json_scanner = enable_json_scanner
        self.max_filter_error_rate_from_full_scan = max_filter_error_rate_from_full_scan
        self.local_catalog_cache_concurrency_level = local_catalog_cache_concurrency_level
        self.catalog_operation_log_size = catalog_operation_log_size
        self.hostname = hostname
        self.allow_catalog_cache_op_from_masked_users = allow_catalog_cache_op_from_masked_users
        self.iceberg_allow_datafiles_in_table_location_only = iceberg_allow_datafiles_in_table_location_only
        self.topic_update_log_gc_frequency = topic_update_log_gc_frequency
        self.debug_actions = debug_actions
        self.invalidate_metadata_on_event_processing_failure = invalidate_metadata_on_event_processing_failure
        self.invalidate_global_metadata_on_event_processing_failure = invalidate_global_metadata_on_event_processing_failure
        self.inject_process_event_failure_event_types = inject_process_event_failure_event_types
        self.inject_process_event_failure_ratio = inject_process_event_failure_ratio
        self.enable_workload_mgmt = enable_workload_mgmt
        self.query_log_table_name = query_log_table_name
        self.query_cpu_root_factor = query_cpu_root_factor
        self.default_skipped_hms_event_types = default_skipped_hms_event_types
        self.common_hms_event_types = common_hms_event_types
        self.dbcp_max_conn_pool_size = dbcp_max_conn_pool_size
        self.dbcp_max_wait_millis_for_conn = dbcp_max_wait_millis_for_conn
        self.dbcp_data_source_idle_timeout = dbcp_data_source_idle_timeout
        self.is_release_build = is_release_build
        self.enable_catalogd_ha = enable_catalogd_ha
        self.iceberg_always_allow_merge_on_read_operations = iceberg_always_allow_merge_on_read_operations
        self.data_stream_sender_buffer_size_used_by_planner = data_stream_sender_buffer_size_used_by_planner
        self.enable_reading_puffin_stats = enable_reading_puffin_stats
        self.injected_group_members_debug_only = injected_group_members_debug_only

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.BOOL:
                    self.load_auth_to_local_rules = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.non_impala_java_vlog = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.impala_log_lvl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.inc_stats_size_limit_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.lineage_event_log_dir = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.load_catalog_in_background = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.num_metadata_loading_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.principal = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.server_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.kudu_master_hosts = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.local_library_path = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.read_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.kudu_operation_timeout_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.initial_hms_cnxn_timeout_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.enable_stats_extrapolation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.max_hdfs_partitions_parallel_load = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.max_nonhdfs_partitions_parallel_load = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.reserved_words_version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.max_filter_error_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.min_buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.authorized_proxy_group_config = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.use_local_catalog = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.disable_catalog_data_ops_debug_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.local_catalog_cache_mb = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.local_catalog_cache_expiration_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.catalog_topic_mode = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.invalidate_tables_timeout_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.invalidate_tables_on_memory_pressure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.DOUBLE:
                    self.invalidate_tables_gc_old_gen_full_threshold = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.DOUBLE:
                    self.invalidate_tables_fraction_on_memory_pressure = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.I32:
                    self.local_catalog_max_fetch_retries = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I64:
                    self.kudu_scanner_thread_estimated_bytes_per_column = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I64:
                    self.kudu_scanner_thread_max_estimated_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.catalog_max_parallel_partial_fetch_rpc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I64:
                    self.catalog_partial_fetch_rpc_queue_timeout_s = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I64:
                    self.exchg_node_buffer_size_bytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I32:
                    self.kudu_mutation_buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.kudu_error_buffer_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.hms_event_polling_interval_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.impala_build_version = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.authorization_factory_class = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRING:
                    self.ranger_service_type = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.ranger_app_id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.authorization_provider = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.BOOL:
                    self.recursively_list_partitions = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.query_event_hook_classes = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.I32:
                    self.query_event_hook_nthreads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.BOOL:
                    self.is_executor = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.BOOL:
                    self.is_coordinator = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.BOOL:
                    self.use_dedicated_coordinator_estimates = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.STRING:
                    self.blacklisted_dbs = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.STRING:
                    self.blacklisted_tables = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.BOOL:
                    self.unlock_zorder_sort = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRING:
                    self.min_privilege_set_for_show_stmts = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.I32:
                    self.num_expected_executors = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.I32:
                    self.num_check_authorization_threads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.BOOL:
                    self.use_customized_user_groups_mapper_for_ranger = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.BOOL:
                    self.enable_column_masking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.BOOL:
                    self.enable_insert_events = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.BOOL:
                    self.compact_catalog_topic = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.BOOL:
                    self.enable_incremental_metadata_updates = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.I64:
                    self.topic_update_tbl_max_wait_time_ms = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.I32:
                    self.catalog_max_lock_skipped_topic_updates = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.STRING:
                    self.saml2_keystore_path = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.STRING:
                    self.saml2_keystore_password = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.STRING:
                    self.saml2_private_key_password = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.STRING:
                    self.saml2_idp_metadata = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.STRING:
                    self.saml2_sp_entity_id = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.STRING:
                    self.saml2_sp_callback_url = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.BOOL:
                    self.saml2_want_assertations_signed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.BOOL:
                    self.saml2_sign_requests = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.I32:
                    self.saml2_callback_token_ttl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.STRING:
                    self.saml2_group_attribute_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.STRING:
                    self.saml2_group_filter = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.BOOL:
                    self.saml2_ee_test_mode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 84:
                if ftype == TType.STRING:
                    self.scratch_dirs = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.BOOL:
                    self.enable_row_filtering = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.I32:
                    self.max_wait_time_for_sync_ddl_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.BOOL:
                    self.allow_ordinals_in_having = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.BOOL:
                    self.start_hms_server = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.I32:
                    self.hms_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.BOOL:
                    self.fallback_to_hms_on_errors = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.BOOL:
                    self.enable_catalogd_hms_cache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.STRING:
                    self.kudu_sasl_protocol_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.I32:
                    self.warn_catalog_response_size_mb = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.I32:
                    self.warn_catalog_response_duration_s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.BOOL:
                    self.invalidate_hms_cache_on_ddls = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.STRING:
                    self.startup_filesystem_check_directories = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 97:
                if ftype == TType.BOOL:
                    self.hms_event_incremental_refresh_transactional_table = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.BOOL:
                    self.enable_shell_based_groups_mapping_support = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 99:
                if ftype == TType.BOOL:
                    self.auto_check_compaction = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.BOOL:
                    self.enable_sync_to_latest_event_on_ddls = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.BOOL:
                    self.pull_table_types_and_comments = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.BOOL:
                    self.use_hms_column_order_for_hbase_tables = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.STRING:
                    self.ignored_dir_prefix_list = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.BOOL:
                    self.enable_kudu_impala_hms_check = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.BOOL:
                    self.enable_reload_events = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.I32:
                    self.geospatial_library = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 107:
                if ftype == TType.DOUBLE:
                    self.query_cpu_count_divisor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 108:
                if ftype == TType.BOOL:
                    self.processing_cost_use_equal_expr_weight = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 109:
                if ftype == TType.I64:
                    self.min_processing_per_thread = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.BOOL:
                    self.skip_resource_checking_on_last_executor_group_set = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.I64:
                    self.thrift_rpc_max_message_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 112:
                if ftype == TType.STRING:
                    self.file_metadata_reload_properties = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 113:
                if ftype == TType.DOUBLE:
                    self.scan_range_cost_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 114:
                if ftype == TType.BOOL:
                    self.use_jamm_weigher = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 115:
                if ftype == TType.I32:
                    self.iceberg_reload_new_files_threshold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 116:
                if ftype == TType.BOOL:
                    self.enable_skipping_older_events = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 117:
                if ftype == TType.BOOL:
                    self.enable_json_scanner = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 118:
                if ftype == TType.DOUBLE:
                    self.max_filter_error_rate_from_full_scan = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 119:
                if ftype == TType.I32:
                    self.local_catalog_cache_concurrency_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.I32:
                    self.catalog_operation_log_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 121:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 122:
                if ftype == TType.BOOL:
                    self.allow_catalog_cache_op_from_masked_users = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 123:
                if ftype == TType.BOOL:
                    self.iceberg_allow_datafiles_in_table_location_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 124:
                if ftype == TType.I32:
                    self.topic_update_log_gc_frequency = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 125:
                if ftype == TType.STRING:
                    self.debug_actions = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 126:
                if ftype == TType.BOOL:
                    self.invalidate_metadata_on_event_processing_failure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 127:
                if ftype == TType.BOOL:
                    self.invalidate_global_metadata_on_event_processing_failure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 128:
                if ftype == TType.STRING:
                    self.inject_process_event_failure_event_types = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 129:
                if ftype == TType.DOUBLE:
                    self.inject_process_event_failure_ratio = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.BOOL:
                    self.enable_workload_mgmt = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 131:
                if ftype == TType.STRING:
                    self.query_log_table_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 132:
                if ftype == TType.DOUBLE:
                    self.query_cpu_root_factor = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 133:
                if ftype == TType.STRING:
                    self.default_skipped_hms_event_types = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 134:
                if ftype == TType.STRING:
                    self.common_hms_event_types = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 135:
                if ftype == TType.I32:
                    self.dbcp_max_conn_pool_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 136:
                if ftype == TType.I32:
                    self.dbcp_max_wait_millis_for_conn = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 137:
                if ftype == TType.I32:
                    self.dbcp_data_source_idle_timeout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 138:
                if ftype == TType.BOOL:
                    self.is_release_build = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 139:
                if ftype == TType.BOOL:
                    self.enable_catalogd_ha = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.BOOL:
                    self.iceberg_always_allow_merge_on_read_operations = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 141:
                if ftype == TType.I64:
                    self.data_stream_sender_buffer_size_used_by_planner = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 142:
                if ftype == TType.BOOL:
                    self.enable_reading_puffin_stats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 143:
                if ftype == TType.STRING:
                    self.injected_group_members_debug_only = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TBackendGflags')
        if self.load_auth_to_local_rules is not None:
            oprot.writeFieldBegin('load_auth_to_local_rules', TType.BOOL, 2)
            oprot.writeBool(self.load_auth_to_local_rules)
            oprot.writeFieldEnd()
        if self.non_impala_java_vlog is not None:
            oprot.writeFieldBegin('non_impala_java_vlog', TType.I32, 3)
            oprot.writeI32(self.non_impala_java_vlog)
            oprot.writeFieldEnd()
        if self.impala_log_lvl is not None:
            oprot.writeFieldBegin('impala_log_lvl', TType.I32, 4)
            oprot.writeI32(self.impala_log_lvl)
            oprot.writeFieldEnd()
        if self.inc_stats_size_limit_bytes is not None:
            oprot.writeFieldBegin('inc_stats_size_limit_bytes', TType.I64, 5)
            oprot.writeI64(self.inc_stats_size_limit_bytes)
            oprot.writeFieldEnd()
        if self.lineage_event_log_dir is not None:
            oprot.writeFieldBegin('lineage_event_log_dir', TType.STRING, 6)
            oprot.writeString(self.lineage_event_log_dir)
            oprot.writeFieldEnd()
        if self.load_catalog_in_background is not None:
            oprot.writeFieldBegin('load_catalog_in_background', TType.BOOL, 7)
            oprot.writeBool(self.load_catalog_in_background)
            oprot.writeFieldEnd()
        if self.num_metadata_loading_threads is not None:
            oprot.writeFieldBegin('num_metadata_loading_threads', TType.I32, 8)
            oprot.writeI32(self.num_metadata_loading_threads)
            oprot.writeFieldEnd()
        if self.principal is not None:
            oprot.writeFieldBegin('principal', TType.STRING, 9)
            oprot.writeString(self.principal)
            oprot.writeFieldEnd()
        if self.server_name is not None:
            oprot.writeFieldBegin('server_name', TType.STRING, 11)
            oprot.writeString(self.server_name)
            oprot.writeFieldEnd()
        if self.kudu_master_hosts is not None:
            oprot.writeFieldBegin('kudu_master_hosts', TType.STRING, 13)
            oprot.writeString(self.kudu_master_hosts)
            oprot.writeFieldEnd()
        if self.local_library_path is not None:
            oprot.writeFieldBegin('local_library_path', TType.STRING, 14)
            oprot.writeString(self.local_library_path)
            oprot.writeFieldEnd()
        if self.read_size is not None:
            oprot.writeFieldBegin('read_size', TType.I32, 15)
            oprot.writeI32(self.read_size)
            oprot.writeFieldEnd()
        if self.kudu_operation_timeout_ms is not None:
            oprot.writeFieldBegin('kudu_operation_timeout_ms', TType.I32, 16)
            oprot.writeI32(self.kudu_operation_timeout_ms)
            oprot.writeFieldEnd()
        if self.initial_hms_cnxn_timeout_s is not None:
            oprot.writeFieldBegin('initial_hms_cnxn_timeout_s', TType.I32, 17)
            oprot.writeI32(self.initial_hms_cnxn_timeout_s)
            oprot.writeFieldEnd()
        if self.enable_stats_extrapolation is not None:
            oprot.writeFieldBegin('enable_stats_extrapolation', TType.BOOL, 18)
            oprot.writeBool(self.enable_stats_extrapolation)
            oprot.writeFieldEnd()
        if self.max_hdfs_partitions_parallel_load is not None:
            oprot.writeFieldBegin('max_hdfs_partitions_parallel_load', TType.I32, 20)
            oprot.writeI32(self.max_hdfs_partitions_parallel_load)
            oprot.writeFieldEnd()
        if self.max_nonhdfs_partitions_parallel_load is not None:
            oprot.writeFieldBegin('max_nonhdfs_partitions_parallel_load', TType.I32, 21)
            oprot.writeI32(self.max_nonhdfs_partitions_parallel_load)
            oprot.writeFieldEnd()
        if self.reserved_words_version is not None:
            oprot.writeFieldBegin('reserved_words_version', TType.I32, 22)
            oprot.writeI32(self.reserved_words_version)
            oprot.writeFieldEnd()
        if self.max_filter_error_rate is not None:
            oprot.writeFieldBegin('max_filter_error_rate', TType.DOUBLE, 23)
            oprot.writeDouble(self.max_filter_error_rate)
            oprot.writeFieldEnd()
        if self.min_buffer_size is not None:
            oprot.writeFieldBegin('min_buffer_size', TType.I64, 24)
            oprot.writeI64(self.min_buffer_size)
            oprot.writeFieldEnd()
        if self.authorized_proxy_group_config is not None:
            oprot.writeFieldBegin('authorized_proxy_group_config', TType.STRING, 26)
            oprot.writeString(self.authorized_proxy_group_config)
            oprot.writeFieldEnd()
        if self.use_local_catalog is not None:
            oprot.writeFieldBegin('use_local_catalog', TType.BOOL, 27)
            oprot.writeBool(self.use_local_catalog)
            oprot.writeFieldEnd()
        if self.disable_catalog_data_ops_debug_only is not None:
            oprot.writeFieldBegin('disable_catalog_data_ops_debug_only', TType.BOOL, 28)
            oprot.writeBool(self.disable_catalog_data_ops_debug_only)
            oprot.writeFieldEnd()
        if self.local_catalog_cache_mb is not None:
            oprot.writeFieldBegin('local_catalog_cache_mb', TType.I32, 29)
            oprot.writeI32(self.local_catalog_cache_mb)
            oprot.writeFieldEnd()
        if self.local_catalog_cache_expiration_s is not None:
            oprot.writeFieldBegin('local_catalog_cache_expiration_s', TType.I32, 30)
            oprot.writeI32(self.local_catalog_cache_expiration_s)
            oprot.writeFieldEnd()
        if self.catalog_topic_mode is not None:
            oprot.writeFieldBegin('catalog_topic_mode', TType.STRING, 32)
            oprot.writeString(self.catalog_topic_mode)
            oprot.writeFieldEnd()
        if self.invalidate_tables_timeout_s is not None:
            oprot.writeFieldBegin('invalidate_tables_timeout_s', TType.I32, 33)
            oprot.writeI32(self.invalidate_tables_timeout_s)
            oprot.writeFieldEnd()
        if self.invalidate_tables_on_memory_pressure is not None:
            oprot.writeFieldBegin('invalidate_tables_on_memory_pressure', TType.BOOL, 34)
            oprot.writeBool(self.invalidate_tables_on_memory_pressure)
            oprot.writeFieldEnd()
        if self.invalidate_tables_gc_old_gen_full_threshold is not None:
            oprot.writeFieldBegin('invalidate_tables_gc_old_gen_full_threshold', TType.DOUBLE, 35)
            oprot.writeDouble(self.invalidate_tables_gc_old_gen_full_threshold)
            oprot.writeFieldEnd()
        if self.invalidate_tables_fraction_on_memory_pressure is not None:
            oprot.writeFieldBegin('invalidate_tables_fraction_on_memory_pressure', TType.DOUBLE, 36)
            oprot.writeDouble(self.invalidate_tables_fraction_on_memory_pressure)
            oprot.writeFieldEnd()
        if self.local_catalog_max_fetch_retries is not None:
            oprot.writeFieldBegin('local_catalog_max_fetch_retries', TType.I32, 37)
            oprot.writeI32(self.local_catalog_max_fetch_retries)
            oprot.writeFieldEnd()
        if self.kudu_scanner_thread_estimated_bytes_per_column is not None:
            oprot.writeFieldBegin('kudu_scanner_thread_estimated_bytes_per_column', TType.I64, 38)
            oprot.writeI64(self.kudu_scanner_thread_estimated_bytes_per_column)
            oprot.writeFieldEnd()
        if self.kudu_scanner_thread_max_estimated_bytes is not None:
            oprot.writeFieldBegin('kudu_scanner_thread_max_estimated_bytes', TType.I64, 39)
            oprot.writeI64(self.kudu_scanner_thread_max_estimated_bytes)
            oprot.writeFieldEnd()
        if self.catalog_max_parallel_partial_fetch_rpc is not None:
            oprot.writeFieldBegin('catalog_max_parallel_partial_fetch_rpc', TType.I32, 40)
            oprot.writeI32(self.catalog_max_parallel_partial_fetch_rpc)
            oprot.writeFieldEnd()
        if self.catalog_partial_fetch_rpc_queue_timeout_s is not None:
            oprot.writeFieldBegin('catalog_partial_fetch_rpc_queue_timeout_s', TType.I64, 41)
            oprot.writeI64(self.catalog_partial_fetch_rpc_queue_timeout_s)
            oprot.writeFieldEnd()
        if self.exchg_node_buffer_size_bytes is not None:
            oprot.writeFieldBegin('exchg_node_buffer_size_bytes', TType.I64, 42)
            oprot.writeI64(self.exchg_node_buffer_size_bytes)
            oprot.writeFieldEnd()
        if self.kudu_mutation_buffer_size is not None:
            oprot.writeFieldBegin('kudu_mutation_buffer_size', TType.I32, 43)
            oprot.writeI32(self.kudu_mutation_buffer_size)
            oprot.writeFieldEnd()
        if self.kudu_error_buffer_size is not None:
            oprot.writeFieldBegin('kudu_error_buffer_size', TType.I32, 44)
            oprot.writeI32(self.kudu_error_buffer_size)
            oprot.writeFieldEnd()
        if self.hms_event_polling_interval_s is not None:
            oprot.writeFieldBegin('hms_event_polling_interval_s', TType.I32, 45)
            oprot.writeI32(self.hms_event_polling_interval_s)
            oprot.writeFieldEnd()
        if self.impala_build_version is not None:
            oprot.writeFieldBegin('impala_build_version', TType.STRING, 46)
            oprot.writeString(self.impala_build_version)
            oprot.writeFieldEnd()
        if self.authorization_factory_class is not None:
            oprot.writeFieldBegin('authorization_factory_class', TType.STRING, 47)
            oprot.writeString(self.authorization_factory_class)
            oprot.writeFieldEnd()
        if self.ranger_service_type is not None:
            oprot.writeFieldBegin('ranger_service_type', TType.STRING, 49)
            oprot.writeString(self.ranger_service_type)
            oprot.writeFieldEnd()
        if self.ranger_app_id is not None:
            oprot.writeFieldBegin('ranger_app_id', TType.STRING, 50)
            oprot.writeString(self.ranger_app_id)
            oprot.writeFieldEnd()
        if self.authorization_provider is not None:
            oprot.writeFieldBegin('authorization_provider', TType.STRING, 51)
            oprot.writeString(self.authorization_provider)
            oprot.writeFieldEnd()
        if self.recursively_list_partitions is not None:
            oprot.writeFieldBegin('recursively_list_partitions', TType.BOOL, 52)
            oprot.writeBool(self.recursively_list_partitions)
            oprot.writeFieldEnd()
        if self.query_event_hook_classes is not None:
            oprot.writeFieldBegin('query_event_hook_classes', TType.STRING, 53)
            oprot.writeString(self.query_event_hook_classes)
            oprot.writeFieldEnd()
        if self.query_event_hook_nthreads is not None:
            oprot.writeFieldBegin('query_event_hook_nthreads', TType.I32, 54)
            oprot.writeI32(self.query_event_hook_nthreads)
            oprot.writeFieldEnd()
        if self.is_executor is not None:
            oprot.writeFieldBegin('is_executor', TType.BOOL, 55)
            oprot.writeBool(self.is_executor)
            oprot.writeFieldEnd()
        if self.is_coordinator is not None:
            oprot.writeFieldBegin('is_coordinator', TType.BOOL, 56)
            oprot.writeBool(self.is_coordinator)
            oprot.writeFieldEnd()
        if self.use_dedicated_coordinator_estimates is not None:
            oprot.writeFieldBegin('use_dedicated_coordinator_estimates', TType.BOOL, 57)
            oprot.writeBool(self.use_dedicated_coordinator_estimates)
            oprot.writeFieldEnd()
        if self.blacklisted_dbs is not None:
            oprot.writeFieldBegin('blacklisted_dbs', TType.STRING, 58)
            oprot.writeString(self.blacklisted_dbs)
            oprot.writeFieldEnd()
        if self.blacklisted_tables is not None:
            oprot.writeFieldBegin('blacklisted_tables', TType.STRING, 59)
            oprot.writeString(self.blacklisted_tables)
            oprot.writeFieldEnd()
        if self.unlock_zorder_sort is not None:
            oprot.writeFieldBegin('unlock_zorder_sort', TType.BOOL, 60)
            oprot.writeBool(self.unlock_zorder_sort)
            oprot.writeFieldEnd()
        if self.min_privilege_set_for_show_stmts is not None:
            oprot.writeFieldBegin('min_privilege_set_for_show_stmts', TType.STRING, 61)
            oprot.writeString(self.min_privilege_set_for_show_stmts)
            oprot.writeFieldEnd()
        if self.num_expected_executors is not None:
            oprot.writeFieldBegin('num_expected_executors', TType.I32, 63)
            oprot.writeI32(self.num_expected_executors)
            oprot.writeFieldEnd()
        if self.num_check_authorization_threads is not None:
            oprot.writeFieldBegin('num_check_authorization_threads', TType.I32, 64)
            oprot.writeI32(self.num_check_authorization_threads)
            oprot.writeFieldEnd()
        if self.use_customized_user_groups_mapper_for_ranger is not None:
            oprot.writeFieldBegin('use_customized_user_groups_mapper_for_ranger', TType.BOOL, 65)
            oprot.writeBool(self.use_customized_user_groups_mapper_for_ranger)
            oprot.writeFieldEnd()
        if self.enable_column_masking is not None:
            oprot.writeFieldBegin('enable_column_masking', TType.BOOL, 66)
            oprot.writeBool(self.enable_column_masking)
            oprot.writeFieldEnd()
        if self.enable_insert_events is not None:
            oprot.writeFieldBegin('enable_insert_events', TType.BOOL, 67)
            oprot.writeBool(self.enable_insert_events)
            oprot.writeFieldEnd()
        if self.compact_catalog_topic is not None:
            oprot.writeFieldBegin('compact_catalog_topic', TType.BOOL, 68)
            oprot.writeBool(self.compact_catalog_topic)
            oprot.writeFieldEnd()
        if self.enable_incremental_metadata_updates is not None:
            oprot.writeFieldBegin('enable_incremental_metadata_updates', TType.BOOL, 69)
            oprot.writeBool(self.enable_incremental_metadata_updates)
            oprot.writeFieldEnd()
        if self.topic_update_tbl_max_wait_time_ms is not None:
            oprot.writeFieldBegin('topic_update_tbl_max_wait_time_ms', TType.I64, 70)
            oprot.writeI64(self.topic_update_tbl_max_wait_time_ms)
            oprot.writeFieldEnd()
        if self.catalog_max_lock_skipped_topic_updates is not None:
            oprot.writeFieldBegin('catalog_max_lock_skipped_topic_updates', TType.I32, 71)
            oprot.writeI32(self.catalog_max_lock_skipped_topic_updates)
            oprot.writeFieldEnd()
        if self.saml2_keystore_path is not None:
            oprot.writeFieldBegin('saml2_keystore_path', TType.STRING, 72)
            oprot.writeString(self.saml2_keystore_path)
            oprot.writeFieldEnd()
        if self.saml2_keystore_password is not None:
            oprot.writeFieldBegin('saml2_keystore_password', TType.STRING, 73)
            oprot.writeString(self.saml2_keystore_password)
            oprot.writeFieldEnd()
        if self.saml2_private_key_password is not None:
            oprot.writeFieldBegin('saml2_private_key_password', TType.STRING, 74)
            oprot.writeString(self.saml2_private_key_password)
            oprot.writeFieldEnd()
        if self.saml2_idp_metadata is not None:
            oprot.writeFieldBegin('saml2_idp_metadata', TType.STRING, 75)
            oprot.writeString(self.saml2_idp_metadata)
            oprot.writeFieldEnd()
        if self.saml2_sp_entity_id is not None:
            oprot.writeFieldBegin('saml2_sp_entity_id', TType.STRING, 76)
            oprot.writeString(self.saml2_sp_entity_id)
            oprot.writeFieldEnd()
        if self.saml2_sp_callback_url is not None:
            oprot.writeFieldBegin('saml2_sp_callback_url', TType.STRING, 77)
            oprot.writeString(self.saml2_sp_callback_url)
            oprot.writeFieldEnd()
        if self.saml2_want_assertations_signed is not None:
            oprot.writeFieldBegin('saml2_want_assertations_signed', TType.BOOL, 78)
            oprot.writeBool(self.saml2_want_assertations_signed)
            oprot.writeFieldEnd()
        if self.saml2_sign_requests is not None:
            oprot.writeFieldBegin('saml2_sign_requests', TType.BOOL, 79)
            oprot.writeBool(self.saml2_sign_requests)
            oprot.writeFieldEnd()
        if self.saml2_callback_token_ttl is not None:
            oprot.writeFieldBegin('saml2_callback_token_ttl', TType.I32, 80)
            oprot.writeI32(self.saml2_callback_token_ttl)
            oprot.writeFieldEnd()
        if self.saml2_group_attribute_name is not None:
            oprot.writeFieldBegin('saml2_group_attribute_name', TType.STRING, 81)
            oprot.writeString(self.saml2_group_attribute_name)
            oprot.writeFieldEnd()
        if self.saml2_group_filter is not None:
            oprot.writeFieldBegin('saml2_group_filter', TType.STRING, 82)
            oprot.writeString(self.saml2_group_filter)
            oprot.writeFieldEnd()
        if self.saml2_ee_test_mode is not None:
            oprot.writeFieldBegin('saml2_ee_test_mode', TType.BOOL, 83)
            oprot.writeBool(self.saml2_ee_test_mode)
            oprot.writeFieldEnd()
        if self.scratch_dirs is not None:
            oprot.writeFieldBegin('scratch_dirs', TType.STRING, 84)
            oprot.writeString(self.scratch_dirs)
            oprot.writeFieldEnd()
        if self.enable_row_filtering is not None:
            oprot.writeFieldBegin('enable_row_filtering', TType.BOOL, 85)
            oprot.writeBool(self.enable_row_filtering)
            oprot.writeFieldEnd()
        if self.max_wait_time_for_sync_ddl_s is not None:
            oprot.writeFieldBegin('max_wait_time_for_sync_ddl_s', TType.I32, 86)
            oprot.writeI32(self.max_wait_time_for_sync_ddl_s)
            oprot.writeFieldEnd()
        if self.allow_ordinals_in_having is not None:
            oprot.writeFieldBegin('allow_ordinals_in_having', TType.BOOL, 87)
            oprot.writeBool(self.allow_ordinals_in_having)
            oprot.writeFieldEnd()
        if self.start_hms_server is not None:
            oprot.writeFieldBegin('start_hms_server', TType.BOOL, 88)
            oprot.writeBool(self.start_hms_server)
            oprot.writeFieldEnd()
        if self.hms_port is not None:
            oprot.writeFieldBegin('hms_port', TType.I32, 89)
            oprot.writeI32(self.hms_port)
            oprot.writeFieldEnd()
        if self.fallback_to_hms_on_errors is not None:
            oprot.writeFieldBegin('fallback_to_hms_on_errors', TType.BOOL, 90)
            oprot.writeBool(self.fallback_to_hms_on_errors)
            oprot.writeFieldEnd()
        if self.enable_catalogd_hms_cache is not None:
            oprot.writeFieldBegin('enable_catalogd_hms_cache', TType.BOOL, 91)
            oprot.writeBool(self.enable_catalogd_hms_cache)
            oprot.writeFieldEnd()
        if self.kudu_sasl_protocol_name is not None:
            oprot.writeFieldBegin('kudu_sasl_protocol_name', TType.STRING, 92)
            oprot.writeString(self.kudu_sasl_protocol_name)
            oprot.writeFieldEnd()
        if self.warn_catalog_response_size_mb is not None:
            oprot.writeFieldBegin('warn_catalog_response_size_mb', TType.I32, 93)
            oprot.writeI32(self.warn_catalog_response_size_mb)
            oprot.writeFieldEnd()
        if self.warn_catalog_response_duration_s is not None:
            oprot.writeFieldBegin('warn_catalog_response_duration_s', TType.I32, 94)
            oprot.writeI32(self.warn_catalog_response_duration_s)
            oprot.writeFieldEnd()
        if self.invalidate_hms_cache_on_ddls is not None:
            oprot.writeFieldBegin('invalidate_hms_cache_on_ddls', TType.BOOL, 95)
            oprot.writeBool(self.invalidate_hms_cache_on_ddls)
            oprot.writeFieldEnd()
        if self.startup_filesystem_check_directories is not None:
            oprot.writeFieldBegin('startup_filesystem_check_directories', TType.STRING, 96)
            oprot.writeString(self.startup_filesystem_check_directories)
            oprot.writeFieldEnd()
        if self.hms_event_incremental_refresh_transactional_table is not None:
            oprot.writeFieldBegin('hms_event_incremental_refresh_transactional_table', TType.BOOL, 97)
            oprot.writeBool(self.hms_event_incremental_refresh_transactional_table)
            oprot.writeFieldEnd()
        if self.enable_shell_based_groups_mapping_support is not None:
            oprot.writeFieldBegin('enable_shell_based_groups_mapping_support', TType.BOOL, 98)
            oprot.writeBool(self.enable_shell_based_groups_mapping_support)
            oprot.writeFieldEnd()
        if self.auto_check_compaction is not None:
            oprot.writeFieldBegin('auto_check_compaction', TType.BOOL, 99)
            oprot.writeBool(self.auto_check_compaction)
            oprot.writeFieldEnd()
        if self.enable_sync_to_latest_event_on_ddls is not None:
            oprot.writeFieldBegin('enable_sync_to_latest_event_on_ddls', TType.BOOL, 100)
            oprot.writeBool(self.enable_sync_to_latest_event_on_ddls)
            oprot.writeFieldEnd()
        if self.pull_table_types_and_comments is not None:
            oprot.writeFieldBegin('pull_table_types_and_comments', TType.BOOL, 101)
            oprot.writeBool(self.pull_table_types_and_comments)
            oprot.writeFieldEnd()
        if self.use_hms_column_order_for_hbase_tables is not None:
            oprot.writeFieldBegin('use_hms_column_order_for_hbase_tables', TType.BOOL, 102)
            oprot.writeBool(self.use_hms_column_order_for_hbase_tables)
            oprot.writeFieldEnd()
        if self.ignored_dir_prefix_list is not None:
            oprot.writeFieldBegin('ignored_dir_prefix_list', TType.STRING, 103)
            oprot.writeString(self.ignored_dir_prefix_list)
            oprot.writeFieldEnd()
        if self.enable_kudu_impala_hms_check is not None:
            oprot.writeFieldBegin('enable_kudu_impala_hms_check', TType.BOOL, 104)
            oprot.writeBool(self.enable_kudu_impala_hms_check)
            oprot.writeFieldEnd()
        if self.enable_reload_events is not None:
            oprot.writeFieldBegin('enable_reload_events', TType.BOOL, 105)
            oprot.writeBool(self.enable_reload_events)
            oprot.writeFieldEnd()
        if self.geospatial_library is not None:
            oprot.writeFieldBegin('geospatial_library', TType.I32, 106)
            oprot.writeI32(self.geospatial_library)
            oprot.writeFieldEnd()
        if self.query_cpu_count_divisor is not None:
            oprot.writeFieldBegin('query_cpu_count_divisor', TType.DOUBLE, 107)
            oprot.writeDouble(self.query_cpu_count_divisor)
            oprot.writeFieldEnd()
        if self.processing_cost_use_equal_expr_weight is not None:
            oprot.writeFieldBegin('processing_cost_use_equal_expr_weight', TType.BOOL, 108)
            oprot.writeBool(self.processing_cost_use_equal_expr_weight)
            oprot.writeFieldEnd()
        if self.min_processing_per_thread is not None:
            oprot.writeFieldBegin('min_processing_per_thread', TType.I64, 109)
            oprot.writeI64(self.min_processing_per_thread)
            oprot.writeFieldEnd()
        if self.skip_resource_checking_on_last_executor_group_set is not None:
            oprot.writeFieldBegin('skip_resource_checking_on_last_executor_group_set', TType.BOOL, 110)
            oprot.writeBool(self.skip_resource_checking_on_last_executor_group_set)
            oprot.writeFieldEnd()
        if self.thrift_rpc_max_message_size is not None:
            oprot.writeFieldBegin('thrift_rpc_max_message_size', TType.I64, 111)
            oprot.writeI64(self.thrift_rpc_max_message_size)
            oprot.writeFieldEnd()
        if self.file_metadata_reload_properties is not None:
            oprot.writeFieldBegin('file_metadata_reload_properties', TType.STRING, 112)
            oprot.writeString(self.file_metadata_reload_properties)
            oprot.writeFieldEnd()
        if self.scan_range_cost_factor is not None:
            oprot.writeFieldBegin('scan_range_cost_factor', TType.DOUBLE, 113)
            oprot.writeDouble(self.scan_range_cost_factor)
            oprot.writeFieldEnd()
        if self.use_jamm_weigher is not None:
            oprot.writeFieldBegin('use_jamm_weigher', TType.BOOL, 114)
            oprot.writeBool(self.use_jamm_weigher)
            oprot.writeFieldEnd()
        if self.iceberg_reload_new_files_threshold is not None:
            oprot.writeFieldBegin('iceberg_reload_new_files_threshold', TType.I32, 115)
            oprot.writeI32(self.iceberg_reload_new_files_threshold)
            oprot.writeFieldEnd()
        if self.enable_skipping_older_events is not None:
            oprot.writeFieldBegin('enable_skipping_older_events', TType.BOOL, 116)
            oprot.writeBool(self.enable_skipping_older_events)
            oprot.writeFieldEnd()
        if self.enable_json_scanner is not None:
            oprot.writeFieldBegin('enable_json_scanner', TType.BOOL, 117)
            oprot.writeBool(self.enable_json_scanner)
            oprot.writeFieldEnd()
        if self.max_filter_error_rate_from_full_scan is not None:
            oprot.writeFieldBegin('max_filter_error_rate_from_full_scan', TType.DOUBLE, 118)
            oprot.writeDouble(self.max_filter_error_rate_from_full_scan)
            oprot.writeFieldEnd()
        if self.local_catalog_cache_concurrency_level is not None:
            oprot.writeFieldBegin('local_catalog_cache_concurrency_level', TType.I32, 119)
            oprot.writeI32(self.local_catalog_cache_concurrency_level)
            oprot.writeFieldEnd()
        if self.catalog_operation_log_size is not None:
            oprot.writeFieldBegin('catalog_operation_log_size', TType.I32, 120)
            oprot.writeI32(self.catalog_operation_log_size)
            oprot.writeFieldEnd()
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 121)
            oprot.writeString(self.hostname)
            oprot.writeFieldEnd()
        if self.allow_catalog_cache_op_from_masked_users is not None:
            oprot.writeFieldBegin('allow_catalog_cache_op_from_masked_users', TType.BOOL, 122)
            oprot.writeBool(self.allow_catalog_cache_op_from_masked_users)
            oprot.writeFieldEnd()
        if self.iceberg_allow_datafiles_in_table_location_only is not None:
            oprot.writeFieldBegin('iceberg_allow_datafiles_in_table_location_only', TType.BOOL, 123)
            oprot.writeBool(self.iceberg_allow_datafiles_in_table_location_only)
            oprot.writeFieldEnd()
        if self.topic_update_log_gc_frequency is not None:
            oprot.writeFieldBegin('topic_update_log_gc_frequency', TType.I32, 124)
            oprot.writeI32(self.topic_update_log_gc_frequency)
            oprot.writeFieldEnd()
        if self.debug_actions is not None:
            oprot.writeFieldBegin('debug_actions', TType.STRING, 125)
            oprot.writeString(self.debug_actions)
            oprot.writeFieldEnd()
        if self.invalidate_metadata_on_event_processing_failure is not None:
            oprot.writeFieldBegin('invalidate_metadata_on_event_processing_failure', TType.BOOL, 126)
            oprot.writeBool(self.invalidate_metadata_on_event_processing_failure)
            oprot.writeFieldEnd()
        if self.invalidate_global_metadata_on_event_processing_failure is not None:
            oprot.writeFieldBegin('invalidate_global_metadata_on_event_processing_failure', TType.BOOL, 127)
            oprot.writeBool(self.invalidate_global_metadata_on_event_processing_failure)
            oprot.writeFieldEnd()
        if self.inject_process_event_failure_event_types is not None:
            oprot.writeFieldBegin('inject_process_event_failure_event_types', TType.STRING, 128)
            oprot.writeString(self.inject_process_event_failure_event_types)
            oprot.writeFieldEnd()
        if self.inject_process_event_failure_ratio is not None:
            oprot.writeFieldBegin('inject_process_event_failure_ratio', TType.DOUBLE, 129)
            oprot.writeDouble(self.inject_process_event_failure_ratio)
            oprot.writeFieldEnd()
        if self.enable_workload_mgmt is not None:
            oprot.writeFieldBegin('enable_workload_mgmt', TType.BOOL, 130)
            oprot.writeBool(self.enable_workload_mgmt)
            oprot.writeFieldEnd()
        if self.query_log_table_name is not None:
            oprot.writeFieldBegin('query_log_table_name', TType.STRING, 131)
            oprot.writeString(self.query_log_table_name)
            oprot.writeFieldEnd()
        if self.query_cpu_root_factor is not None:
            oprot.writeFieldBegin('query_cpu_root_factor', TType.DOUBLE, 132)
            oprot.writeDouble(self.query_cpu_root_factor)
            oprot.writeFieldEnd()
        if self.default_skipped_hms_event_types is not None:
            oprot.writeFieldBegin('default_skipped_hms_event_types', TType.STRING, 133)
            oprot.writeString(self.default_skipped_hms_event_types)
            oprot.writeFieldEnd()
        if self.common_hms_event_types is not None:
            oprot.writeFieldBegin('common_hms_event_types', TType.STRING, 134)
            oprot.writeString(self.common_hms_event_types)
            oprot.writeFieldEnd()
        if self.dbcp_max_conn_pool_size is not None:
            oprot.writeFieldBegin('dbcp_max_conn_pool_size', TType.I32, 135)
            oprot.writeI32(self.dbcp_max_conn_pool_size)
            oprot.writeFieldEnd()
        if self.dbcp_max_wait_millis_for_conn is not None:
            oprot.writeFieldBegin('dbcp_max_wait_millis_for_conn', TType.I32, 136)
            oprot.writeI32(self.dbcp_max_wait_millis_for_conn)
            oprot.writeFieldEnd()
        if self.dbcp_data_source_idle_timeout is not None:
            oprot.writeFieldBegin('dbcp_data_source_idle_timeout', TType.I32, 137)
            oprot.writeI32(self.dbcp_data_source_idle_timeout)
            oprot.writeFieldEnd()
        if self.is_release_build is not None:
            oprot.writeFieldBegin('is_release_build', TType.BOOL, 138)
            oprot.writeBool(self.is_release_build)
            oprot.writeFieldEnd()
        if self.enable_catalogd_ha is not None:
            oprot.writeFieldBegin('enable_catalogd_ha', TType.BOOL, 139)
            oprot.writeBool(self.enable_catalogd_ha)
            oprot.writeFieldEnd()
        if self.iceberg_always_allow_merge_on_read_operations is not None:
            oprot.writeFieldBegin('iceberg_always_allow_merge_on_read_operations', TType.BOOL, 140)
            oprot.writeBool(self.iceberg_always_allow_merge_on_read_operations)
            oprot.writeFieldEnd()
        if self.data_stream_sender_buffer_size_used_by_planner is not None:
            oprot.writeFieldBegin('data_stream_sender_buffer_size_used_by_planner', TType.I64, 141)
            oprot.writeI64(self.data_stream_sender_buffer_size_used_by_planner)
            oprot.writeFieldEnd()
        if self.enable_reading_puffin_stats is not None:
            oprot.writeFieldBegin('enable_reading_puffin_stats', TType.BOOL, 142)
            oprot.writeBool(self.enable_reading_puffin_stats)
            oprot.writeFieldEnd()
        if self.injected_group_members_debug_only is not None:
            oprot.writeFieldBegin('injected_group_members_debug_only', TType.STRING, 143)
            oprot.writeString(self.injected_group_members_debug_only)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.load_auth_to_local_rules is None:
            raise TProtocolException(message='Required field load_auth_to_local_rules is unset!')
        if self.non_impala_java_vlog is None:
            raise TProtocolException(message='Required field non_impala_java_vlog is unset!')
        if self.impala_log_lvl is None:
            raise TProtocolException(message='Required field impala_log_lvl is unset!')
        if self.inc_stats_size_limit_bytes is None:
            raise TProtocolException(message='Required field inc_stats_size_limit_bytes is unset!')
        if self.lineage_event_log_dir is None:
            raise TProtocolException(message='Required field lineage_event_log_dir is unset!')
        if self.load_catalog_in_background is None:
            raise TProtocolException(message='Required field load_catalog_in_background is unset!')
        if self.num_metadata_loading_threads is None:
            raise TProtocolException(message='Required field num_metadata_loading_threads is unset!')
        if self.principal is None:
            raise TProtocolException(message='Required field principal is unset!')
        if self.server_name is None:
            raise TProtocolException(message='Required field server_name is unset!')
        if self.kudu_master_hosts is None:
            raise TProtocolException(message='Required field kudu_master_hosts is unset!')
        if self.local_library_path is None:
            raise TProtocolException(message='Required field local_library_path is unset!')
        if self.read_size is None:
            raise TProtocolException(message='Required field read_size is unset!')
        if self.kudu_operation_timeout_ms is None:
            raise TProtocolException(message='Required field kudu_operation_timeout_ms is unset!')
        if self.initial_hms_cnxn_timeout_s is None:
            raise TProtocolException(message='Required field initial_hms_cnxn_timeout_s is unset!')
        if self.enable_stats_extrapolation is None:
            raise TProtocolException(message='Required field enable_stats_extrapolation is unset!')
        if self.max_hdfs_partitions_parallel_load is None:
            raise TProtocolException(message='Required field max_hdfs_partitions_parallel_load is unset!')
        if self.max_nonhdfs_partitions_parallel_load is None:
            raise TProtocolException(message='Required field max_nonhdfs_partitions_parallel_load is unset!')
        if self.reserved_words_version is None:
            raise TProtocolException(message='Required field reserved_words_version is unset!')
        if self.max_filter_error_rate is None:
            raise TProtocolException(message='Required field max_filter_error_rate is unset!')
        if self.min_buffer_size is None:
            raise TProtocolException(message='Required field min_buffer_size is unset!')
        if self.authorized_proxy_group_config is None:
            raise TProtocolException(message='Required field authorized_proxy_group_config is unset!')
        if self.use_local_catalog is None:
            raise TProtocolException(message='Required field use_local_catalog is unset!')
        if self.disable_catalog_data_ops_debug_only is None:
            raise TProtocolException(message='Required field disable_catalog_data_ops_debug_only is unset!')
        if self.local_catalog_cache_mb is None:
            raise TProtocolException(message='Required field local_catalog_cache_mb is unset!')
        if self.local_catalog_cache_expiration_s is None:
            raise TProtocolException(message='Required field local_catalog_cache_expiration_s is unset!')
        if self.catalog_topic_mode is None:
            raise TProtocolException(message='Required field catalog_topic_mode is unset!')
        if self.invalidate_tables_timeout_s is None:
            raise TProtocolException(message='Required field invalidate_tables_timeout_s is unset!')
        if self.invalidate_tables_on_memory_pressure is None:
            raise TProtocolException(message='Required field invalidate_tables_on_memory_pressure is unset!')
        if self.invalidate_tables_gc_old_gen_full_threshold is None:
            raise TProtocolException(message='Required field invalidate_tables_gc_old_gen_full_threshold is unset!')
        if self.invalidate_tables_fraction_on_memory_pressure is None:
            raise TProtocolException(message='Required field invalidate_tables_fraction_on_memory_pressure is unset!')
        if self.local_catalog_max_fetch_retries is None:
            raise TProtocolException(message='Required field local_catalog_max_fetch_retries is unset!')
        if self.kudu_scanner_thread_estimated_bytes_per_column is None:
            raise TProtocolException(message='Required field kudu_scanner_thread_estimated_bytes_per_column is unset!')
        if self.kudu_scanner_thread_max_estimated_bytes is None:
            raise TProtocolException(message='Required field kudu_scanner_thread_max_estimated_bytes is unset!')
        if self.catalog_max_parallel_partial_fetch_rpc is None:
            raise TProtocolException(message='Required field catalog_max_parallel_partial_fetch_rpc is unset!')
        if self.catalog_partial_fetch_rpc_queue_timeout_s is None:
            raise TProtocolException(message='Required field catalog_partial_fetch_rpc_queue_timeout_s is unset!')
        if self.exchg_node_buffer_size_bytes is None:
            raise TProtocolException(message='Required field exchg_node_buffer_size_bytes is unset!')
        if self.kudu_mutation_buffer_size is None:
            raise TProtocolException(message='Required field kudu_mutation_buffer_size is unset!')
        if self.kudu_error_buffer_size is None:
            raise TProtocolException(message='Required field kudu_error_buffer_size is unset!')
        if self.hms_event_polling_interval_s is None:
            raise TProtocolException(message='Required field hms_event_polling_interval_s is unset!')
        if self.impala_build_version is None:
            raise TProtocolException(message='Required field impala_build_version is unset!')
        if self.authorization_factory_class is None:
            raise TProtocolException(message='Required field authorization_factory_class is unset!')
        if self.ranger_service_type is None:
            raise TProtocolException(message='Required field ranger_service_type is unset!')
        if self.ranger_app_id is None:
            raise TProtocolException(message='Required field ranger_app_id is unset!')
        if self.authorization_provider is None:
            raise TProtocolException(message='Required field authorization_provider is unset!')
        if self.recursively_list_partitions is None:
            raise TProtocolException(message='Required field recursively_list_partitions is unset!')
        if self.query_event_hook_classes is None:
            raise TProtocolException(message='Required field query_event_hook_classes is unset!')
        if self.query_event_hook_nthreads is None:
            raise TProtocolException(message='Required field query_event_hook_nthreads is unset!')
        if self.is_executor is None:
            raise TProtocolException(message='Required field is_executor is unset!')
        if self.is_coordinator is None:
            raise TProtocolException(message='Required field is_coordinator is unset!')
        if self.use_dedicated_coordinator_estimates is None:
            raise TProtocolException(message='Required field use_dedicated_coordinator_estimates is unset!')
        if self.blacklisted_dbs is None:
            raise TProtocolException(message='Required field blacklisted_dbs is unset!')
        if self.blacklisted_tables is None:
            raise TProtocolException(message='Required field blacklisted_tables is unset!')
        if self.unlock_zorder_sort is None:
            raise TProtocolException(message='Required field unlock_zorder_sort is unset!')
        if self.min_privilege_set_for_show_stmts is None:
            raise TProtocolException(message='Required field min_privilege_set_for_show_stmts is unset!')
        if self.num_expected_executors is None:
            raise TProtocolException(message='Required field num_expected_executors is unset!')
        if self.num_check_authorization_threads is None:
            raise TProtocolException(message='Required field num_check_authorization_threads is unset!')
        if self.use_customized_user_groups_mapper_for_ranger is None:
            raise TProtocolException(message='Required field use_customized_user_groups_mapper_for_ranger is unset!')
        if self.enable_column_masking is None:
            raise TProtocolException(message='Required field enable_column_masking is unset!')
        if self.enable_insert_events is None:
            raise TProtocolException(message='Required field enable_insert_events is unset!')
        if self.compact_catalog_topic is None:
            raise TProtocolException(message='Required field compact_catalog_topic is unset!')
        if self.enable_incremental_metadata_updates is None:
            raise TProtocolException(message='Required field enable_incremental_metadata_updates is unset!')
        if self.topic_update_tbl_max_wait_time_ms is None:
            raise TProtocolException(message='Required field topic_update_tbl_max_wait_time_ms is unset!')
        if self.catalog_max_lock_skipped_topic_updates is None:
            raise TProtocolException(message='Required field catalog_max_lock_skipped_topic_updates is unset!')
        if self.saml2_keystore_path is None:
            raise TProtocolException(message='Required field saml2_keystore_path is unset!')
        if self.saml2_keystore_password is None:
            raise TProtocolException(message='Required field saml2_keystore_password is unset!')
        if self.saml2_private_key_password is None:
            raise TProtocolException(message='Required field saml2_private_key_password is unset!')
        if self.saml2_idp_metadata is None:
            raise TProtocolException(message='Required field saml2_idp_metadata is unset!')
        if self.saml2_sp_entity_id is None:
            raise TProtocolException(message='Required field saml2_sp_entity_id is unset!')
        if self.saml2_sp_callback_url is None:
            raise TProtocolException(message='Required field saml2_sp_callback_url is unset!')
        if self.saml2_want_assertations_signed is None:
            raise TProtocolException(message='Required field saml2_want_assertations_signed is unset!')
        if self.saml2_sign_requests is None:
            raise TProtocolException(message='Required field saml2_sign_requests is unset!')
        if self.saml2_callback_token_ttl is None:
            raise TProtocolException(message='Required field saml2_callback_token_ttl is unset!')
        if self.saml2_group_attribute_name is None:
            raise TProtocolException(message='Required field saml2_group_attribute_name is unset!')
        if self.saml2_group_filter is None:
            raise TProtocolException(message='Required field saml2_group_filter is unset!')
        if self.saml2_ee_test_mode is None:
            raise TProtocolException(message='Required field saml2_ee_test_mode is unset!')
        if self.scratch_dirs is None:
            raise TProtocolException(message='Required field scratch_dirs is unset!')
        if self.enable_row_filtering is None:
            raise TProtocolException(message='Required field enable_row_filtering is unset!')
        if self.max_wait_time_for_sync_ddl_s is None:
            raise TProtocolException(message='Required field max_wait_time_for_sync_ddl_s is unset!')
        if self.allow_ordinals_in_having is None:
            raise TProtocolException(message='Required field allow_ordinals_in_having is unset!')
        if self.start_hms_server is None:
            raise TProtocolException(message='Required field start_hms_server is unset!')
        if self.hms_port is None:
            raise TProtocolException(message='Required field hms_port is unset!')
        if self.fallback_to_hms_on_errors is None:
            raise TProtocolException(message='Required field fallback_to_hms_on_errors is unset!')
        if self.enable_catalogd_hms_cache is None:
            raise TProtocolException(message='Required field enable_catalogd_hms_cache is unset!')
        if self.kudu_sasl_protocol_name is None:
            raise TProtocolException(message='Required field kudu_sasl_protocol_name is unset!')
        if self.warn_catalog_response_size_mb is None:
            raise TProtocolException(message='Required field warn_catalog_response_size_mb is unset!')
        if self.warn_catalog_response_duration_s is None:
            raise TProtocolException(message='Required field warn_catalog_response_duration_s is unset!')
        if self.invalidate_hms_cache_on_ddls is None:
            raise TProtocolException(message='Required field invalidate_hms_cache_on_ddls is unset!')
        if self.startup_filesystem_check_directories is None:
            raise TProtocolException(message='Required field startup_filesystem_check_directories is unset!')
        if self.hms_event_incremental_refresh_transactional_table is None:
            raise TProtocolException(message='Required field hms_event_incremental_refresh_transactional_table is unset!')
        if self.enable_shell_based_groups_mapping_support is None:
            raise TProtocolException(message='Required field enable_shell_based_groups_mapping_support is unset!')
        if self.auto_check_compaction is None:
            raise TProtocolException(message='Required field auto_check_compaction is unset!')
        if self.enable_sync_to_latest_event_on_ddls is None:
            raise TProtocolException(message='Required field enable_sync_to_latest_event_on_ddls is unset!')
        if self.pull_table_types_and_comments is None:
            raise TProtocolException(message='Required field pull_table_types_and_comments is unset!')
        if self.use_hms_column_order_for_hbase_tables is None:
            raise TProtocolException(message='Required field use_hms_column_order_for_hbase_tables is unset!')
        if self.ignored_dir_prefix_list is None:
            raise TProtocolException(message='Required field ignored_dir_prefix_list is unset!')
        if self.enable_kudu_impala_hms_check is None:
            raise TProtocolException(message='Required field enable_kudu_impala_hms_check is unset!')
        if self.enable_reload_events is None:
            raise TProtocolException(message='Required field enable_reload_events is unset!')
        if self.geospatial_library is None:
            raise TProtocolException(message='Required field geospatial_library is unset!')
        if self.query_cpu_count_divisor is None:
            raise TProtocolException(message='Required field query_cpu_count_divisor is unset!')
        if self.processing_cost_use_equal_expr_weight is None:
            raise TProtocolException(message='Required field processing_cost_use_equal_expr_weight is unset!')
        if self.min_processing_per_thread is None:
            raise TProtocolException(message='Required field min_processing_per_thread is unset!')
        if self.skip_resource_checking_on_last_executor_group_set is None:
            raise TProtocolException(message='Required field skip_resource_checking_on_last_executor_group_set is unset!')
        if self.thrift_rpc_max_message_size is None:
            raise TProtocolException(message='Required field thrift_rpc_max_message_size is unset!')
        if self.file_metadata_reload_properties is None:
            raise TProtocolException(message='Required field file_metadata_reload_properties is unset!')
        if self.scan_range_cost_factor is None:
            raise TProtocolException(message='Required field scan_range_cost_factor is unset!')
        if self.use_jamm_weigher is None:
            raise TProtocolException(message='Required field use_jamm_weigher is unset!')
        if self.iceberg_reload_new_files_threshold is None:
            raise TProtocolException(message='Required field iceberg_reload_new_files_threshold is unset!')
        if self.enable_skipping_older_events is None:
            raise TProtocolException(message='Required field enable_skipping_older_events is unset!')
        if self.enable_json_scanner is None:
            raise TProtocolException(message='Required field enable_json_scanner is unset!')
        if self.max_filter_error_rate_from_full_scan is None:
            raise TProtocolException(message='Required field max_filter_error_rate_from_full_scan is unset!')
        if self.local_catalog_cache_concurrency_level is None:
            raise TProtocolException(message='Required field local_catalog_cache_concurrency_level is unset!')
        if self.catalog_operation_log_size is None:
            raise TProtocolException(message='Required field catalog_operation_log_size is unset!')
        if self.hostname is None:
            raise TProtocolException(message='Required field hostname is unset!')
        if self.allow_catalog_cache_op_from_masked_users is None:
            raise TProtocolException(message='Required field allow_catalog_cache_op_from_masked_users is unset!')
        if self.iceberg_allow_datafiles_in_table_location_only is None:
            raise TProtocolException(message='Required field iceberg_allow_datafiles_in_table_location_only is unset!')
        if self.topic_update_log_gc_frequency is None:
            raise TProtocolException(message='Required field topic_update_log_gc_frequency is unset!')
        if self.debug_actions is None:
            raise TProtocolException(message='Required field debug_actions is unset!')
        if self.invalidate_metadata_on_event_processing_failure is None:
            raise TProtocolException(message='Required field invalidate_metadata_on_event_processing_failure is unset!')
        if self.invalidate_global_metadata_on_event_processing_failure is None:
            raise TProtocolException(message='Required field invalidate_global_metadata_on_event_processing_failure is unset!')
        if self.inject_process_event_failure_event_types is None:
            raise TProtocolException(message='Required field inject_process_event_failure_event_types is unset!')
        if self.inject_process_event_failure_ratio is None:
            raise TProtocolException(message='Required field inject_process_event_failure_ratio is unset!')
        if self.enable_workload_mgmt is None:
            raise TProtocolException(message='Required field enable_workload_mgmt is unset!')
        if self.query_log_table_name is None:
            raise TProtocolException(message='Required field query_log_table_name is unset!')
        if self.query_cpu_root_factor is None:
            raise TProtocolException(message='Required field query_cpu_root_factor is unset!')
        if self.default_skipped_hms_event_types is None:
            raise TProtocolException(message='Required field default_skipped_hms_event_types is unset!')
        if self.common_hms_event_types is None:
            raise TProtocolException(message='Required field common_hms_event_types is unset!')
        if self.dbcp_max_conn_pool_size is None:
            raise TProtocolException(message='Required field dbcp_max_conn_pool_size is unset!')
        if self.dbcp_max_wait_millis_for_conn is None:
            raise TProtocolException(message='Required field dbcp_max_wait_millis_for_conn is unset!')
        if self.dbcp_data_source_idle_timeout is None:
            raise TProtocolException(message='Required field dbcp_data_source_idle_timeout is unset!')
        if self.is_release_build is None:
            raise TProtocolException(message='Required field is_release_build is unset!')
        if self.enable_catalogd_ha is None:
            raise TProtocolException(message='Required field enable_catalogd_ha is unset!')
        if self.iceberg_always_allow_merge_on_read_operations is None:
            raise TProtocolException(message='Required field iceberg_always_allow_merge_on_read_operations is unset!')
        if self.data_stream_sender_buffer_size_used_by_planner is None:
            raise TProtocolException(message='Required field data_stream_sender_buffer_size_used_by_planner is unset!')
        if self.enable_reading_puffin_stats is None:
            raise TProtocolException(message='Required field enable_reading_puffin_stats is unset!')
        if self.injected_group_members_debug_only is None:
            raise TProtocolException(message='Required field injected_group_members_debug_only is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TBackendGflags)
TBackendGflags.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.BOOL, 'load_auth_to_local_rules', None, None, ),  # 2
    (3, TType.I32, 'non_impala_java_vlog', None, None, ),  # 3
    (4, TType.I32, 'impala_log_lvl', None, None, ),  # 4
    (5, TType.I64, 'inc_stats_size_limit_bytes', None, None, ),  # 5
    (6, TType.STRING, 'lineage_event_log_dir', None, None, ),  # 6
    (7, TType.BOOL, 'load_catalog_in_background', None, None, ),  # 7
    (8, TType.I32, 'num_metadata_loading_threads', None, None, ),  # 8
    (9, TType.STRING, 'principal', None, None, ),  # 9
    None,  # 10
    (11, TType.STRING, 'server_name', None, None, ),  # 11
    None,  # 12
    (13, TType.STRING, 'kudu_master_hosts', None, None, ),  # 13
    (14, TType.STRING, 'local_library_path', None, None, ),  # 14
    (15, TType.I32, 'read_size', None, None, ),  # 15
    (16, TType.I32, 'kudu_operation_timeout_ms', None, None, ),  # 16
    (17, TType.I32, 'initial_hms_cnxn_timeout_s', None, None, ),  # 17
    (18, TType.BOOL, 'enable_stats_extrapolation', None, None, ),  # 18
    None,  # 19
    (20, TType.I32, 'max_hdfs_partitions_parallel_load', None, None, ),  # 20
    (21, TType.I32, 'max_nonhdfs_partitions_parallel_load', None, None, ),  # 21
    (22, TType.I32, 'reserved_words_version', None, None, ),  # 22
    (23, TType.DOUBLE, 'max_filter_error_rate', None, None, ),  # 23
    (24, TType.I64, 'min_buffer_size', None, None, ),  # 24
    None,  # 25
    (26, TType.STRING, 'authorized_proxy_group_config', None, None, ),  # 26
    (27, TType.BOOL, 'use_local_catalog', None, None, ),  # 27
    (28, TType.BOOL, 'disable_catalog_data_ops_debug_only', None, None, ),  # 28
    (29, TType.I32, 'local_catalog_cache_mb', None, None, ),  # 29
    (30, TType.I32, 'local_catalog_cache_expiration_s', None, None, ),  # 30
    None,  # 31
    (32, TType.STRING, 'catalog_topic_mode', None, None, ),  # 32
    (33, TType.I32, 'invalidate_tables_timeout_s', None, None, ),  # 33
    (34, TType.BOOL, 'invalidate_tables_on_memory_pressure', None, None, ),  # 34
    (35, TType.DOUBLE, 'invalidate_tables_gc_old_gen_full_threshold', None, None, ),  # 35
    (36, TType.DOUBLE, 'invalidate_tables_fraction_on_memory_pressure', None, None, ),  # 36
    (37, TType.I32, 'local_catalog_max_fetch_retries', None, None, ),  # 37
    (38, TType.I64, 'kudu_scanner_thread_estimated_bytes_per_column', None, None, ),  # 38
    (39, TType.I64, 'kudu_scanner_thread_max_estimated_bytes', None, None, ),  # 39
    (40, TType.I32, 'catalog_max_parallel_partial_fetch_rpc', None, None, ),  # 40
    (41, TType.I64, 'catalog_partial_fetch_rpc_queue_timeout_s', None, None, ),  # 41
    (42, TType.I64, 'exchg_node_buffer_size_bytes', None, None, ),  # 42
    (43, TType.I32, 'kudu_mutation_buffer_size', None, None, ),  # 43
    (44, TType.I32, 'kudu_error_buffer_size', None, None, ),  # 44
    (45, TType.I32, 'hms_event_polling_interval_s', None, None, ),  # 45
    (46, TType.STRING, 'impala_build_version', None, None, ),  # 46
    (47, TType.STRING, 'authorization_factory_class', None, None, ),  # 47
    None,  # 48
    (49, TType.STRING, 'ranger_service_type', None, None, ),  # 49
    (50, TType.STRING, 'ranger_app_id', None, None, ),  # 50
    (51, TType.STRING, 'authorization_provider', None, None, ),  # 51
    (52, TType.BOOL, 'recursively_list_partitions', None, None, ),  # 52
    (53, TType.STRING, 'query_event_hook_classes', None, None, ),  # 53
    (54, TType.I32, 'query_event_hook_nthreads', None, None, ),  # 54
    (55, TType.BOOL, 'is_executor', None, None, ),  # 55
    (56, TType.BOOL, 'is_coordinator', None, None, ),  # 56
    (57, TType.BOOL, 'use_dedicated_coordinator_estimates', None, None, ),  # 57
    (58, TType.STRING, 'blacklisted_dbs', None, None, ),  # 58
    (59, TType.STRING, 'blacklisted_tables', None, None, ),  # 59
    (60, TType.BOOL, 'unlock_zorder_sort', None, None, ),  # 60
    (61, TType.STRING, 'min_privilege_set_for_show_stmts', None, None, ),  # 61
    None,  # 62
    (63, TType.I32, 'num_expected_executors', None, None, ),  # 63
    (64, TType.I32, 'num_check_authorization_threads', None, None, ),  # 64
    (65, TType.BOOL, 'use_customized_user_groups_mapper_for_ranger', None, None, ),  # 65
    (66, TType.BOOL, 'enable_column_masking', None, None, ),  # 66
    (67, TType.BOOL, 'enable_insert_events', None, None, ),  # 67
    (68, TType.BOOL, 'compact_catalog_topic', None, None, ),  # 68
    (69, TType.BOOL, 'enable_incremental_metadata_updates', None, None, ),  # 69
    (70, TType.I64, 'topic_update_tbl_max_wait_time_ms', None, None, ),  # 70
    (71, TType.I32, 'catalog_max_lock_skipped_topic_updates', None, None, ),  # 71
    (72, TType.STRING, 'saml2_keystore_path', None, None, ),  # 72
    (73, TType.STRING, 'saml2_keystore_password', None, None, ),  # 73
    (74, TType.STRING, 'saml2_private_key_password', None, None, ),  # 74
    (75, TType.STRING, 'saml2_idp_metadata', None, None, ),  # 75
    (76, TType.STRING, 'saml2_sp_entity_id', None, None, ),  # 76
    (77, TType.STRING, 'saml2_sp_callback_url', None, None, ),  # 77
    (78, TType.BOOL, 'saml2_want_assertations_signed', None, None, ),  # 78
    (79, TType.BOOL, 'saml2_sign_requests', None, None, ),  # 79
    (80, TType.I32, 'saml2_callback_token_ttl', None, None, ),  # 80
    (81, TType.STRING, 'saml2_group_attribute_name', None, None, ),  # 81
    (82, TType.STRING, 'saml2_group_filter', None, None, ),  # 82
    (83, TType.BOOL, 'saml2_ee_test_mode', None, None, ),  # 83
    (84, TType.STRING, 'scratch_dirs', None, None, ),  # 84
    (85, TType.BOOL, 'enable_row_filtering', None, None, ),  # 85
    (86, TType.I32, 'max_wait_time_for_sync_ddl_s', None, None, ),  # 86
    (87, TType.BOOL, 'allow_ordinals_in_having', None, None, ),  # 87
    (88, TType.BOOL, 'start_hms_server', None, None, ),  # 88
    (89, TType.I32, 'hms_port', None, None, ),  # 89
    (90, TType.BOOL, 'fallback_to_hms_on_errors', None, None, ),  # 90
    (91, TType.BOOL, 'enable_catalogd_hms_cache', None, None, ),  # 91
    (92, TType.STRING, 'kudu_sasl_protocol_name', None, None, ),  # 92
    (93, TType.I32, 'warn_catalog_response_size_mb', None, None, ),  # 93
    (94, TType.I32, 'warn_catalog_response_duration_s', None, None, ),  # 94
    (95, TType.BOOL, 'invalidate_hms_cache_on_ddls', None, None, ),  # 95
    (96, TType.STRING, 'startup_filesystem_check_directories', None, None, ),  # 96
    (97, TType.BOOL, 'hms_event_incremental_refresh_transactional_table', None, None, ),  # 97
    (98, TType.BOOL, 'enable_shell_based_groups_mapping_support', None, None, ),  # 98
    (99, TType.BOOL, 'auto_check_compaction', None, None, ),  # 99
    (100, TType.BOOL, 'enable_sync_to_latest_event_on_ddls', None, None, ),  # 100
    (101, TType.BOOL, 'pull_table_types_and_comments', None, None, ),  # 101
    (102, TType.BOOL, 'use_hms_column_order_for_hbase_tables', None, None, ),  # 102
    (103, TType.STRING, 'ignored_dir_prefix_list', None, None, ),  # 103
    (104, TType.BOOL, 'enable_kudu_impala_hms_check', None, None, ),  # 104
    (105, TType.BOOL, 'enable_reload_events', None, None, ),  # 105
    (106, TType.I32, 'geospatial_library', None, None, ),  # 106
    (107, TType.DOUBLE, 'query_cpu_count_divisor', None, None, ),  # 107
    (108, TType.BOOL, 'processing_cost_use_equal_expr_weight', None, None, ),  # 108
    (109, TType.I64, 'min_processing_per_thread', None, None, ),  # 109
    (110, TType.BOOL, 'skip_resource_checking_on_last_executor_group_set', None, None, ),  # 110
    (111, TType.I64, 'thrift_rpc_max_message_size', None, None, ),  # 111
    (112, TType.STRING, 'file_metadata_reload_properties', None, None, ),  # 112
    (113, TType.DOUBLE, 'scan_range_cost_factor', None, None, ),  # 113
    (114, TType.BOOL, 'use_jamm_weigher', None, None, ),  # 114
    (115, TType.I32, 'iceberg_reload_new_files_threshold', None, None, ),  # 115
    (116, TType.BOOL, 'enable_skipping_older_events', None, None, ),  # 116
    (117, TType.BOOL, 'enable_json_scanner', None, None, ),  # 117
    (118, TType.DOUBLE, 'max_filter_error_rate_from_full_scan', None, None, ),  # 118
    (119, TType.I32, 'local_catalog_cache_concurrency_level', None, None, ),  # 119
    (120, TType.I32, 'catalog_operation_log_size', None, None, ),  # 120
    (121, TType.STRING, 'hostname', None, None, ),  # 121
    (122, TType.BOOL, 'allow_catalog_cache_op_from_masked_users', None, None, ),  # 122
    (123, TType.BOOL, 'iceberg_allow_datafiles_in_table_location_only', None, None, ),  # 123
    (124, TType.I32, 'topic_update_log_gc_frequency', None, None, ),  # 124
    (125, TType.STRING, 'debug_actions', None, None, ),  # 125
    (126, TType.BOOL, 'invalidate_metadata_on_event_processing_failure', None, None, ),  # 126
    (127, TType.BOOL, 'invalidate_global_metadata_on_event_processing_failure', None, None, ),  # 127
    (128, TType.STRING, 'inject_process_event_failure_event_types', None, None, ),  # 128
    (129, TType.DOUBLE, 'inject_process_event_failure_ratio', None, None, ),  # 129
    (130, TType.BOOL, 'enable_workload_mgmt', None, None, ),  # 130
    (131, TType.STRING, 'query_log_table_name', None, None, ),  # 131
    (132, TType.DOUBLE, 'query_cpu_root_factor', None, None, ),  # 132
    (133, TType.STRING, 'default_skipped_hms_event_types', None, None, ),  # 133
    (134, TType.STRING, 'common_hms_event_types', None, None, ),  # 134
    (135, TType.I32, 'dbcp_max_conn_pool_size', None, None, ),  # 135
    (136, TType.I32, 'dbcp_max_wait_millis_for_conn', None, None, ),  # 136
    (137, TType.I32, 'dbcp_data_source_idle_timeout', None, None, ),  # 137
    (138, TType.BOOL, 'is_release_build', None, None, ),  # 138
    (139, TType.BOOL, 'enable_catalogd_ha', None, None, ),  # 139
    (140, TType.BOOL, 'iceberg_always_allow_merge_on_read_operations', None, None, ),  # 140
    (141, TType.I64, 'data_stream_sender_buffer_size_used_by_planner', None, None, ),  # 141
    (142, TType.BOOL, 'enable_reading_puffin_stats', None, None, ),  # 142
    (143, TType.STRING, 'injected_group_members_debug_only', None, None, ),  # 143
)
fix_spec(all_structs)
del all_structs
