"use strict";(self.webpackChunkjupyterlab_claude_code_refresh=self.webpackChunkjupyterlab_claude_code_refresh||[]).push([[509],{509:(e,t,o)=>{o.r(t),o.d(t,{default:()=>r});var s=o(427),i=o(715),n=o(361),a=o(602);class l{constructor(e,t){this._settingsRegistry=null,this._refreshTimers=new Map,this._debugTimer=null,this._lastSeenFiles=new Map,this._lastUserSaves=new Map,this._activeConflictDialogs=new Map,this._activeNotifications=new Map,this._hasShownWelcome=!1,this._app=e,this._contentsManager=t,this._showNotifications=!0,this._settings={enabled:!0,refreshDelay:500,showNotifications:!1,logLevel:"none",conflictResolution:"ask",showWelcomeBanner:!0}}initialize(){if(!this._settings.enabled)return void this._logInfo("Extension disabled in settings");this._contentsManager.fileChanged.connect(this._onFileChanged,this),this._setupSaveTracking(),this._logInfo("Extension initialized and file watching enabled"),this._logDebug("Contents manager:",this._contentsManager);const e=this._getOpenNotebooks();this._logDebug("Currently open notebooks:",e.map(e=>e.context.path)),this._startPolling(),this._settings.showWelcomeBanner&&!this._hasShownWelcome&&this._showWelcomeBanner()}_log(e,t,o){const s=this._settings.logLevel;if("debug"===s||"info"===s&&"info"===e){const s=`Claude Code Auto-Refresh [${e.toUpperCase()}]:`;o?console.log(s,t,o):console.log(s,t)}}_logInfo(e,t){this._log("info",e,t)}_logDebug(e,t){this._log("debug",e,t)}setSettingsRegistry(e){this._settingsRegistry=e}updateSettings(e){this._settings={...this._settings,...e},this._logDebug("Settings updated",this._settings)}async _showWelcomeBanner(){this._hasShownWelcome=!0,"Don't show again"===(await(0,i.showDialog)({title:"ðŸš€ Claude Code Auto-Refresh Enabled",body:"Your notebook will now automatically refresh when Claude Code modifies it.\n\nðŸ’¡ Key tip: Save your work before asking Claude Code to modify open notebooks for the best experience.\n\nConfigure in Settings â†’ Claude Code Auto-Refresh",buttons:[i.Dialog.createButton({label:"Got it!",className:"jp-mod-accept"}),i.Dialog.createButton({label:"Don't show again",className:"jp-mod-reject"})]})).button.label&&await this._disableWelcomeBanner()}async _disableWelcomeBanner(){this.updateSettings({showWelcomeBanner:!1});try{if(this._settingsRegistry){const e=await this._settingsRegistry.load("jupyterlab-claude-code-refresh:plugin");await e.set("showWelcomeBanner",!1),this._logInfo("Welcome banner disabled in JupyterLab settings")}else this._logInfo("Settings registry not available, banner disabled for current session only")}catch(e){this._logInfo("Could not persist welcome banner setting to registry:",e)}}_startPolling(){this._logDebug("Starting file polling"),this._debugTimer=window.setInterval(()=>{this._checkFilesForChanges()},2*this._settings.refreshDelay)}async _checkFilesForChanges(){if(this._settings.enabled)try{const e=this._getOpenNotebooks();this._logDebug("Polling check - open notebooks:",e.length);for(const t of e){const e=t.context.path;this._logDebug("Checking file for changes:",e);const o=await this._contentsManager.get(e,{content:!1}),s=new Date(o.last_modified).getTime(),i=this._lastSeenFiles.get(e),n=this._lastUserSaves.get(e)||0;i&&s>i&&(s-n<2e3?this._logDebug("Ignoring user-initiated save for:",e):(this._logInfo("External change detected",{path:e,lastModified:new Date(s)}),this._handleExternalChange(t.context))),this._lastSeenFiles.set(e,s)}}catch(e){this._logInfo("Error during polling check",e)}else this._logDebug("Auto-refresh disabled, skipping polling check")}_onFileChanged(e,t){this._settings.enabled?(this._logDebug("File change event detected",{type:t.type,oldValue:t.oldValue,newValue:t.newValue,timestamp:(new Date).toISOString()}),t.newValue&&t.newValue.path&&this._logDebug("File path changed:",t.newValue.path),"save"===t.type&&t.newValue?this._handleSaveEvent(t.newValue):"rename"===t.type&&t.newValue?this._handleRenameEvent(t.oldValue,t.newValue):this._logDebug("Ignoring change type:",t.type)):this._logDebug("Auto-refresh disabled, ignoring file change event")}async _handleExternalChange(e){if(!this._settings.enabled)return void this._logDebug("Auto-refresh disabled, ignoring external change for:",e.path);const t=e.path;if(e.model.dirty)switch(this._settings.conflictResolution){case"ask":await this._showConflictDialog(e);break;case"keepLocal":this._logInfo("Keeping local changes, ignoring external change"),this._settings.showNotifications&&(0,i.showDialog)({title:"External Change Detected",body:`${t.split("/").pop()} was modified externally, but keeping your local changes.`,buttons:[i.Dialog.okButton()]});break;case"useExternal":this._logInfo("Using external changes, discarding local changes"),this._scheduleRefresh(e)}else this._scheduleRefresh(e)}async _showConflictDialog(e){const t=e.path;if(this._activeConflictDialogs.has(t))this._logDebug("Conflict dialog already active for:",t);else{this._activeConflictDialogs.set(t,!0);try{const o=t.split("/").pop(),s=await(0,i.showDialog)({title:"Notebook Modified Externally",body:`${o} has been modified by an external program (possibly Claude Code). You have unsaved changes. What would you like to do?`,buttons:[i.Dialog.createButton({label:"Keep My Changes",className:"jp-mod-accept"}),i.Dialog.createButton({label:"Use External Changes",className:"jp-mod-warn"}),i.Dialog.createButton({label:"Cancel",className:"jp-mod-reject"})]});"Use External Changes"===s.button.label?this._scheduleRefresh(e):"Keep My Changes"===s.button.label&&this._logDebug("User chose to keep local changes")}finally{this._activeConflictDialogs.delete(t)}}}_setupSaveTracking(){this._getOpenNotebooks().forEach(({context:e})=>{this._contentsManager.get(e.path,{content:!1}).then(t=>{this._lastSeenFiles.set(e.path,new Date(t.last_modified).getTime())}).catch(e=>this._logDebug("Error initializing file tracking:",e))})}_trackUserSave(e){this._lastUserSaves.set(e,Date.now())}_handleSaveEvent(e){const{path:t,type:o}=e;this._logDebug("Save event for file:",{path:t,type:o}),t&&"notebook"===o&&t.endsWith(".ipynb")&&(this._trackUserSave(t),this._getOpenNotebooks().find(e=>e.context.path===t)?this._logDebug("Processing notebook save event:",t):this._logDebug("Notebook not currently open:",t))}_handleRenameEvent(e,t){this._logDebug("Rename event",{oldPath:null==e?void 0:e.path,newPath:t.path})}_scheduleRefresh(e){const t=e.path,o=this._refreshTimers.get(t);o&&window.clearTimeout(o);const s=window.setTimeout(()=>{this._refreshNotebook(e),this._refreshTimers.delete(t)},this._settings.refreshDelay);this._refreshTimers.set(t,s)}async _refreshNotebook(e){try{this._logInfo("Refreshing notebook",e.path),await e.revert(),this._settings.showNotifications&&this._showNotifications&&await this._showRefreshNotification(e.path),this._logInfo("Successfully refreshed",e.path)}catch(t){this._logInfo("Error refreshing notebook",t),(0,i.showErrorMessage)("Error Refreshing Notebook",`Could not refresh ${e.path.split("/").pop()}: ${t}`)}}async _showRefreshNotification(e){const t=e.split("/").pop();if(this._activeNotifications.has(e))this._logDebug("Refresh notification already active for:",e);else{this._activeNotifications.set(e,!0);try{await(0,i.showDialog)({title:"Notebook Refreshed",body:`${t} has been refreshed from disk`,buttons:[i.Dialog.okButton()]})}finally{this._activeNotifications.delete(e)}}}_getOpenNotebooks(){const e=[];try{const t=this._app.shell,o=Array.from(t.widgets("main"));this._logDebug("Total widgets in main area:",o.length),o.forEach((t,o)=>{var s,i,n,a,l;this._logDebug(`Widget ${o}:`,{id:t.id,title:null===(s=t.title)||void 0===s?void 0:s.label,hasContext:!!t.context,contextPath:null===(i=t.context)||void 0===i?void 0:i.path,modelType:null===(a=null===(n=t.context)||void 0===n?void 0:n.model)||void 0===a?void 0:a.type,widgetClassName:null===(l=t.constructor)||void 0===l?void 0:l.name}),(t.context&&t.context.model&&"notebook"===t.context.model.type||t.context&&t.context.path&&t.context.path.endsWith(".ipynb")||t.constructor&&t.constructor.name&&t.constructor.name.includes("Notebook"))&&(e.push({context:t.context,widget:t}),this._logDebug("Found notebook widget:",t.context.path))}),this._logDebug("Total notebook widgets found:",e.length)}catch(e){this._logInfo("Error getting open notebooks:",e)}return e}dispose(){this._refreshTimers.forEach(e=>window.clearTimeout(e)),this._refreshTimers.clear(),this._debugTimer&&(window.clearInterval(this._debugTimer),this._debugTimer=null),this._activeConflictDialogs.clear(),this._activeNotifications.clear(),a.Signal.disconnectAll(this),this._logInfo("Disposed")}}const h={id:"jupyterlab-claude-code-refresh:plugin",description:"Auto-refresh notebooks when modified by Claude Code",autoStart:!0,requires:[s.IDocumentManager],optional:[n.ISettingRegistry],activate:async(e,t,o)=>{console.log("Claude Code Auto-Refresh extension is activated!");const s=new l(e,e.serviceManager.contents);if(s.setSettingsRegistry(o),o)try{const e=await o.load(h.id),t={enabled:e.get("enabled").composite,refreshDelay:e.get("refreshDelay").composite,showNotifications:e.get("showNotifications").composite,logLevel:e.get("logLevel").composite,conflictResolution:e.get("conflictResolution").composite,showWelcomeBanner:e.get("showWelcomeBanner").composite};s.updateSettings(t),e.changed.connect(()=>{const t={enabled:e.get("enabled").composite,refreshDelay:e.get("refreshDelay").composite,showNotifications:e.get("showNotifications").composite,logLevel:e.get("logLevel").composite,conflictResolution:e.get("conflictResolution").composite,showWelcomeBanner:e.get("showWelcomeBanner").composite};s.updateSettings(t)})}catch(e){console.warn("Claude Code Auto-Refresh: Could not load settings",e)}s.initialize(),e.restored.then(()=>{window.addEventListener("beforeunload",()=>{s.dispose()})})}},r=h}}]);