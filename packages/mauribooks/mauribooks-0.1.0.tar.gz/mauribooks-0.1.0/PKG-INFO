Metadata-Version: 2.4
Name: mauribooks
Version: 0.1.0
Summary: SDK Python pour acc√©der √† l‚ÄôAPI GoodReads
Author-email: Daouda Ba <daoudaba4500@gmail.com>
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: httpx>=0.28.1
Requires-Dist: pydantic>=2.11.3
Requires-Dist: backoff>=2.2.1
Requires-Dist: numpy>=2.2.4
Requires-Dist: pandas>=2.2.3
Requires-Dist: python-dotenv
Requires-Dist: gdown

# üìö Mauribooks SDK

> Un SDK Python moderne et intuitif pour interagir avec l'API GoodReads/Mauribooks, sp√©cialement con√ßu pour les professionnels de la data.

[![PyPI version](https://badge.fury.io/py/mauribooks.svg)](https://badge.fury.io/py/mauribooks)
[![Python 3.8+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)

---

##  Fonctionnalit√©s principales

- **Simple et intuitif** : API claire et document√©e
- **Multi-format** : Support natif de Pydantic, dictionnaires et DataFrames Pandas
- **Flexible** : Compatible avec APIs locales et d√©ploy√©es
- **Performant** : Optimis√© pour l'analyse de donn√©es
- **Type-safe** : Validation des donn√©es avec Pydantic
- **Data-friendly** : Con√ßu pour les workflows d'analyse

---

## Installation rapide

```bash
pip install mauribooks
```

**Pr√©requis** : Python 3.10+

---

## D√©marrage rapide

### Configuration initiale

```python
from mauribooks import BookClient, BookConfig

# Configuration avec l'API h√©berg√©e
config = BookConfig(book_base_url="https://books-project-api.onrender.com")
client = BookClient(config=config)

# V√©rification de la connexion
status = client.health_check()
print(status)  # {"message": "API Goodreads op√©rationnelle"}
```

### Exemples d'utilisation

####  R√©cup√©rer un livre sp√©cifique

```python
# R√©cup√©ration avec validation Pydantic
book = client.get_book(1)
print(f"Titre: {book.title}")
print(f"Auteur: {book.author}")
print(f"Note moyenne: {book.average_rating}")
```

#### Analyse de donn√©es avec Pandas

```python
# Export direct vers DataFrame pour l'analyse
df_books = client.list_books(limit=100, output_format="pandas")

# Analyse statistique imm√©diate
print(df_books.describe())
print(f"Top 5 des genres: {df_books['genre'].value_counts().head()}")

# Compatible avec tous vos outils data favoris
import matplotlib.pyplot as plt
df_books['average_rating'].hist()
plt.show()
```

#### Flexibilit√© des formats de sortie

```python
# Format Pydantic (d√©faut) - Type-safe et valid√©
books_pydantic = client.list_books(limit=10)

# Format dictionnaire - Pour l'int√©gration avec APIs
books_dict = client.list_books(limit=10, output_format="dict")

# Format Pandas - Pour l'analyse de donn√©es
books_df = client.list_books(limit=10, output_format="pandas")
```

---

## API Reference

### M√©thodes principales

| M√©thode | Description | Formats support√©s |
|---------|-------------|------------------|
| `health_check()` | V√©rification de l'√©tat de l'API | `dict` |
| `get_book(id)` | R√©cup√©ration d'un livre par ID | `Pydantic` |
| `list_books(**kwargs)` | Liste des livres avec filtres | `pydantic`, `dict`, `pandas` |
| `list_authors(**kwargs)` | Liste des auteurs | `pydantic`, `dict`, `pandas` |
| `list_ratings(**kwargs)` | Liste des √©valuations | `pydantic`, `dict`, `pandas` |

### Param√®tres de configuration

```python
config = BookConfig(
    book_base_url="https://books-project-api.onrender.com",  
    timeout=30,                                # Timeout des requ√™tes (optionnel)
)
```

---

## D√©veloppement local

Pour tester avec une instance locale :

```python
# Configuration pour d√©veloppement local
config = BookConfig(book_base_url="http://localhost:8000")
client = BookClient(config=config)

# M√™me API, m√™me simplicit√©
local_books = client.list_books(limit=5, output_format="pandas")
```

---

## Cas d'usage

### Pour les Data Scientists
```python
# Pipeline d'analyse complet
df = client.list_books(limit=1000, output_format="pandas")
analysis = df.groupby('genre').agg({
    'average_rating': 'mean',
    'ratings_count': 'sum'
}).round(2)
```


### Pour l'int√©gration API
```python
# Format dictionnaire pour l'int√©gration
books_data = client.list_books(limit=50, output_format="dict")
```

---

## D√©veloppement et contribution

### Installation en mode d√©veloppement

```bash
git clone https://github.com/Daouda-Ba/Books_Project_API.git
cd mauribooks
pip install -e ".[dev]"
```

### Tests

```bash
pytest tests/
```

---

## Roadmap

- [ ] Support des requ√™tes asynchrones
- [ ] Cache intelligent des donn√©es
- [ ] Export vers autres formats (JSON, CSV, Parquet)
- [ ] Interface CLI
- [ ] Documentation interactive

---

## Public cible

- **Data Scientists** : Analyse et mod√©lisation de donn√©es litt√©raires
- **Data Analysts** : Reporting et visualisation de m√©triques
- **D√©veloppeurs Python** : Int√©gration rapide d'APIs de livres
- **√âtudiants** : Apprentissage de l'analyse de donn√©es
- **Chercheurs** : √âtudes sur les tendances litt√©raires

---

---

## Licence

Ce projet est sous licence MIT. Voir le fichier [LICENSE](LICENSE) pour plus de d√©tails.

---

## Liens utiles

- **API Production** : [https://books-project-api.onrender.com](https://books-project-api.onrender.com)
- **PyPI Package** : [https://pypi.org/project/mauribooks](https://pypi.org/project/mauribooks)
- **Documentation API** : [https://books-project-api.onrender.com/docs](https://books-project-api.onrender.com/docs)

---
