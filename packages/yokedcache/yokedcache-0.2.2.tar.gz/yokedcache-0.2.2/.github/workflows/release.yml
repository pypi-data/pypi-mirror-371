name: Create Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.2.1, v1.0.0, etc.

permissions:
  contents: write  # Required for creating releases
  id-token: write  # Required for PyPI trusted publishing

jobs:
  create-release:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -e .

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version matches
        run: |
          PACKAGE_VERSION=$(python -c "from src.yokedcache import __version__; print(__version__)")
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Package version ($PACKAGE_VERSION) doesn't match tag version (${{ steps.version.outputs.version }})"
            exit 1
          fi

      - name: Extract changelog for this version
        id: changelog
        run: |
          # Extract changelog section for this version
          python << 'EOF'
          import re
          import sys
          
          version = "${{ steps.version.outputs.version }}"
          
          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()
              
              # Find the section for this version
              pattern = rf'## \[{re.escape(version)}\].*?\n(.*?)(?=\n## \[|\n---|\Z)'
              match = re.search(pattern, content, re.DOTALL)
              
              if match:
                  changelog_content = match.group(1).strip()
                  # Remove any trailing dashes or separators
                  changelog_content = re.sub(r'\n---+.*$', '', changelog_content, flags=re.MULTILINE)
                  
                  # Write to file for GitHub Actions
                  with open('release_notes.md', 'w') as f:
                      f.write(changelog_content)
                  print(f"Extracted changelog for version {version}")
              else:
                  print(f"No changelog found for version {version}")
                  with open('release_notes.md', 'w') as f:
                      f.write(f"Release {version}")
          except Exception as e:
              print(f"Error extracting changelog: {e}")
              with open('release_notes.md', 'w') as f:
                  f.write(f"Release {version}")
          EOF

      - name: Build package
        run: |
          python -m build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  update-docs:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.repository == 'sirstig/yokedcache'  # Only run on main repo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install documentation dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install mkdocs mkdocs-material mkdocstrings[python]

      - name: Build documentation
        run: mkdocs build --strict

      - name: Deploy documentation
        run: mkdocs gh-deploy --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
