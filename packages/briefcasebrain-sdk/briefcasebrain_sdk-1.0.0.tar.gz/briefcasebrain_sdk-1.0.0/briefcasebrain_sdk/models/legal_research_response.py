# coding: utf-8

"""
    BriefcaseBrain API

    Official API for BriefcaseBrain Legal AI Platform

    The version of the OpenAPI document: 1.0.0
    Contact: support@briefcasebrain.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from briefcasebrain_sdk.models.legal_research_response_relevant_cases_inner import LegalResearchResponseRelevantCasesInner
from briefcasebrain_sdk.models.legal_research_response_relevant_statutes_inner import LegalResearchResponseRelevantStatutesInner
from typing import Optional, Set
from typing_extensions import Self

class LegalResearchResponse(BaseModel):
    """
    LegalResearchResponse
    """ # noqa: E501
    summary: Optional[StrictStr] = Field(default=None, description="Summary of legal research findings")
    relevant_cases: Optional[List[LegalResearchResponseRelevantCasesInner]] = None
    relevant_statutes: Optional[List[LegalResearchResponseRelevantStatutesInner]] = None
    key_considerations: Optional[List[StrictStr]] = None
    confidence_score: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = None
    __properties: ClassVar[List[str]] = ["summary", "relevant_cases", "relevant_statutes", "key_considerations", "confidence_score"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegalResearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in relevant_cases (list)
        _items = []
        if self.relevant_cases:
            for _item_relevant_cases in self.relevant_cases:
                if _item_relevant_cases:
                    _items.append(_item_relevant_cases.to_dict())
            _dict['relevant_cases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relevant_statutes (list)
        _items = []
        if self.relevant_statutes:
            for _item_relevant_statutes in self.relevant_statutes:
                if _item_relevant_statutes:
                    _items.append(_item_relevant_statutes.to_dict())
            _dict['relevant_statutes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegalResearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "summary": obj.get("summary"),
            "relevant_cases": [LegalResearchResponseRelevantCasesInner.from_dict(_item) for _item in obj["relevant_cases"]] if obj.get("relevant_cases") is not None else None,
            "relevant_statutes": [LegalResearchResponseRelevantStatutesInner.from_dict(_item) for _item in obj["relevant_statutes"]] if obj.get("relevant_statutes") is not None else None,
            "key_considerations": obj.get("key_considerations"),
            "confidence_score": obj.get("confidence_score")
        })
        return _obj


