Metadata-Version: 2.4
Name: briefcasebrain-sdk
Version: 1.0.0
Summary: Official Python SDK for BriefcaseBrain Legal AI Platform
Home-page: https://github.com/briefcasebrain/sdk
Author: BriefcaseBrain Support
Author-email: BriefcaseBrain Support <support@briefcasebrain.io>
License: MIT
Project-URL: Repository, https://github.com/briefcasebrain/sdk
Project-URL: Homepage, https://briefcasebrain.io
Project-URL: Documentation, https://docs.briefcasebrain.io
Project-URL: Bug Reports, https://github.com/briefcasebrain/sdk/issues
Project-URL: Changelog, https://github.com/briefcasebrain/sdk/blob/main/packages/python-sdk/CHANGELOG.md
Keywords: legal,ai,legal-research,contracts,briefcasebrain,sdk,api
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >= 3.9
Description-Content-Type: text/markdown
Requires-Dist: urllib3<3.0.0,>=2.1.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: pydantic>=2
Requires-Dist: typing-extensions>=4.7.1
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# briefcasebrain-sdk
Official API for BriefcaseBrain Legal AI Platform

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 1.0.0
- Package version: 1.0.0
- Generator version: 7.14.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen
For more information, please visit [https://briefcasebrain.io](https://briefcasebrain.io)

## Requirements.

Python 3.9+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import briefcasebrain_sdk
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import briefcasebrain_sdk
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import briefcasebrain_sdk
from briefcasebrain_sdk.rest import ApiException
from pprint import pprint

# Defining the host is optional and defaults to https://api.briefcasebrain.io
# See configuration.py for a list of all supported configuration parameters.
configuration = briefcasebrain_sdk.Configuration(
    host = "https://api.briefcasebrain.io"
)

# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.

# Configure Bearer authorization (JWT): bearerAuth
configuration = briefcasebrain_sdk.Configuration(
    access_token = os.environ["BEARER_TOKEN"]
)

# Configure API key authorization: sessionAuth
configuration.api_key['sessionAuth'] = os.environ["API_KEY"]

# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
# configuration.api_key_prefix['sessionAuth'] = 'Bearer'


# Enter a context with an instance of the API client
with briefcasebrain_sdk.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = briefcasebrain_sdk.ContractsApi(api_client)
    limit = 10 # int | Maximum number of items to return (optional) (default to 10)
    offset = 0 # int | Number of items to skip (optional) (default to 0)

    try:
        # List contract templates
        api_response = api_instance.api_contracts_templates_get(limit=limit, offset=offset)
        print("The response of ContractsApi->api_contracts_templates_get:\n")
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling ContractsApi->api_contracts_templates_get: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *https://api.briefcasebrain.io*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*ContractsApi* | [**api_contracts_templates_get**](docs/ContractsApi.md#api_contracts_templates_get) | **GET** /api/contracts/templates | List contract templates
*ContractsApi* | [**api_contracts_templates_post**](docs/ContractsApi.md#api_contracts_templates_post) | **POST** /api/contracts/templates | Create contract template
*LegalResearchApi* | [**api_legal_research_post**](docs/LegalResearchApi.md#api_legal_research_post) | **POST** /api/legal-research | Perform legal research
*QueriesApi* | [**api_queries_get**](docs/QueriesApi.md#api_queries_get) | **GET** /api/queries | Get saved queries
*QueriesApi* | [**api_queries_post**](docs/QueriesApi.md#api_queries_post) | **POST** /api/queries | Save a query
*QueryEnhancementApi* | [**api_enhance_query_post**](docs/QueryEnhancementApi.md#api_enhance_query_post) | **POST** /api/enhance-query | Enhance a legal query
*UserApi* | [**api_user_credits_get**](docs/UserApi.md#api_user_credits_get) | **GET** /api/user/credits | Get user credits
*UserApi* | [**api_user_profile_get**](docs/UserApi.md#api_user_profile_get) | **GET** /api/user/profile | Get user profile
*WorkflowsApi* | [**api_workflows_get**](docs/WorkflowsApi.md#api_workflows_get) | **GET** /api/workflows | List workflows
*WorkflowsApi* | [**api_workflows_post**](docs/WorkflowsApi.md#api_workflows_post) | **POST** /api/workflows | Create workflow


## Documentation For Models

 - [ApiContractsTemplatesPost201Response](docs/ApiContractsTemplatesPost201Response.md)
 - [ApiContractsTemplatesPostRequest](docs/ApiContractsTemplatesPostRequest.md)
 - [ApiQueriesGet200Response](docs/ApiQueriesGet200Response.md)
 - [ApiQueriesGet200ResponsePagination](docs/ApiQueriesGet200ResponsePagination.md)
 - [ApiQueriesGet200ResponseQueriesInner](docs/ApiQueriesGet200ResponseQueriesInner.md)
 - [ApiQueriesPost201Response](docs/ApiQueriesPost201Response.md)
 - [ApiQueriesPostRequest](docs/ApiQueriesPostRequest.md)
 - [ApiUserCreditsGet200Response](docs/ApiUserCreditsGet200Response.md)
 - [ApiWorkflowsGet200Response](docs/ApiWorkflowsGet200Response.md)
 - [ApiWorkflowsPost201Response](docs/ApiWorkflowsPost201Response.md)
 - [ApiWorkflowsPostRequest](docs/ApiWorkflowsPostRequest.md)
 - [ApiWorkflowsPostRequestStepsInner](docs/ApiWorkflowsPostRequestStepsInner.md)
 - [ContractTemplate](docs/ContractTemplate.md)
 - [EnhanceQueryRequest](docs/EnhanceQueryRequest.md)
 - [EnhanceQueryResponse](docs/EnhanceQueryResponse.md)
 - [EnhanceQueryResponseEnhancedQueriesInner](docs/EnhanceQueryResponseEnhancedQueriesInner.md)
 - [Error](docs/Error.md)
 - [LegalResearchRequest](docs/LegalResearchRequest.md)
 - [LegalResearchRequestConversationHistoryInner](docs/LegalResearchRequestConversationHistoryInner.md)
 - [LegalResearchResponse](docs/LegalResearchResponse.md)
 - [LegalResearchResponseRelevantCasesInner](docs/LegalResearchResponseRelevantCasesInner.md)
 - [LegalResearchResponseRelevantStatutesInner](docs/LegalResearchResponseRelevantStatutesInner.md)
 - [Success](docs/Success.md)
 - [User](docs/User.md)
 - [Workflow](docs/Workflow.md)


<a id="documentation-for-authorization"></a>
## Documentation For Authorization


Authentication schemes defined for the API:
<a id="bearerAuth"></a>
### bearerAuth

- **Type**: Bearer authentication (JWT)

<a id="sessionAuth"></a>
### sessionAuth

- **Type**: API key
- **API key parameter name**: authjs.session-token
- **Location**: 


## Author

support@briefcasebrain.io


