[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-as-code"
version = "1.1.0"
description = "Docker-like CLI for AI agents with Enhanced LLM Intelligence"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Partha Sarathi Kundu", email = "inboxpartha@outlook.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",

    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Software Distribution",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = []
keywords = [
    "ai", "agents", "cli", "docker", "containers", "llm", "machine-learning",
    "artificial-intelligence", "automation", "microservices", "devops",
    "ollama", "local-llm", "model-optimization", "agent-generation",
    "intelligent-agents", "workflow-automation", "sentiment-analysis",
    "chatbot", "code-assistant", "benchmarking", "model-analysis"
]

[project.urls]
Homepage = "https://agent-as-code.myagentregistry.com"
Documentation = "https://agent-as-code.myagentregistry.com/documentation"
github = "https://github.com/pxkundu/agent-as-code"

[project.scripts]
agent = "agent_as_code.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["agent_as_code*"]

[tool.setuptools.package-data]
agent_as_code = [
    "bin/agent-linux-amd64",
    "bin/agent-linux-arm64",
    "bin/agent-darwin-amd64",
    "bin/agent-darwin-arm64", 
    "bin/agent-windows-amd64.exe",
    "bin/agent-windows-arm64.exe",
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["agent_as_code"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]