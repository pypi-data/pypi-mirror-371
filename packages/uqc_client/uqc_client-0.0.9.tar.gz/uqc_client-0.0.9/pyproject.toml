[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "uqc_client"
version = "0.0.9"
description = "Client package for UQC platform apis."
authors = [{ name = "mqiezi", email = "mqiezi@qq.com" }]
readme = "README.md"
requires-python = ">=3.9"
keywords = ["qiskit", "client", "ion trap", "quantum"]
dependencies = [
  "aiohttp~=3.11.13",
  "importlib-metadata>=8.6.1",
  "ipython>=9.4.0; python_version >= '3.11'",
  "ipython<9.0; python_version < '3.11'",
  "matplotlib>=3.5",
  "nest-asyncio>=1.6.0",
  "openqasm3~=1.0.1",
  "pandas>=2.2.3",
  "pydantic~=2.11.4",
  "pydantic-extra-types~=2.10.3",
  "pydantic-settings~=2.9.1",
  "pylatexenc~=2.10",
  "python-socketio~=5.12.1",
  "qiskit>=2.0.0,<3.0.0",
  "qiskit-aer>=0.17.0",
  "qiskit-qasm3-import~=0.6.0",
  "pytz>=2023.1",
]

[project.optional-dependencies]
dev = [
  "pytest~=7.2.0",
  "pytest-cov~=4.0.0",
  "pytest-mock~=3.12.0",
  "pyjwt>=2.10.1",
]

[[tool.uv.index]]
# Optional name for the index.
name = "aliyun"
# Required URL for the index.
url = "https://mirrors.aliyun.com/pypi/simple/"

[[tool.uv.index]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple"

[[tool.uv.index]]
name = "devpi"
url = "http://192.168.110.247:3141/mqiezi/devpi/"
publish-url = "http://192.168.110.247:3141/mqiezi/devpi/"
explicit = true

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true


[tool.ruff]
line-length = 120
target-version = 'py311'
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  # "ARG", # flake8-unused-arguments
  # "BLE", # flake8-blind-except
  # "C4",  # flake8-comprehensions
  # "C90", # mccabe
  # "COM", # flake8-commas
  # "D",   # pydocstyle
  "E", # pycodestyle errors
  # "ERA", # eradicate
  "F", # pyflakes
  # "I",   # isort
  # "ICN", # flake8-import-conventions
  # "ISC", # flake8-implicit-str-concat
  # "NPY", # numpy
  # "PGH", # pygrep-hooks
  # "PIE", # flake8-pie
  # "PT",  # flake8-pytest-style
  # "PTH", # flake8-use-pathlib
  # "PYI", # flake8-pyi
  # "RET", # flake8-return
  # "RSE", # flake8-raise
  # "RUF", # ruff specials
  # "S",   # flake8-bandit
  # "SIM", # flake8-simplify
  # "T10", # flake8-debugger
  # "T20", # flake8-print
  # "TID", # flake8-tidy-imports
  # "UP",  # pyupgrade
  # "W",   # pycodestyle warnings
]
ignore = [
  "D100",   # missing docstring in public module
  "D101",   # missing docstring in public class
  "D102",   # missing docstring in public method
  "D104",   # missing docstring in public package
  "D107",   # missing docstring in __init__
  "D211",   # no-blank-line-before-class (incompatible with D203)
  "D213",   # multiline-summary-second-line (incompatible with D212)
  "S311",   # suspicious-non-cryptographic-random-usage
  "SIM117", # multiple-with-statements
  #
  # ignore following rules since they are conflicting with the formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "W191",
  "E111",
  "E114",
  "E117",
  "E203",
  "E225",
  "E228",
  "E231",
  "E501",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]
unfixable = ["F401"]
# Ignore `F401` `E402` (import violations) in all `__init__.py` files, and `E402` in `path/to/file.py`.
[tool.ruff.per-file-ignores]
# Enable Pyflakes and pycodestyle rules.
"__init__.py" = ["E402", "F401"]
"path/to/file.py" = ["E402"]
"examples/*.py" = [
  "T201", # allow prints
]
"tests/*.py" = [
  "T201",   # allow prints
  "S101",   # allow assertions
  "D205",   # allow multiline docstring summaries
  "PT011",  # allow pytest.raises without match=
  "UP009",  # allow UTF-8 encoding declaration
  "ERA001", # allow commented-out code
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 120
