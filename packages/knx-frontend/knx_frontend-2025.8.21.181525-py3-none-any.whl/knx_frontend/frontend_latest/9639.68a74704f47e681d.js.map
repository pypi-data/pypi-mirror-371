{"version":3,"file":"9639.68a74704f47e681d.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-fab.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/util/promise-timeout.ts","webpack://knx-frontend/./homeassistant-frontend/src/resources/icon-metadata.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/iconsets.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/custom_iconsets.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/custom_icons.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/generic/show-dialog-box.ts","webpack://knx-frontend/./src/views/entities_view.ts","webpack://knx-frontend/../src/directives/private-async-helpers.ts","webpack://knx-frontend/../src/directives/until.ts"],"sourcesContent":["import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-typography-button-text-transform: none;\n        --mdc-typography-button-font-size: var(--ha-font-size-l);\n        --mdc-typography-button-font-family: var(--ha-font-family-body);\n        --mdc-typography-button-font-weight: var(--ha-font-weight-medium);\n      }\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n      :disabled {\n        --mdc-theme-secondary: var(--disabled-text-color);\n        pointer-events: none;\n      }\n    `,\n    // safari workaround - must be explicit\n    mainWindow.document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","class TimeoutError extends Error {\n  public timeout: number;\n\n  constructor(timeout: number, ...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TimeoutError);\n    }\n\n    this.name = \"TimeoutError\";\n    // Custom debugging information\n    this.timeout = timeout;\n    this.message = `Timed out in ${timeout} ms.`;\n  }\n}\n\nexport const promiseTimeout = (ms: number, promise: Promise<any> | any) => {\n  const timeout = new Promise((_resolve, reject) => {\n    setTimeout(() => {\n      reject(new TimeoutError(ms));\n    }, ms);\n  });\n\n  // Returns a race between our timeout and the passed in promise\n  return Promise.race([promise, timeout]);\n};\n","import * as iconMetadata_ from \"../../build/mdi/iconMetadata.json\";\nimport type { IconMetaFile } from \"../types.js\";\n\nexport const iconMetadata = (iconMetadata_ as any).default as IconMetaFile;\n","import { clear, get, set, createStore, promisifyRequest } from \"idb-keyval\";\nimport memoizeOne from \"memoize-one\";\nimport { promiseTimeout } from \"../common/util/promise-timeout\";\nimport { iconMetadata } from \"../resources/icon-metadata\";\nimport type { IconMeta } from \"../types\";\n\nexport type Icons = Record<string, string>;\n\nexport type Chunks = Record<string, Promise<Icons>>;\n\nconst getStore = memoizeOne(async () => {\n  const iconStore = createStore(\"hass-icon-db\", \"mdi-icon-store\");\n\n  // Supervisor doesn't use icons, and should not update/downgrade the icon DB.\n  if (!__SUPERVISOR__) {\n    const version = await get(\"_version\", iconStore);\n\n    if (!version) {\n      set(\"_version\", iconMetadata.version, iconStore);\n    } else if (version !== iconMetadata.version) {\n      await clear(iconStore);\n      set(\"_version\", iconMetadata.version, iconStore);\n    }\n  }\n\n  return iconStore;\n});\n\nexport const MDI_PREFIXES = [\"mdi\", \"hass\", \"hassio\", \"hademo\"];\n\nlet toRead: [\n  string,\n  (iconPath: string | undefined) => void,\n  (e: any) => void,\n][] = [];\n\n// Queue up as many icon fetches in 1 transaction\nexport const getIcon = (iconName: string) =>\n  new Promise<string | undefined>((resolve, reject) => {\n    toRead.push([iconName, resolve, reject]);\n\n    if (toRead.length > 1) {\n      return;\n    }\n\n    // Start initializing the store, so it's ready when we need it\n    const iconStoreProm = getStore();\n    const readIcons = async () => {\n      const iconStore = await iconStoreProm;\n      iconStore(\"readonly\", (store) => {\n        for (const [iconName_, resolve_, reject_] of toRead) {\n          promisifyRequest<string | undefined>(store.get(iconName_))\n            .then((icon) => resolve_(icon))\n            .catch((e) => reject_(e));\n        }\n        toRead = [];\n      });\n    };\n\n    promiseTimeout(1000, readIcons()).catch((e) => {\n      // Firefox in private mode doesn't support IDB\n      // Safari sometime doesn't open the DB so we time out\n      for (const [, , reject_] of toRead) {\n        reject_(e);\n      }\n      toRead = [];\n    });\n  });\n\nexport const findIconChunk = (icon: string): string => {\n  let lastChunk: IconMeta;\n  for (const chunk of iconMetadata.parts) {\n    if (chunk.start !== undefined && icon < chunk.start) {\n      break;\n    }\n    lastChunk = chunk;\n  }\n  return lastChunk!.file;\n};\n\nexport const writeCache = async (chunks: Chunks) => {\n  const keys = Object.keys(chunks);\n  const iconsSets: Icons[] = await Promise.all(Object.values(chunks));\n  const iconStore = await getStore();\n  // We do a batch opening the store just once, for (considerable) performance\n  iconStore(\"readwrite\", (store) => {\n    iconsSets.forEach((icons, idx) => {\n      Object.entries(icons).forEach(([name, path]) => {\n        store.put(path, name);\n      });\n      delete chunks[keys[idx]];\n    });\n  });\n};\n","import type { PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { CustomIcon } from \"../data/custom_icons\";\nimport { customIcons } from \"../data/custom_icons\";\nimport type { Chunks, Icons } from \"../data/iconsets\";\nimport {\n  MDI_PREFIXES,\n  findIconChunk,\n  getIcon,\n  writeCache,\n} from \"../data/iconsets\";\nimport \"./ha-svg-icon\";\n\ntype DeprecatedIcon = Record<\n  string,\n  {\n    removeIn: string;\n    newName?: string;\n  }\n>;\n\nconst mdiDeprecatedIcons: DeprecatedIcon = {};\n\nconst chunks: Chunks = {};\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: Record<string, string> = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @state() private _path?: string;\n\n  @state() private _secondaryPath?: string;\n\n  @state() private _viewBox?: string;\n\n  @state() private _legacy = false;\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._secondaryPath = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render() {\n    if (!this.icon) {\n      return nothing;\n    }\n    if (this._legacy) {\n      return html`<!-- @ts-ignore we don't provide the iron-icon element -->\n        <iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .secondaryPath=${this._secondaryPath}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const requestedIcon = this.icon;\n    const [iconPrefix, origIconName] = this.icon.split(\":\", 2);\n\n    let iconName = origIconName;\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      const customIcon = customIcons[iconPrefix];\n      if (customIcon) {\n        if (customIcon && typeof customIcon.getIcon === \"function\") {\n          this._setCustomPath(customIcon.getIcon(iconName), requestedIcon);\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in mdiDeprecatedIcons) {\n      const deprecatedIcon = mdiDeprecatedIcons[iconName];\n      let message: string;\n\n      if (deprecatedIcon.newName) {\n        message = `Icon ${iconPrefix}:${iconName} was renamed to ${iconPrefix}:${deprecatedIcon.newName}, please change your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n        iconName = deprecatedIcon.newName!;\n      } else {\n        message = `Icon ${iconPrefix}:${iconName} was removed from MDI, please replace this icon with an other icon in your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n      }\n      // eslint-disable-next-line no-console\n      console.warn(message);\n      fireEvent(this, \"write_log\", {\n        level: \"warning\",\n        message,\n      });\n    }\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    if (iconName === \"home-assistant\") {\n      const icon = (await import(\"../resources/home-assistant-logo-svg\"))\n        .mdiHomeAssistant;\n\n      if (this.icon === requestedIcon) {\n        this._path = icon;\n      }\n      cachedIcons[iconName] = icon;\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      // iOS Safari sometimes doesn't open the DB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      if (this.icon === requestedIcon) {\n        this._path = databaseIcon;\n      }\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName, requestedIcon);\n      return;\n    }\n\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName, requestedIcon);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(\n    promise: Promise<CustomIcon>,\n    requestedIcon: string\n  ) {\n    const icon = await promise;\n    if (this.icon !== requestedIcon) {\n      return;\n    }\n    this._path = icon.path;\n    this._secondaryPath = icon.secondaryPath;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(\n    promise: Promise<Icons>,\n    iconName: string,\n    requestedIcon: string\n  ) {\n    const iconPack = await promise;\n    if (this.icon === requestedIcon) {\n      this._path = iconPack[iconName];\n    }\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static styles = css`\n    :host {\n      fill: currentcolor;\n    }\n  `;\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  entityIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FALLBACK_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import type { CustomIcon } from \"./custom_icons\";\n\ninterface CustomIconsetsWindow {\n  customIconsets?: Record<string, (name: string) => Promise<CustomIcon>>;\n}\n\nconst customIconsetsWindow = window as CustomIconsetsWindow;\n\nif (!(\"customIconsets\" in customIconsetsWindow)) {\n  customIconsetsWindow.customIconsets = {};\n}\n\nexport const customIconsets = customIconsetsWindow.customIconsets!;\n","import { customIconsets } from \"./custom_iconsets\";\n\nexport interface CustomIcon {\n  path: string;\n  secondaryPath?: string;\n  viewBox?: string;\n}\n\nexport interface CustomIconListItem {\n  name: string;\n  keywords?: string[];\n}\n\nexport interface CustomIconHelpers {\n  getIcon: (name: string) => Promise<CustomIcon>;\n  getIconList?: () => Promise<CustomIconListItem[]>;\n}\n\nexport interface CustomIconsWindow {\n  customIcons?: Record<string, CustomIconHelpers>;\n}\n\nconst customIconsWindow = window as CustomIconsWindow;\n\nif (!(\"customIcons\" in customIconsWindow)) {\n  customIconsWindow.customIcons = {};\n}\n\n// Proxy for backward compatibility with icon sets\nexport const customIcons = new Proxy(customIconsWindow.customIcons!, {\n  get: (obj, prop: string) =>\n    obj[prop] ??\n    (customIconsets[prop]\n      ? {\n          getIcon: customIconsets[prop],\n        }\n      : undefined),\n});\n","import type { TemplateResult } from \"lit\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\ninterface BaseDialogBoxParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n  warning?: boolean;\n}\n\nexport interface AlertDialogParams extends BaseDialogBoxParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogBoxParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n  destructive?: boolean;\n}\n\nexport interface PromptDialogParams extends BaseDialogBoxParams {\n  inputLabel?: string;\n  dismissText?: string;\n  inputType?: string;\n  defaultValue?: string;\n  placeholder?: string;\n  confirm?: (out?: string) => void;\n  cancel?: () => void;\n  inputMin?: number | string;\n  inputMax?: number | string;\n}\n\nexport interface DialogBoxParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () => import(\"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogBoxParams,\n  extra?: {\n    confirmation?: DialogBoxParams[\"confirmation\"];\n    prompt?: DialogBoxParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, {\n    confirmation: true,\n  }) as Promise<boolean>;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import {\n  mdiDelete,\n  mdiInformationSlabCircleOutline,\n  mdiInformationOffOutline,\n  mdiPlus,\n  mdiPencilOutline,\n  mdiMathLog,\n} from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport memoize from \"memoize-one\";\n\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport \"@ha/components/ha-fab\";\nimport \"@ha/components/ha-icon\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-state-icon\";\nimport \"@ha/components/ha-svg-icon\";\nimport { navigate } from \"@ha/common/navigate\";\nimport { mainWindow } from \"@ha/common/dom/get_main_window\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { DataTableColumnContainer } from \"@ha/components/data-table/ha-data-table\";\nimport type { ExtEntityRegistryEntry } from \"@ha/data/entity_registry\";\nimport { showAlertDialog, showConfirmationDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\n\nimport { getEntityEntries, deleteEntity, getEntityConfig } from \"../services/websocket.service\";\nimport type { KNX } from \"../types/knx\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-entities-view\");\n\nexport interface EntityRow extends ExtEntityRegistryEntry {\n  entityState?: HassEntity;\n  friendly_name: string;\n  device_name: string;\n  area_name: string;\n  disabled: boolean;\n}\n\n@customElement(\"knx-entities-view\")\nexport class KNXEntitiesView extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @state() private knx_entities: EntityRow[] = [];\n\n  @state() private filterDevice: string | null = null;\n\n  protected firstUpdated() {\n    this._fetchEntities();\n  }\n\n  protected willUpdate() {\n    const urlParams = new URLSearchParams(mainWindow.location.search);\n    this.filterDevice = urlParams.get(\"device_id\");\n  }\n\n  private async _fetchEntities() {\n    getEntityEntries(this.hass)\n      .then((entries) => {\n        logger.debug(`Fetched ${entries.length} entity entries.`);\n        this.knx_entities = entries.map((entry) => {\n          const entityState: HassEntity | undefined = this.hass.states[entry.entity_id]; // undefined for disabled entities\n          const device = entry.device_id ? this.hass.devices[entry.device_id] : undefined;\n          const areaId = entry.area_id ?? device?.area_id;\n          const area = areaId ? this.hass.areas[areaId] : undefined;\n          return {\n            ...entry,\n            entityState,\n            friendly_name:\n              entityState?.attributes.friendly_name ?? entry.name ?? entry.original_name ?? \"\",\n            device_name: device?.name ?? \"\",\n            area_name: area?.name ?? \"\",\n            disabled: !!entry.disabled_by,\n          };\n        });\n      })\n      .catch((err) => {\n        logger.error(\"getEntityEntries\", err);\n        navigate(\"/knx/error\", { replace: true, data: err });\n      });\n  }\n\n  private _columns = memoize((_language): DataTableColumnContainer<EntityRow> => {\n    const iconWidth = \"56px\";\n    const actionWidth = \"224px\"; // 48px*4 + 16px*3 padding\n\n    return {\n      icon: {\n        title: \"\",\n        minWidth: iconWidth,\n        maxWidth: iconWidth,\n        type: \"icon\",\n        template: (entry) =>\n          entry.disabled\n            ? html`<ha-svg-icon\n                slot=\"icon\"\n                label=\"Disabled entity\"\n                .path=${mdiInformationOffOutline}\n                style=\"color: var(--disabled-text-color);\"\n              ></ha-svg-icon>`\n            : html`\n                <ha-state-icon\n                  slot=\"item-icon\"\n                  .hass=${this.hass}\n                  .stateObj=${entry.entityState}\n                ></ha-state-icon>\n              `,\n      },\n      friendly_name: {\n        showNarrow: true,\n        filterable: true,\n        sortable: true,\n        title: \"Friendly Name\",\n        flex: 2,\n        // sorting didn't work properly with templates\n      },\n      entity_id: {\n        filterable: true,\n        sortable: true,\n        title: \"Entity ID\",\n        flex: 1,\n      },\n      device_name: {\n        filterable: true,\n        sortable: true,\n        title: \"Device\",\n        flex: 1,\n      },\n      device_id: {\n        hidden: true, // for filtering only\n        title: \"Device ID\",\n        filterable: true,\n        template: (entry) => entry.device_id ?? \"\",\n      },\n      area_name: {\n        title: \"Area\",\n        sortable: true,\n        filterable: true,\n        flex: 1,\n      },\n      actions: {\n        showNarrow: true,\n        title: \"\",\n        minWidth: actionWidth,\n        maxWidth: actionWidth,\n        type: \"icon-button\",\n        template: (entry) => html`\n          <ha-icon-button\n            .label=${\"More info\"}\n            .path=${mdiInformationSlabCircleOutline}\n            .entityEntry=${entry}\n            @click=${this._entityMoreInfo}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.edit\")}\n            .path=${mdiPencilOutline}\n            .entityEntry=${entry}\n            @click=${this._entityEdit}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.knx.localize(\"entities_view_monitor_telegrams\")}\n            .path=${mdiMathLog}\n            .entityEntry=${entry}\n            @click=${this._showEntityTelegrams}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.delete\")}\n            .path=${mdiDelete}\n            .entityEntry=${entry}\n            @click=${this._entityDelete}\n          ></ha-icon-button>\n        `,\n      },\n    };\n  });\n\n  private _entityEdit = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = (ev.target as any).entityEntry as EntityRow;\n    navigate(\"/knx/entities/edit/\" + entry.entity_id);\n  };\n\n  private _entityMoreInfo = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = (ev.target as any).entityEntry as EntityRow;\n    fireEvent(mainWindow.document.querySelector(\"home-assistant\")!, \"hass-more-info\", {\n      entityId: entry.entity_id,\n    });\n  };\n\n  private _showEntityTelegrams = async (ev: Event) => {\n    ev.stopPropagation();\n    const entry = (ev.target as any)?.entityEntry as EntityRow;\n\n    if (!entry) {\n      logger.error(\"No entity entry found in event target\");\n      navigate(\"/knx/group_monitor\");\n      return;\n    }\n\n    try {\n      const entityConfig = await getEntityConfig(this.hass, entry.entity_id);\n      const knxData = entityConfig.data.knx;\n\n      // Extract all group addresses from KNX entity configuration\n      const groupAddresses = Object.values(knxData)\n        .flatMap((config) => {\n          if (typeof config !== \"object\" || config === null) return [];\n          const { write, state: stateAddress, passive } = config as any;\n          return [write, stateAddress, ...(Array.isArray(passive) ? passive : [])];\n        })\n        .filter((address): address is string => Boolean(address));\n\n      // Navigate to group monitor with entity-specific filter\n      const uniqueAddresses = [...new Set(groupAddresses)];\n      if (uniqueAddresses.length > 0) {\n        const destinationFilter = uniqueAddresses.join(\",\");\n        navigate(`/knx/group_monitor?destination=${encodeURIComponent(destinationFilter)}`);\n      } else {\n        logger.warn(\"No group addresses found for entity\", entry.entity_id);\n        navigate(\"/knx/group_monitor\");\n      }\n    } catch (err) {\n      logger.error(\"Failed to load entity configuration for monitor\", entry.entity_id, err);\n      // Fallback to unfiltered monitor on error\n      navigate(\"/knx/group_monitor\");\n    }\n  };\n\n  private _entityDelete = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = (ev.target as any).entityEntry as EntityRow;\n    showConfirmationDialog(this, {\n      text: `${this.hass.localize(\"ui.common.delete\")} ${entry.entity_id}?`,\n    }).then((confirmed) => {\n      if (confirmed) {\n        deleteEntity(this.hass, entry.entity_id)\n          .then(() => {\n            logger.debug(\"entity deleted\", entry.entity_id);\n            this._fetchEntities();\n          })\n          .catch((err: any) => {\n            showAlertDialog(this, {\n              title: \"Deletion failed\",\n              text: err,\n            });\n          });\n      }\n    });\n  };\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.knx_entities) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n        .columns=${this._columns(this.hass.language)}\n        .data=${this.knx_entities}\n        .hasFab=${true}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .clickable=${false}\n        .filter=${this.filterDevice}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.common.add\")}\n          extended\n          @click=${this._entityCreate}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _entityCreate() {\n    navigate(\"/knx/entities/create\");\n  }\n\n  static styles = css`\n    hass-loading-screen {\n      --app-header-background-color: var(--sidebar-background-color);\n      --app-header-text-color: var(--sidebar-text-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-entities-view\": KNXEntitiesView;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"names":["HaFab","FabBase","firstUpdated","changedProperties","super","this","style","setProperty","styles","css","mainWindow","TimeoutError","Error","constructor","timeout","params","captureStackTrace","name","message","iconMetadata","getStore","memoizeOne","iconStore","createStore","version","get","clear","set","MDI_PREFIXES","toRead","getIcon","iconName","Promise","resolve","reject","push","length","iconStoreProm","promiseTimeout","ms","promise","_resolve","setTimeout","race","store","iconName_","resolve_","reject_","promisifyRequest","then","icon","catch","e","readIcons","mdiDeprecatedIcons","chunks","debouncedWriteCache","debounce","keys","Object","iconsSets","all","values","forEach","icons","idx","entries","path","put","writeCache","cachedIcons","HaIcon","LitElement","willUpdate","changedProps","has","_path","undefined","_secondaryPath","_viewBox","_loadIcon","render","_legacy","html","nothing","requestedIcon","iconPrefix","origIconName","split","databaseIcon","customIcon","customIcons","_setCustomPath","deprecatedIcon","newName","removeIn","console","warn","fireEvent","level","mdiHomeAssistant","_err","chunk","lastChunk","start","file","findIconChunk","_setPath","iconPromise","fetch","response","json","secondaryPath","viewBox","iconPack","args","HaStateIcon","overrideIcon","stateObj","hass","entities","entity_id","attributes","_renderFallback","entityIcon","stateValue","icn","until","domain","computeStateDomain","FALLBACK_DOMAIN_ICONS","DEFAULT_DOMAIN_ICON","attribute","customIconsetsWindow","window","customIconsets","customIconsWindow","Proxy","obj","prop","loadGenericDialog","showDialogHelper","element","dialogParams","extra","origCancel","cancel","origConfirm","confirm","dialogTag","dialogImport","prompt","out","showAlertDialog","showConfirmationDialog","confirmation","showPromptDialog","logger","KNXLogger","KNXEntitiesView","_fetchEntities","urlParams","URLSearchParams","filterDevice","getEntityEntries","debug","knx_entities","map","entry","entityState","states","device","device_id","devices","areaId","area_id","area","areas","friendly_name","original_name","device_name","area_name","disabled","disabled_by","err","error","navigate","replace","data","narrow","route","tabs","knx","localize","_columns","language","_entityCreate","mdiPlus","memoize","_language","iconWidth","actionWidth","title","minWidth","maxWidth","type","template","mdiInformationOffOutline","showNarrow","filterable","sortable","flex","hidden","actions","mdiInformationSlabCircleOutline","_entityMoreInfo","mdiPencilOutline","_entityEdit","mdiMathLog","_showEntityTelegrams","mdiDelete","_entityDelete","ev","stopPropagation","target","entityEntry","entityId","knxData","getEntityConfig","groupAddresses","flatMap","config","write","state","stateAddress","passive","Array","isArray","filter","address","Boolean","uniqueAddresses","Set","destinationFilter","join","encodeURIComponent","text","confirmed","deleteEntity","reflect","s","disconnect","G","reconnect","t","deref","i","Y","pause","Z","resume","n","h","c","find","update","_$Cbt","r","o","_$CK","_$CX","isConnected","disconnected","_$Cwt","indexOf","setValue","reconnected","arguments","m"],"mappings":"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"}