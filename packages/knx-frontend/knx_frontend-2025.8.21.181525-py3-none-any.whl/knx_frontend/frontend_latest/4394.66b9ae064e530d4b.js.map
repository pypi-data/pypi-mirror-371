{"version":3,"file":"4394.66b9ae064e530d4b.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-code-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-template.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/documentation-url.ts"],"sourcesContent":["import type {\n  Completion,\n  CompletionContext,\n  CompletionResult,\n  CompletionSource,\n} from \"@codemirror/autocomplete\";\nimport type { Extension, TransactionSpec } from \"@codemirror/state\";\nimport type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { mdiArrowExpand, mdiArrowCollapse } from \"@mdi/js\";\nimport type { HassEntities } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { css, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\nconst renderIcon = (completion: Completion) => {\n  const icon = document.createElement(\"ha-icon\");\n  icon.icon = completion.label;\n  return icon;\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  public hass?: HomeAssistant;\n\n  // eslint-disable-next-line lit/no-native-attributes\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ attribute: \"read-only\", type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public linewrap = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-entities\" })\n  public autocompleteEntities = false;\n\n  @property({ type: Boolean, attribute: \"autocomplete-icons\" })\n  public autocompleteIcons = false;\n\n  @property({ type: Boolean }) public error = false;\n\n  @property({ type: Boolean, attribute: \"disable-fullscreen\" })\n  public disableFullscreen = false;\n\n  @state() private _value = \"\";\n\n  @state() private _isFullscreen = false;\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  private _iconList?: Completion[];\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.highlightingFor(\n      this.codemirror.state,\n      [this._loadedCodeMirror.tags.comment]\n    );\n    return !!this.renderRoot.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    // Force update on reconnection so editor is recreated\n    if (this.hasUpdated) {\n      this.requestUpdate();\n    }\n    this.addEventListener(\"keydown\", stopPropagation);\n    this.addEventListener(\"keydown\", this._handleKeyDown);\n    // This is unreachable as editor will not exist yet,\n    // but focus should not behave like this for good a11y.\n    // (@steverep to fix in autofocus PR)\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"keydown\", stopPropagation);\n    this.removeEventListener(\"keydown\", this._handleKeyDown);\n    if (this._isFullscreen) {\n      this._toggleFullscreen();\n    }\n    this.updateComplete.then(() => {\n      this.codemirror!.destroy();\n      delete this.codemirror;\n    });\n  }\n\n  // Ensure CodeMirror module is loaded before any update\n  protected override async scheduleUpdate() {\n    this._loadedCodeMirror ??= await import(\"../resources/codemirror\");\n    super.scheduleUpdate();\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n    if (!this.codemirror) {\n      this._createCodeMirror();\n      return;\n    }\n    const transactions: TransactionSpec[] = [];\n    if (changedProps.has(\"mode\")) {\n      transactions.push({\n        effects: [\n          this._loadedCodeMirror!.langCompartment!.reconfigure(this._mode),\n          this._loadedCodeMirror!.foldingCompartment.reconfigure(\n            this._getFoldingExtensions()\n          ),\n        ],\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"linewrap\")) {\n      transactions.push({\n        effects: this._loadedCodeMirror!.linewrapCompartment!.reconfigure(\n          this.linewrap ? this._loadedCodeMirror!.EditorView.lineWrapping : []\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      transactions.push({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (transactions.length > 0) {\n      this.codemirror.dispatch(...transactions);\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n    if (changedProps.has(\"_isFullscreen\")) {\n      this.classList.toggle(\"fullscreen\", this._isFullscreen);\n    }\n    if (changedProps.has(\"disableFullscreen\")) {\n      this._updateFullscreenButton();\n    }\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private _createCodeMirror() {\n    if (!this._loadedCodeMirror) {\n      throw new Error(\"Cannot create editor before CodeMirror is loaded\");\n    }\n    const extensions: Extension[] = [\n      this._loadedCodeMirror.lineNumbers(),\n      this._loadedCodeMirror.history(),\n      this._loadedCodeMirror.drawSelection(),\n      this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n      this._loadedCodeMirror.rectangularSelection(),\n      this._loadedCodeMirror.crosshairCursor(),\n      this._loadedCodeMirror.highlightSelectionMatches(),\n      this._loadedCodeMirror.highlightActiveLine(),\n      this._loadedCodeMirror.indentationMarkers({\n        thickness: 0,\n        activeThickness: 1,\n        colors: {\n          activeLight: \"var(--secondary-text-color)\",\n          activeDark: \"var(--secondary-text-color)\",\n        },\n      }),\n      this._loadedCodeMirror.keymap.of([\n        ...this._loadedCodeMirror.defaultKeymap,\n        ...this._loadedCodeMirror.searchKeymap,\n        ...this._loadedCodeMirror.historyKeymap,\n        ...this._loadedCodeMirror.tabKeyBindings,\n        saveKeyBinding,\n      ]),\n      this._loadedCodeMirror.langCompartment.of(this._mode),\n      this._loadedCodeMirror.haTheme,\n      this._loadedCodeMirror.haSyntaxHighlighting,\n      this._loadedCodeMirror.readonlyCompartment.of(\n        this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n      ),\n      this._loadedCodeMirror.linewrapCompartment.of(\n        this.linewrap ? this._loadedCodeMirror.EditorView.lineWrapping : []\n      ),\n      this._loadedCodeMirror.EditorView.updateListener.of(this._onUpdate),\n      this._loadedCodeMirror.foldingCompartment.of(\n        this._getFoldingExtensions()\n      ),\n    ];\n\n    if (!this.readOnly) {\n      const completionSources: CompletionSource[] = [];\n      if (this.autocompleteEntities && this.hass) {\n        completionSources.push(this._entityCompletions.bind(this));\n      }\n      if (this.autocompleteIcons) {\n        completionSources.push(this._mdiCompletions.bind(this));\n      }\n      if (completionSources.length > 0) {\n        extensions.push(\n          this._loadedCodeMirror.autocompletion({\n            override: completionSources,\n            maxRenderedOptions: 10,\n          })\n        );\n      }\n    }\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions,\n      }),\n      parent: this.renderRoot,\n    });\n\n    this._updateFullscreenButton();\n  }\n\n  private _updateFullscreenButton() {\n    const existingButton = this.renderRoot.querySelector(\".fullscreen-button\");\n\n    if (this.disableFullscreen) {\n      // Remove button if it exists and fullscreen is disabled\n      if (existingButton) {\n        existingButton.remove();\n      }\n      // Exit fullscreen if currently in fullscreen mode\n      if (this._isFullscreen) {\n        this._isFullscreen = false;\n      }\n      return;\n    }\n\n    // Create button if it doesn't exist\n    if (!existingButton) {\n      const button = document.createElement(\"ha-icon-button\");\n      (button as any).path = this._isFullscreen\n        ? mdiArrowCollapse\n        : mdiArrowExpand;\n      button.setAttribute(\n        \"label\",\n        this._isFullscreen ? \"Exit fullscreen\" : \"Enter fullscreen\"\n      );\n      button.classList.add(\"fullscreen-button\");\n      // Use bound method to ensure proper this context\n      button.addEventListener(\"click\", this._handleFullscreenClick);\n      this.renderRoot.appendChild(button);\n    } else {\n      // Update existing button\n      (existingButton as any).path = this._isFullscreen\n        ? mdiArrowCollapse\n        : mdiArrowExpand;\n      existingButton.setAttribute(\n        \"label\",\n        this._isFullscreen ? \"Exit fullscreen\" : \"Enter fullscreen\"\n      );\n    }\n  }\n\n  private _handleFullscreenClick = (e: Event) => {\n    e.preventDefault();\n    e.stopPropagation();\n    this._toggleFullscreen();\n  };\n\n  private _toggleFullscreen() {\n    this._isFullscreen = !this._isFullscreen;\n    this._updateFullscreenButton();\n  }\n\n  private _handleKeyDown = (e: KeyboardEvent) => {\n    if (this._isFullscreen && e.key === \"Escape\") {\n      e.preventDefault();\n      e.stopPropagation();\n      this._toggleFullscreen();\n    } else if (e.key === \"F11\" && !this.disableFullscreen) {\n      e.preventDefault();\n      e.stopPropagation();\n      this._toggleFullscreen();\n    }\n  };\n\n  private _getStates = memoizeOne((states: HassEntities): Completion[] => {\n    if (!states) {\n      return [];\n    }\n    const options = Object.keys(states).map((key) => ({\n      type: \"variable\",\n      label: key,\n      detail: states[key].attributes.friendly_name,\n      info: `State: ${states[key].state}`,\n    }));\n\n    return options;\n  });\n\n  private _entityCompletions(\n    context: CompletionContext\n  ): CompletionResult | null | Promise<CompletionResult | null> {\n    // Check for YAML mode and entity-related fields\n    if (this.mode === \"yaml\") {\n      const currentLine = context.state.doc.lineAt(context.pos);\n      const lineText = currentLine.text;\n\n      // Properties that commonly contain entity IDs\n      const entityProperties = [\n        \"entity_id\",\n        \"entity\",\n        \"entities\",\n        \"badges\",\n        \"devices\",\n        \"lights\",\n        \"light\",\n        \"group_members\",\n        \"scene\",\n        \"zone\",\n        \"zones\",\n      ];\n\n      // Create regex pattern for all entity properties\n      const propertyPattern = entityProperties.join(\"|\");\n      const entityFieldRegex = new RegExp(\n        `^\\\\s*(-\\\\s+)?(${propertyPattern}):\\\\s*`\n      );\n\n      // Check if we're in an entity field (single entity or list item)\n      const entityFieldMatch = lineText.match(entityFieldRegex);\n      const listItemMatch = lineText.match(/^\\s*-\\s+/);\n\n      if (entityFieldMatch) {\n        // Calculate the position after the entity field\n        const afterField = currentLine.from + entityFieldMatch[0].length;\n\n        // If cursor is after the entity field, show all entities\n        if (context.pos >= afterField) {\n          const states = this._getStates(this.hass!.states);\n\n          if (!states || !states.length) {\n            return null;\n          }\n\n          // Find what's already typed after the field\n          const typedText = context.state.sliceDoc(afterField, context.pos);\n\n          // Filter states based on what's typed\n          const filteredStates = typedText\n            ? states.filter((entityState) =>\n                entityState.label\n                  .toLowerCase()\n                  .startsWith(typedText.toLowerCase())\n              )\n            : states;\n\n          return {\n            from: afterField,\n            options: filteredStates,\n            validFor: /^[a-z_]*\\.?\\w*$/,\n          };\n        }\n      } else if (listItemMatch) {\n        // Check if this is a list item under an entity_id field\n        const lineNumber = currentLine.number;\n\n        // Look at previous lines to check if we're under an entity_id field\n        for (let i = lineNumber - 1; i > 0 && i >= lineNumber - 10; i--) {\n          const prevLine = context.state.doc.line(i);\n          const prevText = prevLine.text;\n\n          // Stop if we hit a non-indented line (new field)\n          if (\n            prevText.trim() &&\n            !prevText.startsWith(\" \") &&\n            !prevText.startsWith(\"\\t\")\n          ) {\n            break;\n          }\n\n          // Check if we found an entity property field\n          const entityListFieldRegex = new RegExp(\n            `^\\\\s*(${propertyPattern}):\\\\s*$`\n          );\n          if (prevText.match(entityListFieldRegex)) {\n            // We're in a list under an entity field\n            const afterListMarker = currentLine.from + listItemMatch[0].length;\n\n            if (context.pos >= afterListMarker) {\n              const states = this._getStates(this.hass!.states);\n\n              if (!states || !states.length) {\n                return null;\n              }\n\n              // Find what's already typed after the list marker\n              const typedText = context.state.sliceDoc(\n                afterListMarker,\n                context.pos\n              );\n\n              // Filter states based on what's typed\n              const filteredStates = typedText\n                ? states.filter((entityState) =>\n                    entityState.label\n                      .toLowerCase()\n                      .startsWith(typedText.toLowerCase())\n                  )\n                : states;\n\n              return {\n                from: afterListMarker,\n                options: filteredStates,\n                validFor: /^[a-z_]*\\.?\\w*$/,\n              };\n            }\n          }\n        }\n      }\n    }\n\n    // Original entity completion logic for non-YAML or when not in entity_id field\n    const entityWord = context.matchBefore(/[a-z_]{3,}\\.\\w*/);\n\n    if (\n      !entityWord ||\n      (entityWord.from === entityWord.to && !context.explicit)\n    ) {\n      return null;\n    }\n\n    const states = this._getStates(this.hass!.states);\n\n    if (!states || !states.length) {\n      return null;\n    }\n\n    return {\n      from: Number(entityWord.from),\n      options: states,\n      validFor: /^[a-z_]{3,}\\.\\w*$/,\n    };\n  }\n\n  private _getIconItems = async (): Promise<Completion[]> => {\n    if (!this._iconList) {\n      let iconList: {\n        name: string;\n        keywords: string[];\n      }[];\n      if (__SUPERVISOR__) {\n        iconList = [];\n      } else {\n        iconList = (await import(\"../../build/mdi/iconList.json\")).default;\n      }\n\n      this._iconList = iconList.map((icon) => ({\n        type: \"variable\",\n        label: `mdi:${icon.name}`,\n        detail: icon.keywords.join(\", \"),\n        info: renderIcon,\n      }));\n    }\n\n    return this._iconList;\n  };\n\n  private async _mdiCompletions(\n    context: CompletionContext\n  ): Promise<CompletionResult | null> {\n    const match = context.matchBefore(/mdi:\\S*/);\n\n    if (!match || (match.from === match.to && !context.explicit)) {\n      return null;\n    }\n\n    const iconItems = await this._getIconItems();\n\n    return {\n      from: Number(match.from),\n      options: iconItems,\n      validFor: /^mdi:\\S*$/,\n    };\n  }\n\n  private _onUpdate = (update: ViewUpdate): void => {\n    if (!update.docChanged) {\n      return;\n    }\n    this._value = update.state.doc.toString();\n    fireEvent(this, \"value-changed\", { value: this._value });\n  };\n\n  private _getFoldingExtensions = (): Extension => {\n    if (this.mode === \"yaml\") {\n      return [\n        this._loadedCodeMirror!.foldGutter(),\n        this._loadedCodeMirror!.foldingOnIndent,\n      ];\n    }\n\n    return [];\n  };\n\n  static styles = css`\n    :host {\n      position: relative;\n      display: block;\n    }\n\n    :host(.error-state) .cm-gutters {\n      border-color: var(--error-state-color, red);\n    }\n\n    .fullscreen-button {\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      z-index: 1;\n      color: var(--secondary-text-color);\n      background-color: var(--secondary-background-color);\n      border-radius: 50%;\n      opacity: 0.9;\n      transition: opacity 0.2s;\n      --mdc-icon-button-size: 32px;\n      --mdc-icon-size: 18px;\n      /* Ensure button is clickable on iOS */\n      cursor: pointer;\n      -webkit-tap-highlight-color: transparent;\n      touch-action: manipulation;\n    }\n\n    .fullscreen-button:hover,\n    .fullscreen-button:active {\n      opacity: 1;\n    }\n\n    @media (hover: none) {\n      .fullscreen-button {\n        opacity: 0.8;\n      }\n    }\n\n    :host(.fullscreen) {\n      position: fixed !important;\n      top: calc(var(--header-height, 56px) + 8px) !important;\n      left: 8px !important;\n      right: 8px !important;\n      bottom: 8px !important;\n      z-index: 9999 !important;\n      border-radius: 12px !important;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3) !important;\n      overflow: hidden !important;\n      background-color: var(\n        --code-editor-background-color,\n        var(--card-background-color)\n      ) !important;\n      margin: 0 !important;\n      padding-top: var(--safe-area-inset-top) !important;\n      padding-left: var(--safe-area-inset-left) !important;\n      padding-right: var(--safe-area-inset-right) !important;\n      padding-bottom: var(--safe-area-inset-bottom) !important;\n      box-sizing: border-box !important;\n      display: block !important;\n    }\n\n    :host(.fullscreen) .cm-editor {\n      height: 100% !important;\n      max-height: 100% !important;\n      border-radius: 0 !important;\n    }\n\n    :host(.fullscreen) .fullscreen-button {\n      top: calc(var(--safe-area-inset-top, 0px) + 8px);\n      right: calc(var(--safe-area-inset-right, 0px) + 8px);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { css, html, nothing, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-code-editor\";\nimport \"../ha-input-helper-text\";\nimport \"../ha-alert\";\n\nconst WARNING_STRINGS = [\"template:\", \"sensor:\", \"state:\", \"trigger: template\"];\n\n@customElement(\"ha-selector-template\")\nexport class HaTemplateSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private warn: string | undefined = undefined;\n\n  protected render() {\n    return html`\n      ${this.warn\n        ? html`<ha-alert alert-type=\"warning\"\n            >${this.hass.localize(\n              \"ui.components.selectors.template.yaml_warning\",\n              { string: this.warn }\n            )}\n            <br />\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/configuration/templating/\"\n              )}\n              >${this.hass.localize(\n                \"ui.components.selectors.template.learn_more\"\n              )}</a\n            ></ha-alert\n          >`\n        : nothing}\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \"*\" : \"\"}</p>`\n        : nothing}\n      <ha-code-editor\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${this.value}\n        .readOnly=${this.disabled}\n        autofocus\n        autocomplete-entities\n        autocomplete-icons\n        @value-changed=${this._handleChange}\n        dir=\"ltr\"\n        linewrap\n      ></ha-code-editor>\n      ${this.helper\n        ? html`<ha-input-helper-text .disabled=${this.disabled}\n            >${this.helper}</ha-input-helper-text\n          >`\n        : nothing}\n    `;\n  }\n\n  private _handleChange(ev) {\n    ev.stopPropagation();\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    this.warn = WARNING_STRINGS.find((str) => value.includes(str));\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static styles = css`\n    p {\n      margin-top: 0;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-template\": HaTemplateSelector;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\n\nexport const documentationUrl = (hass: HomeAssistant, path: string) =>\n  `https://${\n    hass.config.version.includes(\"b\")\n      ? \"rc\"\n      : hass.config.version.includes(\"dev\")\n        ? \"next\"\n        : \"www\"\n  }.home-assistant.io${path}`;\n"],"names":["saveKeyBinding","key","run","view","fireEvent","dom","renderIcon","completion","icon","document","createElement","label","HaCodeEditor","ReactiveElement","value","this","_value","codemirror","state","doc","toString","hasComments","_loadedCodeMirror","className","highlightingFor","tags","comment","renderRoot","querySelector","connectedCallback","super","hasUpdated","requestUpdate","addEventListener","stopPropagation","_handleKeyDown","autofocus","focus","disconnectedCallback","removeEventListener","_isFullscreen","_toggleFullscreen","updateComplete","then","destroy","scheduleUpdate","update","changedProps","_createCodeMirror","transactions","has","push","effects","langCompartment","reconfigure","_mode","foldingCompartment","_getFoldingExtensions","readonlyCompartment","EditorView","editable","of","readOnly","linewrapCompartment","linewrap","lineWrapping","changes","from","to","length","insert","dispatch","classList","toggle","error","_updateFullscreenButton","langs","mode","Error","extensions","lineNumbers","history","drawSelection","EditorState","allowMultipleSelections","rectangularSelection","crosshairCursor","highlightSelectionMatches","highlightActiveLine","indentationMarkers","thickness","activeThickness","colors","activeLight","activeDark","keymap","defaultKeymap","searchKeymap","historyKeymap","tabKeyBindings","haTheme","haSyntaxHighlighting","updateListener","_onUpdate","completionSources","autocompleteEntities","hass","_entityCompletions","bind","autocompleteIcons","_mdiCompletions","autocompletion","override","maxRenderedOptions","create","parent","existingButton","disableFullscreen","remove","path","mdiArrowCollapse","mdiArrowExpand","setAttribute","button","add","_handleFullscreenClick","appendChild","context","currentLine","lineAt","pos","lineText","text","propertyPattern","join","entityFieldRegex","RegExp","entityFieldMatch","match","listItemMatch","afterField","states","_getStates","typedText","sliceDoc","options","filter","entityState","toLowerCase","startsWith","validFor","lineNumber","number","i","prevText","line","trim","entityListFieldRegex","afterListMarker","entityWord","matchBefore","explicit","Number","iconItems","_getIconItems","args","e","preventDefault","memoizeOne","Object","keys","map","type","detail","attributes","friendly_name","info","_iconList","iconList","default","name","keywords","docChanged","foldGutter","foldingOnIndent","styles","css","Boolean","attribute","WARNING_STRINGS","HaTemplateSelector","LitElement","render","html","warn","localize","string","documentationUrl","nothing","required","disabled","_handleChange","helper","ev","target","find","str","includes","undefined","config","version"],"mappings":"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"}