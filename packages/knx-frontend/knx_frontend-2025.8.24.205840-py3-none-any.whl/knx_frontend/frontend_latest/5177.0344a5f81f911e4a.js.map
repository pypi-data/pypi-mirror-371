{"version":3,"file":"5177.0344a5f81f911e4a.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-dialog-header.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-md-dialog.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/generic/dialog-box.ts","webpack://knx-frontend/./homeassistant-frontend/src/resources/polyfills/stateset.ts"],"sourcesContent":["import Button from \"@awesome.me/webawesome/dist/components/button/button\";\nimport { css, type CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\nimport { StateSet } from \"../resources/polyfills/stateset\";\n\nexport type Appearance = \"accent\" | \"filled\" | \"outlined\" | \"plain\";\n\n/**\n * Home Assistant button component\n *\n * @element ha-button\n * @extends {Button}\n *\n * @summary\n * A stylable button component supporting Home Assistant theming, variants, and appearances based on webawesome button.\n *\n * @slot - Label of the button\n * @slot start - The prefix container (usually for icons).\n * @slot end - The suffix container (usually for icons).\n *\n * @csspart base - The component's base wrapper.\n * @csspart start - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart end - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<sl-icon>` element.\n * @csspart spinner - The spinner that shows when the button is in the loading state.\n *\n * @cssprop --ha-button-height - The height of the button.\n * @cssprop --ha-button-radius - The border radius of the button. defaults to `var(--wa-border-radius-pill)`.\n *\n * @attr {(\"small\"|\"medium\")} size - Sets the button size.\n * @attr {(\"brand\"|\"neutral\"|\"danger\"|\"warning\"|\"success\")} variant - Sets the button color variant. \"primary\" is default.\n * @attr {(\"accent\"|\"filled\"|\"plain\")} appearance - Sets the button appearance.\n * @attr {boolean} loading - shows a loading indicator instead of the buttons label and disable buttons click.\n * @attr {boolean} disabled - Disables the button and prevents user interaction.\n */\n@customElement(\"ha-button\")\nexport class HaButton extends Button {\n  variant: \"brand\" | \"neutral\" | \"success\" | \"warning\" | \"danger\" = \"brand\";\n\n  attachInternals() {\n    const internals = super.attachInternals();\n    Object.defineProperty(internals, \"states\", {\n      value: new StateSet(this, internals.states),\n    });\n    return internals;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Button.styles,\n      css`\n        .button {\n          /* set theme vars */\n          --wa-form-control-padding-inline: 16px;\n          --wa-font-weight-action: var(--ha-font-weight-medium);\n          --wa-border-radius-pill: 9999px;\n          --wa-form-control-border-radius: var(\n            --ha-button-radius,\n            var(--wa-border-radius-pill)\n          );\n\n          --wa-form-control-height: var(\n            --ha-button-height,\n            var(--button-height, 40px)\n          );\n\n          font-size: var(--ha-font-size-m);\n          line-height: 1;\n        }\n\n        :host([size=\"small\"]) .button {\n          --wa-form-control-height: var(\n            --ha-button-height,\n            var(--button-height, 32px)\n          );\n          font-size: var(--wa-font-size-s, var(--ha-font-size-m));\n        }\n\n        :host([variant=\"brand\"]) {\n          --color-fill-normal-active: var(--color-fill-primary-normal-active);\n          --color-fill-normal-hover: var(--color-fill-primary-normal-hover);\n          --color-fill-loud-active: var(--color-fill-primary-loud-active);\n          --color-fill-loud-hover: var(--color-fill-primary-loud-hover);\n        }\n\n        :host([variant=\"neutral\"]) {\n          --color-fill-normal-active: var(--color-fill-neutral-normal-active);\n          --color-fill-normal-hover: var(--color-fill-neutral-normal-hover);\n          --color-fill-loud-active: var(--color-fill-neutral-loud-active);\n          --color-fill-loud-hover: var(--color-fill-neutral-loud-hover);\n        }\n\n        :host([variant=\"success\"]) {\n          --color-fill-normal-active: var(--color-fill-success-normal-active);\n          --color-fill-normal-hover: var(--color-fill-success-normal-hover);\n          --color-fill-loud-active: var(--color-fill-success-loud-active);\n          --color-fill-loud-hover: var(--color-fill-success-loud-hover);\n        }\n\n        :host([variant=\"warning\"]) {\n          --color-fill-normal-active: var(--color-fill-warning-normal-active);\n          --color-fill-normal-hover: var(--color-fill-warning-normal-hover);\n          --color-fill-loud-active: var(--color-fill-warning-loud-active);\n          --color-fill-loud-hover: var(--color-fill-warning-loud-hover);\n        }\n\n        :host([variant=\"danger\"]) {\n          --color-fill-normal-active: var(--color-fill-danger-normal-active);\n          --color-fill-normal-hover: var(--color-fill-danger-normal-hover);\n          --color-fill-loud-active: var(--color-fill-danger-loud-active);\n          --color-fill-loud-hover: var(--color-fill-danger-loud-hover);\n        }\n\n        :host([appearance~=\"plain\"]) .button {\n          color: var(--wa-color-on-normal);\n        }\n        :host([appearance~=\"plain\"]) .button.disabled {\n          background-color: var(--transparent-none);\n          color: var(--color-on-disabled-quiet);\n        }\n\n        :host([appearance~=\"outlined\"]) .button.disabled {\n          background-color: var(--transparent-none);\n          color: var(--color-on-disabled-quiet);\n        }\n\n        @media (hover: hover) {\n          :host([appearance~=\"filled\"])\n            .button:not(.disabled):not(.loading):hover {\n            background-color: var(--color-fill-normal-hover);\n          }\n          :host([appearance~=\"accent\"])\n            .button:not(.disabled):not(.loading):hover {\n            background-color: var(--color-fill-loud-hover);\n          }\n          :host([appearance~=\"plain\"])\n            .button:not(.disabled):not(.loading):hover {\n            color: var(--wa-color-on-normal);\n          }\n        }\n        :host([appearance~=\"filled\"])\n          .button:not(.disabled):not(.loading):active {\n          background-color: var(--color-fill-normal-active);\n        }\n        :host([appearance~=\"filled\"]) .button.disabled {\n          background-color: var(--color-fill-disabled-normal-resting);\n          color: var(--color-on-disabled-normal);\n        }\n\n        :host([appearance~=\"accent\"]) .button {\n          background-color: var(\n            --wa-color-fill-loud,\n            var(--wa-color-neutral-fill-loud)\n          );\n        }\n        :host([appearance~=\"accent\"])\n          .button:not(.disabled):not(.loading):active {\n          background-color: var(--color-fill-loud-active);\n        }\n        :host([appearance~=\"accent\"]) .button.disabled {\n          background-color: var(--color-fill-disabled-loud-resting);\n          color: var(--color-on-disabled-loud);\n        }\n\n        :host([loading]) {\n          pointer-events: none;\n        }\n\n        .button.disabled {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button\": HaButton;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-dialog-header\")\nexport class HaDialogHeader extends LitElement {\n  protected render() {\n    return html`\n      <header class=\"header\">\n        <div class=\"header-bar\">\n          <section class=\"header-navigation-icon\">\n            <slot name=\"navigationIcon\"></slot>\n          </section>\n          <section class=\"header-content\">\n            <div class=\"header-title\">\n              <slot name=\"title\"></slot>\n            </div>\n            <div class=\"header-subtitle\">\n              <slot name=\"subtitle\"></slot>\n            </div>\n          </section>\n          <section class=\"header-action-items\">\n            <slot name=\"actionItems\"></slot>\n          </section>\n        </div>\n        <slot></slot>\n      </header>\n    `;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        :host([show-border]) {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n        .header-bar {\n          display: flex;\n          flex-direction: row;\n          align-items: flex-start;\n          padding: 4px;\n          box-sizing: border-box;\n        }\n        .header-content {\n          flex: 1;\n          padding: 10px 4px;\n          min-width: 0;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n        .header-title {\n          font-size: var(--ha-font-size-xl);\n          line-height: var(--ha-line-height-condensed);\n          font-weight: var(--ha-font-weight-normal);\n        }\n        .header-subtitle {\n          font-size: var(--ha-font-size-m);\n          line-height: 20px;\n          color: var(--secondary-text-color);\n        }\n        @media all and (min-width: 450px) and (min-height: 500px) {\n          .header-bar {\n            padding: 16px;\n          }\n        }\n        .header-navigation-icon {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n        .header-action-items {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-header\": HaDialogHeader;\n  }\n}\n","import { Dialog } from \"@material/web/dialog/internal/dialog\";\nimport { styles } from \"@material/web/dialog/internal/dialog-styles\";\nimport {\n  type DialogAnimation,\n  DIALOG_DEFAULT_CLOSE_ANIMATION,\n  DIALOG_DEFAULT_OPEN_ANIMATION,\n} from \"@material/web/dialog/internal/animations\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n// workaround to be able to overlay a dialog with another dialog\nDialog.addInitializer(async (instance) => {\n  await instance.updateComplete;\n\n  const dialogInstance = instance as HaMdDialog;\n\n  // @ts-expect-error dialog is private\n  dialogInstance.dialog.prepend(dialogInstance.scrim);\n  // @ts-expect-error scrim is private\n  dialogInstance.scrim.style.inset = 0;\n  // @ts-expect-error scrim is private\n  dialogInstance.scrim.style.zIndex = 0;\n\n  const { getOpenAnimation, getCloseAnimation } = dialogInstance;\n  dialogInstance.getOpenAnimation = () => {\n    const animations = getOpenAnimation.call(this);\n    animations.container = [\n      ...(animations.container ?? []),\n      ...(animations.dialog ?? []),\n    ];\n    animations.dialog = [];\n    return animations;\n  };\n  dialogInstance.getCloseAnimation = () => {\n    const animations = getCloseAnimation.call(this);\n    animations.container = [\n      ...(animations.container ?? []),\n      ...(animations.dialog ?? []),\n    ];\n    animations.dialog = [];\n    return animations;\n  };\n});\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nlet DIALOG_POLYFILL: Promise<typeof import(\"dialog-polyfill\")>;\n\n/**\n * Based on the home assistant design: https://design.home-assistant.io/#components/ha-dialogs\n *\n */\n@customElement(\"ha-md-dialog\")\nexport class HaMdDialog extends Dialog {\n  /**\n   * When true the dialog will not close when the user presses the esc key or press out of the dialog.\n   */\n  @property({ attribute: \"disable-cancel-action\", type: Boolean })\n  public disableCancelAction = false;\n\n  private _polyfillDialogRegistered = false;\n\n  constructor() {\n    super();\n    this.addEventListener(\"cancel\", this._handleCancel);\n\n    if (typeof HTMLDialogElement !== \"function\") {\n      this.addEventListener(\"open\", this._handleOpen);\n\n      if (!DIALOG_POLYFILL) {\n        DIALOG_POLYFILL = import(\"dialog-polyfill\");\n      }\n    }\n\n    // if browser doesn't support animate API disable open/close animations\n    if (this.animate === undefined) {\n      this.quick = true;\n    }\n\n    // if browser doesn't support animate API disable open/close animations\n    if (this.animate === undefined) {\n      this.quick = true;\n    }\n  }\n\n  // prevent open in older browsers and wait for polyfill to load\n  private async _handleOpen(openEvent: Event) {\n    openEvent.preventDefault();\n\n    if (this._polyfillDialogRegistered) {\n      return;\n    }\n\n    this._polyfillDialogRegistered = true;\n    this._loadPolyfillStylesheet(\"/static/polyfills/dialog-polyfill.css\");\n    const dialog = this.shadowRoot?.querySelector(\n      \"dialog\"\n    ) as HTMLDialogElement;\n\n    const dialogPolyfill = await DIALOG_POLYFILL;\n    dialogPolyfill.default.registerDialog(dialog);\n    this.removeEventListener(\"open\", this._handleOpen);\n\n    this.show();\n  }\n\n  private async _loadPolyfillStylesheet(href) {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = href;\n\n    return new Promise<void>((resolve, reject) => {\n      link.onload = () => resolve();\n      link.onerror = () =>\n        reject(new Error(`Stylesheet failed to load: ${href}`));\n\n      this.shadowRoot?.appendChild(link);\n    });\n  }\n\n  private _handleCancel(closeEvent: Event) {\n    if (this.disableCancelAction) {\n      closeEvent.preventDefault();\n      const dialogElement = this.shadowRoot?.querySelector(\"dialog .container\");\n      if (this.animate !== undefined) {\n        dialogElement?.animate(\n          [\n            {\n              transform: \"rotate(-1deg)\",\n              \"animation-timing-function\": \"ease-in\",\n            },\n            {\n              transform: \"rotate(1.5deg)\",\n              \"animation-timing-function\": \"ease-out\",\n            },\n            {\n              transform: \"rotate(0deg)\",\n              \"animation-timing-function\": \"ease-in\",\n            },\n          ],\n          {\n            duration: 200,\n            iterations: 2,\n          }\n        );\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --md-dialog-container-color: var(--card-background-color);\n        --md-dialog-headline-color: var(--primary-text-color);\n        --md-dialog-supporting-text-color: var(--primary-text-color);\n        --md-sys-color-scrim: #000000;\n\n        --md-dialog-headline-weight: var(--ha-font-weight-normal);\n        --md-dialog-headline-size: var(--ha-font-size-xl);\n        --md-dialog-supporting-text-size: var(--ha-font-size-m);\n        --md-dialog-supporting-text-line-height: var(--ha-line-height-normal);\n      }\n\n      :host([type=\"alert\"]) {\n        min-width: 320px;\n      }\n\n      @media all and (max-width: 450px), all and (max-height: 500px) {\n        :host(:not([type=\"alert\"])) {\n          min-width: calc(\n            100vw - var(--safe-area-inset-right) - var(--safe-area-inset-left)\n          );\n          max-width: calc(\n            100vw - var(--safe-area-inset-right) - var(--safe-area-inset-left)\n          );\n          min-height: 100%;\n          max-height: 100%;\n          --md-dialog-container-shape: 0;\n        }\n      }\n\n      ::slotted(ha-dialog-header[slot=\"headline\"]) {\n        display: contents;\n      }\n\n      slot[name=\"actions\"]::slotted(*) {\n        padding: 16px;\n      }\n\n      .scroller {\n        overflow: var(--dialog-content-overflow, auto);\n      }\n\n      slot[name=\"content\"]::slotted(*) {\n        padding: var(--dialog-content-padding, 24px);\n      }\n      .scrim {\n        z-index: 10; /* overlay navigation */\n      }\n    `,\n  ];\n}\n\n// by default the dialog open/close animation will be from/to the top\n// but if we have a special mobile dialog which is at the bottom of the screen, a from bottom animation can be used:\nconst OPEN_FROM_BOTTOM_ANIMATION: DialogAnimation = {\n  ...DIALOG_DEFAULT_OPEN_ANIMATION,\n  dialog: [\n    [\n      // Dialog slide up\n      [{ transform: \"translateY(50px)\" }, { transform: \"translateY(0)\" }],\n      { duration: 500, easing: \"cubic-bezier(.3,0,0,1)\" },\n    ],\n  ],\n  container: [\n    [\n      // Container fade in\n      [{ opacity: 0 }, { opacity: 1 }],\n      { duration: 50, easing: \"linear\", pseudoElement: \"::before\" },\n    ],\n  ],\n};\n\nconst CLOSE_TO_BOTTOM_ANIMATION: DialogAnimation = {\n  ...DIALOG_DEFAULT_CLOSE_ANIMATION,\n  dialog: [\n    [\n      // Dialog slide down\n      [{ transform: \"translateY(0)\" }, { transform: \"translateY(50px)\" }],\n      { duration: 150, easing: \"cubic-bezier(.3,0,0,1)\" },\n    ],\n  ],\n  container: [\n    [\n      // Container fade out\n      [{ opacity: \"1\" }, { opacity: \"0\" }],\n      { delay: 100, duration: 50, easing: \"linear\", pseudoElement: \"::before\" },\n    ],\n  ],\n};\n\nexport const getMobileOpenFromBottomAnimation = () => {\n  const matches = window.matchMedia(\n    \"all and (max-width: 450px), all and (max-height: 500px)\"\n  ).matches;\n  return matches ? OPEN_FROM_BOTTOM_ANIMATION : DIALOG_DEFAULT_OPEN_ANIMATION;\n};\n\nexport const getMobileCloseToBottomAnimation = () => {\n  const matches = window.matchMedia(\n    \"all and (max-width: 450px), all and (max-height: 500px)\"\n  ).matches;\n  return matches ? CLOSE_TO_BOTTOM_ANIMATION : DIALOG_DEFAULT_CLOSE_ANIMATION;\n};\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-dialog\": HaMdDialog;\n  }\n}\n","import { mdiAlertOutline } from \"@mdi/js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-md-dialog\";\nimport type { HaMdDialog } from \"../../components/ha-md-dialog\";\nimport \"../../components/ha-dialog-header\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-button\";\nimport \"../../components/ha-textfield\";\nimport type { HaTextField } from \"../../components/ha-textfield\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @state() private _closeState?: \"canceled\" | \"confirmed\";\n\n  @query(\"ha-textfield\") private _textField?: HaTextField;\n\n  @query(\"ha-md-dialog\") private _dialog?: HaMdDialog;\n\n  private _closePromise?: Promise<void>;\n\n  private _closeResolve?: () => void;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    if (this._closePromise) {\n      await this._closePromise;\n    }\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    const dialogTitle =\n      this._params.title ||\n      (this._params.confirmation &&\n        this.hass.localize(\"ui.dialogs.generic.default_confirmation_title\"));\n\n    return html`\n      <ha-md-dialog\n        open\n        .disableCancelAction=${confirmPrompt || false}\n        @closed=${this._dialogClosed}\n        type=\"alert\"\n        aria-labelledby=\"dialog-box-title\"\n        aria-describedby=\"dialog-box-description\"\n      >\n        <div slot=\"headline\">\n          <span .title=${dialogTitle} id=\"dialog-box-title\">\n            ${this._params.warning\n              ? html`<ha-svg-icon\n                  .path=${mdiAlertOutline}\n                  style=\"color: var(--warning-color)\"\n                ></ha-svg-icon> `\n              : nothing}\n            ${dialogTitle}\n          </span>\n        </div>\n        <div slot=\"content\" id=\"dialog-box-description\">\n          ${this._params.text ? html` <p>${this._params.text}</p> ` : \"\"}\n          ${this._params.prompt\n            ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .placeholder=${this._params.placeholder}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                  .min=${this._params.inputMin}\n                  .max=${this._params.inputMax}\n                ></ha-textfield>\n              `\n            : \"\"}\n        </div>\n        <div slot=\"actions\">\n          ${confirmPrompt &&\n          html`\n            <ha-button\n              @click=${this._dismiss}\n              ?dialogInitialFocus=${!this._params.prompt &&\n              this._params.destructive}\n              appearance=\"plain\"\n            >\n              ${this._params.dismissText\n                ? this._params.dismissText\n                : this.hass.localize(\"ui.common.cancel\")}\n            </ha-button>\n          `}\n          <ha-button\n            @click=${this._confirm}\n            ?dialogInitialFocus=${!this._params.prompt &&\n            !this._params.destructive}\n            variant=${this._params.destructive ? \"danger\" : \"brand\"}\n          >\n            ${this._params.confirmText\n              ? this._params.confirmText\n              : this.hass.localize(\"ui.common.ok\")}\n          </ha-button>\n        </div>\n      </ha-md-dialog>\n    `;\n  }\n\n  private _cancel(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n  }\n\n  private _dismiss(): void {\n    this._closeState = \"canceled\";\n    this._cancel();\n    this._closeDialog();\n  }\n\n  private _confirm(): void {\n    this._closeState = \"confirmed\";\n    if (this._params!.confirm) {\n      this._params!.confirm(this._textField?.value);\n    }\n    this._closeDialog();\n  }\n\n  private _closeDialog() {\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    this._dialog?.close();\n    this._closePromise = new Promise((resolve) => {\n      this._closeResolve = resolve;\n    });\n  }\n\n  private _dialogClosed() {\n    if (!this._closeState) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n      this._cancel();\n    }\n    this._closeState = undefined;\n    this._params = undefined;\n    this._closeResolve?.();\n    this._closeResolve = undefined;\n  }\n\n  static styles = css`\n    :host([inert]) {\n      pointer-events: initial !important;\n      cursor: initial !important;\n    }\n    a {\n      color: var(--primary-color);\n    }\n    p {\n      margin: 0;\n      color: var(--primary-text-color);\n    }\n    .no-bottom-padding {\n      padding-bottom: 0;\n    }\n    .secondary {\n      color: var(--secondary-text-color);\n    }\n    ha-textfield {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n","// A small polyfill for CSSStateSet\nexport class StateSet extends Set<string> {\n  private _el: Element;\n\n  private _existing: null | Set<string> = null;\n\n  constructor(el: Element, existing: Set<string> | null = null) {\n    super();\n    this._el = el;\n    this._existing = existing;\n  }\n\n  add(state: string) {\n    super.add(state);\n    const existing = this._existing;\n    if (existing) {\n      try {\n        existing.add(state);\n      } catch {\n        existing.add(`--${state}`);\n      }\n    } else {\n      this._el.setAttribute(`state-${state}`, \"\");\n    }\n    return this;\n  }\n\n  delete(state: string) {\n    super.delete(state);\n    const existing = this._existing;\n    if (existing) {\n      existing.delete(state);\n      existing.delete(`--${state}`);\n    } else {\n      this._el.removeAttribute(`state-${state}`);\n    }\n    return true;\n  }\n\n  has(state: string) {\n    return super.has(state);\n  }\n\n  clear() {\n    for (const state of this) this.delete(state);\n  }\n}\nconst replaceSync = CSSStyleSheet.prototype.replaceSync;\nObject.defineProperty(CSSStyleSheet.prototype, \"replaceSync\", {\n  value: function (text) {\n    text = text.replace(\n      /:state\\(([^)]+)\\)/g,\n      \":where(:state($1), :--$1, [state-$1])\"\n    );\n    replaceSync.call(this, text);\n  },\n});\n"],"names":["HaButton","Button","attachInternals","internals","Object","defineProperty","value","StateSet","states","styles","css","args","variant","HaDialogHeader","LitElement","render","html","DIALOG_POLYFILL","Dialog","instance","updateComplete","dialogInstance","dialog","prepend","scrim","style","inset","zIndex","getOpenAnimation","getCloseAnimation","animations","call","container","HaMdDialog","_handleOpen","openEvent","preventDefault","this","_polyfillDialogRegistered","_loadPolyfillStylesheet","shadowRoot","querySelector","default","registerDialog","removeEventListener","show","href","link","document","createElement","rel","Promise","resolve","reject","onload","onerror","Error","appendChild","_handleCancel","closeEvent","disableCancelAction","dialogElement","undefined","animate","transform","duration","iterations","constructor","super","addEventListener","HTMLDialogElement","quick","attribute","type","Boolean","DIALOG_DEFAULT_OPEN_ANIMATION","DIALOG_DEFAULT_CLOSE_ANIMATION","DialogBox","showDialog","params","_closePromise","_params","closeDialog","confirmation","prompt","_dismiss","nothing","confirmPrompt","dialogTitle","title","hass","localize","_dialogClosed","warning","mdiAlertOutline","text","ifDefined","defaultValue","placeholder","inputLabel","inputType","inputMin","inputMax","destructive","dismissText","_confirm","confirmText","_cancel","cancel","_closeState","_closeDialog","confirm","_textField","fireEvent","localName","_dialog","close","_closeResolve","Set","add","state","existing","_existing","_el","setAttribute","delete","removeAttribute","has","clear","el","replaceSync","CSSStyleSheet","prototype","replace"],"mappings":"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"}