"""Test direct de l'ex√©cuteur - CORRIG√â"""

import sys
import os
import time
import asyncio
from datetime import datetime

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pyscheduler.core.executors import ExecutorFactory, ExecutorType
from pyscheduler.config import Priority

def test_function():
    print(f"üî• TEST FUNCTION EX√âCUT√âE √† {datetime.now().strftime('%H:%M:%S')}")
    return "success"

async def test_async_function():
    print(f"üéâ ASYNC FUNCTION EX√âCUT√âE √† {datetime.now().strftime('%H:%M:%S')}")
    return "async_success"

def main():
    print("üß™ Test direct des ex√©cuteurs - CORRIG√â")
    print("=" * 50)
    
    # Test ThreadExecutor
    print("1. Test ThreadExecutor...")
    thread_executor = ExecutorFactory.create_executor(ExecutorType.THREAD, max_workers=2)
    thread_executor.start()
    
    # Cr√©er une fausse t√¢che COMPL√àTE
    class FakeTask:
        def __init__(self, func, name):
            self.func = func
            self.name = name
            self.priority = Priority.NORMAL  # ‚Üê AJOUT√â !
        
        async def execute(self):
            print(f"üöÄ D√©but ex√©cution de {self.name}")
            result = self.func()
            print(f"‚úÖ T√¢che {self.name} ex√©cut√©e avec r√©sultat: {result}")
            
            # Cr√©er un TaskExecution basique
            from pyscheduler.core.task import TaskExecution, TaskStatus
            execution = TaskExecution(
                task_name=self.name,
                execution_id=f"{self.name}_test",
                status=TaskStatus.SUCCESS,
                start_time=datetime.now(),
                end_time=datetime.now(),
                result=result
            )
            return execution
    
    fake_task = FakeTask(test_function, "test_sync")
    
    # Soumettre la t√¢che
    print("Soumission de la t√¢che...")
    request_id = thread_executor.submit_task(fake_task)
    print(f"‚úÖ T√¢che soumise avec ID: {request_id}")
    
    # Attendre l'ex√©cution
    print("Attente de l'ex√©cution (5 secondes)...")
    time.sleep(5)
    
    # V√©rifier les stats
    stats = thread_executor.get_stats()
    print(f"üìä Stats: {stats}")
    
    # Arr√™ter
    thread_executor.stop()
    print("‚úÖ Test termin√©")

if __name__ == "__main__":
    main()