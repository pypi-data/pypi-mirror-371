"""
PyScheduler - Gestion d'erreurs et robustesse
===========================================

Exemples de gestion d'erreurs robuste avec PyScheduler.
"""

import random
import time
from datetime import datetime
from pyscheduler import PyScheduler, task
from pyscheduler.config import RetryConfig, Priority

# ============================================================================
# EXEMPLES D'ERREURS ET RETRY
# ============================================================================

@task(
    interval=8,
    retry_config=RetryConfig(max_attempts=3, backoff_factor=2.0),
    timeout=5.0
)
def flaky_api_call():
    """API qui √©choue 50% du temps"""
    print(f"üåê [API] Tentative d'appel √† {datetime.now().strftime('%H:%M:%S')}")
    
    if random.random() < 0.5:
        raise ConnectionError("API temporairement indisponible")
    
    print("‚úÖ [API] Succ√®s!")
    return {"status": "success", "data": "api_data"}

@task(interval=10, timeout=3.0)
def slow_task():
    """T√¢che qui peut d√©passer le timeout"""
    print(f"üêå [SLOW] D√©but t√¢che lente...")
    
    duration = random.uniform(1, 6)  # 1 √† 6 secondes
    time.sleep(duration)
    
    print(f"‚úÖ [SLOW] Termin√© en {duration:.1f}s")
    return f"completed_in_{duration:.1f}s"

@task(interval=12)
def memory_intensive_task():
    """T√¢che qui peut manquer de m√©moire"""
    print(f"üíæ [MEMORY] D√©but traitement m√©moire...")
    
    if random.random() < 0.3:
        raise MemoryError("M√©moire insuffisante")
    
    print("‚úÖ [MEMORY] Traitement r√©ussi")
    return "memory_ok"

def main():
    """D√©mo gestion d'erreurs"""
    print("üõ°Ô∏è PyScheduler - Gestion d'erreurs")
    print("=" * 50)
    
    scheduler = PyScheduler(log_level="INFO")
    
    try:
        scheduler.start()
        print("‚è∞ Test gestion d'erreurs - 30 secondes...")
        time.sleep(30)
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√©")
    finally:
        scheduler.stop()

if __name__ == "__main__":
    main()