# coding: utf-8

"""
    Cochl.Sense API

    Cochl.Sense API allows to detect what is contained inside sound data. Send audio data over the internet to discover what it contains. 

    The version of the OpenAPI document: v1.7.12
    Contact: support@cochl.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ..models.sense_event import SenseEvent
from typing import Optional, Set
from typing_extensions import Self

class SessionResult(BaseModel):
    """
    It includes inference status and results 
    """ # noqa: E501
    state: StrictStr = Field(description="The current state of inference. - pending: inference has not been started (file chunks are not fully uploaded) - in-progress: inference is in progress - done: inference is done (response will include inference results) - error: inference has failed ")
    data: List[SenseEvent] = Field(description="List of inference results for each audio window ")
    has_more: StrictBool = Field(description="Whether there is more paginated data to retrieve ")
    error: Optional[StrictStr] = Field(default=None, description="Optional error message ")
    __properties: ClassVar[List[str]] = ["state", "data", "has_more", "error"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'in-progress', 'done', 'error']):
            raise ValueError("must be one of enum values ('pending', 'in-progress', 'done', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "data": [SenseEvent.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "has_more": obj.get("has_more"),
            "error": obj.get("error")
        })
        return _obj


