# coding: utf-8

"""
    Cochl.Sense API

    Cochl.Sense API allows to detect what is contained inside sound data. Send audio data over the internet to discover what it contains. 

    The version of the OpenAPI document: v1.7.12
    Contact: support@cochl.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Page(BaseModel):
    """
    Contains the range of elements that have been returned for a given collection 
    """ # noqa: E501
    offset: Annotated[int, Field(strict=True, ge=0)] = Field(description="Index of the first return element ")
    count: Annotated[int, Field(le=1024, strict=True, ge=0)] = Field(description="The number of elements that have been returned ")
    total: Annotated[int, Field(strict=True, ge=0)] = Field(description="The total number of available elements in the collection at the moment ")
    next_token: Optional[StrictStr] = Field(default=None, description="The next token can be used in the next page request to get the following results. If not present, it means that the page has reached the end of the collection ")
    __properties: ClassVar[List[str]] = ["offset", "count", "total", "next_token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offset": obj.get("offset"),
            "count": obj.get("count"),
            "total": obj.get("total"),
            "next_token": obj.get("next_token")
        })
        return _obj


