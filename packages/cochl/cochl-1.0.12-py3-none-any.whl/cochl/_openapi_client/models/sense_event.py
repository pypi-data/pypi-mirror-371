# coding: utf-8

"""
    Cochl.Sense API

    Cochl.Sense API allows to detect what is contained inside sound data. Send audio data over the internet to discover what it contains. 

    The version of the OpenAPI document: v1.7.12
    Contact: support@cochl.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from ..models.sense_event_tag import SenseEventTag
from typing import Optional, Set
from typing_extensions import Self

class SenseEvent(BaseModel):
    """
    Contains data returned by the model 
    """ # noqa: E501
    tags: List[SenseEventTag] = Field(description="Contains results of what has been inferenced at the same time ")
    start_time: Union[StrictFloat, StrictInt] = Field(description="Represent the start of the window, in the second, where inference was done. *Note that start_time will increase by window_hop on every step* ")
    end_time: Union[StrictFloat, StrictInt] = Field(description="Represent the end of the window, in the second where inference was done. *Note that end_time is window_length after start_time* ")
    __properties: ClassVar[List[str]] = ["tags", "start_time", "end_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SenseEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SenseEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tags": [SenseEventTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time")
        })
        return _obj


