Metadata-Version: 2.4
Name: mcp-sqlserver-filesystem
Version: 0.2.3
Summary: Enhanced MCP server for SQL Server and filesystem access with dual interface support (Web UI and Desktop Application)
Project-URL: Homepage, https://github.com/ppengit/mcp-sqlserver-filesystem
Project-URL: Repository, https://github.com/ppengit/mcp-sqlserver-filesystem
Project-URL: Issues, https://github.com/ppengit/mcp-sqlserver-filesystem/issues
Author-email: PJ <peng.it@qq.com>
License: MIT
License-File: LICENSE
Keywords: cross-platform,database,desktop-app,dual-interface,filesystem,interactive,mcp,native-app,precompiled-binaries,sqlserver,web-ui
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: MacOS X
Classifier: Environment :: Web Environment
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: X11 Applications
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Database
Classifier: Topic :: Desktop Environment
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: System :: Filesystems
Requires-Python: >=3.11
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: fastapi>=0.115.0
Requires-Dist: fastmcp>=2.0.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: mcp>=1.9.3
Requires-Dist: psutil>=7.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyodbc>=5.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: websockets>=13.0.0
Provides-Extra: desktop
Requires-Dist: psutil>=7.0.0; extra == 'desktop'
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: bump2version>=1.0.1; extra == 'dev'
Requires-Dist: flake8>=6.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: maturin>=1.8.7; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pillow>=11.2.1; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest-timeout>=2.1.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.11.0; extra == 'dev'
Requires-Dist: setuptools-rust>=1.11.1; extra == 'dev'
Requires-Dist: twine>=6.1.0; extra == 'dev'
Description-Content-Type: text/markdown

# MCP SQL Server Filesystem

üöÄ **Enhanced MCP server** for SQL Server database and filesystem access with **dual interface support** (Web UI and Desktop Application).

*Read this in other languages: [English](#english) | [‰∏≠Êñá](#‰∏≠Êñá)*

---

## English

### ‚ú® Features

- üóÑÔ∏è **Complete SQL Server Support** - Execute all SQL commands with detailed operation tracking
- üìÅ **Full Filesystem Access** - Read/write files with advanced security controls
- üåê **SQL Results Display UI** - Pure display interface for SQL query results with modern responsive design
- üñ•Ô∏è **Desktop Application** - Cross-platform native desktop app for SQL results visualization
- üîç **Smart Environment Detection** - Auto-adapts to SSH Remote, WSL, Local environments
- üîê **Enhanced Connection Parameters** - Built-in support for `TrustServerCertificate=true`, `Encrypt=false`, `MultipleActiveResultSets=true`
- ‚ö° **Display-Only Architecture** - UI shows SQL results automatically, no user interaction required
- üé® **Clean Results Display** - Professional table formatting for SQL query results and schema information
- üîÑ **Real-time Updates** - WebSocket-based automatic display when AI assistant executes SQL queries
- üìä **Detailed Operation Results** - Shows affected records count and execution details for all SQL operations

### üöÄ Quick Start

#### üì¶ Zero-Installation Usage (Recommended)

```bash
# Install uv (if not already installed)
pip install uv

# Run directly - no need to clone repository or install Rust!
uvx mcp-sqlserver-filesystem@latest
```

#### üß™ Testing SQL Results Display

```bash
# Test Web UI (browser-based SQL results display)
uvx mcp-sqlserver-filesystem@latest --test-web

# Test Desktop Application (native SQL results display with auto-fallback)
uvx mcp-sqlserver-filesystem@latest --test-desktop
```

> **Note**: The UI is designed for displaying SQL query results only. File operations are performed in the background and do not require UI interaction.

### üñ•Ô∏è Desktop Application

#### Features
- **Zero Rust Installation Required**: Uses pre-compiled binaries with intelligent fallback
- **Cross-platform Support**: Windows, macOS, Linux
- **Auto-Fallback System**: Automatically switches to Web UI if desktop app unavailable  
- **Modern Interface**: Professional design with tabbed navigation
- **Real-time Updates**: WebSocket communication with backend
- **No Dependencies**: Just needs uv + ODBC Driver

#### How It Works
1. **First Priority**: Uses pre-compiled desktop binary (if available)
2. **Smart Fallback**: Automatically launches Web UI if desktop unavailable
3. **Zero Maintenance**: No user installation or setup required

### üìã System Requirements

**All platforms:**
1. **Python 3.11+**
2. **ODBC Driver for SQL Server** ‚≠ê **Critical!**
3. **uv** (for package execution)

**Windows users:**
```bash
# Check Python version
python --version

# Check ODBC drivers
python -c "import pyodbc; print([d for d in pyodbc.drivers() if 'SQL Server' in d])"

# Install ODBC Driver (choose one method):
# Method 1: winget (recommended)
winget install Microsoft.ODBCDriverforSQLServer

# Method 2: Chocolatey
choco install sqlserver-odbcdriver
```

**Download links:**
- [ODBC Driver 18](https://go.microsoft.com/fwlink/?linkid=2249006) (latest)
- [ODBC Driver 17](https://go.microsoft.com/fwlink/?linkid=2249005) (stable)
- [All versions](https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server)

### üîß Augment Code Configuration

#### Option 1: Complete Setup (Database + Filesystem)

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "localhost",
        "DB_DATABASE": "your_database", 
        "DB_USE_WINDOWS_AUTH": "true",
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "FS_ALLOWED_PATHS": "C:\\Users\\YourName\\Documents,D:\\Projects",
        "FS_ALLOWED_EXTENSIONS": ".txt,.md,.py,.json,.sql,.csv",
        "FS_IGNORE_FILE_LOCKS": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### Option 2: SQL Server Authentication + Full Filesystem Access

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx", 
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "your-server",
        "DB_DATABASE": "your_database",
        "DB_USE_WINDOWS_AUTH": "false",
        "DB_USERNAME": "sa",
        "DB_PASSWORD": "your_password",
        "FS_ALLOWED_PATHS": "*",
        "FS_ALLOWED_EXTENSIONS": "*.*",
        "FS_IGNORE_FILE_LOCKS": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### Option 3: Security-Restricted Mode (Production)

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "prod-server.company.com",
        "DB_DATABASE": "ProductionDB", 
        "DB_USE_WINDOWS_AUTH": "false",
        "DB_USERNAME": "readonly_user",
        "DB_PASSWORD": "secure_password",
        "FS_ALLOWED_PATHS": "C:\\Projects\\Safe,D:\\Data\\ReadOnly",
        "FS_ALLOWED_EXTENSIONS": ".txt,.log,.json,.csv", 
        "FS_ENABLE_WRITE": "false",
        "FS_ENABLE_DELETE": "false",
        "SEC_ENABLE_SQL_PROTECTION": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema", 
        "read_file", "list_directory"
      ]
    }
  }
}
```

### üõ†Ô∏è Environment Variables

#### Database Configuration
| Variable | Default | Description |
|----------|---------|-------------|
| `DB_SERVER` | `localhost` | SQL Server hostname or IP |
| `DB_DATABASE` | `master` | Database name |
| `DB_USE_WINDOWS_AUTH` | `true` | Use Windows Authentication |
| `DB_USERNAME` | - | SQL Server username (if not using Windows auth) |
| `DB_PASSWORD` | - | SQL Server password (if not using Windows auth) |
| `DB_TRUST_SERVER_CERTIFICATE` | `true` | Trust server certificate |
| `DB_ENCRYPT` | `false` | Enable connection encryption |
| `DB_MULTIPLE_ACTIVE_RESULT_SETS` | `true` | Enable MARS |

#### Filesystem Configuration  
| Variable | Default | Description |
|----------|---------|-------------|
| `FS_ALLOWED_PATHS` | `[]` | Allowed base paths (empty or `*` = allow all) |
| `FS_ALLOWED_EXTENSIONS` | `[]` | Allowed file extensions (empty or `*.*` = allow all) |
| `FS_ENABLE_WRITE` | `true` | Enable write operations |
| `FS_ENABLE_DELETE` | `true` | Enable delete operations |
| `FS_IGNORE_FILE_LOCKS` | `true` | Ignore file locks for better compatibility |
| `FS_MAX_FILE_SIZE` | `1073741824` | Maximum file size (1GB) |

#### Security Configuration
| Variable | Default | Description |
|----------|---------|-------------|
| `SEC_ENABLE_SQL_PROTECTION` | `false` | Enable SQL injection protection |
| `SEC_MAX_QUERY_LENGTH` | `100000` | Maximum SQL query length |
| `SEC_ENABLE_QUERY_LOGGING` | `true` | Enable query logging |

### üìö Available Tools

#### Database Operations
- `sql_query` - Execute SELECT queries with detailed results
- `list_tables` - List all database tables  
- `get_table_schema` - Get detailed table structure information

#### Filesystem Operations  
- `read_file` - Read file contents with encoding detection
- `write_file` - Write file contents with confirmation
- `list_directory` - List directory contents with metadata

### üéØ Usage Examples

#### SQL Operations with Detailed Tracking
```python
# Execute query - shows column names, data types, and row counts
result = sql_query("SELECT TOP 10 * FROM users ORDER BY created_date DESC")

# INSERT operation - shows exactly which records were inserted  
result = sql_query("INSERT INTO users (name, email) VALUES ('John', 'john@example.com')")

# UPDATE operation - shows affected records before and after
result = sql_query("UPDATE users SET status = 'active' WHERE last_login > '2024-01-01'") 

# DELETE operation - shows exactly which records were deleted
result = sql_query("DELETE FROM users WHERE status = 'inactive'")
```

#### Filesystem Operations with Security
```python
# Read files (supports locked files)
content = read_file("C:/Projects/config.json") 

# Write files with confirmation
write_file("C:/Projects/output.txt", "Hello World!")

# List directories with metadata
files = list_directory("C:/Projects")
```

### üîß Development Setup (Optional)

Only needed if you want to contribute or build from source:

```bash
# Clone repository
git clone https://github.com/ppengit/mcp-sqlserver-filesystem.git
cd mcp-sqlserver-filesystem

# Install development dependencies
pip install -e ".[dev]"

# Run tests
python -m pytest

# Run from source
python -m mcp_sqlserver_filesystem --test-web
```

### üö® Troubleshooting

#### Common Issues

1. **"No module named 'pyodbc'"**
   ```bash
   # Install ODBC driver first, then retry
   winget install Microsoft.ODBCDriverforSQLServer
   ```

2. **Connection timeout issues**
   ```json
   "env": {
     "DB_CONNECTION_TIMEOUT": "60",
     "DB_COMMAND_TIMEOUT": "120"
   }
   ```

3. **Desktop app not launching**
   - No problem! The system automatically falls back to Web UI
   - Check browser opens at `http://localhost:8765`

4. **File access denied**
   ```json
   "env": {
     "FS_IGNORE_FILE_LOCKS": "true"
   }
   ```

---

## ‰∏≠Êñá

### ‚ú® ‰∏ªË¶ÅÂäüËÉΩ

- üóÑÔ∏è **ÂÆåÊï¥SQL ServerÊîØÊåÅ** - ÊâßË°åÊâÄÊúâSQLÂëΩ‰ª§ÔºåËØ¶ÁªÜË∑üË∏™Êìç‰ΩúËÆ∞ÂΩï
- üìÅ **ÂÖ®Èù¢Êñá‰ª∂Á≥ªÁªüËÆøÈóÆ** - ËØªÂÜôÊñá‰ª∂ÔºåÊîØÊåÅÈ´òÁ∫ßÂÆâÂÖ®ÊéßÂà∂
- üåê **SQLÁªìÊûúÊòæÁ§∫ÁïåÈù¢** - ‰∏ìÈó®Áî®‰∫éÊòæÁ§∫SQLÊü•ËØ¢ÁªìÊûúÁöÑÁ∫ØÂ±ïÁ§∫ÁïåÈù¢ÔºåÁé∞‰ª£ÂìçÂ∫îÂºèËÆæËÆ°
- üñ•Ô∏è **Ê°åÈù¢Â∫îÁî®Á®ãÂ∫è** - Ë∑®Âπ≥Âè∞ÂéüÁîüÊ°åÈù¢Â∫îÁî®ÔºåÁî®‰∫éSQLÁªìÊûúÂèØËßÜÂåñÂ±ïÁ§∫
- üîç **Êô∫ËÉΩÁéØÂ¢ÉÊ£ÄÊµã** - Ëá™Âä®ÈÄÇÈÖçSSHËøúÁ®ã„ÄÅWSL„ÄÅÊú¨Âú∞ÁéØÂ¢É
- üîê **Â¢ûÂº∫ËøûÊé•ÂèÇÊï∞** - ÂÜÖÁΩÆÊîØÊåÅ`TrustServerCertificate=true`„ÄÅ`Encrypt=false`„ÄÅ`MultipleActiveResultSets=true`
- ‚ö° **Á∫ØÊòæÁ§∫Êû∂ÊûÑ** - UIËá™Âä®ÊòæÁ§∫SQLÁªìÊûúÔºåÊó†ÈúÄÁî®Êà∑‰∫§‰∫íÊìç‰Ωú
- üé® **Ê∏ÖÊô∞ÁªìÊûúÂ±ïÁ§∫** - ‰∏ì‰∏öÁöÑË°®Ê†ºÊ†ºÂºèÊòæÁ§∫SQLÊü•ËØ¢ÁªìÊûúÂíåË°®ÁªìÊûÑ‰ø°ÊÅØ
- üîÑ **ÂÆûÊó∂Ëá™Âä®Êõ¥Êñ∞** - ÂΩìAIÂä©ÊâãÊâßË°åSQLÊü•ËØ¢Êó∂ÔºåÈÄöËøáWebSocketËá™Âä®ÊòæÁ§∫ÁªìÊûú
- üìä **ËØ¶ÁªÜÊìç‰ΩúÁªìÊûú** - ÊòæÁ§∫ÊâÄÊúâSQLÊìç‰ΩúÁöÑÂèóÂΩ±ÂìçËÆ∞ÂΩïÊï∞ÂíåÊâßË°åËØ¶ÊÉÖ

### üöÄ Âø´ÈÄüÂºÄÂßã

#### üì¶ Èõ∂ÂÆâË£Ö‰ΩøÁî®ÊñπÂºèÔºàÊé®ËçêÔºâ

```bash
# ÂÆâË£ÖuvÔºàÂ¶ÇÊûúÂ∞öÊú™ÂÆâË£ÖÔºâ
pip install uv

# Áõ¥Êé•ËøêË°å - Êó†ÈúÄÂÖãÈöÜ‰ªìÂ∫ìÊàñÂÆâË£ÖRustÔºÅ
uvx mcp-sqlserver-filesystem@latest
```

#### üß™ ÊµãËØïSQLÁªìÊûúÊòæÁ§∫

```bash
# ÊµãËØïWeb UIÔºàÂü∫‰∫éÊµèËßàÂô®ÁöÑSQLÁªìÊûúÊòæÁ§∫Ôºâ
uvx mcp-sqlserver-filesystem@latest --test-web

# ÊµãËØïÊ°åÈù¢Â∫îÁî®ÔºàÂéüÁîüSQLÁªìÊûúÊòæÁ§∫ÔºåËá™Âä®ÂõûÈÄÄÔºâ
uvx mcp-sqlserver-filesystem@latest --test-desktop
```

> **Ê≥®ÊÑè**ÔºöUI‰∏ìÈó®Áî®‰∫éÊòæÁ§∫SQLÊü•ËØ¢ÁªìÊûú„ÄÇÊñá‰ª∂Êìç‰ΩúÂú®ÂêéÂè∞ÊâßË°åÔºå‰∏çÈúÄË¶ÅUI‰∫§‰∫í„ÄÇ

### üñ•Ô∏è Ê°åÈù¢Â∫îÁî®

#### ÂäüËÉΩÁâπÊÄß
- **Êó†ÈúÄÂÆâË£ÖRust**Ôºö‰ΩøÁî®È¢ÑÁºñËØë‰∫åËøõÂà∂Êñá‰ª∂ÔºåÊô∫ËÉΩÂõûÈÄÄÊú∫Âà∂
- **Ë∑®Âπ≥Âè∞ÊîØÊåÅ**ÔºöWindows„ÄÅmacOS„ÄÅLinux
- **Ëá™Âä®ÂõûÈÄÄÁ≥ªÁªü**ÔºöÊ°åÈù¢Â∫îÁî®‰∏çÂèØÁî®Êó∂Ëá™Âä®ÂàáÊç¢Âà∞Web UI
- **Áé∞‰ª£ÁïåÈù¢**Ôºö‰∏ì‰∏öËÆæËÆ°ÔºåÊ†áÁ≠æÈ°µÂØºËà™
- **ÂÆûÊó∂Êõ¥Êñ∞**Ôºö‰∏éÂêéÁ´ØÁöÑWebSocketÈÄö‰ø°
- **Èõ∂‰æùËµñ**ÔºöÂè™ÈúÄË¶Åuv + ODBCÈ©±Âä®

#### Â∑•‰ΩúÂéüÁêÜ
1. **È¶ñÈÄâÊñπÊ°à**Ôºö‰ΩøÁî®È¢ÑÁºñËØëÁöÑÊ°åÈù¢‰∫åËøõÂà∂Êñá‰ª∂ÔºàÂ¶ÇÊûúÂèØÁî®Ôºâ
2. **Êô∫ËÉΩÂõûÈÄÄ**ÔºöÊ°åÈù¢Â∫îÁî®‰∏çÂèØÁî®Êó∂Ëá™Âä®ÂêØÂä®Web UI
3. **Èõ∂Áª¥Êä§**ÔºöÁî®Êà∑Êó†ÈúÄÂÆâË£ÖÊàñËÆæÁΩÆ

### üìã Á≥ªÁªüË¶ÅÊ±Ç

**ÊâÄÊúâÂπ≥Âè∞Ôºö**
1. **Python 3.11+**
2. **ODBC Driver for SQL Server** ‚≠ê **ÂøÖÈúÄÔºÅ**
3. **uv**ÔºàÁî®‰∫éÂåÖÊâßË°åÔºâ

**WindowsÁî®Êà∑Ôºö**
```bash
# Ê£ÄÊü•PythonÁâàÊú¨
python --version

# Ê£ÄÊü•ODBCÈ©±Âä®
python -c "import pyodbc; print([d for d in pyodbc.drivers() if 'SQL Server' in d])"

# ÂÆâË£ÖODBCÈ©±Âä®ÔºàÈÄâÊã©‰∏ÄÁßçÊñπÊ≥ïÔºâÔºö
# ÊñπÊ≥ï1ÔºöwingetÔºàÊé®ËçêÔºâ
winget install Microsoft.ODBCDriverforSQLServer

# ÊñπÊ≥ï2ÔºöChocolatey
choco install sqlserver-odbcdriver
```

### üîß Augment CodeÈÖçÁΩÆ

#### ÊñπÊ°à1ÔºöÂÆåÊï¥ËÆæÁΩÆÔºàÊï∞ÊçÆÂ∫ì+Êñá‰ª∂Á≥ªÁªüÔºâ

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "localhost",
        "DB_DATABASE": "your_database",
        "DB_USE_WINDOWS_AUTH": "true", 
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "FS_ALLOWED_PATHS": "C:\\Users\\YourName\\Documents,D:\\Projects",
        "FS_ALLOWED_EXTENSIONS": ".txt,.md,.py,.json,.sql,.csv",
        "FS_IGNORE_FILE_LOCKS": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### ÊñπÊ°à2ÔºöSQL ServerËÆ§ËØÅ + Êñá‰ª∂Á≥ªÁªüÂÖ®ËÆøÈóÆ

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600, 
      "env": {
        "DB_SERVER": "your-server",
        "DB_DATABASE": "your_database",
        "DB_USE_WINDOWS_AUTH": "false",
        "DB_USERNAME": "sa",
        "DB_PASSWORD": "your_password",
        "FS_ALLOWED_PATHS": "*",
        "FS_ALLOWED_EXTENSIONS": "*.*",
        "FS_IGNORE_FILE_LOCKS": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### ÊñπÊ°à3ÔºöÂÆâÂÖ®ÈôêÂà∂Ê®°ÂºèÔºàÁîü‰∫ßÁéØÂ¢ÉÔºâ

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "prod-server.company.com",
        "DB_DATABASE": "ProductionDB",
        "DB_USE_WINDOWS_AUTH": "false", 
        "DB_USERNAME": "readonly_user",
        "DB_PASSWORD": "secure_password",
        "FS_ALLOWED_PATHS": "C:\\Projects\\Safe,D:\\Data\\ReadOnly",
        "FS_ALLOWED_EXTENSIONS": ".txt,.log,.json,.csv",
        "FS_ENABLE_WRITE": "false",
        "FS_ENABLE_DELETE": "false",
        "SEC_ENABLE_SQL_PROTECTION": "true"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "list_directory"
      ]
    }
  }
}
```

### üõ†Ô∏è ÁéØÂ¢ÉÂèòÈáè

#### Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ
| ÂèòÈáè | ÈªòËÆ§ÂÄº | ÊèèËø∞ |
|------|-------|------|
| `DB_SERVER` | `localhost` | SQL Server‰∏ªÊú∫ÂêçÊàñIP |
| `DB_DATABASE` | `master` | Êï∞ÊçÆÂ∫ìÂêçÁß∞ |
| `DB_USE_WINDOWS_AUTH` | `true` | ‰ΩøÁî®WindowsËÆ§ËØÅ |
| `DB_USERNAME` | - | SQL ServerÁî®Êà∑ÂêçÔºàÈùûWindowsËÆ§ËØÅÊó∂Ôºâ |
| `DB_PASSWORD` | - | SQL ServerÂØÜÁ†ÅÔºàÈùûWindowsËÆ§ËØÅÊó∂Ôºâ |
| `DB_TRUST_SERVER_CERTIFICATE` | `true` | ‰ø°‰ªªÊúçÂä°Âô®ËØÅ‰π¶ |
| `DB_ENCRYPT` | `false` | ÂêØÁî®ËøûÊé•Âä†ÂØÜ |
| `DB_MULTIPLE_ACTIVE_RESULT_SETS` | `true` | ÂêØÁî®MARS |

#### Êñá‰ª∂Á≥ªÁªüÈÖçÁΩÆ
| ÂèòÈáè | ÈªòËÆ§ÂÄº | ÊèèËø∞ |
|------|-------|------|
| `FS_ALLOWED_PATHS` | `[]` | ÂÖÅËÆ∏ÁöÑÂü∫Ë∑ØÂæÑÔºàÁ©∫Êàñ`*` = ÂÖÅËÆ∏ÂÖ®ÈÉ®Ôºâ |
| `FS_ALLOWED_EXTENSIONS` | `[]` | ÂÖÅËÆ∏ÁöÑÊñá‰ª∂Êâ©Â±ïÂêçÔºàÁ©∫Êàñ`*.*` = ÂÖÅËÆ∏ÂÖ®ÈÉ®Ôºâ |
| `FS_ENABLE_WRITE` | `true` | ÂêØÁî®ÂÜôÊìç‰Ωú |
| `FS_ENABLE_DELETE` | `true` | ÂêØÁî®Âà†Èô§Êìç‰Ωú |
| `FS_IGNORE_FILE_LOCKS` | `true` | ÂøΩÁï•Êñá‰ª∂ÈîÅÂÆöÔºåÊèêÈ´òÂÖºÂÆπÊÄß |
| `FS_MAX_FILE_SIZE` | `1073741824` | ÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞èÔºà1GBÔºâ |

#### ÂÆâÂÖ®ÈÖçÁΩÆ
| ÂèòÈáè | ÈªòËÆ§ÂÄº | ÊèèËø∞ |
|------|-------|------|
| `SEC_ENABLE_SQL_PROTECTION` | `false` | ÂêØÁî®SQLÊ≥®ÂÖ•‰øùÊä§ |
| `SEC_MAX_QUERY_LENGTH` | `100000` | ÊúÄÂ§ßSQLÊü•ËØ¢ÈïøÂ∫¶ |
| `SEC_ENABLE_QUERY_LOGGING` | `true` | ÂêØÁî®Êü•ËØ¢Êó•Âøó |

### üìö ÂèØÁî®Â∑•ÂÖ∑

#### Êï∞ÊçÆÂ∫ìÊìç‰Ωú
- `sql_query` - ÊâßË°åSELECTÊü•ËØ¢ÔºåÊèê‰æõËØ¶ÁªÜÁªìÊûú
- `list_tables` - ÂàóÂá∫ÊâÄÊúâÊï∞ÊçÆÂ∫ìË°®
- `get_table_schema` - Ëé∑ÂèñËØ¶ÁªÜË°®ÁªìÊûÑ‰ø°ÊÅØ

#### Êñá‰ª∂Á≥ªÁªüÊìç‰Ωú
- `read_file` - ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπÔºåËá™Âä®Ê£ÄÊµãÁºñÁ†Å
- `write_file` - ÂÜôÂÖ•Êñá‰ª∂ÂÜÖÂÆπÔºåÈúÄË¶ÅÁ°ÆËÆ§
- `list_directory` - ÂàóÂá∫ÁõÆÂΩïÂÜÖÂÆπÂèäÂÖÉÊï∞ÊçÆ

### üéØ ‰ΩøÁî®Á§∫‰æã

#### Â∏¶ËØ¶ÁªÜË∑üË∏™ÁöÑSQLÊìç‰Ωú
```python
# ÊâßË°åÊü•ËØ¢ - ÊòæÁ§∫ÂàóÂêç„ÄÅÊï∞ÊçÆÁ±ªÂûãÂíåË°åÊï∞
result = sql_query("SELECT TOP 10 * FROM users ORDER BY created_date DESC")

# INSERTÊìç‰Ωú - ÊòæÁ§∫ÊèíÂÖ•ÁöÑÂÖ∑‰ΩìËÆ∞ÂΩï
result = sql_query("INSERT INTO users (name, email) VALUES ('John', 'john@example.com')")

# UPDATEÊìç‰Ωú - ÊòæÁ§∫Êõ¥Êñ∞ÂâçÂêéÁöÑÂèóÂΩ±ÂìçËÆ∞ÂΩï
result = sql_query("UPDATE users SET status = 'active' WHERE last_login > '2024-01-01'")

# DELETEÊìç‰Ωú - ÊòæÁ§∫Âà†Èô§ÁöÑÂÖ∑‰ΩìËÆ∞ÂΩï
result = sql_query("DELETE FROM users WHERE status = 'inactive'")
```

#### Â∏¶ÂÆâÂÖ®ÊéßÂà∂ÁöÑÊñá‰ª∂Á≥ªÁªüÊìç‰Ωú
```python
# ËØªÂèñÊñá‰ª∂ÔºàÊîØÊåÅË¢´ÈîÅÂÆöÁöÑÊñá‰ª∂Ôºâ
content = read_file("C:/Projects/config.json")

# ÂÜôÂÖ•Êñá‰ª∂Âπ∂Á°ÆËÆ§
write_file("C:/Projects/output.txt", "Hello World!")

# ÂàóÂá∫ÁõÆÂΩïÂèäÂÖÉÊï∞ÊçÆ
files = list_directory("C:/Projects")
```

### üîß ÂºÄÂèëËÆæÁΩÆÔºàÂèØÈÄâÔºâ

‰ªÖÂú®Â∏åÊúõË¥°ÁåÆ‰ª£Á†ÅÊàñ‰ªéÊ∫êÁ†ÅÊûÑÂª∫Êó∂ÈúÄË¶ÅÔºö

```bash
# ÂÖãÈöÜ‰ªìÂ∫ì
git clone https://github.com/ppengit/mcp-sqlserver-filesystem.git
cd mcp-sqlserver-filesystem

# ÂÆâË£ÖÂºÄÂèë‰æùËµñ
pip install -e ".[dev]"

# ËøêË°åÊµãËØï
python -m pytest

# ‰ªéÊ∫êÁ†ÅËøêË°å
python -m mcp_sqlserver_filesystem --test-web
```

### üö® ÊïÖÈöúÊéíÈô§

#### Â∏∏ËßÅÈóÆÈ¢ò

1. **"No module named 'pyodbc'"**
   ```bash
   # ÂÖàÂÆâË£ÖODBCÈ©±Âä®ÔºåÁÑ∂ÂêéÈáçËØï
   winget install Microsoft.ODBCDriverforSQLServer
   ```

2. **ËøûÊé•Ë∂ÖÊó∂ÈóÆÈ¢ò**
   ```json
   "env": {
     "DB_CONNECTION_TIMEOUT": "60",
     "DB_COMMAND_TIMEOUT": "120"
   }
   ```

3. **Ê°åÈù¢Â∫îÁî®Êó†Ê≥ïÂêØÂä®**
   - Ê≤°ÈóÆÈ¢òÔºÅÁ≥ªÁªü‰ºöËá™Âä®ÂõûÈÄÄÂà∞Web UI
   - Ê£ÄÊü•ÊµèËßàÂô®ÊòØÂê¶Âú®`http://localhost:8765`ÊâìÂºÄ

4. **Êñá‰ª∂ËÆøÈóÆË¢´ÊãíÁªù**
   ```json
   "env": {
     "FS_IGNORE_FILE_LOCKS": "true"
   }
   ```

### üìñ Êõ¥Â§ö‰ø°ÊÅØ

- üåü **GitHub**: [mcp-sqlserver-filesystem](https://github.com/ppengit/mcp-sqlserver-filesystem)
- üì¶ **PyPI**: [mcp-sqlserver-filesystem](https://pypi.org/project/mcp-sqlserver-filesystem/)
- üêõ **ÈóÆÈ¢òÊä•Âëä**: [GitHub Issues](https://github.com/ppengit/mcp-sqlserver-filesystem/issues)

---

## License

MIT License - see [LICENSE](LICENSE) file for details.

## Author

**PJ** - [peng.it@qq.com](mailto:peng.it@qq.com)