Metadata-Version: 2.4
Name: mcp-sqlserver-filesystem
Version: 0.1.5
Summary: Enhanced MCP server for SQL Server and filesystem access with dual interface support (Web UI and Desktop Application)
Project-URL: Homepage, https://github.com/ppengit/mcp-sqlserver-filesystem
Project-URL: Repository, https://github.com/ppengit/mcp-sqlserver-filesystem
Project-URL: Issues, https://github.com/ppengit/mcp-sqlserver-filesystem/issues
Author-email: PJ <peng.it@qq.com>
License: MIT
License-File: LICENSE
Keywords: cross-platform,database,desktop-app,dual-interface,filesystem,interactive,mcp,native-app,rust,sqlserver,tauri,web-ui
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: MacOS X
Classifier: Environment :: Web Environment
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: X11 Applications
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Database
Classifier: Topic :: Desktop Environment
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: System :: Filesystems
Requires-Python: >=3.11
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: fastapi>=0.115.0
Requires-Dist: fastmcp>=2.0.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: mcp>=1.9.3
Requires-Dist: psutil>=7.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyodbc>=5.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: websockets>=13.0.0
Provides-Extra: desktop
Requires-Dist: psutil>=7.0.0; extra == 'desktop'
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: bump2version>=1.0.1; extra == 'dev'
Requires-Dist: flake8>=6.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: maturin>=1.8.7; extra == 'dev'
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pillow>=11.2.1; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest-timeout>=2.1.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.11.0; extra == 'dev'
Requires-Dist: setuptools-rust>=1.11.1; extra == 'dev'
Requires-Dist: twine>=6.1.0; extra == 'dev'
Description-Content-Type: text/markdown

ÔªøÔªøÔªøÔªøÔªø# MCP SQL Server Filesystem

üöÄ **Enhanced MCP server** for SQL Server database and filesystem access with **dual interface support** (Web UI and Desktop Application).

*Read this in other languages: [English](#english) | [‰∏≠Êñá](#‰∏≠Êñá)*

---

## English

### ‚ú® Features

- üóÑÔ∏è **Complete SQL Server Support** - Execute all SQL commands with enhanced connection parameters
- üìÅ **Full Filesystem Access** - Read/write files with confirmation dialogs  
- üåê **Web UI Interface** - Real-time query results display with modern responsive design
- üñ•Ô∏è **Desktop Application** - Cross-platform native desktop app based on Tauri framework
- üîç **Smart Environment Detection** - Auto-adapts to SSH Remote, WSL, Local environments
- üîê **Enhanced Connection Parameters** - Built-in support for `TrustServerCertificate=true`, `Encrypt=false`, `MultipleActiveResultSets=true`
- ‚ö° **Dual Interface Architecture** - Choose between Web UI and native desktop experience
- üé® **Modern UI Design** - Responsive design with dark/light theme support
- üîÑ **Real-time Communication** - WebSocket-based live updates

### üöÄ Quick Start

#### üì¶ Simple Installation

```bash
# Install uv (if not already installed)
pip install uv

# Run directly (no need to clone repository)
uvx mcp-sqlserver-filesystem@latest
```

#### üß™ Testing Both Interfaces

```bash
# Test Web UI (browser-based interface)
uvx mcp-sqlserver-filesystem@latest --test-web

# Test Desktop Application (native app)
uvx mcp-sqlserver-filesystem@latest --test-desktop

# Alternative syntax
uvx mcp-sqlserver-filesystem@latest test --web
uvx mcp-sqlserver-filesystem@latest test --desktop
```

### üñ•Ô∏è Desktop Application

#### Features
- **Cross-platform Support**: Windows (.exe, .msi), macOS (.dmg, .app), Linux (.deb, .AppImage)
- **Native Performance**: Built with Tauri framework (Rust + Web Technologies)
- **Modern Interface**: Responsive design with tabbed navigation
- **Real-time Updates**: WebSocket communication with backend
- **Local Settings**: Persistent configuration storage
- **System Integration**: Native notifications and file dialogs

#### Requirements for Desktop App
1. **Rust** (for building): Install from https://rustup.rs/
2. **Tauri CLI**: `cargo install tauri-cli`

#### Desktop Development
```bash
# Clone repository for desktop development
git clone https://github.com/ppengit/mcp-sqlserver-filesystem.git
cd mcp-sqlserver-filesystem

# Install dependencies
python scripts/build_desktop.py install-deps

# Run in development mode
python scripts/build_desktop.py dev-desktop

# Build release version
python scripts/build_desktop.py build-desktop-release

# Package for distribution
python scripts/build_desktop.py package
```

### üìã System Requirements

**All platforms:**
1. **Python 3.11+**
2. **ODBC Driver for SQL Server** ‚≠ê **Critical!**

**Windows users:**
```bash
# Check Python version
python --version

# Check ODBC drivers
python -c "import pyodbc; print([d for d in pyodbc.drivers() if 'SQL Server' in d])"

# Install ODBC Driver (choose one method):
# Method 1: winget (recommended)
winget install Microsoft.ODBCDriverforSQLServer

# Method 2: Chocolatey
choco install sqlserver-odbcdriver
```

**Download links:**
- [ODBC Driver 18](https://go.microsoft.com/fwlink/?linkid=2249006) (latest)
- [ODBC Driver 17](https://go.microsoft.com/fwlink/?linkid=2249005) (stable)
- [All versions](https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server)

### üîß Augment Code Configuration

#### Option 1: Windows Authentication (Recommended)

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "localhost",
        "DB_DATABASE": "master",
        "DB_USE_WINDOWS_AUTH": "true",
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "DB_ENCRYPT": "false",
        "DB_MULTIPLE_ACTIVE_RESULT_SETS": "true",
        "MCP_DESKTOP_MODE": "false"
      },
      "autoApprove": [
        "sql_query", "sql_execute", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### Option 2: SQL Server Authentication

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "your-sql-server",
        "DB_DATABASE": "your-database",
        "DB_USE_WINDOWS_AUTH": "false",
        "DB_USERNAME": "your-username",
        "DB_PASSWORD": "your-password",
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "DB_ENCRYPT": "false",
        "DB_MULTIPLE_ACTIVE_RESULT_SETS": "true"
      },
      "autoApprove": [
        "sql_query", "sql_execute", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### Option 3: Desktop Application Mode

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "MCP_DESKTOP_MODE": "true",
        "MCP_WEB_HOST": "127.0.0.1",
        "MCP_WEB_PORT": "8765",
        "DB_SERVER": "localhost",
        "DB_DATABASE": "master",
        "DB_USE_WINDOWS_AUTH": "true"
      },
      "autoApprove": ["interactive_feedback"]
    }
  }
}
```

#### Option 4: Restricted Filesystem Access (Recommended for Production)

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "localhost",
        "DB_DATABASE": "master",
        "DB_USE_WINDOWS_AUTH": "true",
        "FS_ALLOWED_PATHS": "C:\\Users\\YourName\\Documents,C:\\Projects",
        "FS_BLOCKED_PATHS": "C:\\Windows,C:\\System32",
        "FS_ALLOWED_EXTENSIONS": ".txt,.json,.xml,.csv,.log,.md,.py,.js",
        "FS_ENABLE_DELETE": "false"
      },
      "autoApprove": [
        "sql_query", "list_tables", "get_table_schema",
        "read_file", "list_directory"
      ]
    }
  }
}
```

### üõ°Ô∏è Filesystem Security Configuration

The filesystem access system provides flexible security controls to restrict file access to specific directories.

#### Access Modes

1. **Full Access Mode** (Default - ‚ö†Ô∏è Use with caution)
   - `FS_ALLOWED_PATHS=` (empty) or `FS_ALLOWED_PATHS=*`
   - Allows access to all disk files and directories
   - Suitable for trusted local development only

2. **Restricted Access Mode** (Recommended for production)
   - `FS_ALLOWED_PATHS=C:\Users\YourName\Documents,D:\Projects`
   - Only allows access to specified directories and their subdirectories
   - More secure for shared or production environments

#### Configuration Variables

| Variable | Description | Example |
|----------|-------------|----------|
| `FS_ALLOWED_PATHS` | Comma-separated list of allowed directories | `C:\Users\John\Documents,D:\Projects` |
| `FS_BLOCKED_PATHS` | Comma-separated list of blocked directories (higher priority) | `C:\Windows,C:\System32` |
| `FS_ALLOWED_EXTENSIONS` | Comma-separated list of allowed file extensions | `.txt,.json,.py,.md` |
| `FS_BLOCKED_EXTENSIONS` | Comma-separated list of blocked file extensions | `.exe,.dll,.sys` |
| `FS_MAX_FILE_SIZE` | Maximum file size in bytes | `104857600` (100MB) |
| `FS_ENABLE_WRITE` | Enable file write operations | `true` or `false` |
| `FS_ENABLE_DELETE` | Enable file delete operations | `true` or `false` |

#### Security Examples

**Conservative Security (Recommended)**:
```env
FS_ALLOWED_PATHS=C:\Users\YourName\Documents,C:\Users\YourName\Projects
FS_BLOCKED_PATHS=C:\Windows,C:\ProgramData
FS_ALLOWED_EXTENSIONS=.txt,.json,.xml,.csv,.log,.md,.py,.js,.html,.css
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=false
FS_MAX_FILE_SIZE=10485760  # 10MB
```

**Development Environment**:
```env
FS_ALLOWED_PATHS=C:\Development,C:\Temp
FS_BLOCKED_PATHS=C:\Windows,C:\System32
FS_ALLOWED_EXTENSIONS=  # Allow all extensions
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=true
FS_MAX_FILE_SIZE=104857600  # 100MB
```

**Full Access (Use with extreme caution)**:
```env
FS_ALLOWED_PATHS=*  # or leave empty
FS_BLOCKED_PATHS=
FS_ALLOWED_EXTENSIONS=
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=true
FS_MAX_FILE_SIZE=1073741824  # 1GB
```

### üõ†Ô∏è Available Tools

#### Database Tools
- `sql_query` - Execute SQL queries with UI display
- `sql_execute` - Execute INSERT/UPDATE/DELETE operations
- `get_table_schema` - Get table structure information
- `list_tables` - List all database tables

#### Filesystem Tools
- `read_file` - Read file contents
- `write_file` - Write file contents with confirmation
- `list_directory` - List directory contents

### üìù Usage Examples

In Augment Code, try:

```
"Execute SQL query: SELECT TOP 10 * FROM Users"
"Show me the schema of the Users table"
"List all tables in the database"
"Read the file config.json"
"Write configuration to settings.json"
"Launch desktop interface for database management"
```

### üéØ Interface Comparison

| Feature | Web UI | Desktop App |
|---------|--------|-------------|
| **Platform** | Any browser | Windows/macOS/Linux |
| **Installation** | None | Rust + Tauri CLI |
| **Performance** | Good | Excellent (Native) |
| **Offline Use** | No | Yes |
| **File Dialogs** | Basic | Native |
| **Notifications** | Browser | System |
| **Best for** | Remote/WSL | Local Development |

---

## ‰∏≠Êñá

### ‚ú® ÂäüËÉΩÁâπÊÄß

- üóÑÔ∏è **ÂÆåÊï¥ÁöÑSQL ServerÊîØÊåÅ** - ÊâßË°åÊâÄÊúâSQLÂëΩ‰ª§ÔºåÂ¢ûÂº∫ËøûÊé•ÂèÇÊï∞
- üìÅ **ÂÆåÊï¥ÁöÑÊñá‰ª∂Á≥ªÁªüËÆøÈóÆ** - Â∏¶Á°ÆËÆ§ÂØπËØùÊ°ÜÁöÑÊñá‰ª∂ËØªÂÜôÂäüËÉΩ
- üåê **Web UIÁïåÈù¢** - ÂÆûÊó∂Êü•ËØ¢ÁªìÊûúÊòæÁ§∫ÔºåÁé∞‰ª£ÂìçÂ∫îÂºèËÆæËÆ°
- üñ•Ô∏è **Ê°åÈù¢Â∫îÁî®Á®ãÂ∫è** - Âü∫‰∫éTauriÊ°ÜÊû∂ÁöÑË∑®Âπ≥Âè∞ÂéüÁîüÊ°åÈù¢Â∫îÁî®
- üîç **Êô∫ËÉΩÁéØÂ¢ÉÊ£ÄÊµã** - Ëá™Âä®ÈÄÇÈÖçSSHËøúÁ®ã„ÄÅWSL„ÄÅÊú¨Âú∞ÁéØÂ¢É
- üîê **Â¢ûÂº∫ËøûÊé•ÂèÇÊï∞** - ÂÜÖÁΩÆÊîØÊåÅ`TrustServerCertificate=true`Á≠âÂèÇÊï∞
- ‚ö° **ÂèåÁïåÈù¢Êû∂ÊûÑ** - ÂèØÈÄâÊã©Web UIÊàñÂéüÁîüÊ°åÈù¢‰ΩìÈ™å
- üé® **Áé∞‰ª£UIËÆæËÆ°** - ÂìçÂ∫îÂºèËÆæËÆ°ÔºåÊîØÊåÅÊ∑±Ëâ≤/ÊµÖËâ≤‰∏ªÈ¢ò
- üîÑ **ÂÆûÊó∂ÈÄö‰ø°** - Âü∫‰∫éWebSocketÁöÑÂÆûÊó∂Êõ¥Êñ∞

### üöÄ Âø´ÈÄüÂºÄÂßã

#### üì¶ ÁÆÄÂçïÂÆâË£Ö

```bash
# ÂÆâË£Ö uv (Â¶ÇÊûúËøòÊ≤°ÂÆâË£Ö)
pip install uv

# Áõ¥Êé•ËøêË°å (Êó†ÈúÄÂÖãÈöÜ‰ªìÂ∫ì)
uvx mcp-sqlserver-filesystem@latest
```

#### üß™ ÊµãËØï‰∏§ÁßçÁïåÈù¢

```bash
# ÊµãËØï Web UI (ÊµèËßàÂô®ÁïåÈù¢)
uvx mcp-sqlserver-filesystem@latest --test-web

# ÊµãËØïÊ°åÈù¢Â∫îÁî® (ÂéüÁîüÂ∫îÁî®)
uvx mcp-sqlserver-filesystem@latest --test-desktop

# ÊàñËÄÖ‰ΩøÁî®Êõø‰ª£ËØ≠Ê≥ï
uvx mcp-sqlserver-filesystem@latest test --web
uvx mcp-sqlserver-filesystem@latest test --desktop
```

### üñ•Ô∏è Ê°åÈù¢Â∫îÁî®Á®ãÂ∫è

#### ÂäüËÉΩÁâπÊÄß
- **Ë∑®Âπ≥Âè∞ÊîØÊåÅ**: Windows (.exe, .msi), macOS (.dmg, .app), Linux (.deb, .AppImage)
- **ÂéüÁîüÊÄßËÉΩ**: ‰ΩøÁî®TauriÊ°ÜÊû∂ÊûÑÂª∫ (Rust + WebÊäÄÊúØ)
- **Áé∞‰ª£ÁïåÈù¢**: ÂìçÂ∫îÂºèËÆæËÆ°ÔºåÊ†áÁ≠æÈ°µÂØºËà™
- **ÂÆûÊó∂Êõ¥Êñ∞**: ‰∏éÂêéÁ´ØWebSocketÈÄö‰ø°
- **Êú¨Âú∞ËÆæÁΩÆ**: ÊåÅ‰πÖÂåñÈÖçÁΩÆÂ≠òÂÇ®
- **Á≥ªÁªüÈõÜÊàê**: ÂéüÁîüÈÄöÁü•ÂíåÊñá‰ª∂ÂØπËØùÊ°Ü

#### Ê°åÈù¢Â∫îÁî®Ë¶ÅÊ±Ç
1. **Rust** (Áî®‰∫éÊûÑÂª∫): ‰ªé https://rustup.rs/ ÂÆâË£Ö
2. **Tauri CLI**: `cargo install tauri-cli`

#### Ê°åÈù¢ÂºÄÂèë
```bash
# ÂÖãÈöÜ‰ªìÂ∫ìËøõË°åÊ°åÈù¢ÂºÄÂèë
git clone https://github.com/ppengit/mcp-sqlserver-filesystem.git
cd mcp-sqlserver-filesystem

# ÂÆâË£Ö‰æùËµñ
python scripts/build_desktop.py install-deps

# ÂºÄÂèëÊ®°ÂºèËøêË°å
python scripts/build_desktop.py dev-desktop

# ÊûÑÂª∫ÂèëÂ∏ÉÁâàÊú¨
python scripts/build_desktop.py build-desktop-release

# ÊâìÂåÖÂàÜÂèë
python scripts/build_desktop.py package
```

### üìã Á≥ªÁªüË¶ÅÊ±Ç

**ÊâÄÊúâÂπ≥Âè∞:**
1. **Python 3.11+**
2. **ODBC Driver for SQL Server** ‚≠ê **ÂøÖÈúÄ!**

**Windows Áî®Êà∑:**
```bash
# Ê£ÄÊü•PythonÁâàÊú¨
python --version

# Ê£ÄÊü•ODBCÈ©±Âä®
python -c "import pyodbc; print([d for d in pyodbc.drivers() if 'SQL Server' in d])"

# ÂÆâË£ÖODBCÈ©±Âä® (ÈÄâÊã©‰∏ÄÁßçÊñπÊ≥ï):
# ÊñπÊ≥ï1: winget (Êé®Ëçê)
winget install Microsoft.ODBCDriverforSQLServer

# ÊñπÊ≥ï2: Chocolatey
choco install sqlserver-odbcdriver
```

**‰∏ãËΩΩÈìæÊé•:**
- [ODBC Driver 18](https://go.microsoft.com/fwlink/?linkid=2249006) (ÊúÄÊñ∞Áâà)
- [ODBC Driver 17](https://go.microsoft.com/fwlink/?linkid=2249005) (Á®≥ÂÆöÁâà)
- [ÊâÄÊúâÁâàÊú¨](https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server)

### üîß Augment Code ÈÖçÁΩÆ

#### ÈÄâÈ°π1: WindowsËÆ§ËØÅ (Êé®Ëçê)

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "localhost",
        "DB_DATABASE": "master",
        "DB_USE_WINDOWS_AUTH": "true",
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "DB_ENCRYPT": "false",
        "DB_MULTIPLE_ACTIVE_RESULT_SETS": "true",
        "MCP_DESKTOP_MODE": "false"
      },
      "autoApprove": [
        "sql_query", "sql_execute", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### ÈÄâÈ°π2: SQL ServerËÆ§ËØÅ

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "DB_SERVER": "your-sql-server",
        "DB_DATABASE": "your-database",
        "DB_USE_WINDOWS_AUTH": "false",
        "DB_USERNAME": "your-username",
        "DB_PASSWORD": "your-password",
        "DB_TRUST_SERVER_CERTIFICATE": "true",
        "DB_ENCRYPT": "false",
        "DB_MULTIPLE_ACTIVE_RESULT_SETS": "true"
      },
      "autoApprove": [
        "sql_query", "sql_execute", "list_tables", "get_table_schema",
        "read_file", "write_file", "list_directory"
      ]
    }
  }
}
```

#### ÈÄâÈ°π3: Ê°åÈù¢Â∫îÁî®Ê®°Âºè

```json
{
  "mcpServers": {
    "mcp-sqlserver-filesystem": {
      "command": "uvx",
      "args": ["mcp-sqlserver-filesystem@latest"],
      "timeout": 600,
      "env": {
        "MCP_DESKTOP_MODE": "true",
        "MCP_WEB_HOST": "127.0.0.1",
        "MCP_WEB_PORT": "8765",
        "DB_SERVER": "localhost",
        "DB_DATABASE": "master",
        "DB_USE_WINDOWS_AUTH": "true"
      },
      "autoApprove": ["interactive_feedback"]
    }
  }
}
```

### üõ°Ô∏è Êñá‰ª∂Á≥ªÁªüÂÆâÂÖ®ÈÖçÁΩÆ

Êñá‰ª∂Á≥ªÁªüËÆøÈóÆÁ≥ªÁªüÊèê‰æõÁÅµÊ¥ªÁöÑÂÆâÂÖ®ÊéßÂà∂ÔºåÂèØ‰ª•ÈôêÂà∂Êñá‰ª∂ËÆøÈóÆ‰ªÖÈôê‰∫éÁâπÂÆöÁõÆÂΩï„ÄÇ

#### ËÆøÈóÆÊ®°Âºè

1. **ÂÆåÂÖ®ËÆøÈóÆÊ®°Âºè** (ÈªòËÆ§ - ‚ö†Ô∏è ËØ∑Ë∞®ÊÖé‰ΩøÁî®)
   - `FS_ALLOWED_PATHS=` (Á©∫ÁôΩ) Êàñ `FS_ALLOWED_PATHS=*`
   - ÂÖÅËÆ∏ËÆøÈóÆÊâÄÊúâÁ£ÅÁõòÊñá‰ª∂ÂíåÁõÆÂΩï
   - ‰ªÖÈÄÇÁî®‰∫éÂèØ‰ø°ÁöÑÊú¨Âú∞ÂºÄÂèëÁéØÂ¢É

2. **ÈôêÂà∂ËÆøÈóÆÊ®°Âºè** (Êé®ËçêÁî®‰∫éÁîü‰∫ßÁéØÂ¢É)
   - `FS_ALLOWED_PATHS=C:\\Users\\YourName\\Documents,D:\\Projects`
   - ‰ªÖÂÖÅËÆ∏ËÆøÈóÆÊåáÂÆöÁõÆÂΩïÂèäÂÖ∂Â≠êÁõÆÂΩï
   - ÂØπÂÖ±‰∫´ÊàñÁîü‰∫ßÁéØÂ¢ÉÊõ¥Âä†ÂÆâÂÖ®

#### ÈÖçÁΩÆÂèòÈáè

| ÂèòÈáè | ËØ¥Êòé | Á§∫‰æã |
|------|------|------|
| `FS_ALLOWED_PATHS` | ÈÄóÂè∑ÂàÜÈöîÁöÑÂÖÅËÆ∏ÁõÆÂΩïÂàóË°® | `C:\\Users\\John\\Documents,D:\\Projects` |
| `FS_BLOCKED_PATHS` | ÈÄóÂè∑ÂàÜÈöîÁöÑÁ¶ÅÊ≠¢ÁõÆÂΩïÂàóË°®(‰ºòÂÖàÁ∫ßÊõ¥È´ò) | `C:\\Windows,C:\\System32` |
| `FS_ALLOWED_EXTENSIONS` | ÈÄóÂè∑ÂàÜÈöîÁöÑÂÖÅËÆ∏Êñá‰ª∂Êâ©Â±ïÂêçÂàóË°® | `.txt,.json,.py,.md` |
| `FS_BLOCKED_EXTENSIONS` | ÈÄóÂè∑ÂàÜÈöîÁöÑÁ¶ÅÊ≠¢Êñá‰ª∂Êâ©Â±ïÂêçÂàóË°® | `.exe,.dll,.sys` |
| `FS_MAX_FILE_SIZE` | ÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞è(Â≠óËäÇ) | `104857600` (100MB) |
| `FS_ENABLE_WRITE` | ÂêØÁî®Êñá‰ª∂ÂÜôÂÖ•Êìç‰Ωú | `true` Êàñ `false` |
| `FS_ENABLE_DELETE` | ÂêØÁî®Êñá‰ª∂Âà†Èô§Êìç‰Ωú | `true` Êàñ `false` |

#### ÂÆâÂÖ®ÈÖçÁΩÆÁ§∫‰æã

**‰øùÂÆàÂÆâÂÖ®ÈÖçÁΩÆ(Êé®Ëçê)**:
```env
FS_ALLOWED_PATHS=C:\\Users\\YourName\\Documents,C:\\Users\\YourName\\Projects
FS_BLOCKED_PATHS=C:\\Windows,C:\\ProgramData
FS_ALLOWED_EXTENSIONS=.txt,.json,.xml,.csv,.log,.md,.py,.js,.html,.css
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=false
FS_MAX_FILE_SIZE=10485760  # 10MB
```

**ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ**:
```env
FS_ALLOWED_PATHS=C:\\Development,C:\\Temp
FS_BLOCKED_PATHS=C:\\Windows,C:\\System32
FS_ALLOWED_EXTENSIONS=  # ÂÖÅËÆ∏ÊâÄÊúâÊâ©Â±ïÂêç
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=true
FS_MAX_FILE_SIZE=104857600  # 100MB
```

**ÂÆåÂÖ®ËÆøÈóÆ(ËØ∑ÊûÅÂÖ∂Ë∞®ÊÖé‰ΩøÁî®)**:
```env
FS_ALLOWED_PATHS=*  # ÊàñÁïôÁ©∫
FS_BLOCKED_PATHS=
FS_ALLOWED_EXTENSIONS=
FS_ENABLE_WRITE=true
FS_ENABLE_DELETE=true
FS_MAX_FILE_SIZE=1073741824  # 1GB
```

### üõ†Ô∏è ÂèØÁî®Â∑•ÂÖ∑

#### Êï∞ÊçÆÂ∫ìÂ∑•ÂÖ∑
- `sql_query` - ÊâßË°åSQLÊü•ËØ¢Âπ∂ÊòæÁ§∫UI
- `sql_execute` - ÊâßË°åINSERT/UPDATE/DELETEÊìç‰Ωú
- `get_table_schema` - Ëé∑ÂèñË°®ÁªìÊûÑ‰ø°ÊÅØ
- `list_tables` - ÂàóÂá∫ÊâÄÊúâÊï∞ÊçÆÂ∫ìË°®

#### Êñá‰ª∂Á≥ªÁªüÂ∑•ÂÖ∑
- `read_file` - ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
- `write_file` - ÂÜôÂÖ•Êñá‰ª∂ÂÜÖÂÆπ(Â∏¶Á°ÆËÆ§)
- `list_directory` - ÂàóÂá∫ÁõÆÂΩïÂÜÖÂÆπ

### üìù ‰ΩøÁî®Á§∫‰æã

Âú® Augment Code ‰∏≠Â∞ùËØï:

```
"ÊâßË°åSQLÊü•ËØ¢: SELECT TOP 10 * FROM Users"
"ÊòæÁ§∫UsersË°®ÁöÑÁªìÊûÑ"
"ÂàóÂá∫Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊâÄÊúâË°®"
"ËØªÂèñconfig.jsonÊñá‰ª∂"
"Â∞ÜÈÖçÁΩÆÂÜôÂÖ•settings.json"
"ÂêØÂä®Ê°åÈù¢ÁïåÈù¢ËøõË°åÊï∞ÊçÆÂ∫ìÁÆ°ÁêÜ"
```

### üéØ ÁïåÈù¢ÂØπÊØî

| ÂäüËÉΩ | Web UI | Ê°åÈù¢Â∫îÁî® |
|------|--------|----------|
| **Âπ≥Âè∞** | ‰ªª‰ΩïÊµèËßàÂô® | Windows/macOS/Linux |
| **ÂÆâË£Ö** | Êó†ÈúÄÂÆâË£Ö | Rust + Tauri CLI |
| **ÊÄßËÉΩ** | ËâØÂ•Ω | ‰ºòÁßÄ (ÂéüÁîü) |
| **Á¶ªÁ∫ø‰ΩøÁî®** | Âê¶ | ÊòØ |
| **Êñá‰ª∂ÂØπËØùÊ°Ü** | Âü∫Á°Ä | ÂéüÁîü |
| **ÈÄöÁü•** | ÊµèËßàÂô® | Á≥ªÁªü |
| **ÊúÄÈÄÇÂêà** | ËøúÁ®ã/WSL | Êú¨Âú∞ÂºÄÂèë |

---

## üì¶ ÁâàÊú¨‰ø°ÊÅØ

**ÂΩìÂâçÁâàÊú¨**: v0.1.4

### üÜï v0.1.4 Êñ∞ÂäüËÉΩ
- ‚úÖ **Â¢ûÂº∫Êñá‰ª∂Á≥ªÁªüÂÆâÂÖ®** - ÊîØÊåÅÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÂÖÅËÆ∏ËÆøÈóÆÁöÑÊñá‰ª∂Â§π
- ‚úÖ **ÈÄöÈÖçÁ¨¶ÊîØÊåÅ** - ‰ΩøÁî® `*` ÊàñÁïôÁ©∫ÂêØÁî®ÂÆåÂÖ®ËÆøÈóÆÊ®°Âºè
- ‚úÖ **Ë∑ØÂæÑËÆøÈóÆÊéßÂà∂** - ÂèØÈÖçÁΩÆÂÖÅËÆ∏ÂíåÁ¶ÅÊ≠¢ËÆøÈóÆÁöÑÁõÆÂΩï
- ‚úÖ **Êâ©Â±ïÂêçËøáÊª§** - ÊîØÊåÅÊåâÊñá‰ª∂Êâ©Â±ïÂêçÊéßÂà∂ËÆøÈóÆ
- ‚úÖ **ËØ¶ÁªÜÈÖçÁΩÆÊó•Âøó** - ÂêØÂä®Êó∂ÊòæÁ§∫ÂÆåÊï¥ÁöÑÂÆâÂÖ®ÈÖçÁΩÆ‰ø°ÊÅØ
- ‚úÖ **Áîü‰∫ßÂÆâÂÖ®Ê®°Âºè** - Êé®ËçêÁöÑÂÆâÂÖ®ÈÖçÁΩÆÁ§∫‰æã

### üîÑ ÂçáÁ∫ßËØ¥Êòé
- ‰ªév0.1.2ÂçáÁ∫ß: Êñ∞Â¢ûÊ°åÈù¢Â∫îÁî®ÂäüËÉΩÔºåÂêëÂêéÂÖºÂÆπ
- ‰ªév0.1.1ÂçáÁ∫ß: Â¢ûÂº∫UIËÆæËÆ°ÂíåÁ®≥ÂÆöÊÄßÊîπËøõ

## üèóÔ∏è ÊäÄÊúØÊû∂ÊûÑ

### ÂêéÁ´ØÊû∂ÊûÑ
- **Python 3.11+** - MCPÊúçÂä°Âô®Ê†∏ÂøÉ
- **FastAPI** - Web APIÊ°ÜÊû∂
- **WebSocket** - ÂÆûÊó∂ÈÄö‰ø°
- **pyodbc** - SQL ServerËøûÊé•

### ÂâçÁ´ØÊû∂ÊûÑ
- **Web UI**: HTML5 + CSS3 + JavaScript
- **Desktop**: Tauri (Rust) + Web Technologies
- **ÈÄö‰ø°**: WebSocket + Tauri IPC

### ÊûÑÂª∫Â∑•ÂÖ∑
- **Python**: uv, pip, setuptools
- **Rust**: Cargo, Tauri CLI
- **Ë∑®Âπ≥Âè∞**: Makefile, batch scripts, Python scripts

## ü§ù Ë¥°ÁåÆ

Ê¨¢ËøéÊèê‰∫§IssuesÂíåPull Requests!

### ÂºÄÂèëÁéØÂ¢ÉËÆæÁΩÆ
```bash
# ÂÖãÈöÜÈ°πÁõÆ
git clone https://github.com/ppengit/mcp-sqlserver-filesystem.git
cd mcp-sqlserver-filesystem

# ÂÆâË£ÖPython‰æùËµñ
uv sync

# ÂÆâË£ÖRustÂíåTauri (Ê°åÈù¢ÂºÄÂèë)
python scripts/build_desktop.py install-deps

# ËøêË°åÊµãËØï
uv run python -m pytest
```

## üë®‚Äçüíª ‰ΩúËÄÖ

Áî± **PJ** ÂàõÂª∫ - Â¢ûÂº∫ÂûãMCPÊúçÂä°Âô®ÔºåÁî®‰∫éSQL ServerÂíåÊñá‰ª∂Á≥ªÁªüËÆøÈóÆ„ÄÇ

- GitHub: [ppengit](https://github.com/ppengit)
- Email: peng.it@qq.com

## üìÑ ËÆ∏ÂèØËØÅ

MIT License - ËØ¶ËßÅ [LICENSE](LICENSE) Êñá‰ª∂„ÄÇ

---

**üéâ Âú®Augment Code‰∏≠‰∫´ÂèóÂº∫Â§ßÁöÑSQL ServerÂíåÊñá‰ª∂Á≥ªÁªüËÆøÈóÆÂäüËÉΩÔºÅ**

*Made with ‚ù§Ô∏è by PJ*
