name: ci

on:
  push:
    branches: ['main', 'test-me-*']
    tags: ['v*']
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  UV_LOCKED: 1
  UV_NO_SYNC: 1

defaults:
  run:
    shell: bash

jobs:
  check:
    if: ${{ github.actor != 'dependabot[bot]' && !cancelled() }}
    name: ${{ matrix.version }} ${{matrix.platform}}
    runs-on: ${{ matrix.platform }}

    env:
      FORCE_COLOR: 1
      PY_COLORS: 1
      UV_PYTHON: ${{ matrix.version }}

    strategy:
      fail-fast: false
      # https://blog.jaraco.com/efficient-use-of-ci-resources/
      matrix:
        version: ['3.13']
        platform: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install
      id: install
      run: uv sync

    - name: Run unit tests
      run: uv run pytest -vv
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

    - name: Check formatting
      id: formatting
      run: uv run ruff format . --diff
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

    - name: Lint
      id: linting
      run: uv run ruff check --output-format github
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

    - name: Check type safety
      id: types
      run: uv run mypy .
      if: ${{ !cancelled() && steps.install.conclusion == 'success' }}

  release:
    needs: [check]

    if: ${{ github.ref_type == 'tag' }}

    name: Release to PyPI
    runs-on: ubuntu-latest
    environment: pypi

    permissions:
      id-token: write
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          persist-credentials: false

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Validate tag
        id: validate-tag
        run: |
          set -CETeuxo pipefail

          project_version=v$(uvx --with hatch-vcs hatchling version)
          tag=${GITHUB_REF#refs/tags/}

          [[ "$tag" == "$project_version" ]] || {
            echo "Tag $tag does not match project version $project_version"
            exit 1
          }

      - name: Build package distributions
        id: build
        run: uv build --out-dir dist

      - name: Publish package distributions
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: 'Create a GitHub release'
        uses: ncipollo/release-action@v1.18.0
        with:
          prerelease: false
          draft: false
          makeLatest: true
          tag: "${{ github.ref_name }}"
          name: "${{ github.ref_name }}"
          generateReleaseNotes: true
