"""
End-to-end integration tests using the test FastAPI app
"""

import tempfile
from pathlib import Path
from tests.sample.app import app
from fluidkit.core.integrator import integrate, introspect_only, generate_only


def test_end_to_end_typescript_generation():
    """Test complete pipeline from FastAPI app to TypeScript files"""
    
    print("=== END-TO-END TYPESCRIPT GENERATION TEST ===")
    
    # Test default integration
    print("1. Default integration (mirror strategy):")
    fluid_app, files = integrate(app)
    
    print(f"   Routes discovered: {len(fluid_app.routes)}")
    print(f"   Models discovered: {len(fluid_app.models)}")
    print(f"   Files generated: {len(files)}")
    
    # Show discovered routes
    print("   Discovered routes:")
    for route in fluid_app.routes:
        print(f"     {route.methods} {route.path} -> {route.name}")
    
    # Show discovered models
    print("   Discovered models:")
    for model in fluid_app.models:
        model_type = "enum" if model.is_enum else "interface"
        print(f"     {model.name} ({model_type}) - {len(model.fields)} fields")
    
    print()


def test_strategy_differences():
    """Test differences between co-locate and mirror strategies"""
    
    print("=== STRATEGY COMPARISON TEST ===")
    
    strategies = ["co-locate", "mirror"]
    
    for strategy in strategies:
        print(f"\nTesting {strategy.upper()} strategy:")
        
        fluid_app, files = integrate(app, strategy=strategy)
        
        print(f"  Generated {len(files)} files:")
        for file_path in sorted(files.keys()):
            try:
                relative_path = Path(file_path).relative_to(Path.cwd())
            except ValueError:
                relative_path = Path(file_path)
            print(f"    {relative_path}")


def test_file_writing_and_headers():
    """Test that files are written with proper headers"""
    
    print("=== FILE WRITING TEST ===")
    
    # Generate files without writing
    files = generate_only(app, strategy="mirror")
    
    print(f"Generated {len(files)} files in memory")
    
    # Check that files have proper headers
    for file_path, content in files.items():
        if content.startswith("/**\n * Auto-generated by FluidKit"):
            print(f"  {Path(file_path).name}: Header present")
        else:
            print(f"  {Path(file_path).name}: Missing header")
    
    # Show preview of one file
    if files:
        first_file_path = next(iter(files.keys()))
        first_file_content = files[first_file_path]
        
        print(f"\nPreview of {Path(first_file_path).name}:")
        lines = first_file_content.splitlines()
        for i, line in enumerate(lines[:10]):
            print(f"  {i+1:2d}: {line}")
        if len(lines) > 10:
            print(f"      ... ({len(lines)-10} more lines)")


def test_convenience_functions():
    """Test convenience functions for different use cases"""
    
    print("=== CONVENIENCE FUNCTIONS TEST ===")
    
    # Test introspection only
    print("1. Introspection only:")
    fluid_app = introspect_only(app)
    print(f"   Routes: {len(fluid_app.routes)}, Models: {len(fluid_app.models)}")
    
    # Test generation without writing
    print("\n2. Generation without writing:")
    files = generate_only(app, strategy="mirror")
    print(f"   Generated {len(files)} files in memory")
    
    # Test verbose mode
    print("\n3. Verbose mode:")
    fluid_app, files = integrate(app, verbose=True)


def test_language_parameter_validation():
    """Test language parameter validation"""
    
    print("=== LANGUAGE VALIDATION TEST ===")
    
    # Test valid languages
    valid_languages = ["ts", "typescript"]
    
    for lang in valid_languages:
        try:
            fluid_app, files = integrate(app, lang=lang, project_root=None)
            print(f"  Language '{lang}': OK")
        except Exception as e:
            print(f"  Language '{lang}': Failed - {e}")
    
    # Test invalid language
    try:
        fluid_app, files = integrate(app, lang="invalid")
        print("  Language 'invalid': Unexpectedly succeeded")
    except ValueError as e:
        print(f"  Language 'invalid': Correctly rejected - {e}")
    except Exception as e:
        print(f"  Language 'invalid': Unexpected error - {e}")


def test_target_field_functionality():
    """Test target field in configuration"""
    import tempfile
    import json
    from fluidkit.core.config import load_fluidkit_config
    
    print("=== TARGET FIELD TEST ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        config_path = Path(temp_dir) / "fluid.config.json"
        
        # Test config with target
        config_data = {
            "target": "production",
            "environments": {
                "development": {
                    "mode": "unified",
                    "apiUrl": "/api"
                },
                "production": {
                    "mode": "separate", 
                    "apiUrl": "https://api.example.com"
                }
            }
        }
        
        with open(config_path, 'w') as f:
            json.dump(config_data, f)
        
        config = load_fluidkit_config(temp_dir)
        
        print(f"Target: {config.target}")
        print(f"Target environment: {config.get_environment(config.target)}")
        
        # Test integration with target
        fluid_app, files = integrate(app, project_root=temp_dir)
        
        # Check that runtime.ts uses production settings
        runtime_files = [f for f in files.keys() if 'runtime.ts' in f]
        if runtime_files:
            runtime_content = files[runtime_files[0]]
            if "https://api.example.com" in runtime_content:
                print("Runtime correctly uses production URL")
            else:
                print("Runtime doesn't use production URL")


def run_integration_tests():
    """Run all integration tests"""
    test_end_to_end_typescript_generation()
    test_strategy_differences()
    test_file_writing_and_headers()
    test_convenience_functions()
    test_language_parameter_validation()
    test_target_field_functionality()
    print("\nIntegration tests completed")


if __name__ == "__main__":
    run_integration_tests()
