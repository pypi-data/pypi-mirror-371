# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.schedule_calendar_spec import ScheduleCalendarSpec
from adomo.models.schedule_interval_spec import ScheduleIntervalSpec
from typing import Optional, Set
from typing_extensions import Self


class ScheduleSpecInput(BaseModel):
    """
    Complete schedule specification with all timing options.
    """  # noqa: E501

    calendars: Optional[List[ScheduleCalendarSpec]] = None
    intervals: Optional[List[ScheduleIntervalSpec]] = None
    cron_expressions: Optional[List[StrictStr]] = None
    skip: Optional[List[ScheduleCalendarSpec]] = None
    start_at: Optional[datetime] = None
    end_at: Optional[datetime] = None
    jitter: Optional[StrictStr] = None
    time_zone_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "calendars",
        "intervals",
        "cron_expressions",
        "skip",
        "start_at",
        "end_at",
        "jitter",
        "time_zone_name",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleSpecInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in calendars (list)
        _items = []
        if self.calendars:
            for _item_calendars in self.calendars:
                if _item_calendars:
                    _items.append(_item_calendars.to_dict())
            _dict["calendars"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in intervals (list)
        _items = []
        if self.intervals:
            for _item_intervals in self.intervals:
                if _item_intervals:
                    _items.append(_item_intervals.to_dict())
            _dict["intervals"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skip (list)
        _items = []
        if self.skip:
            for _item_skip in self.skip:
                if _item_skip:
                    _items.append(_item_skip.to_dict())
            _dict["skip"] = _items
        # set to None if start_at (nullable) is None
        # and model_fields_set contains the field
        if self.start_at is None and "start_at" in self.model_fields_set:
            _dict["start_at"] = None

        # set to None if end_at (nullable) is None
        # and model_fields_set contains the field
        if self.end_at is None and "end_at" in self.model_fields_set:
            _dict["end_at"] = None

        # set to None if jitter (nullable) is None
        # and model_fields_set contains the field
        if self.jitter is None and "jitter" in self.model_fields_set:
            _dict["jitter"] = None

        # set to None if time_zone_name (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone_name is None and "time_zone_name" in self.model_fields_set:
            _dict["time_zone_name"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleSpecInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "calendars": (
                    [
                        ScheduleCalendarSpec.from_dict(_item)
                        for _item in obj["calendars"]
                    ]
                    if obj.get("calendars") is not None
                    else None
                ),
                "intervals": (
                    [
                        ScheduleIntervalSpec.from_dict(_item)
                        for _item in obj["intervals"]
                    ]
                    if obj.get("intervals") is not None
                    else None
                ),
                "cron_expressions": obj.get("cron_expressions"),
                "skip": (
                    [ScheduleCalendarSpec.from_dict(_item) for _item in obj["skip"]]
                    if obj.get("skip") is not None
                    else None
                ),
                "start_at": obj.get("start_at"),
                "end_at": obj.get("end_at"),
                "jitter": obj.get("jitter"),
                "time_zone_name": obj.get("time_zone_name"),
            }
        )
        return _obj
