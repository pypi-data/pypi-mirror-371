# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.schedule_range import ScheduleRange
from typing import Optional, Set
from typing_extensions import Self


class ScheduleCalendarSpec(BaseModel):
    """
    Calendar-based schedule specification.
    """  # noqa: E501

    second: Optional[List[ScheduleRange]] = None
    minute: Optional[List[ScheduleRange]] = None
    hour: Optional[List[ScheduleRange]] = None
    day_of_month: Optional[List[ScheduleRange]] = None
    month: Optional[List[ScheduleRange]] = None
    year: Optional[List[ScheduleRange]] = None
    day_of_week: Optional[List[ScheduleRange]] = None
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "second",
        "minute",
        "hour",
        "day_of_month",
        "month",
        "year",
        "day_of_week",
        "comment",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleCalendarSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in second (list)
        _items = []
        if self.second:
            for _item_second in self.second:
                if _item_second:
                    _items.append(_item_second.to_dict())
            _dict["second"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minute (list)
        _items = []
        if self.minute:
            for _item_minute in self.minute:
                if _item_minute:
                    _items.append(_item_minute.to_dict())
            _dict["minute"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hour (list)
        _items = []
        if self.hour:
            for _item_hour in self.hour:
                if _item_hour:
                    _items.append(_item_hour.to_dict())
            _dict["hour"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in day_of_month (list)
        _items = []
        if self.day_of_month:
            for _item_day_of_month in self.day_of_month:
                if _item_day_of_month:
                    _items.append(_item_day_of_month.to_dict())
            _dict["day_of_month"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in month (list)
        _items = []
        if self.month:
            for _item_month in self.month:
                if _item_month:
                    _items.append(_item_month.to_dict())
            _dict["month"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in year (list)
        _items = []
        if self.year:
            for _item_year in self.year:
                if _item_year:
                    _items.append(_item_year.to_dict())
            _dict["year"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in day_of_week (list)
        _items = []
        if self.day_of_week:
            for _item_day_of_week in self.day_of_week:
                if _item_day_of_week:
                    _items.append(_item_day_of_week.to_dict())
            _dict["day_of_week"] = _items
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict["comment"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleCalendarSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "second": (
                    [ScheduleRange.from_dict(_item) for _item in obj["second"]]
                    if obj.get("second") is not None
                    else None
                ),
                "minute": (
                    [ScheduleRange.from_dict(_item) for _item in obj["minute"]]
                    if obj.get("minute") is not None
                    else None
                ),
                "hour": (
                    [ScheduleRange.from_dict(_item) for _item in obj["hour"]]
                    if obj.get("hour") is not None
                    else None
                ),
                "day_of_month": (
                    [ScheduleRange.from_dict(_item) for _item in obj["day_of_month"]]
                    if obj.get("day_of_month") is not None
                    else None
                ),
                "month": (
                    [ScheduleRange.from_dict(_item) for _item in obj["month"]]
                    if obj.get("month") is not None
                    else None
                ),
                "year": (
                    [ScheduleRange.from_dict(_item) for _item in obj["year"]]
                    if obj.get("year") is not None
                    else None
                ),
                "day_of_week": (
                    [ScheduleRange.from_dict(_item) for _item in obj["day_of_week"]]
                    if obj.get("day_of_week") is not None
                    else None
                ),
                "comment": obj.get("comment"),
            }
        )
        return _obj
