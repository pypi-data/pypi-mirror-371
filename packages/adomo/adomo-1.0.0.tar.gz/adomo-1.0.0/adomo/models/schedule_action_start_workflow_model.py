# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class ScheduleActionStartWorkflowModel(BaseModel):
    """
    Model for workflow start action.
    """  # noqa: E501

    workflow: StrictStr
    args: Optional[List[Any]] = None
    id: StrictStr
    task_queue: StrictStr
    workflow_execution_timeout: Optional[StrictStr] = None
    workflow_run_timeout: Optional[StrictStr] = None
    workflow_task_timeout: Optional[StrictStr] = None
    retry_policy: Optional[Dict[str, Any]] = None
    cron_schedule: Optional[StrictStr] = None
    memo: Optional[Dict[str, Any]] = None
    search_attributes: Optional[Dict[str, Any]] = None
    headers: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "workflow",
        "args",
        "id",
        "task_queue",
        "workflow_execution_timeout",
        "workflow_run_timeout",
        "workflow_task_timeout",
        "retry_policy",
        "cron_schedule",
        "memo",
        "search_attributes",
        "headers",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleActionStartWorkflowModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if workflow_execution_timeout (nullable) is None
        # and model_fields_set contains the field
        if (
            self.workflow_execution_timeout is None
            and "workflow_execution_timeout" in self.model_fields_set
        ):
            _dict["workflow_execution_timeout"] = None

        # set to None if workflow_run_timeout (nullable) is None
        # and model_fields_set contains the field
        if (
            self.workflow_run_timeout is None
            and "workflow_run_timeout" in self.model_fields_set
        ):
            _dict["workflow_run_timeout"] = None

        # set to None if workflow_task_timeout (nullable) is None
        # and model_fields_set contains the field
        if (
            self.workflow_task_timeout is None
            and "workflow_task_timeout" in self.model_fields_set
        ):
            _dict["workflow_task_timeout"] = None

        # set to None if retry_policy (nullable) is None
        # and model_fields_set contains the field
        if self.retry_policy is None and "retry_policy" in self.model_fields_set:
            _dict["retry_policy"] = None

        # set to None if cron_schedule (nullable) is None
        # and model_fields_set contains the field
        if self.cron_schedule is None and "cron_schedule" in self.model_fields_set:
            _dict["cron_schedule"] = None

        # set to None if memo (nullable) is None
        # and model_fields_set contains the field
        if self.memo is None and "memo" in self.model_fields_set:
            _dict["memo"] = None

        # set to None if search_attributes (nullable) is None
        # and model_fields_set contains the field
        if (
            self.search_attributes is None
            and "search_attributes" in self.model_fields_set
        ):
            _dict["search_attributes"] = None

        # set to None if headers (nullable) is None
        # and model_fields_set contains the field
        if self.headers is None and "headers" in self.model_fields_set:
            _dict["headers"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleActionStartWorkflowModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "workflow": obj.get("workflow"),
                "args": obj.get("args"),
                "id": obj.get("id"),
                "task_queue": obj.get("task_queue"),
                "workflow_execution_timeout": obj.get("workflow_execution_timeout"),
                "workflow_run_timeout": obj.get("workflow_run_timeout"),
                "workflow_task_timeout": obj.get("workflow_task_timeout"),
                "retry_policy": obj.get("retry_policy"),
                "cron_schedule": obj.get("cron_schedule"),
                "memo": obj.get("memo"),
                "search_attributes": obj.get("search_attributes"),
                "headers": obj.get("headers"),
            }
        )
        return _obj
