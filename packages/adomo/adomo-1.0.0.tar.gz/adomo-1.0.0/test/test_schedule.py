# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from adomo.models.schedule import Schedule


class TestSchedule(unittest.TestCase):
    """Schedule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Schedule:
        """Test Schedule
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Schedule`
        """
        model = Schedule()
        if include_optional:
            return Schedule(
                action = adomo.models.schedule_action_start_workflow_model.ScheduleActionStartWorkflowModel(
                    workflow = '', 
                    args = [
                        null
                        ], 
                    id = '', 
                    task_queue = '', 
                    workflow_execution_timeout = '', 
                    workflow_run_timeout = '', 
                    workflow_task_timeout = '', 
                    retry_policy = {
                        'key' : null
                        }, 
                    cron_schedule = '', 
                    memo = {
                        'key' : null
                        }, 
                    search_attributes = {
                        'key' : null
                        }, 
                    headers = {
                        'key' : null
                        }, ),
                spec = adomo.models.schedule_spec.ScheduleSpec(
                    calendars = [
                        adomo.models.schedule_calendar_spec.ScheduleCalendarSpec(
                            second = [
                                adomo.models.schedule_range.ScheduleRange(
                                    start = 56, 
                                    end = 56, 
                                    step = 56, )
                                ], 
                            minute = [
                                adomo.models.schedule_range.ScheduleRange(
                                    start = 56, 
                                    end = 56, 
                                    step = 56, )
                                ], 
                            hour = [
                                
                                ], 
                            day_of_month = [
                                
                                ], 
                            month = [
                                
                                ], 
                            year = [
                                
                                ], 
                            day_of_week = [
                                
                                ], 
                            comment = '', )
                        ], 
                    intervals = [
                        adomo.models.schedule_interval_spec.ScheduleIntervalSpec(
                            every = '', 
                            offset = '', )
                        ], 
                    cron_expressions = [
                        ''
                        ], 
                    skip = [
                        adomo.models.schedule_calendar_spec.ScheduleCalendarSpec(
                            comment = '', )
                        ], 
                    start_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    jitter = '', 
                    time_zone_name = '', ),
                policy = adomo.models.schedule_policy_model.SchedulePolicyModel(
                    overlap = 'skip', 
                    catchup_window = '', 
                    pause_on_failure = True, ),
                state = adomo.models.schedule_state_model.ScheduleStateModel(
                    note = '', 
                    paused = True, 
                    limited_actions = True, 
                    remaining_actions = 56, )
            )
        else:
            return Schedule(
                action = adomo.models.schedule_action_start_workflow_model.ScheduleActionStartWorkflowModel(
                    workflow = '', 
                    args = [
                        null
                        ], 
                    id = '', 
                    task_queue = '', 
                    workflow_execution_timeout = '', 
                    workflow_run_timeout = '', 
                    workflow_task_timeout = '', 
                    retry_policy = {
                        'key' : null
                        }, 
                    cron_schedule = '', 
                    memo = {
                        'key' : null
                        }, 
                    search_attributes = {
                        'key' : null
                        }, 
                    headers = {
                        'key' : null
                        }, ),
                spec = adomo.models.schedule_spec.ScheduleSpec(
                    calendars = [
                        adomo.models.schedule_calendar_spec.ScheduleCalendarSpec(
                            second = [
                                adomo.models.schedule_range.ScheduleRange(
                                    start = 56, 
                                    end = 56, 
                                    step = 56, )
                                ], 
                            minute = [
                                adomo.models.schedule_range.ScheduleRange(
                                    start = 56, 
                                    end = 56, 
                                    step = 56, )
                                ], 
                            hour = [
                                
                                ], 
                            day_of_month = [
                                
                                ], 
                            month = [
                                
                                ], 
                            year = [
                                
                                ], 
                            day_of_week = [
                                
                                ], 
                            comment = '', )
                        ], 
                    intervals = [
                        adomo.models.schedule_interval_spec.ScheduleIntervalSpec(
                            every = '', 
                            offset = '', )
                        ], 
                    cron_expressions = [
                        ''
                        ], 
                    skip = [
                        adomo.models.schedule_calendar_spec.ScheduleCalendarSpec(
                            comment = '', )
                        ], 
                    start_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    jitter = '', 
                    time_zone_name = '', ),
        )
        """

    def testSchedule(self):
        """Test Schedule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
