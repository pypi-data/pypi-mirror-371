# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from adomo.api.jobs_api import JobsApi


class TestJobsApi(unittest.TestCase):
    """JobsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = JobsApi()

    def tearDown(self) -> None:
        pass

    def test_get_job_events_jobs_job_id_events_get(self) -> None:
        """Test case for get_job_events_jobs_job_id_events_get

        Get Job Events
        """
        pass

    def test_get_job_jobs_job_id_get(self) -> None:
        """Test case for get_job_jobs_job_id_get

        Get Job
        """
        pass

    def test_get_jobs_jobs_get(self) -> None:
        """Test case for get_jobs_jobs_get

        Get Jobs
        """
        pass

    def test_query_job_jobs_job_id_query_get(self) -> None:
        """Test case for query_job_jobs_job_id_query_get

        Query Job
        """
        pass

    def test_signal_job_jobs_job_id_signal_signal_patch(self) -> None:
        """Test case for signal_job_jobs_job_id_signal_signal_patch

        Signal Job
        """
        pass

    def test_terminate_job_jobs_job_id_terminate_patch(self) -> None:
        """Test case for terminate_job_jobs_job_id_terminate_patch

        Terminate Job
        """
        pass

    def test_update_job_jobs_job_id_update_update_patch(self) -> None:
        """Test case for update_job_jobs_job_id_update_update_patch

        Update Job
        """
        pass


if __name__ == "__main__":
    unittest.main()
