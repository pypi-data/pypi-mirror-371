# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from adomo.models.jobs_response import JobsResponse


class TestJobsResponse(unittest.TestCase):
    """JobsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobsResponse:
        """Test JobsResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `JobsResponse`
        """
        model = JobsResponse()
        if include_optional:
            return JobsResponse(
                items = [
                    adomo.models.job_response.JobResponse(
                        id = '', 
                        workflow_type = '', 
                        task_queue = '', 
                        close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        execution_status = 1, 
                        execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        history_length = 56, 
                        parent_id = '', 
                        parent_run_id = '', 
                        run_id = '', )
                    ],
                metadata = adomo.models.page_info.PageInfo(
                    total_page_count = 56, 
                    total_record_count = 56, 
                    page_number = 56, 
                    page_size = 56, )
            )
        else:
            return JobsResponse(
                items = [
                    adomo.models.job_response.JobResponse(
                        id = '', 
                        workflow_type = '', 
                        task_queue = '', 
                        close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        execution_status = 1, 
                        execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        history_length = 56, 
                        parent_id = '', 
                        parent_run_id = '', 
                        run_id = '', )
                    ],
                metadata = adomo.models.page_info.PageInfo(
                    total_page_count = 56, 
                    total_record_count = 56, 
                    page_number = 56, 
                    page_size = 56, ),
        )
        """

    def testJobsResponse(self):
        """Test JobsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
