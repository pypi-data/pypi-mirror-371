# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import unittest

from adomo.models.agent_config_input_mcp_servers_value import (
    AgentConfigInputMcpServersValue,
)


class TestAgentConfigInputMcpServersValue(unittest.TestCase):
    """AgentConfigInputMcpServersValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AgentConfigInputMcpServersValue:
        """Test AgentConfigInputMcpServersValue
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `AgentConfigInputMcpServersValue`
        """
        model = AgentConfigInputMcpServersValue()
        if include_optional:
            return AgentConfigInputMcpServersValue(
                url = '',
                headers = {
                    'key' : null
                    },
                timeout = 1.337,
                read_timeout = 1.337,
                command = None,
                args = [
                    ''
                    ],
                env = {
                    'key' : ''
                    },
                cwd = None,
                image = '',
                image_pull_policy = 'IfNotPresent',
                entrypoint = '',
                user = '',
                secrets = {
                    'key' : null
                    },
                volumes = [
                    ''
                    ],
                namespace = '',
                service_account_name = '',
                resources = {
                    'key' : {
                        'key' : ''
                        }
                    }
            )
        else:
            return AgentConfigInputMcpServersValue(
                url = '',
                command = None,
                image = '',
        )
        """

    def testAgentConfigInputMcpServersValue(self):
        """Test AgentConfigInputMcpServersValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
