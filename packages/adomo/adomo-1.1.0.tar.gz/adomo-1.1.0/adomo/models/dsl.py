# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.model_schema import ModelSchema
from adomo.models.root import Root
from adomo.models.signal import Signal
from adomo.models.update import Update
from typing import Optional, Set
from typing_extensions import Self


class Dsl(BaseModel):
    """
    Dsl
    """  # noqa: E501

    root: Optional[Root] = None
    schemata: Optional[ModelSchema] = None
    result: Optional[Any] = None
    signals: Optional[Dict[str, Signal]] = None
    updates: Optional[Dict[str, Update]] = None
    __properties: ClassVar[List[str]] = [
        "root",
        "schemata",
        "result",
        "signals",
        "updates",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dsl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of root
        if self.root:
            _dict["root"] = self.root.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schemata
        if self.schemata:
            _dict["schemata"] = self.schemata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in signals (dict)
        _field_dict = {}
        if self.signals:
            for _key_signals in self.signals:
                if self.signals[_key_signals]:
                    _field_dict[_key_signals] = self.signals[_key_signals].to_dict()
            _dict["signals"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in updates (dict)
        _field_dict = {}
        if self.updates:
            for _key_updates in self.updates:
                if self.updates[_key_updates]:
                    _field_dict[_key_updates] = self.updates[_key_updates].to_dict()
            _dict["updates"] = _field_dict
        # set to None if root (nullable) is None
        # and model_fields_set contains the field
        if self.root is None and "root" in self.model_fields_set:
            _dict["root"] = None

        # set to None if schemata (nullable) is None
        # and model_fields_set contains the field
        if self.schemata is None and "schemata" in self.model_fields_set:
            _dict["schemata"] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict["result"] = None

        # set to None if signals (nullable) is None
        # and model_fields_set contains the field
        if self.signals is None and "signals" in self.model_fields_set:
            _dict["signals"] = None

        # set to None if updates (nullable) is None
        # and model_fields_set contains the field
        if self.updates is None and "updates" in self.model_fields_set:
            _dict["updates"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dsl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "root": (
                    Root.from_dict(obj["root"]) if obj.get("root") is not None else None
                ),
                "schemata": (
                    ModelSchema.from_dict(obj["schemata"])
                    if obj.get("schemata") is not None
                    else None
                ),
                "result": obj.get("result"),
                "signals": (
                    dict(
                        (_k, Signal.from_dict(_v)) for _k, _v in obj["signals"].items()
                    )
                    if obj.get("signals") is not None
                    else None
                ),
                "updates": (
                    dict(
                        (_k, Update.from_dict(_v)) for _k, _v in obj["updates"].items()
                    )
                    if obj.get("updates") is not None
                    else None
                ),
            }
        )
        return _obj
