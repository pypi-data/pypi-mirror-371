# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing import Optional
from adomo.models.activity_statement_output import ActivityStatementOutput
from adomo.models.child_workflow_statement_output import ChildWorkflowStatementOutput
from adomo.models.condition_statement_output import ConditionStatementOutput
from adomo.models.sleep_statement_output import SleepStatementOutput
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

PARALLELOUTPUTBRANCHESINNER_ANY_OF_SCHEMAS = [
    "ActivityStatementOutput",
    "ChildWorkflowStatementOutput",
    "ConditionStatementOutput",
    "ParallelStatementOutput",
    "SequenceStatementOutput",
    "SleepStatementOutput",
]


class ParallelOutputBranchesInner(BaseModel):
    """
    ParallelOutputBranchesInner
    """

    # data type: ConditionStatementOutput
    anyof_schema_1_validator: Optional[ConditionStatementOutput] = None
    # data type: ActivityStatementOutput
    anyof_schema_2_validator: Optional[ActivityStatementOutput] = None
    # data type: SequenceStatementOutput
    anyof_schema_3_validator: Optional[SequenceStatementOutput] = None
    # data type: ParallelStatementOutput
    anyof_schema_4_validator: Optional[ParallelStatementOutput] = None
    # data type: SleepStatementOutput
    anyof_schema_5_validator: Optional[SleepStatementOutput] = None
    # data type: ChildWorkflowStatementOutput
    anyof_schema_6_validator: Optional[ChildWorkflowStatementOutput] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                ActivityStatementOutput,
                ChildWorkflowStatementOutput,
                ConditionStatementOutput,
                ParallelStatementOutput,
                SequenceStatementOutput,
                SleepStatementOutput,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "ActivityStatementOutput",
        "ChildWorkflowStatementOutput",
        "ConditionStatementOutput",
        "ParallelStatementOutput",
        "SequenceStatementOutput",
        "SleepStatementOutput",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = ParallelOutputBranchesInner.model_construct()
        error_messages = []
        # validate data type: ConditionStatementOutput
        if not isinstance(v, ConditionStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ConditionStatementOutput`"
            )
        else:
            return v

        # validate data type: ActivityStatementOutput
        if not isinstance(v, ActivityStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ActivityStatementOutput`"
            )
        else:
            return v

        # validate data type: SequenceStatementOutput
        if not isinstance(v, SequenceStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `SequenceStatementOutput`"
            )
        else:
            return v

        # validate data type: ParallelStatementOutput
        if not isinstance(v, ParallelStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ParallelStatementOutput`"
            )
        else:
            return v

        # validate data type: SleepStatementOutput
        if not isinstance(v, SleepStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `SleepStatementOutput`"
            )
        else:
            return v

        # validate data type: ChildWorkflowStatementOutput
        if not isinstance(v, ChildWorkflowStatementOutput):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ChildWorkflowStatementOutput`"
            )
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in ParallelOutputBranchesInner with anyOf schemas: ActivityStatementOutput, ChildWorkflowStatementOutput, ConditionStatementOutput, ParallelStatementOutput, SequenceStatementOutput, SleepStatementOutput. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ConditionStatementOutput] = None
        try:
            instance.actual_instance = ConditionStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ActivityStatementOutput] = None
        try:
            instance.actual_instance = ActivityStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[SequenceStatementOutput] = None
        try:
            instance.actual_instance = SequenceStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ParallelStatementOutput] = None
        try:
            instance.actual_instance = ParallelStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[SleepStatementOutput] = None
        try:
            instance.actual_instance = SleepStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[ChildWorkflowStatementOutput] = None
        try:
            instance.actual_instance = ChildWorkflowStatementOutput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ParallelOutputBranchesInner with anyOf schemas: ActivityStatementOutput, ChildWorkflowStatementOutput, ConditionStatementOutput, ParallelStatementOutput, SequenceStatementOutput, SleepStatementOutput. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            ActivityStatementOutput,
            ChildWorkflowStatementOutput,
            ConditionStatementOutput,
            ParallelStatementOutput,
            SequenceStatementOutput,
            SleepStatementOutput,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


from adomo.models.parallel_statement_output import ParallelStatementOutput
from adomo.models.sequence_statement_output import SequenceStatementOutput

# TODO: Rewrite to not use raise_errors
ParallelOutputBranchesInner.model_rebuild(raise_errors=False)
