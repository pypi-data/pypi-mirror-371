# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from uuid import UUID
from adomo.models.agent_config_input_mcp_servers_value import (
    AgentConfigInputMcpServersValue,
)
from adomo.models.output_format import OutputFormat
from adomo.models.system_prompt import SystemPrompt
from typing import Optional, Set
from typing_extensions import Self


class AgentConfigInput(BaseModel):
    """
    AgentConfigInput
    """  # noqa: E501

    name: StrictStr
    description: Optional[StrictStr] = None
    system_prompt: SystemPrompt
    retries: Optional[StrictInt] = 1
    instructions: Optional[StrictStr] = None
    mcp_servers: Optional[Dict[str, AgentConfigInputMcpServersValue]] = None
    output: Optional[OutputFormat] = None
    id: Optional[UUID] = None
    model: Annotated[List[Any], Field(min_length=2, max_length=2)]
    output_schema: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "system_prompt",
        "retries",
        "instructions",
        "mcp_servers",
        "output",
        "id",
        "model",
        "output_schema",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentConfigInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of system_prompt
        if self.system_prompt:
            _dict["system_prompt"] = self.system_prompt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in mcp_servers (dict)
        _field_dict = {}
        if self.mcp_servers:
            for _key_mcp_servers in self.mcp_servers:
                if self.mcp_servers[_key_mcp_servers]:
                    _field_dict[_key_mcp_servers] = self.mcp_servers[
                        _key_mcp_servers
                    ].to_dict()
            _dict["mcp_servers"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict["output"] = self.output.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if instructions (nullable) is None
        # and model_fields_set contains the field
        if self.instructions is None and "instructions" in self.model_fields_set:
            _dict["instructions"] = None

        # set to None if mcp_servers (nullable) is None
        # and model_fields_set contains the field
        if self.mcp_servers is None and "mcp_servers" in self.model_fields_set:
            _dict["mcp_servers"] = None

        # set to None if output (nullable) is None
        # and model_fields_set contains the field
        if self.output is None and "output" in self.model_fields_set:
            _dict["output"] = None

        # set to None if output_schema (nullable) is None
        # and model_fields_set contains the field
        if self.output_schema is None and "output_schema" in self.model_fields_set:
            _dict["output_schema"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentConfigInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "system_prompt": (
                    SystemPrompt.from_dict(obj["system_prompt"])
                    if obj.get("system_prompt") is not None
                    else None
                ),
                "retries": obj.get("retries") if obj.get("retries") is not None else 1,
                "instructions": obj.get("instructions"),
                "mcp_servers": (
                    dict(
                        (_k, AgentConfigInputMcpServersValue.from_dict(_v))
                        for _k, _v in obj["mcp_servers"].items()
                    )
                    if obj.get("mcp_servers") is not None
                    else None
                ),
                "output": (
                    OutputFormat.from_dict(obj["output"])
                    if obj.get("output") is not None
                    else None
                ),
                "id": obj.get("id"),
                "model": obj.get("model"),
                "output_schema": obj.get("output_schema"),
            }
        )
        return _obj
