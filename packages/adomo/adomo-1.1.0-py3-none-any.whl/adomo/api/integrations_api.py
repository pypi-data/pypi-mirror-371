# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Any, Optional
from uuid import UUID

from adomo.api_client import ApiClient, RequestSerialized
from adomo.api_response import ApiResponse
from adomo.rest import RESTResponseType


class IntegrationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def oidc_callback_integrations_callback_integration_type_id_get(
        self,
        integration_type_id: UUID,
        code: StrictStr,
        state: StrictStr,
        scope: Optional[StrictStr] = None,
        error: Optional[StrictStr] = None,
        error_description: Optional[StrictStr] = None,
        error_uri: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Oidc Callback


        :param integration_type_id: (required)
        :type integration_type_id: str
        :param code: (required)
        :type code: str
        :param state: (required)
        :type state: str
        :param scope:
        :type scope: str
        :param error:
        :type error: str
        :param error_description:
        :type error_description: str
        :param error_uri:
        :type error_uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._oidc_callback_integrations_callback_integration_type_id_get_serialize(
                integration_type_id=integration_type_id,
                code=code,
                state=state,
                scope=scope,
                error=error,
                error_description=error_description,
                error_uri=error_uri,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def oidc_callback_integrations_callback_integration_type_id_get_with_http_info(
        self,
        integration_type_id: UUID,
        code: StrictStr,
        state: StrictStr,
        scope: Optional[StrictStr] = None,
        error: Optional[StrictStr] = None,
        error_description: Optional[StrictStr] = None,
        error_uri: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Oidc Callback


        :param integration_type_id: (required)
        :type integration_type_id: str
        :param code: (required)
        :type code: str
        :param state: (required)
        :type state: str
        :param scope:
        :type scope: str
        :param error:
        :type error: str
        :param error_description:
        :type error_description: str
        :param error_uri:
        :type error_uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._oidc_callback_integrations_callback_integration_type_id_get_serialize(
                integration_type_id=integration_type_id,
                code=code,
                state=state,
                scope=scope,
                error=error,
                error_description=error_description,
                error_uri=error_uri,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def oidc_callback_integrations_callback_integration_type_id_get_without_preload_content(
        self,
        integration_type_id: UUID,
        code: StrictStr,
        state: StrictStr,
        scope: Optional[StrictStr] = None,
        error: Optional[StrictStr] = None,
        error_description: Optional[StrictStr] = None,
        error_uri: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Oidc Callback


        :param integration_type_id: (required)
        :type integration_type_id: str
        :param code: (required)
        :type code: str
        :param state: (required)
        :type state: str
        :param scope:
        :type scope: str
        :param error:
        :type error: str
        :param error_description:
        :type error_description: str
        :param error_uri:
        :type error_uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._oidc_callback_integrations_callback_integration_type_id_get_serialize(
                integration_type_id=integration_type_id,
                code=code,
                state=state,
                scope=scope,
                error=error,
                error_description=error_description,
                error_uri=error_uri,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
            "422": "HTTPValidationError",
        }

        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _oidc_callback_integrations_callback_integration_type_id_get_serialize(
        self,
        integration_type_id,
        code,
        state,
        scope,
        error,
        error_description,
        error_uri,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if integration_type_id is not None:
            _path_params["integration_type_id"] = integration_type_id
        # process the query parameters
        if code is not None:

            _query_params.append(("code", code))

        if state is not None:

            _query_params.append(("state", state))

        if scope is not None:

            _query_params.append(("scope", scope))

        if error is not None:

            _query_params.append(("error", error))

        if error_description is not None:

            _query_params.append(("error_description", error_description))

        if error_uri is not None:

            _query_params.append(("error_uri", error_uri))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/integrations/callback/{integration_type_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
