# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.schedule_action_result_model import ScheduleActionResultModel
from typing import Optional, Set
from typing_extensions import Self


class ScheduleInfo(BaseModel):
    """
    Model for schedule information.
    """  # noqa: E501

    created_at: datetime
    last_updated_at: Optional[datetime] = None
    next_action_times: Optional[List[datetime]] = None
    num_actions: Optional[StrictInt] = 0
    num_actions_missed_catchup_window: Optional[StrictInt] = 0
    num_actions_skipped_overlap: Optional[StrictInt] = 0
    recent_actions: Optional[List[ScheduleActionResultModel]] = None
    running_actions: Optional[List[Dict[str, Any]]] = None
    __properties: ClassVar[List[str]] = [
        "created_at",
        "last_updated_at",
        "next_action_times",
        "num_actions",
        "num_actions_missed_catchup_window",
        "num_actions_skipped_overlap",
        "recent_actions",
        "running_actions",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recent_actions (list)
        _items = []
        if self.recent_actions:
            for _item_recent_actions in self.recent_actions:
                if _item_recent_actions:
                    _items.append(_item_recent_actions.to_dict())
            _dict["recent_actions"] = _items
        # set to None if last_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_at is None and "last_updated_at" in self.model_fields_set:
            _dict["last_updated_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "created_at": obj.get("created_at"),
                "last_updated_at": obj.get("last_updated_at"),
                "next_action_times": obj.get("next_action_times"),
                "num_actions": (
                    obj.get("num_actions") if obj.get("num_actions") is not None else 0
                ),
                "num_actions_missed_catchup_window": (
                    obj.get("num_actions_missed_catchup_window")
                    if obj.get("num_actions_missed_catchup_window") is not None
                    else 0
                ),
                "num_actions_skipped_overlap": (
                    obj.get("num_actions_skipped_overlap")
                    if obj.get("num_actions_skipped_overlap") is not None
                    else 0
                ),
                "recent_actions": (
                    [
                        ScheduleActionResultModel.from_dict(_item)
                        for _item in obj["recent_actions"]
                    ]
                    if obj.get("recent_actions") is not None
                    else None
                ),
                "running_actions": obj.get("running_actions"),
            }
        )
        return _obj
