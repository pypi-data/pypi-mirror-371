# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.activity_state import ActivityState
from adomo.models.attribute import Attribute
from adomo.models.dependency import Dependency
from typing import Optional, Set
from typing_extensions import Self


class ActivityOutput(BaseModel):
    """
    ActivityOutput
    """  # noqa: E501

    id: Optional[Any] = None
    name: StrictStr
    description: Optional[StrictStr] = None
    doc: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    categories: Optional[List[StrictStr]] = None
    state: Optional[ActivityState] = None
    path: Optional[StrictStr] = None
    dependencies: Optional[List[Dependency]] = None
    task_queue: Optional[StrictStr] = None
    arguments: Optional[List[Attribute]] = None
    result: Optional[Any] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "description",
        "doc",
        "icon",
        "categories",
        "state",
        "path",
        "dependencies",
        "task_queue",
        "arguments",
        "result",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict["dependencies"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in arguments (list)
        _items = []
        if self.arguments:
            for _item_arguments in self.arguments:
                if _item_arguments:
                    _items.append(_item_arguments.to_dict())
            _dict["arguments"] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["id"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if doc (nullable) is None
        # and model_fields_set contains the field
        if self.doc is None and "doc" in self.model_fields_set:
            _dict["doc"] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict["icon"] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict["categories"] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict["path"] = None

        # set to None if dependencies (nullable) is None
        # and model_fields_set contains the field
        if self.dependencies is None and "dependencies" in self.model_fields_set:
            _dict["dependencies"] = None

        # set to None if task_queue (nullable) is None
        # and model_fields_set contains the field
        if self.task_queue is None and "task_queue" in self.model_fields_set:
            _dict["task_queue"] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict["result"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "doc": obj.get("doc"),
                "icon": obj.get("icon"),
                "categories": obj.get("categories"),
                "state": obj.get("state"),
                "path": obj.get("path"),
                "dependencies": (
                    [Dependency.from_dict(_item) for _item in obj["dependencies"]]
                    if obj.get("dependencies") is not None
                    else None
                ),
                "task_queue": obj.get("task_queue"),
                "arguments": (
                    [Attribute.from_dict(_item) for _item in obj["arguments"]]
                    if obj.get("arguments") is not None
                    else None
                ),
                "result": obj.get("result"),
            }
        )
        return _obj
