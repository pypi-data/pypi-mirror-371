# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.execution_status import ExecutionStatus
from typing import Optional, Set
from typing_extensions import Self


class JobResponse(BaseModel):
    """
    JobResponse
    """  # noqa: E501

    id: Optional[StrictStr] = None
    workflow_type: StrictStr
    task_queue: StrictStr
    close_time: Optional[datetime]
    execution_status: ExecutionStatus
    execution_time: Optional[datetime]
    start_time: Optional[datetime]
    history_length: Optional[StrictInt] = None
    parent_id: Optional[StrictStr] = None
    parent_run_id: Optional[StrictStr] = None
    run_id: StrictStr
    __properties: ClassVar[List[str]] = [
        "id",
        "workflow_type",
        "task_queue",
        "close_time",
        "execution_status",
        "execution_time",
        "start_time",
        "history_length",
        "parent_id",
        "parent_run_id",
        "run_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["id"] = None

        # set to None if close_time (nullable) is None
        # and model_fields_set contains the field
        if self.close_time is None and "close_time" in self.model_fields_set:
            _dict["close_time"] = None

        # set to None if execution_time (nullable) is None
        # and model_fields_set contains the field
        if self.execution_time is None and "execution_time" in self.model_fields_set:
            _dict["execution_time"] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict["start_time"] = None

        # set to None if history_length (nullable) is None
        # and model_fields_set contains the field
        if self.history_length is None and "history_length" in self.model_fields_set:
            _dict["history_length"] = None

        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict["parent_id"] = None

        # set to None if parent_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_run_id is None and "parent_run_id" in self.model_fields_set:
            _dict["parent_run_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "workflow_type": obj.get("workflow_type"),
                "task_queue": obj.get("task_queue"),
                "close_time": obj.get("close_time"),
                "execution_status": obj.get("execution_status"),
                "execution_time": obj.get("execution_time"),
                "start_time": obj.get("start_time"),
                "history_length": obj.get("history_length"),
                "parent_id": obj.get("parent_id"),
                "parent_run_id": obj.get("parent_run_id"),
                "run_id": obj.get("run_id"),
            }
        )
        return _obj
