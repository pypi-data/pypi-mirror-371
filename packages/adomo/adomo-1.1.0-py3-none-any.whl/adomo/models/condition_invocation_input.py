# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from adomo.models.timeout import Timeout
from typing import Optional, Set
from typing_extensions import Self


class ConditionInvocationInput(BaseModel):
    """
    ConditionInvocationInput
    """  # noqa: E501

    id: Optional[UUID] = None
    fn: StrictStr
    timeout: Optional[Timeout] = None
    timeout_summary: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "fn", "timeout", "timeout_summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConditionInvocationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timeout
        if self.timeout:
            _dict["timeout"] = self.timeout.to_dict()
        # set to None if timeout (nullable) is None
        # and model_fields_set contains the field
        if self.timeout is None and "timeout" in self.model_fields_set:
            _dict["timeout"] = None

        # set to None if timeout_summary (nullable) is None
        # and model_fields_set contains the field
        if self.timeout_summary is None and "timeout_summary" in self.model_fields_set:
            _dict["timeout_summary"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConditionInvocationInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "fn": obj.get("fn"),
                "timeout": (
                    Timeout.from_dict(obj["timeout"])
                    if obj.get("timeout") is not None
                    else None
                ),
                "timeout_summary": obj.get("timeout_summary"),
            }
        )
        return _obj
