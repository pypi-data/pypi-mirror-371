# coding: utf-8

"""
CxO Bot Automation API

 CxO Bot Automation API manages the CxO automation platform.  ## Workflows  A CxO Workflow defines the overall flow of AI automated tasks.  Conceptually, a Workflow is a sequence of steps. Those steps are defined by advanced AI units, known as Agents, and are carried out by performing detailed actions, resulting in a execution run.  ## Schedules  CxO Schedules are features allowing you to execute specific CxO Workflows at specified times or intervals.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from adomo.models.command import Command
from adomo.models.cwd import Cwd
from adomo.models.secrets_value import SecretsValue
from typing import Optional, Set
from typing_extensions import Self


class McpImageConfig(BaseModel):
    """
    Dispatcher class that automatically selects Docker or Kubernetes execution based on the MCP_EXECUTION_MODE environment variable.
    """  # noqa: E501

    image: StrictStr
    image_pull_policy: Optional[StrictStr] = "IfNotPresent"
    entrypoint: Optional[StrictStr] = None
    command: Optional[Command] = None
    args: Optional[List[StrictStr]] = None
    env: Optional[Dict[str, StrictStr]] = None
    cwd: Optional[Cwd] = None
    user: Optional[StrictStr] = None
    secrets: Optional[Dict[str, SecretsValue]] = None
    volumes: Optional[List[StrictStr]] = None
    namespace: Optional[StrictStr] = None
    service_account_name: Optional[StrictStr] = None
    resources: Optional[Dict[str, Dict[str, StrictStr]]] = None
    __properties: ClassVar[List[str]] = [
        "image",
        "image_pull_policy",
        "entrypoint",
        "command",
        "args",
        "env",
        "cwd",
        "user",
        "secrets",
        "volumes",
        "namespace",
        "service_account_name",
        "resources",
    ]

    @field_validator("image_pull_policy")
    def image_pull_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["IfNotPresent", "Always", "Never"]):
            raise ValueError(
                "must be one of enum values ('IfNotPresent', 'Always', 'Never')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McpImageConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of command
        if self.command:
            _dict["command"] = self.command.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cwd
        if self.cwd:
            _dict["cwd"] = self.cwd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in secrets (dict)
        _field_dict = {}
        if self.secrets:
            for _key_secrets in self.secrets:
                if self.secrets[_key_secrets]:
                    _field_dict[_key_secrets] = self.secrets[_key_secrets].to_dict()
            _dict["secrets"] = _field_dict
        # set to None if entrypoint (nullable) is None
        # and model_fields_set contains the field
        if self.entrypoint is None and "entrypoint" in self.model_fields_set:
            _dict["entrypoint"] = None

        # set to None if command (nullable) is None
        # and model_fields_set contains the field
        if self.command is None and "command" in self.model_fields_set:
            _dict["command"] = None

        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict["env"] = None

        # set to None if cwd (nullable) is None
        # and model_fields_set contains the field
        if self.cwd is None and "cwd" in self.model_fields_set:
            _dict["cwd"] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict["user"] = None

        # set to None if volumes (nullable) is None
        # and model_fields_set contains the field
        if self.volumes is None and "volumes" in self.model_fields_set:
            _dict["volumes"] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict["namespace"] = None

        # set to None if service_account_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.service_account_name is None
            and "service_account_name" in self.model_fields_set
        ):
            _dict["service_account_name"] = None

        # set to None if resources (nullable) is None
        # and model_fields_set contains the field
        if self.resources is None and "resources" in self.model_fields_set:
            _dict["resources"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McpImageConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "image": obj.get("image"),
                "image_pull_policy": (
                    obj.get("image_pull_policy")
                    if obj.get("image_pull_policy") is not None
                    else "IfNotPresent"
                ),
                "entrypoint": obj.get("entrypoint"),
                "command": (
                    Command.from_dict(obj["command"])
                    if obj.get("command") is not None
                    else None
                ),
                "args": obj.get("args"),
                "env": obj.get("env"),
                "cwd": (
                    Cwd.from_dict(obj["cwd"]) if obj.get("cwd") is not None else None
                ),
                "user": obj.get("user"),
                "secrets": (
                    dict(
                        (_k, SecretsValue.from_dict(_v))
                        for _k, _v in obj["secrets"].items()
                    )
                    if obj.get("secrets") is not None
                    else None
                ),
                "volumes": obj.get("volumes"),
                "namespace": obj.get("namespace"),
                "service_account_name": obj.get("service_account_name"),
                "resources": obj.get("resources"),
            }
        )
        return _obj
