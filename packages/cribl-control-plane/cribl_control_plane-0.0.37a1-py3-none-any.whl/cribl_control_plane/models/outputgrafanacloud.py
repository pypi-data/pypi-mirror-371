"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputGrafanaCloudType(str, Enum):
    GRAFANA_CLOUD = "grafana_cloud"


class OutputGrafanaCloudMessageFormat(str, Enum):
    r"""Format to use when sending logs to Loki (Protobuf or JSON)"""

    PROTOBUF = "protobuf"
    JSON = "json"


class OutputGrafanaCloudLabelTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputGrafanaCloudLabel(BaseModel):
    value: str

    name: Optional[str] = ""


class OutputGrafanaCloudPrometheusAuthAuthenticationType(str, Enum):
    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloudPrometheusAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloudPrometheusAuthAuthenticationType]
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudPrometheusAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloudPrometheusAuthAuthenticationType],
        pydantic.Field(alias="authType"),
    ] = OutputGrafanaCloudPrometheusAuthAuthenticationType.BASIC

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudLokiAuthAuthenticationType(str, Enum):
    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloudLokiAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloudLokiAuthAuthenticationType]
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudLokiAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloudLokiAuthAuthenticationType],
        pydantic.Field(alias="authType"),
    ] = OutputGrafanaCloudLokiAuthAuthenticationType.BASIC

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudExtraHTTPHeaderTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputGrafanaCloudExtraHTTPHeader(BaseModel):
    value: str

    name: Optional[str] = None


class OutputGrafanaCloudFailedRequestLoggingMode(str, Enum):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputGrafanaCloudResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudBackpressureBehavior(str, Enum):
    r"""How to handle events when all receivers are exerting backpressure"""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputGrafanaCloudCompression(str, Enum):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class OutputGrafanaCloudQueueFullBehavior(str, Enum):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputGrafanaCloudMode(str, Enum):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputGrafanaCloudPqControlsTypedDict(TypedDict):
    pass


class OutputGrafanaCloudPqControls(BaseModel):
    pass


class OutputGrafanaCloudTypedDict(TypedDict):
    type: OutputGrafanaCloudType
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    loki_url: NotRequired[str]
    r"""The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net"""
    prometheus_url: NotRequired[str]
    r"""The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""
    message: NotRequired[str]
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""
    message_format: NotRequired[OutputGrafanaCloudMessageFormat]
    r"""Format to use when sending logs to Loki (Protobuf or JSON)"""
    labels: NotRequired[List[OutputGrafanaCloudLabelTypedDict]]
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: \"cribl.io\", level: \"error\"}'"""
    metric_rename_expr: NotRequired[str]
    r"""JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>."""
    prometheus_auth: NotRequired[OutputGrafanaCloudPrometheusAuthTypedDict]
    loki_auth: NotRequired[OutputGrafanaCloudLokiAuthTypedDict]
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    extra_http_headers: NotRequired[List[OutputGrafanaCloudExtraHTTPHeaderTypedDict]]
    r"""Headers to add to all events"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    failed_request_logging_mode: NotRequired[OutputGrafanaCloudFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    send_structured_metadata: NotRequired[bool]
    r"""Add structured metadata fields from __structuredMetadata to each log. Key-value pairs must be strings."""
    response_retry_settings: NotRequired[
        List[OutputGrafanaCloudResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[OutputGrafanaCloudTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    on_backpressure: NotRequired[OutputGrafanaCloudBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    description: NotRequired[str]
    compress: NotRequired[bool]
    r"""Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputGrafanaCloudCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputGrafanaCloudQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputGrafanaCloudMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputGrafanaCloudPqControlsTypedDict]


class OutputGrafanaCloud(BaseModel):
    type: OutputGrafanaCloudType

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    loki_url: Annotated[Optional[str], pydantic.Field(alias="lokiUrl")] = None
    r"""The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net"""

    prometheus_url: Annotated[Optional[str], pydantic.Field(alias="prometheusUrl")] = (
        None
    )
    r"""The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""

    message: Optional[str] = None
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""

    message_format: Annotated[
        Optional[OutputGrafanaCloudMessageFormat], pydantic.Field(alias="messageFormat")
    ] = OutputGrafanaCloudMessageFormat.PROTOBUF
    r"""Format to use when sending logs to Loki (Protobuf or JSON)"""

    labels: Optional[List[OutputGrafanaCloudLabel]] = None
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: \"cribl.io\", level: \"error\"}'"""

    metric_rename_expr: Annotated[
        Optional[str], pydantic.Field(alias="metricRenameExpr")
    ] = "name.replace(/[^a-zA-Z0-9_]/g, '_')"
    r"""JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>."""

    prometheus_auth: Annotated[
        Optional[OutputGrafanaCloudPrometheusAuth],
        pydantic.Field(alias="prometheusAuth"),
    ] = None

    loki_auth: Annotated[
        Optional[OutputGrafanaCloudLokiAuth], pydantic.Field(alias="lokiAuth")
    ] = None

    concurrency: Optional[float] = 1
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 15
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    extra_http_headers: Annotated[
        Optional[List[OutputGrafanaCloudExtraHTTPHeader]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    failed_request_logging_mode: Annotated[
        Optional[OutputGrafanaCloudFailedRequestLoggingMode],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputGrafanaCloudFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    send_structured_metadata: Annotated[
        Optional[bool], pydantic.Field(alias="sendStructuredMetadata")
    ] = False
    r"""Add structured metadata fields from __structuredMetadata to each log. Key-value pairs must be strings."""

    response_retry_settings: Annotated[
        Optional[List[OutputGrafanaCloudResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputGrafanaCloudTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    on_backpressure: Annotated[
        Optional[OutputGrafanaCloudBackpressureBehavior],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputGrafanaCloudBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    description: Optional[str] = None

    compress: Optional[bool] = True
    r"""Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Optional[OutputGrafanaCloudCompression], pydantic.Field(alias="pqCompress")
    ] = OutputGrafanaCloudCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Optional[OutputGrafanaCloudQueueFullBehavior],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputGrafanaCloudQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Optional[OutputGrafanaCloudMode], pydantic.Field(alias="pqMode")
    ] = OutputGrafanaCloudMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputGrafanaCloudPqControls], pydantic.Field(alias="pqControls")
    ] = None
