"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from cribl_control_plane import errors, models, utils
from cribl_control_plane._hooks import HookContext
from cribl_control_plane.types import OptionalNullable, UNSET
from cribl_control_plane.utils import get_security_from_env
from cribl_control_plane.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union


class Cribl(BaseSDK):
    def list(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetSystemSettingsConfResponse:
        r"""Get Cribl system settings

        Get Cribl system settings

        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request(
            method="GET",
            path="/system/settings/conf",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSystemSettingsConf",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.GetSystemSettingsConfResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetSystemSettingsConfResponse:
        r"""Get Cribl system settings

        Get Cribl system settings

        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request_async(
            method="GET",
            path="/system/settings/conf",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSystemSettingsConf",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.GetSystemSettingsConfResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    def update(
        self,
        *,
        api: Union[models.SystemSettingsConfAPI, models.SystemSettingsConfAPITypedDict],
        backups: Union[
            models.SystemSettingsConfBackups, models.SystemSettingsConfBackupsTypedDict
        ],
        custom_logo: Union[
            models.SystemSettingsConfCustomLogo,
            models.SystemSettingsConfCustomLogoTypedDict,
        ],
        pii: Union[models.SystemSettingsConfPii, models.SystemSettingsConfPiiTypedDict],
        proxy: Union[
            models.SystemSettingsConfProxy, models.SystemSettingsConfProxyTypedDict
        ],
        rollback: Union[
            models.SystemSettingsConfRollback,
            models.SystemSettingsConfRollbackTypedDict,
        ],
        shutdown: Union[
            models.SystemSettingsConfShutdown,
            models.SystemSettingsConfShutdownTypedDict,
        ],
        sni: Union[models.SystemSettingsConfSni, models.SystemSettingsConfSniTypedDict],
        system: Union[
            models.SystemSettingsConfSystem, models.SystemSettingsConfSystemTypedDict
        ],
        tls: Union[models.SystemSettingsConfTLS, models.SystemSettingsConfTLSTypedDict],
        upgrade_group_settings: Union[
            models.UpgradeGroupSettings, models.UpgradeGroupSettingsTypedDict
        ],
        upgrade_settings: Union[
            models.UpgradeSettings, models.UpgradeSettingsTypedDict
        ],
        workers: Union[
            models.SystemSettingsConfWorkers, models.SystemSettingsConfWorkersTypedDict
        ],
        sockets: Optional[
            Union[
                models.SystemSettingsConfSockets,
                models.SystemSettingsConfSocketsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateSystemSettingsConfResponse:
        r"""Update Cribl system settings

        Update Cribl system settings

        :param api:
        :param backups:
        :param custom_logo:
        :param pii:
        :param proxy:
        :param rollback:
        :param shutdown:
        :param sni:
        :param system:
        :param tls:
        :param upgrade_group_settings:
        :param upgrade_settings:
        :param workers:
        :param sockets:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SystemSettingsConf(
            api=utils.get_pydantic_model(api, models.SystemSettingsConfAPI),
            backups=utils.get_pydantic_model(backups, models.SystemSettingsConfBackups),
            custom_logo=utils.get_pydantic_model(
                custom_logo, models.SystemSettingsConfCustomLogo
            ),
            pii=utils.get_pydantic_model(pii, models.SystemSettingsConfPii),
            proxy=utils.get_pydantic_model(proxy, models.SystemSettingsConfProxy),
            rollback=utils.get_pydantic_model(
                rollback, models.SystemSettingsConfRollback
            ),
            shutdown=utils.get_pydantic_model(
                shutdown, models.SystemSettingsConfShutdown
            ),
            sni=utils.get_pydantic_model(sni, models.SystemSettingsConfSni),
            sockets=utils.get_pydantic_model(
                sockets, Optional[models.SystemSettingsConfSockets]
            ),
            system=utils.get_pydantic_model(system, models.SystemSettingsConfSystem),
            tls=utils.get_pydantic_model(tls, models.SystemSettingsConfTLS),
            upgrade_group_settings=utils.get_pydantic_model(
                upgrade_group_settings, models.UpgradeGroupSettings
            ),
            upgrade_settings=utils.get_pydantic_model(
                upgrade_settings, models.UpgradeSettings
            ),
            workers=utils.get_pydantic_model(workers, models.SystemSettingsConfWorkers),
        )

        req = self._build_request(
            method="PATCH",
            path="/system/settings/conf",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SystemSettingsConf
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateSystemSettingsConf",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateSystemSettingsConfResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def update_async(
        self,
        *,
        api: Union[models.SystemSettingsConfAPI, models.SystemSettingsConfAPITypedDict],
        backups: Union[
            models.SystemSettingsConfBackups, models.SystemSettingsConfBackupsTypedDict
        ],
        custom_logo: Union[
            models.SystemSettingsConfCustomLogo,
            models.SystemSettingsConfCustomLogoTypedDict,
        ],
        pii: Union[models.SystemSettingsConfPii, models.SystemSettingsConfPiiTypedDict],
        proxy: Union[
            models.SystemSettingsConfProxy, models.SystemSettingsConfProxyTypedDict
        ],
        rollback: Union[
            models.SystemSettingsConfRollback,
            models.SystemSettingsConfRollbackTypedDict,
        ],
        shutdown: Union[
            models.SystemSettingsConfShutdown,
            models.SystemSettingsConfShutdownTypedDict,
        ],
        sni: Union[models.SystemSettingsConfSni, models.SystemSettingsConfSniTypedDict],
        system: Union[
            models.SystemSettingsConfSystem, models.SystemSettingsConfSystemTypedDict
        ],
        tls: Union[models.SystemSettingsConfTLS, models.SystemSettingsConfTLSTypedDict],
        upgrade_group_settings: Union[
            models.UpgradeGroupSettings, models.UpgradeGroupSettingsTypedDict
        ],
        upgrade_settings: Union[
            models.UpgradeSettings, models.UpgradeSettingsTypedDict
        ],
        workers: Union[
            models.SystemSettingsConfWorkers, models.SystemSettingsConfWorkersTypedDict
        ],
        sockets: Optional[
            Union[
                models.SystemSettingsConfSockets,
                models.SystemSettingsConfSocketsTypedDict,
            ]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.UpdateSystemSettingsConfResponse:
        r"""Update Cribl system settings

        Update Cribl system settings

        :param api:
        :param backups:
        :param custom_logo:
        :param pii:
        :param proxy:
        :param rollback:
        :param shutdown:
        :param sni:
        :param system:
        :param tls:
        :param upgrade_group_settings:
        :param upgrade_settings:
        :param workers:
        :param sockets:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SystemSettingsConf(
            api=utils.get_pydantic_model(api, models.SystemSettingsConfAPI),
            backups=utils.get_pydantic_model(backups, models.SystemSettingsConfBackups),
            custom_logo=utils.get_pydantic_model(
                custom_logo, models.SystemSettingsConfCustomLogo
            ),
            pii=utils.get_pydantic_model(pii, models.SystemSettingsConfPii),
            proxy=utils.get_pydantic_model(proxy, models.SystemSettingsConfProxy),
            rollback=utils.get_pydantic_model(
                rollback, models.SystemSettingsConfRollback
            ),
            shutdown=utils.get_pydantic_model(
                shutdown, models.SystemSettingsConfShutdown
            ),
            sni=utils.get_pydantic_model(sni, models.SystemSettingsConfSni),
            sockets=utils.get_pydantic_model(
                sockets, Optional[models.SystemSettingsConfSockets]
            ),
            system=utils.get_pydantic_model(system, models.SystemSettingsConfSystem),
            tls=utils.get_pydantic_model(tls, models.SystemSettingsConfTLS),
            upgrade_group_settings=utils.get_pydantic_model(
                upgrade_group_settings, models.UpgradeGroupSettings
            ),
            upgrade_settings=utils.get_pydantic_model(
                upgrade_settings, models.UpgradeSettings
            ),
            workers=utils.get_pydantic_model(workers, models.SystemSettingsConfWorkers),
        )

        req = self._build_request_async(
            method="PATCH",
            path="/system/settings/conf",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.SystemSettingsConf
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updateSystemSettingsConf",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                models.UpdateSystemSettingsConfResponse, http_res
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(errors.ErrorData, http_res)
            raise errors.Error(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
