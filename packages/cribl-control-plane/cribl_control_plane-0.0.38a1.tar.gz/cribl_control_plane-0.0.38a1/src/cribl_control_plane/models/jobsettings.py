"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class JobSettingsTypedDict(TypedDict):
    concurrent_job_limit: float
    concurrent_scheduled_job_limit: float
    concurrent_system_job_limit: float
    concurrent_system_task_limit: float
    concurrent_task_limit: float
    finished_job_artifacts_limit: float
    finished_task_artifacts_limit: float
    job_artifacts_reaper_period: str
    job_timeout: str
    max_task_perc: float
    scheduling_policy: str
    task_heartbeat_period: float
    task_manifest_flush_period_ms: float
    task_manifest_max_buffer_size: float
    task_manifest_read_buffer_size: str
    task_poll_timeout_ms: float
    disable_tasks: NotRequired[bool]


class JobSettings(BaseModel):
    concurrent_job_limit: Annotated[float, pydantic.Field(alias="concurrentJobLimit")]

    concurrent_scheduled_job_limit: Annotated[
        float, pydantic.Field(alias="concurrentScheduledJobLimit")
    ]

    concurrent_system_job_limit: Annotated[
        float, pydantic.Field(alias="concurrentSystemJobLimit")
    ]

    concurrent_system_task_limit: Annotated[
        float, pydantic.Field(alias="concurrentSystemTaskLimit")
    ]

    concurrent_task_limit: Annotated[float, pydantic.Field(alias="concurrentTaskLimit")]

    finished_job_artifacts_limit: Annotated[
        float, pydantic.Field(alias="finishedJobArtifactsLimit")
    ]

    finished_task_artifacts_limit: Annotated[
        float, pydantic.Field(alias="finishedTaskArtifactsLimit")
    ]

    job_artifacts_reaper_period: Annotated[
        str, pydantic.Field(alias="jobArtifactsReaperPeriod")
    ]

    job_timeout: Annotated[str, pydantic.Field(alias="jobTimeout")]

    max_task_perc: Annotated[float, pydantic.Field(alias="maxTaskPerc")]

    scheduling_policy: Annotated[str, pydantic.Field(alias="schedulingPolicy")]

    task_heartbeat_period: Annotated[float, pydantic.Field(alias="taskHeartbeatPeriod")]

    task_manifest_flush_period_ms: Annotated[
        float, pydantic.Field(alias="taskManifestFlushPeriodMs")
    ]

    task_manifest_max_buffer_size: Annotated[
        float, pydantic.Field(alias="taskManifestMaxBufferSize")
    ]

    task_manifest_read_buffer_size: Annotated[
        str, pydantic.Field(alias="taskManifestReadBufferSize")
    ]

    task_poll_timeout_ms: Annotated[float, pydantic.Field(alias="taskPollTimeoutMs")]

    disable_tasks: Annotated[Optional[bool], pydantic.Field(alias="disableTasks")] = (
        None
    )
