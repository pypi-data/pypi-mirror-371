"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane.types import BaseModel
from enum import Enum
import pydantic
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class WarmPoolSizeEnum(str, Enum):
    AUTO = "auto"


WarmPoolSizeTypedDict = TypeAliasType(
    "WarmPoolSizeTypedDict", Union[float, WarmPoolSizeEnum]
)


WarmPoolSize = TypeAliasType("WarmPoolSize", Union[float, WarmPoolSizeEnum])


class SearchSettingsTypedDict(TypedDict):
    compress_object_cache_artifacts: bool
    field_summary_max_fields: float
    field_summary_max_nested_depth: float
    max_concurrent_searches: float
    max_executors_per_search: float
    max_results_per_search: float
    search_history_max_jobs: float
    search_queue_length: float
    warm_pool_size: WarmPoolSizeTypedDict
    write_only_provider_secrets: bool


class SearchSettings(BaseModel):
    compress_object_cache_artifacts: Annotated[
        bool, pydantic.Field(alias="compressObjectCacheArtifacts")
    ]

    field_summary_max_fields: Annotated[
        float, pydantic.Field(alias="fieldSummaryMaxFields")
    ]

    field_summary_max_nested_depth: Annotated[
        float, pydantic.Field(alias="fieldSummaryMaxNestedDepth")
    ]

    max_concurrent_searches: Annotated[
        float, pydantic.Field(alias="maxConcurrentSearches")
    ]

    max_executors_per_search: Annotated[
        float, pydantic.Field(alias="maxExecutorsPerSearch")
    ]

    max_results_per_search: Annotated[
        float, pydantic.Field(alias="maxResultsPerSearch")
    ]

    search_history_max_jobs: Annotated[
        float, pydantic.Field(alias="searchHistoryMaxJobs")
    ]

    search_queue_length: Annotated[float, pydantic.Field(alias="searchQueueLength")]

    warm_pool_size: Annotated[WarmPoolSize, pydantic.Field(alias="warmPoolSize")]

    write_only_provider_secrets: Annotated[
        bool, pydantic.Field(alias="writeOnlyProviderSecrets")
    ]
