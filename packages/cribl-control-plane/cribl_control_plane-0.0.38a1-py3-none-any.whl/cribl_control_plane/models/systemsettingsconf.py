"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .upgradegroupsettings import UpgradeGroupSettings, UpgradeGroupSettingsTypedDict
from .upgradesettings import UpgradeSettings, UpgradeSettingsTypedDict
from cribl_control_plane.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SystemSettingsConfHeadersTypedDict(TypedDict):
    pass


class SystemSettingsConfHeaders(BaseModel):
    pass


class SystemSettingsConfSslTypedDict(TypedDict):
    cert_path: str
    disabled: bool
    passphrase: str
    priv_key_path: str
    ca_path: NotRequired[str]


class SystemSettingsConfSsl(BaseModel):
    cert_path: Annotated[str, pydantic.Field(alias="certPath")]

    disabled: bool

    passphrase: str

    priv_key_path: Annotated[str, pydantic.Field(alias="privKeyPath")]

    ca_path: Annotated[Optional[str], pydantic.Field(alias="caPath")] = None


class SystemSettingsConfAPITypedDict(TypedDict):
    disabled: bool
    host: str
    port: float
    protocol: str
    ssl: SystemSettingsConfSslTypedDict
    worker_remote_access: bool
    base_url: NotRequired[str]
    disable_api_cache: NotRequired[bool]
    headers: NotRequired[SystemSettingsConfHeadersTypedDict]
    idle_session_ttl: NotRequired[float]
    listen_on_port: NotRequired[bool]
    login_rate_limit: NotRequired[str]
    scripts: NotRequired[bool]
    sensitive_fields: NotRequired[List[str]]
    sso_rate_limit: NotRequired[str]


class SystemSettingsConfAPI(BaseModel):
    disabled: bool

    host: str

    port: float

    protocol: str

    ssl: SystemSettingsConfSsl

    worker_remote_access: Annotated[bool, pydantic.Field(alias="workerRemoteAccess")]

    base_url: Annotated[Optional[str], pydantic.Field(alias="baseUrl")] = None

    disable_api_cache: Annotated[
        Optional[bool], pydantic.Field(alias="disableApiCache")
    ] = None

    headers: Optional[SystemSettingsConfHeaders] = None

    idle_session_ttl: Annotated[
        Optional[float], pydantic.Field(alias="idleSessionTTL")
    ] = None

    listen_on_port: Annotated[Optional[bool], pydantic.Field(alias="listenOnPort")] = (
        None
    )

    login_rate_limit: Annotated[
        Optional[str], pydantic.Field(alias="loginRateLimit")
    ] = None

    scripts: Optional[bool] = None

    sensitive_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="sensitiveFields")
    ] = None

    sso_rate_limit: Annotated[Optional[str], pydantic.Field(alias="ssoRateLimit")] = (
        None
    )


class SystemSettingsConfBackupsTypedDict(TypedDict):
    backup_persistence: str
    backups_directory: str


class SystemSettingsConfBackups(BaseModel):
    backup_persistence: Annotated[str, pydantic.Field(alias="backupPersistence")]

    backups_directory: Annotated[str, pydantic.Field(alias="backupsDirectory")]


class SystemSettingsConfCustomLogoTypedDict(TypedDict):
    enabled: bool
    logo_description: str
    logo_image: str


class SystemSettingsConfCustomLogo(BaseModel):
    enabled: bool

    logo_description: Annotated[str, pydantic.Field(alias="logoDescription")]

    logo_image: Annotated[str, pydantic.Field(alias="logoImage")]


class SystemSettingsConfPiiTypedDict(TypedDict):
    enable_pii_detection: bool


class SystemSettingsConfPii(BaseModel):
    enable_pii_detection: Annotated[bool, pydantic.Field(alias="enablePiiDetection")]


class SystemSettingsConfProxyTypedDict(TypedDict):
    use_env_vars: bool


class SystemSettingsConfProxy(BaseModel):
    use_env_vars: Annotated[bool, pydantic.Field(alias="useEnvVars")]


class SystemSettingsConfRollbackTypedDict(TypedDict):
    rollback_enabled: bool
    rollback_retries: NotRequired[float]
    rollback_timeout: NotRequired[float]


class SystemSettingsConfRollback(BaseModel):
    rollback_enabled: Annotated[bool, pydantic.Field(alias="rollbackEnabled")]

    rollback_retries: Annotated[
        Optional[float], pydantic.Field(alias="rollbackRetries")
    ] = None

    rollback_timeout: Annotated[
        Optional[float], pydantic.Field(alias="rollbackTimeout")
    ] = None


class SystemSettingsConfShutdownTypedDict(TypedDict):
    drain_timeout: float


class SystemSettingsConfShutdown(BaseModel):
    drain_timeout: Annotated[float, pydantic.Field(alias="drainTimeout")]


class SystemSettingsConfSniTypedDict(TypedDict):
    disable_sni_routing: bool


class SystemSettingsConfSni(BaseModel):
    disable_sni_routing: Annotated[bool, pydantic.Field(alias="disableSNIRouting")]


class SystemSettingsConfSocketsTypedDict(TypedDict):
    directory: NotRequired[str]


class SystemSettingsConfSockets(BaseModel):
    directory: Optional[str] = None


class SystemSettingsConfUpgrade(str, Enum):
    FALSE = "false"
    API = "api"


class SystemSettingsConfSystemTypedDict(TypedDict):
    intercom: bool
    upgrade: SystemSettingsConfUpgrade


class SystemSettingsConfSystem(BaseModel):
    intercom: bool

    upgrade: SystemSettingsConfUpgrade


class SystemSettingsConfTLSTypedDict(TypedDict):
    default_cipher_list: str
    default_ecdh_curve: str
    max_version: str
    min_version: str
    reject_unauthorized: bool


class SystemSettingsConfTLS(BaseModel):
    default_cipher_list: Annotated[str, pydantic.Field(alias="defaultCipherList")]

    default_ecdh_curve: Annotated[str, pydantic.Field(alias="defaultEcdhCurve")]

    max_version: Annotated[str, pydantic.Field(alias="maxVersion")]

    min_version: Annotated[str, pydantic.Field(alias="minVersion")]

    reject_unauthorized: Annotated[bool, pydantic.Field(alias="rejectUnauthorized")]


class SystemSettingsConfWorkersTypedDict(TypedDict):
    count: float
    memory: float
    minimum: float
    enable_heap_snapshots: NotRequired[bool]
    load_throttle_perc: NotRequired[float]
    startup_max_conns: NotRequired[float]
    startup_throttle_timeout: NotRequired[float]
    v8_single_thread: NotRequired[bool]


class SystemSettingsConfWorkers(BaseModel):
    count: float

    memory: float

    minimum: float

    enable_heap_snapshots: Annotated[
        Optional[bool], pydantic.Field(alias="enableHeapSnapshots")
    ] = None

    load_throttle_perc: Annotated[
        Optional[float], pydantic.Field(alias="loadThrottlePerc")
    ] = None

    startup_max_conns: Annotated[
        Optional[float], pydantic.Field(alias="startupMaxConns")
    ] = None

    startup_throttle_timeout: Annotated[
        Optional[float], pydantic.Field(alias="startupThrottleTimeout")
    ] = None

    v8_single_thread: Annotated[
        Optional[bool], pydantic.Field(alias="v8SingleThread")
    ] = None


class SystemSettingsConfTypedDict(TypedDict):
    api: SystemSettingsConfAPITypedDict
    backups: SystemSettingsConfBackupsTypedDict
    custom_logo: SystemSettingsConfCustomLogoTypedDict
    pii: SystemSettingsConfPiiTypedDict
    proxy: SystemSettingsConfProxyTypedDict
    rollback: SystemSettingsConfRollbackTypedDict
    shutdown: SystemSettingsConfShutdownTypedDict
    sni: SystemSettingsConfSniTypedDict
    system: SystemSettingsConfSystemTypedDict
    tls: SystemSettingsConfTLSTypedDict
    upgrade_group_settings: UpgradeGroupSettingsTypedDict
    upgrade_settings: UpgradeSettingsTypedDict
    workers: SystemSettingsConfWorkersTypedDict
    sockets: NotRequired[SystemSettingsConfSocketsTypedDict]


class SystemSettingsConf(BaseModel):
    api: SystemSettingsConfAPI

    backups: SystemSettingsConfBackups

    custom_logo: Annotated[
        SystemSettingsConfCustomLogo, pydantic.Field(alias="customLogo")
    ]

    pii: SystemSettingsConfPii

    proxy: SystemSettingsConfProxy

    rollback: SystemSettingsConfRollback

    shutdown: SystemSettingsConfShutdown

    sni: SystemSettingsConfSni

    system: SystemSettingsConfSystem

    tls: SystemSettingsConfTLS

    upgrade_group_settings: Annotated[
        UpgradeGroupSettings, pydantic.Field(alias="upgradeGroupSettings")
    ]

    upgrade_settings: Annotated[
        UpgradeSettings, pydantic.Field(alias="upgradeSettings")
    ]

    workers: SystemSettingsConfWorkers

    sockets: Optional[SystemSettingsConfSockets] = None
