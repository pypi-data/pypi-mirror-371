"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appmode import AppMode
from .authconfig import AuthConfig, AuthConfigTypedDict
from .gitsettings import GitSettings, GitSettingsTypedDict
from .jobsettings import JobSettings, JobSettingsTypedDict
from .limits import Limits, LimitsTypedDict
from .rediscachelimits import RedisCacheLimits, RedisCacheLimitsTypedDict
from .redislimits import RedisLimits, RedisLimitsTypedDict
from .searchsettings import SearchSettings, SearchSettingsTypedDict
from .serviceslimits import ServicesLimits, ServicesLimitsTypedDict
from .upgradegroupsettings import UpgradeGroupSettings, UpgradeGroupSettingsTypedDict
from .upgradesettings import UpgradeSettings, UpgradeSettingsTypedDict
from cribl_control_plane.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SystemSettingsHeadersTypedDict(TypedDict):
    pass


class SystemSettingsHeaders(BaseModel):
    pass


class SystemSettingsSslTypedDict(TypedDict):
    cert_path: str
    disabled: bool
    passphrase: str
    priv_key_path: str
    ca_path: NotRequired[str]


class SystemSettingsSsl(BaseModel):
    cert_path: Annotated[str, pydantic.Field(alias="certPath")]

    disabled: bool

    passphrase: str

    priv_key_path: Annotated[str, pydantic.Field(alias="privKeyPath")]

    ca_path: Annotated[Optional[str], pydantic.Field(alias="caPath")] = None


class SystemSettingsAPITypedDict(TypedDict):
    disabled: bool
    host: str
    port: float
    protocol: str
    ssl: SystemSettingsSslTypedDict
    worker_remote_access: bool
    base_url: NotRequired[str]
    disable_api_cache: NotRequired[bool]
    headers: NotRequired[SystemSettingsHeadersTypedDict]
    idle_session_ttl: NotRequired[float]
    listen_on_port: NotRequired[bool]
    login_rate_limit: NotRequired[str]
    scripts: NotRequired[bool]
    sensitive_fields: NotRequired[List[str]]
    sso_rate_limit: NotRequired[str]


class SystemSettingsAPI(BaseModel):
    disabled: bool

    host: str

    port: float

    protocol: str

    ssl: SystemSettingsSsl

    worker_remote_access: Annotated[bool, pydantic.Field(alias="workerRemoteAccess")]

    base_url: Annotated[Optional[str], pydantic.Field(alias="baseUrl")] = None

    disable_api_cache: Annotated[
        Optional[bool], pydantic.Field(alias="disableApiCache")
    ] = None

    headers: Optional[SystemSettingsHeaders] = None

    idle_session_ttl: Annotated[
        Optional[float], pydantic.Field(alias="idleSessionTTL")
    ] = None

    listen_on_port: Annotated[Optional[bool], pydantic.Field(alias="listenOnPort")] = (
        None
    )

    login_rate_limit: Annotated[
        Optional[str], pydantic.Field(alias="loginRateLimit")
    ] = None

    scripts: Optional[bool] = None

    sensitive_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="sensitiveFields")
    ] = None

    sso_rate_limit: Annotated[Optional[str], pydantic.Field(alias="ssoRateLimit")] = (
        None
    )


class SystemSettingsBackupsTypedDict(TypedDict):
    backup_persistence: str
    backups_directory: str


class SystemSettingsBackups(BaseModel):
    backup_persistence: Annotated[str, pydantic.Field(alias="backupPersistence")]

    backups_directory: Annotated[str, pydantic.Field(alias="backupsDirectory")]


class SystemSettingsCustomLogoTypedDict(TypedDict):
    enabled: bool
    logo_description: str
    logo_image: str


class SystemSettingsCustomLogo(BaseModel):
    enabled: bool

    logo_description: Annotated[str, pydantic.Field(alias="logoDescription")]

    logo_image: Annotated[str, pydantic.Field(alias="logoImage")]


class DistributedTypedDict(TypedDict):
    mode: AppMode


class Distributed(BaseModel):
    mode: AppMode


class SystemSettingsPiiTypedDict(TypedDict):
    enable_pii_detection: bool


class SystemSettingsPii(BaseModel):
    enable_pii_detection: Annotated[bool, pydantic.Field(alias="enablePiiDetection")]


class SystemSettingsProxyTypedDict(TypedDict):
    use_env_vars: bool


class SystemSettingsProxy(BaseModel):
    use_env_vars: Annotated[bool, pydantic.Field(alias="useEnvVars")]


class SystemSettingsRollbackTypedDict(TypedDict):
    rollback_enabled: bool
    rollback_retries: NotRequired[float]
    rollback_timeout: NotRequired[float]


class SystemSettingsRollback(BaseModel):
    rollback_enabled: Annotated[bool, pydantic.Field(alias="rollbackEnabled")]

    rollback_retries: Annotated[
        Optional[float], pydantic.Field(alias="rollbackRetries")
    ] = None

    rollback_timeout: Annotated[
        Optional[float], pydantic.Field(alias="rollbackTimeout")
    ] = None


class SystemSettingsShutdownTypedDict(TypedDict):
    drain_timeout: float


class SystemSettingsShutdown(BaseModel):
    drain_timeout: Annotated[float, pydantic.Field(alias="drainTimeout")]


class SystemSettingsSniTypedDict(TypedDict):
    disable_sni_routing: bool


class SystemSettingsSni(BaseModel):
    disable_sni_routing: Annotated[bool, pydantic.Field(alias="disableSNIRouting")]


class SystemSettingsSocketsTypedDict(TypedDict):
    directory: NotRequired[str]


class SystemSettingsSockets(BaseModel):
    directory: Optional[str] = None


class SystemSettingsUpgrade(str, Enum):
    FALSE = "false"
    API = "api"


class SystemSettingsSystemTypedDict(TypedDict):
    intercom: bool
    upgrade: SystemSettingsUpgrade


class SystemSettingsSystem(BaseModel):
    intercom: bool

    upgrade: SystemSettingsUpgrade


class SystemSettingsTLSTypedDict(TypedDict):
    default_cipher_list: str
    default_ecdh_curve: str
    max_version: str
    min_version: str
    reject_unauthorized: bool


class SystemSettingsTLS(BaseModel):
    default_cipher_list: Annotated[str, pydantic.Field(alias="defaultCipherList")]

    default_ecdh_curve: Annotated[str, pydantic.Field(alias="defaultEcdhCurve")]

    max_version: Annotated[str, pydantic.Field(alias="maxVersion")]

    min_version: Annotated[str, pydantic.Field(alias="minVersion")]

    reject_unauthorized: Annotated[bool, pydantic.Field(alias="rejectUnauthorized")]


class SystemSettingsWorkersTypedDict(TypedDict):
    count: float
    memory: float
    minimum: float
    enable_heap_snapshots: NotRequired[bool]
    load_throttle_perc: NotRequired[float]
    startup_max_conns: NotRequired[float]
    startup_throttle_timeout: NotRequired[float]
    v8_single_thread: NotRequired[bool]


class SystemSettingsWorkers(BaseModel):
    count: float

    memory: float

    minimum: float

    enable_heap_snapshots: Annotated[
        Optional[bool], pydantic.Field(alias="enableHeapSnapshots")
    ] = None

    load_throttle_perc: Annotated[
        Optional[float], pydantic.Field(alias="loadThrottlePerc")
    ] = None

    startup_max_conns: Annotated[
        Optional[float], pydantic.Field(alias="startupMaxConns")
    ] = None

    startup_throttle_timeout: Annotated[
        Optional[float], pydantic.Field(alias="startupThrottleTimeout")
    ] = None

    v8_single_thread: Annotated[
        Optional[bool], pydantic.Field(alias="v8SingleThread")
    ] = None


class SystemSettingsTypedDict(TypedDict):
    api: SystemSettingsAPITypedDict
    auth: AuthConfigTypedDict
    backups: SystemSettingsBackupsTypedDict
    custom_logo: SystemSettingsCustomLogoTypedDict
    distributed: DistributedTypedDict
    fips: bool
    git: GitSettingsTypedDict
    job_limits: JobSettingsTypedDict
    limits: LimitsTypedDict
    pii: SystemSettingsPiiTypedDict
    proxy: SystemSettingsProxyTypedDict
    redis_cache_limits: RedisCacheLimitsTypedDict
    redis_limits: RedisLimitsTypedDict
    rollback: SystemSettingsRollbackTypedDict
    search_limits: SearchSettingsTypedDict
    services_limits: ServicesLimitsTypedDict
    shutdown: SystemSettingsShutdownTypedDict
    sni: SystemSettingsSniTypedDict
    system: SystemSettingsSystemTypedDict
    tls: SystemSettingsTLSTypedDict
    upgrade_group_settings: UpgradeGroupSettingsTypedDict
    upgrade_settings: UpgradeSettingsTypedDict
    workers: SystemSettingsWorkersTypedDict
    sockets: NotRequired[SystemSettingsSocketsTypedDict]


class SystemSettings(BaseModel):
    api: SystemSettingsAPI

    auth: AuthConfig

    backups: SystemSettingsBackups

    custom_logo: Annotated[SystemSettingsCustomLogo, pydantic.Field(alias="customLogo")]

    distributed: Distributed

    fips: bool

    git: GitSettings

    job_limits: Annotated[JobSettings, pydantic.Field(alias="jobLimits")]

    limits: Limits

    pii: SystemSettingsPii

    proxy: SystemSettingsProxy

    redis_cache_limits: Annotated[
        RedisCacheLimits, pydantic.Field(alias="redisCacheLimits")
    ]

    redis_limits: Annotated[RedisLimits, pydantic.Field(alias="redisLimits")]

    rollback: SystemSettingsRollback

    search_limits: Annotated[SearchSettings, pydantic.Field(alias="searchLimits")]

    services_limits: Annotated[ServicesLimits, pydantic.Field(alias="servicesLimits")]

    shutdown: SystemSettingsShutdown

    sni: SystemSettingsSni

    system: SystemSettingsSystem

    tls: SystemSettingsTLS

    upgrade_group_settings: Annotated[
        UpgradeGroupSettings, pydantic.Field(alias="upgradeGroupSettings")
    ]

    upgrade_settings: Annotated[
        UpgradeSettings, pydantic.Field(alias="upgradeSettings")
    ]

    workers: SystemSettingsWorkers

    sockets: Optional[SystemSettingsSockets] = None
