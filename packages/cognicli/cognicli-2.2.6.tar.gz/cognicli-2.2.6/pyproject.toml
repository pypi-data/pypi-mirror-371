[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cognicli"
version = "2.2.6"
description = "A premium, full-featured AI command line interface with Transformers and GGUF support"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "SynapseMoN"}
]
maintainers = [
    {name = "SynapseMoN"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
keywords = [
    "ai", "llm", "transformers", "gguf", "huggingface", "cli", "chatbot",
    "language-model", "artificial-intelligence", "machine-learning",
    "natural-language-processing", "text-generation", "chat", "assistant",
    "premium", "robust", "enhanced"
]
requires-python = ">=3.8"
dependencies = [
    "hf_xet",
    "transformers>=4.35.0",
    "huggingface-hub>=0.17.0",
    "rich>=13.0.0",
    "colorama>=0.4.6",
    "requests>=2.31.0",
    "psutil>=5.9.0",
    "pyyaml>=6.0",
    "numpy>=1.24.0",
    "tokenizers>=0.14.0",
    "accelerate>=0.24.0",
    "sentencepiece>=0.1.99",
    "protobuf>=4.24.0",
    "ollama>=0.1.0",
]

[project.optional-dependencies]
# Quantization and optimization
quantization = ["bitsandbytes>=0.41.0"]
gguf = ["llama-cpp-python>=0.2.0"]

# GPU acceleration variants
gpu = [
    "bitsandbytes>=0.41.0",
    "llama-cpp-python[cublas]>=0.2.0",
]
metal = [
    "bitsandbytes>=0.41.0",
    "llama-cpp-python[metal]>=0.2.0",
]

# Full feature set
full = [
    "bitsandbytes>=0.41.0",
    "llama-cpp-python>=0.2.0",
    "datasets>=2.14.0",
    "evaluate>=0.4.0",
    "wandb>=0.15.0",
]

# Development tools
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
cognicli = "cognicli:main"
cog = "cognicli:main"

# Dynamic dependencies removed for PyPI compatibility
# Users will install with: pip install cognicli[gpu], cognicli[metal], etc.

[project.urls]
Homepage = "https://github.com/cognicli/cognicli"
Documentation = "https://cognicli.readthedocs.io"
Repository = "https://github.com/cognicli/cognicli.git"
"Bug Reports" = "https://github.com/cognicli/cognicli/issues"
Changelog = "https://github.com/cognicli/cognicli/blob/main/CHANGELOG.md"

[tool.setuptools]
py-modules = ["cognicli"]

[tool.setuptools.packages.find]
where = ["."]
include = ["cognicli*"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["cognicli"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
