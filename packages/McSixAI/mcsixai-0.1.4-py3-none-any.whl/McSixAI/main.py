import os

from .openrouter import OpenRouterAPI
from .file_manager import FileManager
from .commands import CommandProcessor
from .config import OPENROUTER_API_KEY


def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')


def print_banner():
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë               McSix AI PRO                       ‚ïë
    ‚ïë    developer: McSix                              ‚ïë
    ‚ïë                    Telegram: @McSixRu            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def check_config():
    if not OPENROUTER_API_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: OPENROUTER_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openrouter.ai/")
        return False
    return True


def main():
    clear_screen()
    print_banner()

    if not check_config():
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–º–∞–Ω–¥
    file_manager = FileManager()
    command_processor = CommandProcessor(file_manager)
    api = OpenRouterAPI()

    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CodeAssist AI Pro!")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  /read filename.py    - –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
    print("  /write filename.py   - –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª")
    print("  /create filename.py  - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
    print("  /list               - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
    print("  /structure          - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    print("  /find term          - –ø–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö")
    print("  /quit               - –≤—ã—Ö–æ–¥\n")

    messages = [
        {
            "role": "system",
            "content": """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞, 
            —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º, –ø–æ–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫. –¢—ã –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
            –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö."""
        }
    ]

    def main():
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

        while True:
            try:
                user_input = input("üë§ –í—ã: ")

                if user_input.lower() in ['quit', 'exit', 'q', '/quit']:
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                if not user_input.strip():
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                command_result = command_processor.process_command(user_input)
                if command_result:
                    print(f"ü§ñ –°–∏—Å—Ç–µ–º–∞: {command_result}\n")
                    continue

                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                current_messages = [
                    {
                        "role": "system",
                        "content": """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞, 
                        —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º, –ø–æ–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫. –¢—ã –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
                        –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö."""
                    },
                    {"role": "user", "content": user_input}
                ]

                print("ü§ñ AI: ", end="", flush=True)
                response = api.generate_response(current_messages)
                print(response)  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                print()

            except KeyboardInterrupt:
                print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...\n")

if __name__ == "__main__":
    main()