[project]
name = "matty"
description = "A Terminal UI for Matrix chat - simple and AI-friendly"
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Bas Nijholt", email = "bas@nijho.lt"},
]
keywords = ["matrix", "chat", "cli", "client", "ai-friendly"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
]
dependencies = [
    "aiofiles>=24.1.0",
    "matrix-nio>=0.25.2",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "rich>=13.0.0",
    "typer>=0.16.1",
]

[project.scripts]
matty = "matty:app"

[project.urls]
Homepage = "https://github.com/basnijholt/matty"
Documentation = "https://github.com/basnijholt/matty#readme"
Repository = "https://github.com/basnijholt/matty"
Issues = "https://github.com/basnijholt/matty/issues"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "mypy>=1.13.0",
    "types-aiofiles>=24.1.0",
    "markdown-code-runner>=2.3.0",
    "versioningit>=3.3.0",
    "pytest-sugar>=1.1.1",
]

[build-system]
requires = ["hatchling", "versioningit"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.hatch.build]
only-include = ["matty.py"]

[tool.coverage.run]
branch = true
parallel = true
source = ["matty"]
omit = [
    "tests/*",
    "test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@abstractmethod",
    "@overload",
    "if sys.version_info",
    "if platform.system",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=matty",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=10",  # TODO: Increase to 80% as we add more tests
    "--tb=short",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff]
target-version = "py312"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "SLF",  # flake8-self
    "DTZ",  # flake8-datetimez
    "PIE",  # flake8-pie
    "ISC",  # flake8-implicit-str-concat
    "C90",  # mccabe complexity
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "EM",   # flake8-errmsg
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
    "TID252",  # relative imports
    "T201",    # print allowed in CLI
]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["matty"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252", "D", "SLF001", "PLC0415"]
"test_*.py" = ["PLR2004", "S101", "TID252", "D", "SLF001", "PLC0415"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 10
max-statements = 50

[tool.versioningit]
default-version = "0.0.0"

[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.0"
