name: CI - MacOS/Linux/Windows via Pixi

on:
  push:
    paths-ignore:
      - .gitlab-ci.yml
      - .gitignore
      - '**.md'
      - CITATION.*
      - LICENSE
      - colcon.pkg
      - .pre-commit-config.yaml
  pull_request:
    paths-ignore:
      - .gitlab-ci.yml
      - .gitignore
      - '**.md'
      - CITATION.*
      - LICENSE
      - colcon.pkg
      - .pre-commit-config.yaml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coal-pixi:
    name: ${{ matrix.os }} - Env ${{ matrix.environment }} ${{ matrix.build_type }} ${{ matrix.cxx_options }}
    runs-on: ${{ matrix.os }}
    env:
      CCACHE_BASEDIR: "${GITHUB_WORKSPACE}"
      CCACHE_DIR: "${GITHUB_WORKSPACE}/.ccache"
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13]
        environment: [all, all-python-oldest, all-boost-python]
        build_type: [Release, Debug]
        cxx_options: ['', '-mavx2']
        exclude:
          - os: macos-latest
            cxx_options: '-mavx2'
          - os: macos-13
            cxx_options: '-mavx2'

        include:
          - os: windows-latest
            environment: all
            cxx_options: ''
            build_type: Release
          - os: windows-latest
            environment: all-clang-cl
            cxx_options: ''
            build_type: Release
          - os: windows-latest
            environment: default
            cxx_options: ''
            build_type: Debug

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/cache@v4
      with:
        path: .ccache
        key: ccache-macos-linux-windows-pixi-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cxx_options }}-${{ matrix.environment }}-${{ github.sha }}
        restore-keys: ccache-macos-linux-windows-pixi-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cxx_options }}-${{ matrix.environment }}-

    - uses: prefix-dev/setup-pixi@v0.8.14
      with:
        cache: true
        environments: ${{ matrix.environment }}

    - name: Build Coal [MacOS/Linux/Windows]
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 2
        COAL_BUILD_TYPE: ${{ matrix.build_type }}
        COAL_CXX_FLAGS: ${{ matrix.cxx_options }}
      run: |
        pixi run -e ${{ matrix.environment }} build

    - name: Test Coal [MacOS/Linux/Windows]
      if: ${{ ! (contains(matrix.os, 'windows') && matrix.build_type == 'Debug') }}
      run: |
        pixi run -e ${{ matrix.environment }} ctest --test-dir build --output-on-failure

    # Following steps will modify the pixi environment
    - name: Build Coal cpp [MacOS/Linux/Windows]
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 2
        COAL_BUILD_TYPE: ${{ matrix.build_type }}
        COAL_CXX_FLAGS: ${{ matrix.cxx_options }}
      shell: bash -el {0}
      run: |
        pixi run -e ${{ matrix.environment }} configure \
          -DBUILD_PYTHON_INTERFACE=OFF \
          -B build_cpp
        pixi run -e ${{ matrix.environment }} cmake --build build_cpp --target all
        pixi run -e ${{ matrix.environment }} cmake --install build_cpp

    - name: Build Coal standalone python [MacOS/Linux/Windows]
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 2
        COAL_BUILD_TYPE: ${{ matrix.build_type }}
        COAL_CXX_FLAGS: ${{ matrix.cxx_options }}
      shell: bash -el {0}
      run: |
        pixi run -e ${{ matrix.environment }} configure \
          -DBUILD_PYTHON_INTERFACE=ON \
          -DBUILD_STANDALONE_PYTHON_INTERFACE=ON \
          -B build_python
        pixi run -e ${{ matrix.environment }} cmake --build build_python --target all
        pixi run -e ${{ matrix.environment }} cmake --install build_python
        pixi run -e ${{ matrix.environment }} python -c "import coal"

  check:
    if: always()
    name: check-macos-linux-windows-pixi

    needs:
    - coal-pixi

    runs-on: Ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
