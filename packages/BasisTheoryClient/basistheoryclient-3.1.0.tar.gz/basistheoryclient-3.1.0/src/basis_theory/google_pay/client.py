# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.google_pay_create_response import GooglePayCreateResponse
from ..types.google_pay_method_token import GooglePayMethodToken
from ..types.google_pay_token import GooglePayToken
from .raw_client import AsyncRawGooglePayClient, RawGooglePayClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GooglePayClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGooglePayClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGooglePayClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGooglePayClient
        """
        return self._raw_client

    def create(
        self,
        *,
        expires_at: typing.Optional[str] = OMIT,
        google_payment_data: typing.Optional[GooglePayMethodToken] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GooglePayCreateResponse:
        """
        Parameters
        ----------
        expires_at : typing.Optional[str]

        google_payment_data : typing.Optional[GooglePayMethodToken]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GooglePayCreateResponse
            Success

        Examples
        --------
        from basis_theory import BasisTheory

        client = BasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )
        client.google_pay.create()
        """
        _response = self._raw_client.create(
            expires_at=expires_at, google_payment_data=google_payment_data, request_options=request_options
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GooglePayToken:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GooglePayToken
            Success

        Examples
        --------
        from basis_theory import BasisTheory

        client = BasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )
        client.google_pay.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Success

        Examples
        --------
        from basis_theory import BasisTheory

        client = BasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )
        client.google_pay.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data


class AsyncGooglePayClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGooglePayClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGooglePayClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGooglePayClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        expires_at: typing.Optional[str] = OMIT,
        google_payment_data: typing.Optional[GooglePayMethodToken] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GooglePayCreateResponse:
        """
        Parameters
        ----------
        expires_at : typing.Optional[str]

        google_payment_data : typing.Optional[GooglePayMethodToken]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GooglePayCreateResponse
            Success

        Examples
        --------
        import asyncio

        from basis_theory import AsyncBasisTheory

        client = AsyncBasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.google_pay.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            expires_at=expires_at, google_payment_data=google_payment_data, request_options=request_options
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GooglePayToken:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GooglePayToken
            Success

        Examples
        --------
        import asyncio

        from basis_theory import AsyncBasisTheory

        client = AsyncBasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.google_pay.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Success

        Examples
        --------
        import asyncio

        from basis_theory import AsyncBasisTheory

        client = AsyncBasisTheory(
            correlation_id="YOUR_CORRELATION_ID",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.google_pay.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data
