# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .privacy import Privacy


class CreateTokenRequest(UniversalBaseModel):
    id: typing.Optional[str] = None
    type: typing.Optional[str] = None
    data: typing.Optional[typing.Optional[typing.Any]] = None
    encrypted: typing.Optional[str] = None
    privacy: typing.Optional[Privacy] = None
    metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None
    search_indexes: typing.Optional[typing.List[str]] = None
    fingerprint_expression: typing.Optional[str] = None
    mask: typing.Optional[typing.Optional[typing.Any]] = None
    deduplicate_token: typing.Optional[bool] = None
    expires_at: typing.Optional[str] = None
    containers: typing.Optional[typing.List[str]] = None
    token_intent_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
