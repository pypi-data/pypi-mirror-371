# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .three_ds_cardholder_info import ThreeDsCardholderInfo
from .three_ds_merchant_info import ThreeDsMerchantInfo
from .three_ds_message_extension import ThreeDsMessageExtension
from .three_ds_purchase_info import ThreeDsPurchaseInfo
from .three_ds_requestor_info import ThreeDsRequestorInfo


class AuthenticateThreeDsSessionRequest(UniversalBaseModel):
    authentication_category: str
    authentication_type: str
    card_brand: typing.Optional[str] = None
    challenge_preference: typing.Optional[str] = None
    request_decoupled_challenge: typing.Optional[bool] = None
    decoupled_challenge_max_time: typing.Optional[int] = None
    purchase_info: typing.Optional[ThreeDsPurchaseInfo] = None
    merchant_info: typing.Optional[ThreeDsMerchantInfo] = None
    requestor_info: typing.Optional[ThreeDsRequestorInfo] = None
    cardholder_info: typing.Optional[ThreeDsCardholderInfo] = None
    broadcast_info: typing.Optional[typing.Optional[typing.Any]] = None
    message_extensions: typing.Optional[typing.List[ThreeDsMessageExtension]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
