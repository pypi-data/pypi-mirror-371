# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .three_ds_acs_rendering_type import ThreeDsAcsRenderingType
from .three_ds_message_extension import ThreeDsMessageExtension


class ThreeDsAuthentication(UniversalBaseModel):
    pan_token_id: typing.Optional[str] = None
    token_id: typing.Optional[str] = None
    token_intent_id: typing.Optional[str] = None
    session_id: typing.Optional[str] = None
    threeds_version: typing.Optional[str] = None
    acs_transaction_id: typing.Optional[str] = None
    ds_transaction_id: typing.Optional[str] = None
    sdk_transaction_id: typing.Optional[str] = None
    acs_reference_number: typing.Optional[str] = None
    ds_reference_number: typing.Optional[str] = None
    liability_shifted: typing.Optional[bool] = None
    authentication_value: typing.Optional[str] = None
    authentication_status: typing.Optional[str] = None
    authentication_status_code: typing.Optional[str] = None
    directory_status_code: typing.Optional[str] = None
    authentication_status_reason: typing.Optional[str] = None
    authentication_status_reason_code: typing.Optional[str] = None
    eci: typing.Optional[str] = None
    acs_challenge_mandated: typing.Optional[str] = None
    acs_decoupled_authentication: typing.Optional[str] = None
    authentication_challenge_type: typing.Optional[str] = None
    acs_rendering_type: typing.Optional[ThreeDsAcsRenderingType] = None
    acs_signed_content: typing.Optional[str] = None
    acs_challenge_url: typing.Optional[str] = None
    challenge_preference: typing.Optional[str] = None
    challenge_preference_code: typing.Optional[str] = None
    challenge_attempts: typing.Optional[str] = None
    challenge_cancel_reason: typing.Optional[str] = None
    challenge_cancel_reason_code: typing.Optional[str] = None
    cardholder_info: typing.Optional[str] = None
    whitelist_status: typing.Optional[str] = None
    whitelist_status_source: typing.Optional[str] = None
    message_extensions: typing.Optional[typing.List[ThreeDsMessageExtension]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
