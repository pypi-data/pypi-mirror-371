image: python:3.12-bullseye

stages:
  - pretest
  - build
  - test
  - pre-release
  - post-mr
  - deploy
  - release

# Global variables for release jobs
variables:
  VERSION: minor
  BRANCH: main

# Create an anchor to setup node
.setup_node:
  before_script:
    - pip install -U pip
    # Install nodejs
    - wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz
    - tar -xvf node-v18.12.1-linux-x64.tar.xz
    - mv node-v18.12.1-linux-x64 /root/nodejs
    - rm -rf node-v18.12.1-linux-x64.tar.xz
    - export PATH=/root/nodejs/bin:$PATH
    - npm --version

# Anchor for setting up prepare_release job
.setup_hatch:
  before_script:
    - echo "Setting up hatch..."
    # Install hatch and install package
    - pip install git+https://github.com/pypa/hatch
    - pip install -e '.[dev]'

# Anchor with reference for prepare_release job.
# We will test it in CI as well without actually pushing
# the commits. So we reference the anchor to avoid duplication
.prepare_release: &prepare_release
  # Check out correct branch
  # By default a shallow clone is made in CI. So first fetch from origin
  # and then checkout if branch is other than main
  - |
    if [[ ${BRANCH} != "main" ]]; then
        git fetch origin ${BRANCH}
        git checkout ${BRANCH}
    fi
  # Bump version
  - hatch version ${VERSION}
  # Get new version
  - export NEXT_VERSION_SPECIFIER=$(hatch version)
  # Generate changelog
  - gitlab-activity
  - cat CHANGELOG.md
  - git add CHANGELOG.md gitlab_activity/_version.py
  # Run pre-commit to auto format files
  - pre-commit install
  - pre-commit run --all-files --show-diff-on-failure || true
  # Add potentially changed files
  - git add CHANGELOG.md || true
  # Configure mail and name of the user who should be visible in the commit history
  - git config --global user.email 'release-bot@gitlab.com'
  - git config --global user.name 'Release Bot'
  # Dont run pre-commit here
  - git commit -m "Bump version to ${NEXT_VERSION_SPECIFIER} & update CHANGELOG.md" --no-verify
  # Create new tag
  - git tag ${NEXT_VERSION_SPECIFIER} -m "Release ${NEXT_VERSION_SPECIFIER}"

# Anchor with reference for add_changelog_entry job.
.add_changelog_entry: &add_changelog_entry # Generate changelog
  - gitlab-activity
  - cat CHANGELOG.md
  - git add CHANGELOG.md
  # Run pre-commit to auto format files
  - pre-commit install
  - pre-commit run --all-files --show-diff-on-failure || true
  # Add potentially changed files
  - git add CHANGELOG.md || true
  # Configure mail and name of the user who should be visible in the commit history
  - git config --global user.email 'release-bot@gitlab.com'
  - git config --global user.name 'Release Bot'
  # Dont run pre-commit here
  - git commit -m "Update CHANGELOG.md" --no-verify

# Pre commit tests
pre-commit:
  stage: pretest
  script:
    - mkdir -p build/reports
    - pip install pre-commit
    - pre-commit install
    - pre-commit run --all-files --show-diff-on-failure
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Test to build package
build-test:
  stage: build
  script:
    - pip install .
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Test to build docs
build-doc:
  stage: build
  extends: .setup_node
  script:
    - pip install git+https://github.com/pypa/hatch
    - hatch run docs:build
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Unit and functional tests
tests:
  stage: test
  parallel:
    matrix:
      - PYVER: ["3.9", "3.10", "3.11", "3.12", "3.13"]
  script:
    # Install hatch first. Install it from Git until
    # a release with [PR#1002](https://github.com/pypa/hatch/pull/1002)
    # is made
    - pip install git+https://github.com/pypa/hatch
    # Checks the current python version
    - hatch run +py=$PYVER test:check
    # Runs tests
    - hatch run +py=$PYVER test:test
    # Codecov specific stuff
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    # Seems like we need to add HTTP Proxy explicitly
    # Add coverage report only for one version
    - ./codecov -t $CODECOV_TOKEN -U $HTTPS_PROXY -f coverage.xml -F py$PYVER
  after_script:
    - cp coverage.xml build/reports/
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Test to check updating changelog for each MR
test-update-changelog:
  stage: pre-release
  allow_failure: true
  extends: .setup_hatch
  # We do clone for this test as cached repos might have existing
  # tags that can fail the job.
  variables:
    GIT_STRATEGY: clone
  script:
    - *add_changelog_entry
  after_script:
    - cp CHANGELOG.md build/reports/
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Test to check release steps
test-release:
  stage: pre-release
  extends: .setup_hatch
  # We do clone for this test as cached repos might have existing
  # tags that can fail the job.
  variables:
    GIT_STRATEGY: clone
  script:
    - *prepare_release
  after_script:
    - cp CHANGELOG.md build/reports/
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Test to check publish steps with local PyPi server
test-publish:
  stage: pre-release
  needs:
    - test-release
  before_script:
    # Install prerequisites
    - pip install git+https://github.com/pypa/hatch
  script:
    # Build package
    - hatch run publish:build-package
    # Check dist files
    - hatch run publish:check-package
    # Start a test pypi server
    - hatch run publish:start-localpypi &
    # Sleep for a while for server to start
    - sleep 30
    # Upload package to test
    - hatch run publish:upload-to-localpypi
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day
  except:
    - tags

# Update changelog after MR has been succesfully merged
update_changelog:
  stage: post-mr
  extends: .setup_hatch
  # We do clone for this test as cached repos might have existing
  # tags that can fail the job
  variables:
    GIT_STRATEGY: clone
  script:
    - *add_changelog_entry
    # Set remote push URL and push to originating branch
    - git remote set-url --push origin "https://${GITLAB_CI_USER}:${GITLAB_CI_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - git push origin HEAD:${CI_COMMIT_REF_NAME}
  # Only run on main branch on merge commit
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /Merge.*/

# Generate and deploy docs
pages:
  stage: deploy
  extends: .setup_node
  script:
    - pip install git+https://github.com/pypa/hatch
    - hatch run docs:build
    - mv docs/website/build/ public/
  artifacts:
    paths:
      - public
  only:
    - main
  except:
    - tags

# Create a new release on GitLab UI
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Running release job"
  release:
    name: "Release File $CI_COMMIT_TAG"
    description: "Created using the GitLab's release-cli"
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  only:
    - tags

# Prepare release by tagging and adding entry to changelog
prepare_release:
  stage: release
  when: manual
  # We do clone for this test as cached repos might have existing
  # tags that can fail the job
  variables:
    GIT_STRATEGY: clone
  extends: .setup_hatch
  script:
    - *prepare_release
    # Set remote push URL and push to originating branch
    - git remote set-url --push origin "https://${GITLAB_CI_USER}:${GITLAB_CI_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - git push origin HEAD:${CI_COMMIT_REF_NAME} -o ci.skip # Pushes to the same branch as the trigger
    - git push origin ${NEXT_VERSION_SPECIFIER} # Pushes the tag BUT triggers the CI to run tagged jobs
  # Only run on main branch and do not run on tags
  # Because we create tag in this job
  only:
    - main
  except:
    - tags

# Publish the release to PyPI
# NOTE: Before we were attempting to run this on tags job. This
# WONT WORK as protected variables are ONLY available on
# PROTECTED TAGS. So we need to run this job on default protected
# branch
publish:
  stage: release
  needs:
    - prepare_release
  # Use clone strategy to be able to checkout "latest" main
  variables:
    GIT_STRATEGY: clone
  before_script:
    - echo "Preparing publish job..."
    # This is crucial. If not the commit we made from previous job
    # will not be available here as CI will always checkout the commit
    # that triggered the job
    - git fetch origin main
    - git checkout main
    # Install prerequisites
    - pip install git+https://github.com/pypa/hatch
  script:
    # Build package
    - hatch run publish:build-package
    # Check dist files
    - hatch run publish:check-package
    # Upload package to test
    - hatch run publish:upload-to-pypi
  only:
    - main
  except:
    - tags
