"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 ONDEWO GmbH

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.https://ondewo.slack.com/archives/CAWPP61NY
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Decoding:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DecodingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Decoding.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DEFAULT: _Decoding.ValueType  # 0
    """decoding will be defined by the pipeline config"""
    GREEDY: _Decoding.ValueType  # 1
    """greedy decoding will be used independently on pipeline config"""
    BEAM_SEARCH_WITH_LM: _Decoding.ValueType  # 2
    """beam search will be used independently on pipeline config"""
    BEAM_SEARCH: _Decoding.ValueType  # 3
    """beam search without LM head, to configure decoding mode for seq2seq models."""

class Decoding(_Decoding, metaclass=_DecodingEnumTypeWrapper):
    """/////////////////////////
            Enums         //
    /////////////////////////

    The decoding configuration
    """

DEFAULT: Decoding.ValueType  # 0
"""decoding will be defined by the pipeline config"""
GREEDY: Decoding.ValueType  # 1
"""greedy decoding will be used independently on pipeline config"""
BEAM_SEARCH_WITH_LM: Decoding.ValueType  # 2
"""beam search will be used independently on pipeline config"""
BEAM_SEARCH: Decoding.ValueType  # 3
"""beam search without LM head, to configure decoding mode for seq2seq models."""
global___Decoding = Decoding

class _InferenceBackend:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _InferenceBackendEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InferenceBackend.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INFERENCE_BACKEND_UNKNOWN: _InferenceBackend.ValueType  # 0
    """Not set"""
    INFERENCE_BACKEND_PYTORCH: _InferenceBackend.ValueType  # 1
    """Run pytorch model"""
    INFERENCE_BACKEND_FLAX: _InferenceBackend.ValueType  # 2
    """Run flax model"""
    INFERENCE_BACKEND_CLOUD_SERVICE_AMAZON: _InferenceBackend.ValueType  # 3
    """Run Amazon S2T cloud service"""
    INFERENCE_BACKEND_CLOUD_SERVICE_DEEPGRAM: _InferenceBackend.ValueType  # 4
    """Run Deepgram S2T cloud service"""
    INFERENCE_BACKEND_CLOUD_SERVICE_GOOGLE: _InferenceBackend.ValueType  # 5
    """Run Google S2T cloud service"""
    INFERENCE_BACKEND_CLOUD_SERVICE_MICROSOFT: _InferenceBackend.ValueType  # 6
    """Run Microsoft Azure S2T cloud service"""

class InferenceBackend(_InferenceBackend, metaclass=_InferenceBackendEnumTypeWrapper): ...

INFERENCE_BACKEND_UNKNOWN: InferenceBackend.ValueType  # 0
"""Not set"""
INFERENCE_BACKEND_PYTORCH: InferenceBackend.ValueType  # 1
"""Run pytorch model"""
INFERENCE_BACKEND_FLAX: InferenceBackend.ValueType  # 2
"""Run flax model"""
INFERENCE_BACKEND_CLOUD_SERVICE_AMAZON: InferenceBackend.ValueType  # 3
"""Run Amazon S2T cloud service"""
INFERENCE_BACKEND_CLOUD_SERVICE_DEEPGRAM: InferenceBackend.ValueType  # 4
"""Run Deepgram S2T cloud service"""
INFERENCE_BACKEND_CLOUD_SERVICE_GOOGLE: InferenceBackend.ValueType  # 5
"""Run Google S2T cloud service"""
INFERENCE_BACKEND_CLOUD_SERVICE_MICROSOFT: InferenceBackend.ValueType  # 6
"""Run Microsoft Azure S2T cloud service"""
global___InferenceBackend = InferenceBackend

@typing.final
class TranscribeRequestConfig(google.protobuf.message.Message):
    """/////////////////////////
    Configuration Message //
    /////////////////////////

    Configuration for a request to transcribe audio
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    S2T_PIPELINE_ID_FIELD_NUMBER: builtins.int
    DECODING_FIELD_NUMBER: builtins.int
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    POST_PROCESSING_FIELD_NUMBER: builtins.int
    UTTERANCE_DETECTION_FIELD_NUMBER: builtins.int
    PYANNOTE_FIELD_NUMBER: builtins.int
    RETURN_OPTIONS_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    S2T_SERVICE_CONFIG_FIELD_NUMBER: builtins.int
    S2T_CLOUD_PROVIDER_CONFIG_FIELD_NUMBER: builtins.int
    s2t_pipeline_id: builtins.str
    """Required. id of the pipeline (model setup) that will generate audio"""
    decoding: global___Decoding.ValueType
    """Optional. decoding type"""
    language_model_name: builtins.str
    """Name of the language model"""
    language: builtins.str
    """Optional. Specify language of transcription to return"""
    task: builtins.str
    """Optional. Specify task of s2t model, e.g. 'transcribe' and 'translate'"""
    @property
    def post_processing(self) -> global___PostProcessingOptions:
        """The postprocessing options"""

    @property
    def utterance_detection(self) -> global___UtteranceDetectionOptions:
        """The utterance detection options"""

    @property
    def pyannote(self) -> global___Pyannote:
        """Voice activity detection with pyannote"""

    @property
    def return_options(self) -> global___TranscriptionReturnOptions:
        """The transcribe return options"""

    @property
    def s2t_service_config(self) -> google.protobuf.struct_pb2.Struct:
        """Optional. s2t_service_config provides the configuration of the service such as API key, bearer tokens, JWT,
        and other header information as key value pairs, e.g., <pre><code>MY_API_KEY='LKJDIFe244LKJOI'</code></pre>
        A. For Amazon S2T service, the following arguments should be passed in form of a dict:
         A.1 aws_access_key_id (required) Access key id to access Amazon WEb Service.
         A.2 aws_secret_access_key (required) Secret access key to access Amazon WEb Service.
         A.3 region (required) Region name of Amazon Server.
         Example:
         s2t_config_service={'aws_access_key_id': 'YOUR_AWS_ACCESS_KEY_ID', 'aws_secret_access_key':
         'YOUR_AWS_SECRET_ACCESS_KEY', 'region': 'YOUR_AMAZON_SERVER_REGION_NAME'}
        B. For Deepgram S2T service, the following argument should be passed in form of a dict:
         B.1 api_key (required) API key of Deepgram account to access Deepgram S2T service.
         Example:
         s2t_config_service={'api_key': 'YOUR_DEEPGRAM_API_KEY'}
        C. For Google cloud S2T service, the following arguments should be passed in form of a dict:
         C.1- api_key (required) API key of Google cloud to access its S2T service.
         C.2- api_endpoint (optional) Regional API endpoint of Google cloud S2T service. (Defaults to
         'eu-speech.googleapis.com')
         Example:
         s2t_config_service={'api_key': 'YOUR_GOOGLE_CLOUD_API_KEY', 'api_endpoint': 'YOUR_GOOGLE_CLOUD_API_ENDPOINT'}
        D. For Microsoft Azure S2T service, the following arguments should be passed in form of a dict:
         D.1 subscription_key (required) Subscription key to access Microsoft Azure Service.
         D.2 region (required) Region name of Microsoft Azure Server.
         Example:
         s2t_config_service={'subscription_key': 'YOUR_MICROSOFT_AZURE_SUBSCRIPTION_KEY', 'region':
         'YOUR_MICROSOFT_AZURE_SERVER_REGION_NAME'}
        Note: ondewo-s2t will raise an error if you don't pass any of the required arguments above.
        """

    @property
    def s2t_cloud_provider_config(self) -> global___S2tCloudProviderConfig:
        """Optional. Defines the cloud provider's specific configuration for using speech to text cloud services
        The default value is None.
        """

    def __init__(
        self,
        *,
        s2t_pipeline_id: builtins.str = ...,
        decoding: global___Decoding.ValueType = ...,
        language_model_name: builtins.str = ...,
        post_processing: global___PostProcessingOptions | None = ...,
        utterance_detection: global___UtteranceDetectionOptions | None = ...,
        pyannote: global___Pyannote | None = ...,
        return_options: global___TranscriptionReturnOptions | None = ...,
        language: builtins.str | None = ...,
        task: builtins.str | None = ...,
        s2t_service_config: google.protobuf.struct_pb2.Struct | None = ...,
        s2t_cloud_provider_config: global___S2tCloudProviderConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_language", b"_language", "_s2t_cloud_provider_config", b"_s2t_cloud_provider_config", "_s2t_service_config", b"_s2t_service_config", "_task", b"_task", "language", b"language", "language_model_name", b"language_model_name", "oneof_language_model_name", b"oneof_language_model_name", "oneof_post_processing", b"oneof_post_processing", "oneof_return_options", b"oneof_return_options", "oneof_utterance_detection", b"oneof_utterance_detection", "post_processing", b"post_processing", "pyannote", b"pyannote", "return_options", b"return_options", "s2t_cloud_provider_config", b"s2t_cloud_provider_config", "s2t_service_config", b"s2t_service_config", "task", b"task", "utterance_detection", b"utterance_detection", "voice_activity_detection", b"voice_activity_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_language", b"_language", "_s2t_cloud_provider_config", b"_s2t_cloud_provider_config", "_s2t_service_config", b"_s2t_service_config", "_task", b"_task", "decoding", b"decoding", "language", b"language", "language_model_name", b"language_model_name", "oneof_language_model_name", b"oneof_language_model_name", "oneof_post_processing", b"oneof_post_processing", "oneof_return_options", b"oneof_return_options", "oneof_utterance_detection", b"oneof_utterance_detection", "post_processing", b"post_processing", "pyannote", b"pyannote", "return_options", b"return_options", "s2t_cloud_provider_config", b"s2t_cloud_provider_config", "s2t_pipeline_id", b"s2t_pipeline_id", "s2t_service_config", b"s2t_service_config", "task", b"task", "utterance_detection", b"utterance_detection", "voice_activity_detection", b"voice_activity_detection"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_language", b"_language"]) -> typing.Literal["language"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_cloud_provider_config", b"_s2t_cloud_provider_config"]) -> typing.Literal["s2t_cloud_provider_config"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_service_config", b"_s2t_service_config"]) -> typing.Literal["s2t_service_config"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_task", b"_task"]) -> typing.Literal["task"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_language_model_name", b"oneof_language_model_name"]) -> typing.Literal["language_model_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_post_processing", b"oneof_post_processing"]) -> typing.Literal["post_processing"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_return_options", b"oneof_return_options"]) -> typing.Literal["return_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_utterance_detection", b"oneof_utterance_detection"]) -> typing.Literal["utterance_detection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["voice_activity_detection", b"voice_activity_detection"]) -> typing.Literal["pyannote"] | None: ...

global___TranscribeRequestConfig = TranscribeRequestConfig

@typing.final
class S2tCloudProviderConfig(google.protobuf.message.Message):
    """Configuration for cloud provider settings for Speech-to-Text (S2T)."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    S2T_CLOUD_PROVIDER_CONFIG_AMAZON_FIELD_NUMBER: builtins.int
    S2T_CLOUD_PROVIDER_CONFIG_DEEPGRAM_FIELD_NUMBER: builtins.int
    S2T_CLOUD_PROVIDER_CONFIG_GOOGLE_FIELD_NUMBER: builtins.int
    S2T_CLOUD_PROVIDER_CONFIG_MICROSOFT_FIELD_NUMBER: builtins.int
    @property
    def s2t_cloud_provider_config_amazon(self) -> global___S2tCloudProviderConfigAmazon:
        """Optional. Configuration for Amazon web service speech-to-text provider."""

    @property
    def s2t_cloud_provider_config_deepgram(self) -> global___S2tCloudProviderConfigDeepgram:
        """Optional. Configuration for DeepGram speech-to-text provider."""

    @property
    def s2t_cloud_provider_config_google(self) -> global___S2tCloudProviderConfigGoogle:
        """Optional. Configuration for Google speech-to-text provider."""

    @property
    def s2t_cloud_provider_config_microsoft(self) -> global___S2tCloudProviderConfigMicrosoft:
        """Optional. Configuration for Microsoft Azure speech-to-text provider."""

    def __init__(
        self,
        *,
        s2t_cloud_provider_config_amazon: global___S2tCloudProviderConfigAmazon | None = ...,
        s2t_cloud_provider_config_deepgram: global___S2tCloudProviderConfigDeepgram | None = ...,
        s2t_cloud_provider_config_google: global___S2tCloudProviderConfigGoogle | None = ...,
        s2t_cloud_provider_config_microsoft: global___S2tCloudProviderConfigMicrosoft | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_s2t_cloud_provider_config_amazon", b"_s2t_cloud_provider_config_amazon", "_s2t_cloud_provider_config_deepgram", b"_s2t_cloud_provider_config_deepgram", "_s2t_cloud_provider_config_google", b"_s2t_cloud_provider_config_google", "_s2t_cloud_provider_config_microsoft", b"_s2t_cloud_provider_config_microsoft", "s2t_cloud_provider_config_amazon", b"s2t_cloud_provider_config_amazon", "s2t_cloud_provider_config_deepgram", b"s2t_cloud_provider_config_deepgram", "s2t_cloud_provider_config_google", b"s2t_cloud_provider_config_google", "s2t_cloud_provider_config_microsoft", b"s2t_cloud_provider_config_microsoft"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_s2t_cloud_provider_config_amazon", b"_s2t_cloud_provider_config_amazon", "_s2t_cloud_provider_config_deepgram", b"_s2t_cloud_provider_config_deepgram", "_s2t_cloud_provider_config_google", b"_s2t_cloud_provider_config_google", "_s2t_cloud_provider_config_microsoft", b"_s2t_cloud_provider_config_microsoft", "s2t_cloud_provider_config_amazon", b"s2t_cloud_provider_config_amazon", "s2t_cloud_provider_config_deepgram", b"s2t_cloud_provider_config_deepgram", "s2t_cloud_provider_config_google", b"s2t_cloud_provider_config_google", "s2t_cloud_provider_config_microsoft", b"s2t_cloud_provider_config_microsoft"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_cloud_provider_config_amazon", b"_s2t_cloud_provider_config_amazon"]) -> typing.Literal["s2t_cloud_provider_config_amazon"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_cloud_provider_config_deepgram", b"_s2t_cloud_provider_config_deepgram"]) -> typing.Literal["s2t_cloud_provider_config_deepgram"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_cloud_provider_config_google", b"_s2t_cloud_provider_config_google"]) -> typing.Literal["s2t_cloud_provider_config_google"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_cloud_provider_config_microsoft", b"_s2t_cloud_provider_config_microsoft"]) -> typing.Literal["s2t_cloud_provider_config_microsoft"] | None: ...

global___S2tCloudProviderConfig = S2tCloudProviderConfig

@typing.final
class S2tCloudProviderConfigAmazon(google.protobuf.message.Message):
    """Configuration details specific to the Amazon web service speech-to-text provider."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENABLE_PARTIAL_RESULTS_STABILIZATION_FIELD_NUMBER: builtins.int
    PARTIAL_RESULTS_STABILITY_FIELD_NUMBER: builtins.int
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    VOCABULARY_NAME_FIELD_NUMBER: builtins.int
    enable_partial_results_stabilization: builtins.bool
    """Optional. Enables or disables partial_results_stabilization feature. More details at:
    https://docs.aws.amazon.com/transcribe/latest/dg/streaming-partial-results.html#streaming-partial-result-stabilization
    """
    partial_results_stability: builtins.str
    """Optional. You can use this field to set the stability level of the transcription results.
    A higher stability level means that the transcription results are less likely to change.
    Higher stability levels can come with lower overall transcription accuracy.
    Acceptable values: ["low", "medium", "high"]. Defaults to "high" if not set explicitly. More details at:
    https://aws.amazon.com/blogs/machine-learning/amazon-transcribe-now-supports-partial-results-stabilization-for-streaming-audio/
    """
    language_model_name: builtins.str
    """Optional. The name of your customize language model you want to use.
    More details at: https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html
    """
    vocabulary_name: builtins.str
    """Optional. The name of your customize language model you want to use.
    More details at: https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html
    """
    def __init__(
        self,
        *,
        enable_partial_results_stabilization: builtins.bool | None = ...,
        partial_results_stability: builtins.str | None = ...,
        language_model_name: builtins.str | None = ...,
        vocabulary_name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_enable_partial_results_stabilization", b"_enable_partial_results_stabilization", "_language_model_name", b"_language_model_name", "_partial_results_stability", b"_partial_results_stability", "_vocabulary_name", b"_vocabulary_name", "enable_partial_results_stabilization", b"enable_partial_results_stabilization", "language_model_name", b"language_model_name", "partial_results_stability", b"partial_results_stability", "vocabulary_name", b"vocabulary_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_enable_partial_results_stabilization", b"_enable_partial_results_stabilization", "_language_model_name", b"_language_model_name", "_partial_results_stability", b"_partial_results_stability", "_vocabulary_name", b"_vocabulary_name", "enable_partial_results_stabilization", b"enable_partial_results_stabilization", "language_model_name", b"language_model_name", "partial_results_stability", b"partial_results_stability", "vocabulary_name", b"vocabulary_name"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enable_partial_results_stabilization", b"_enable_partial_results_stabilization"]) -> typing.Literal["enable_partial_results_stabilization"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_language_model_name", b"_language_model_name"]) -> typing.Literal["language_model_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_partial_results_stability", b"_partial_results_stability"]) -> typing.Literal["partial_results_stability"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_vocabulary_name", b"_vocabulary_name"]) -> typing.Literal["vocabulary_name"] | None: ...

global___S2tCloudProviderConfigAmazon = S2tCloudProviderConfigAmazon

@typing.final
class S2tCloudProviderConfigDeepgram(google.protobuf.message.Message):
    """Configuration details specific to the Deepgram speech-to-text provider."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUNCTUATE_FIELD_NUMBER: builtins.int
    SMART_FORMAT_FIELD_NUMBER: builtins.int
    NUMERALS_FIELD_NUMBER: builtins.int
    MEASUREMENTS_FIELD_NUMBER: builtins.int
    DICTATION_FIELD_NUMBER: builtins.int
    punctuate: builtins.bool
    """Optional. Enables or disables punctuate feature of Deepgram to add punctuations to the resulted transcript.
    More details at: https://developers.deepgram.com/docs/punctuation
    """
    smart_format: builtins.bool
    """Optional. Enables or disables smart_format feature of Deepgram transcription result to improve readability.
    More details at: https://developers.deepgram.com/docs/smart-format
    """
    numerals: builtins.bool
    """Optional. Enables or disables numerals feature of Deepgram to convert numbers to numeric form in the resulted
    transcript. More details at: https://developers.deepgram.com/docs/numerals
    """
    measurements: builtins.bool
    """Optional. Enables or disables measurements feature of Deepgram to convert measurement units (i.e. Kilogram)
    to abbreviated form (i.e. Kg) in the resulted transcript.
    More details at: https://developers.deepgram.com/docs/measurements
    """
    dictation: builtins.bool
    """Optional. Enables or disables dictation feature of Deepgram to convert spoken dictation commands into their
    corresponding punctuation marks. More details at: https://developers.deepgram.com/docs/dictation
    """
    def __init__(
        self,
        *,
        punctuate: builtins.bool | None = ...,
        smart_format: builtins.bool | None = ...,
        numerals: builtins.bool | None = ...,
        measurements: builtins.bool | None = ...,
        dictation: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_dictation", b"_dictation", "_measurements", b"_measurements", "_numerals", b"_numerals", "_punctuate", b"_punctuate", "_smart_format", b"_smart_format", "dictation", b"dictation", "measurements", b"measurements", "numerals", b"numerals", "punctuate", b"punctuate", "smart_format", b"smart_format"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_dictation", b"_dictation", "_measurements", b"_measurements", "_numerals", b"_numerals", "_punctuate", b"_punctuate", "_smart_format", b"_smart_format", "dictation", b"dictation", "measurements", b"measurements", "numerals", b"numerals", "punctuate", b"punctuate", "smart_format", b"smart_format"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_dictation", b"_dictation"]) -> typing.Literal["dictation"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_measurements", b"_measurements"]) -> typing.Literal["measurements"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_numerals", b"_numerals"]) -> typing.Literal["numerals"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_punctuate", b"_punctuate"]) -> typing.Literal["punctuate"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_smart_format", b"_smart_format"]) -> typing.Literal["smart_format"] | None: ...

global___S2tCloudProviderConfigDeepgram = S2tCloudProviderConfigDeepgram

@typing.final
class S2tCloudProviderConfigGoogle(google.protobuf.message.Message):
    """Configuration details specific to the Google speech-to-text provider."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENABLE_AUTOMATIC_PUNCTUATION_FIELD_NUMBER: builtins.int
    ENABLE_WORD_TIME_OFFSETS_FIELD_NUMBER: builtins.int
    ENABLE_WORD_CONFIDENCE_FIELD_NUMBER: builtins.int
    TRANSCRIPT_NORMALIZATION_FIELD_NUMBER: builtins.int
    MAX_ALTERNATIVES_FIELD_NUMBER: builtins.int
    enable_automatic_punctuation: builtins.bool
    """Optional. Enables or disables automatic_punctuation feature of Google s2t to add punctuations to the resulted
    transcript. More details at: https://cloud.google.com/speech-to-text/docs/automatic-punctuation
    """
    enable_word_time_offsets: builtins.bool
    """Optional. Enables or disables word_time_offsets feature of Google s2t to add word-level timestamps (time-offset)
    to the resulted transcript. More details at: https://cloud.google.com/speech-to-text/docs/async-time-offsets
    """
    enable_word_confidence: builtins.bool
    """Optional. Enables or disables word_confidence feature of Google s2t to add word-level confidence scores
    to the resulted transcript. More details at: https://cloud.google.com/speech-to-text/docs/word-confidence
    """
    transcript_normalization: builtins.bool
    """Optional. Enables or disables transcript_normalization feature of Google s2t to automatically
    replace parts of the transcript with phrases of your choosing. More details at:
    https://cloud.google.com/speech-to-text/v2/docs/reference/rpc/google.cloud.speech.v2#transcriptnormalization
    """
    max_alternatives: builtins.int
    """Optional. Maximum number of recognition hypotheses to be returned, may be returned fewer than max_alternatives.
    Valid values are 0-30. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
    """
    def __init__(
        self,
        *,
        enable_automatic_punctuation: builtins.bool | None = ...,
        enable_word_time_offsets: builtins.bool | None = ...,
        enable_word_confidence: builtins.bool | None = ...,
        transcript_normalization: builtins.bool | None = ...,
        max_alternatives: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_enable_automatic_punctuation", b"_enable_automatic_punctuation", "_enable_word_confidence", b"_enable_word_confidence", "_enable_word_time_offsets", b"_enable_word_time_offsets", "_max_alternatives", b"_max_alternatives", "_transcript_normalization", b"_transcript_normalization", "enable_automatic_punctuation", b"enable_automatic_punctuation", "enable_word_confidence", b"enable_word_confidence", "enable_word_time_offsets", b"enable_word_time_offsets", "max_alternatives", b"max_alternatives", "transcript_normalization", b"transcript_normalization"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_enable_automatic_punctuation", b"_enable_automatic_punctuation", "_enable_word_confidence", b"_enable_word_confidence", "_enable_word_time_offsets", b"_enable_word_time_offsets", "_max_alternatives", b"_max_alternatives", "_transcript_normalization", b"_transcript_normalization", "enable_automatic_punctuation", b"enable_automatic_punctuation", "enable_word_confidence", b"enable_word_confidence", "enable_word_time_offsets", b"enable_word_time_offsets", "max_alternatives", b"max_alternatives", "transcript_normalization", b"transcript_normalization"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enable_automatic_punctuation", b"_enable_automatic_punctuation"]) -> typing.Literal["enable_automatic_punctuation"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enable_word_confidence", b"_enable_word_confidence"]) -> typing.Literal["enable_word_confidence"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_enable_word_time_offsets", b"_enable_word_time_offsets"]) -> typing.Literal["enable_word_time_offsets"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_alternatives", b"_max_alternatives"]) -> typing.Literal["max_alternatives"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_transcript_normalization", b"_transcript_normalization"]) -> typing.Literal["transcript_normalization"] | None: ...

global___S2tCloudProviderConfigGoogle = S2tCloudProviderConfigGoogle

@typing.final
class S2tCloudProviderConfigMicrosoft(google.protobuf.message.Message):
    """Configuration details specific to the Microsoft Azure speech-to-text provider."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    USE_FAST_TRANSCRIPTION_API_FIELD_NUMBER: builtins.int
    USE_DETAILED_OUTPUT_FORMAT_FIELD_NUMBER: builtins.int
    use_fast_transcription_api: builtins.bool
    """Optional. Enables or disables the Microsoft Azure fast transcription API. It is faster than SDK but is in
    preview version.
    More details at: https://learn.microsoft.com/en-us/azure/ai-services/speech-service/fast-transcription-create
    """
    use_detailed_output_format: builtins.bool
    """Optional. Enables or disables the `detailed` format for the result of Microsoft Azure s2t service
    to add timestamps and confidences to the resulted transcript.
    """
    def __init__(
        self,
        *,
        use_fast_transcription_api: builtins.bool | None = ...,
        use_detailed_output_format: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_use_detailed_output_format", b"_use_detailed_output_format", "_use_fast_transcription_api", b"_use_fast_transcription_api", "use_detailed_output_format", b"use_detailed_output_format", "use_fast_transcription_api", b"use_fast_transcription_api"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_use_detailed_output_format", b"_use_detailed_output_format", "_use_fast_transcription_api", b"_use_fast_transcription_api", "use_detailed_output_format", b"use_detailed_output_format", "use_fast_transcription_api", b"use_fast_transcription_api"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_use_detailed_output_format", b"_use_detailed_output_format"]) -> typing.Literal["use_detailed_output_format"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_use_fast_transcription_api", b"_use_fast_transcription_api"]) -> typing.Literal["use_fast_transcription_api"] | None: ...

global___S2tCloudProviderConfigMicrosoft = S2tCloudProviderConfigMicrosoft

@typing.final
class TranscriptionReturnOptions(google.protobuf.message.Message):
    """Configuration of the return values of a transcribe request"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RETURN_START_OF_SPEECH_FIELD_NUMBER: builtins.int
    RETURN_AUDIO_FIELD_NUMBER: builtins.int
    RETURN_CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_TRANSCRIPTIONS_NR_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_WORDS_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_WORDS_NR_FIELD_NUMBER: builtins.int
    RETURN_WORD_TIMING_FIELD_NUMBER: builtins.int
    return_start_of_speech: builtins.bool
    """should server make response indicating that the beginning of the speech was detected"""
    return_audio: builtins.bool
    """should s2t server return audio bytes of transcribed utterance"""
    return_confidence_score: builtins.bool
    """Whether or not to return confidence scores"""
    return_alternative_transcriptions: builtins.bool
    """Whether or not to return alternative results from beam-search"""
    return_alternative_transcriptions_nr: builtins.int
    """Optional. Number of alternative transcriptions results from beam-search or greedy-search"""
    return_alternative_words: builtins.bool
    """Whether or not to return alternative results from beam-search"""
    return_alternative_words_nr: builtins.int
    """Optional. Number of alternative words to results"""
    return_word_timing: builtins.bool
    """Optional. Whether or not to return timestamps of start and end of the words. Only used in TranscribeFile."""
    def __init__(
        self,
        *,
        return_start_of_speech: builtins.bool = ...,
        return_audio: builtins.bool = ...,
        return_confidence_score: builtins.bool = ...,
        return_alternative_transcriptions: builtins.bool = ...,
        return_alternative_transcriptions_nr: builtins.int = ...,
        return_alternative_words: builtins.bool = ...,
        return_alternative_words_nr: builtins.int = ...,
        return_word_timing: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["return_alternative_transcriptions", b"return_alternative_transcriptions", "return_alternative_transcriptions_nr", b"return_alternative_transcriptions_nr", "return_alternative_words", b"return_alternative_words", "return_alternative_words_nr", b"return_alternative_words_nr", "return_audio", b"return_audio", "return_confidence_score", b"return_confidence_score", "return_start_of_speech", b"return_start_of_speech", "return_word_timing", b"return_word_timing"]) -> None: ...

global___TranscriptionReturnOptions = TranscriptionReturnOptions

@typing.final
class UtteranceDetectionOptions(google.protobuf.message.Message):
    """Configuration of the options to detect utterances"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIBE_NOT_FINAL_FIELD_NUMBER: builtins.int
    NEXT_CHUNK_TIMEOUT_FIELD_NUMBER: builtins.int
    TURN_DETECTION_FIELD_NUMBER: builtins.int
    transcribe_not_final: builtins.bool
    """Return also immediate transcription results"""
    next_chunk_timeout: builtins.float
    """if time between audio chunks exceeds next_chunk_timeout, stream will be stopped"""
    @property
    def turn_detection(self) -> global___TurnDetectionOptions:
        """The turn detection options"""

    def __init__(
        self,
        *,
        transcribe_not_final: builtins.bool = ...,
        next_chunk_timeout: builtins.float = ...,
        turn_detection: global___TurnDetectionOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["oneof_transcribe_not_final", b"oneof_transcribe_not_final", "oneof_turn_detection", b"oneof_turn_detection", "transcribe_not_final", b"transcribe_not_final", "turn_detection", b"turn_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["next_chunk_timeout", b"next_chunk_timeout", "oneof_transcribe_not_final", b"oneof_transcribe_not_final", "oneof_turn_detection", b"oneof_turn_detection", "transcribe_not_final", b"transcribe_not_final", "turn_detection", b"turn_detection"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_transcribe_not_final", b"oneof_transcribe_not_final"]) -> typing.Literal["transcribe_not_final"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["oneof_turn_detection", b"oneof_turn_detection"]) -> typing.Literal["turn_detection"] | None: ...

global___UtteranceDetectionOptions = UtteranceDetectionOptions

@typing.final
class PostProcessingOptions(google.protobuf.message.Message):
    """Configuration of the post-processing options"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SPELLING_CORRECTION_FIELD_NUMBER: builtins.int
    NORMALIZE_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    LLM_POST_PROCESSING_FIELD_NUMBER: builtins.int
    spelling_correction: builtins.bool
    """Whether to use spelling correction"""
    normalize: builtins.bool
    """Whether to disable normalization"""
    llm_post_processing: builtins.bool
    """Whether to disable LLM post-processing"""
    @property
    def config(self) -> global___PostProcessing:
        """Post-processing configuration specifying the active post-processors in the pipeline, as well as their individual
        configuration. If not set, all values are replaced by the ones in current pipeline.
        """

    def __init__(
        self,
        *,
        spelling_correction: builtins.bool = ...,
        normalize: builtins.bool = ...,
        config: global___PostProcessing | None = ...,
        llm_post_processing: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["config", b"config", "llm_post_processing", b"llm_post_processing", "normalize", b"normalize", "spelling_correction", b"spelling_correction"]) -> None: ...

global___PostProcessingOptions = PostProcessingOptions

@typing.final
class Transcription(google.protobuf.message.Message):
    """/////////////////////////
     TRANSCRIPTION TYPE  //
    /////////////////////////

    The transcription message
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIPTION_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    ALTERNATIVES_FIELD_NUMBER: builtins.int
    transcription: builtins.str
    """The transcribed text"""
    confidence_score: builtins.float
    """The corresponding confidence score. The confidence estimate between 0.0 and 1.0. A higher number
    indicates an estimated greater likelihood that the recognized words are correct.
    """
    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordDetail]:
        """List of the words of transcription with their confidence scores and probable alternatives"""

    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TranscriptionAlternative]:
        """List of alternative transcriptions, confidence scores, words timings and alternative words"""

    def __init__(
        self,
        *,
        transcription: builtins.str = ...,
        confidence_score: builtins.float = ...,
        words: collections.abc.Iterable[global___WordDetail] | None = ...,
        alternatives: collections.abc.Iterable[global___TranscriptionAlternative] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["alternatives", b"alternatives", "confidence_score", b"confidence_score", "transcription", b"transcription", "words", b"words"]) -> None: ...

global___Transcription = Transcription

@typing.final
class TranscriptionAlternative(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIPT_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    transcript: builtins.str
    """The alternative transcribed text"""
    confidence: builtins.float
    """The corresponding confidence score to the alternative transcript."""
    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordDetail]:
        """A list of word-specific information for each recognized word, including word timings, confidence score of
        the word and alternative words.
        """

    def __init__(
        self,
        *,
        transcript: builtins.str = ...,
        confidence: builtins.float = ...,
        words: collections.abc.Iterable[global___WordDetail] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "transcript", b"transcript", "words", b"words"]) -> None: ...

global___TranscriptionAlternative = TranscriptionAlternative

@typing.final
class WordDetail(google.protobuf.message.Message):
    """WordDetail provides word-specific information for recognized words."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORD_ALTERNATIVES_FIELD_NUMBER: builtins.int
    start_time: builtins.float
    """The start time of the spoken word relative to the beginning of the audio.
    The accuracy of the time offset can vary, and this is an experimental feature.
    """
    end_time: builtins.float
    """The end time of the spoken word relative to the beginning of the audio.
    The accuracy of the time offset can vary, and this is an experimental feature.
    """
    word: builtins.str
    """The recognized word corresponding to this set of information."""
    confidence: builtins.float
    """The corresponding confidence score to the word."""
    @property
    def word_alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordAlternative]:
        """List of alternative words and confidence scores of each."""

    def __init__(
        self,
        *,
        start_time: builtins.float = ...,
        end_time: builtins.float = ...,
        word: builtins.str = ...,
        confidence: builtins.float = ...,
        word_alternatives: collections.abc.Iterable[global___WordAlternative] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "end_time", b"end_time", "start_time", b"start_time", "word", b"word", "word_alternatives", b"word_alternatives"]) -> None: ...

global___WordDetail = WordDetail

@typing.final
class WordAlternative(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    word: builtins.str
    """The recognized word corresponding to this set of information."""
    confidence: builtins.float
    """The corresponding confidence score to the alternative word."""
    def __init__(
        self,
        *,
        word: builtins.str = ...,
        confidence: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["confidence", b"confidence", "word", b"word"]) -> None: ...

global___WordAlternative = WordAlternative

@typing.final
class TranscribeStreamRequest(google.protobuf.message.Message):
    """/////////////////////
    TRANSCRIBE STREAM //
    /////////////////////

    Request to transcribe an audio stream
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUDIO_CHUNK_FIELD_NUMBER: builtins.int
    END_OF_STREAM_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    MUTE_AUDIO_FIELD_NUMBER: builtins.int
    audio_chunk: builtins.bytes
    """wav file to transcribe"""
    end_of_stream: builtins.bool
    """if it's the final chunk of the stream"""
    mute_audio: builtins.bool
    """Whether or not to mute the audio signal. Defaults to false."""
    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration to override the default configuration"""

    def __init__(
        self,
        *,
        audio_chunk: builtins.bytes = ...,
        end_of_stream: builtins.bool = ...,
        config: global___TranscribeRequestConfig | None = ...,
        mute_audio: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio_chunk", b"audio_chunk", "config", b"config", "end_of_stream", b"end_of_stream", "mute_audio", b"mute_audio"]) -> None: ...

global___TranscribeStreamRequest = TranscribeStreamRequest

@typing.final
class TranscribeStreamResponse(google.protobuf.message.Message):
    """The response message of a stream transcription"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    FINAL_FIELD_NUMBER: builtins.int
    RETURN_AUDIO_FIELD_NUMBER: builtins.int
    AUDIO_FIELD_NUMBER: builtins.int
    UTTERANCE_START_FIELD_NUMBER: builtins.int
    AUDIO_UUID_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    time: builtins.float
    """The time the transcription took"""
    final: builtins.bool
    """Whether or not this transcription is final (transcribed texts might change if transcription is
    started before the end of an utterance).
    """
    return_audio: builtins.bool
    """is audio bytes of the utterance in response"""
    audio: builtins.bytes
    """audio bytes of the transcribed utterance"""
    utterance_start: builtins.bool
    """is it a start of the utterance"""
    audio_uuid: builtins.str
    """id of the transcribed audio file"""
    @property
    def transcriptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Transcription]:
        """List of transcriptions with confidence level"""

    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration for the transcription"""

    def __init__(
        self,
        *,
        transcriptions: collections.abc.Iterable[global___Transcription] | None = ...,
        time: builtins.float = ...,
        final: builtins.bool = ...,
        return_audio: builtins.bool = ...,
        audio: builtins.bytes = ...,
        utterance_start: builtins.bool = ...,
        audio_uuid: builtins.str = ...,
        config: global___TranscribeRequestConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config", b"config", "oneof_config", b"oneof_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio", b"audio", "audio_uuid", b"audio_uuid", "config", b"config", "final", b"final", "oneof_config", b"oneof_config", "return_audio", b"return_audio", "time", b"time", "transcriptions", b"transcriptions", "utterance_start", b"utterance_start"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["oneof_config", b"oneof_config"]) -> typing.Literal["config"] | None: ...

global___TranscribeStreamResponse = TranscribeStreamResponse

@typing.final
class TranscribeFileRequest(google.protobuf.message.Message):
    """///////////////////
    TRANSCRIBE FILE //
    ///////////////////

    A request to transcribe an audio file
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUDIO_FILE_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    audio_file: builtins.bytes
    """wav file to transcribe"""
    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration to override the default configuration"""

    def __init__(
        self,
        *,
        audio_file: builtins.bytes = ...,
        config: global___TranscribeRequestConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["audio_file", b"audio_file", "config", b"config"]) -> None: ...

global___TranscribeFileRequest = TranscribeFileRequest

@typing.final
class TranscribeFileResponse(google.protobuf.message.Message):
    """The response message for a transcribe file request"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    AUDIO_UUID_FIELD_NUMBER: builtins.int
    time: builtins.float
    """The time the transcription took"""
    audio_uuid: builtins.str
    """id of the transcribed audio file"""
    @property
    def transcriptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Transcription]:
        """List of transcriptions with confidence level"""

    def __init__(
        self,
        *,
        transcriptions: collections.abc.Iterable[global___Transcription] | None = ...,
        time: builtins.float = ...,
        audio_uuid: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["audio_uuid", b"audio_uuid", "time", b"time", "transcriptions", b"transcriptions"]) -> None: ...

global___TranscribeFileResponse = TranscribeFileResponse

@typing.final
class S2tPipelineId(google.protobuf.message.Message):
    """////////////////////
    GET S2T PIPELINE //
    ////////////////////

    The pipeline id for a specific pipeline configuration
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """id of the model that will generate audio"""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___S2tPipelineId = S2tPipelineId

@typing.final
class ListS2tPipelinesRequest(google.protobuf.message.Message):
    """//////////////////////
    LIST S2T PIPELINES //
    //////////////////////

    Request to list all speech-to-text pipelines. Optionally also filter criteria can be set
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGES_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    DOMAINS_FIELD_NUMBER: builtins.int
    REGISTERED_ONLY_FIELD_NUMBER: builtins.int
    registered_only: builtins.bool
    """If true, return only registered pipelines.
    Default false: return registered and persisted (from config files) configs.
    """
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for languages"""

    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for pipeline owners"""

    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for domains"""

    def __init__(
        self,
        *,
        languages: collections.abc.Iterable[builtins.str] | None = ...,
        pipeline_owners: collections.abc.Iterable[builtins.str] | None = ...,
        domains: collections.abc.Iterable[builtins.str] | None = ...,
        registered_only: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["domains", b"domains", "languages", b"languages", "pipeline_owners", b"pipeline_owners", "registered_only", b"registered_only"]) -> None: ...

global___ListS2tPipelinesRequest = ListS2tPipelinesRequest

@typing.final
class ListS2tPipelinesResponse(google.protobuf.message.Message):
    """ListS2tPipelinesResponse is used to return a list of all speech-to-text pipelines."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PIPELINE_CONFIGS_FIELD_NUMBER: builtins.int
    @property
    def pipeline_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Speech2TextConfig]:
        """A list of Speech2TextConfig message instances containing the configuration of each pipeline.
        Example: [{id: "pipeline_1", description: {language: "en"}, active: true, ...}, {id: "pipeline_2",
        description: {language: "fr"}, active: true, ...}]
        """

    def __init__(
        self,
        *,
        pipeline_configs: collections.abc.Iterable[global___Speech2TextConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["pipeline_configs", b"pipeline_configs"]) -> None: ...

global___ListS2tPipelinesResponse = ListS2tPipelinesResponse

@typing.final
class ListS2tLanguagesRequest(google.protobuf.message.Message):
    """//////////////////////
    LIST S2T LANGUAGES //
    //////////////////////

    ListS2tLanguagesRequest is used to request a list of available languages. Optionally, filters can be set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DOMAINS_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for domains.  Example: ["medical", "finance"]"""

    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for pipeline owners.
        Example: ["ondewo", "partner_company"]
        """

    def __init__(
        self,
        *,
        domains: collections.abc.Iterable[builtins.str] | None = ...,
        pipeline_owners: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["domains", b"domains", "pipeline_owners", b"pipeline_owners"]) -> None: ...

global___ListS2tLanguagesRequest = ListS2tLanguagesRequest

@typing.final
class ListS2tLanguagesResponse(google.protobuf.message.Message):
    """Response message to list available languages"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGES_FIELD_NUMBER: builtins.int
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """available languages"""

    def __init__(
        self,
        *,
        languages: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["languages", b"languages"]) -> None: ...

global___ListS2tLanguagesResponse = ListS2tLanguagesResponse

@typing.final
class ListS2tDomainsRequest(google.protobuf.message.Message):
    """////////////////////
    LIST S2T DOMAINS //
    ////////////////////

    Request message to list available domains. Optionally also filters can be set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGES_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for languages"""

    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Filter for pipeline owner"""

    def __init__(
        self,
        *,
        languages: collections.abc.Iterable[builtins.str] | None = ...,
        pipeline_owners: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["languages", b"languages", "pipeline_owners", b"pipeline_owners"]) -> None: ...

global___ListS2tDomainsRequest = ListS2tDomainsRequest

@typing.final
class ListS2tDomainsResponse(google.protobuf.message.Message):
    """Response message to list available domains"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DOMAINS_FIELD_NUMBER: builtins.int
    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """domains available. Example: ["medical", "finance"]"""

    def __init__(
        self,
        *,
        domains: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["domains", b"domains"]) -> None: ...

global___ListS2tDomainsResponse = ListS2tDomainsResponse

@typing.final
class S2tGetServiceInfoResponse(google.protobuf.message.Message):
    """////////////////////
    GET SERVICE INFO //
    ////////////////////

    S2tGetServiceInfoResponse is used to return version information about the speech-to-text service.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_FIELD_NUMBER: builtins.int
    version: builtins.str
    """Version number based on semantic versioning, e.g. "4.2.0"."""
    def __init__(
        self,
        *,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["version", b"version"]) -> None: ...

global___S2tGetServiceInfoResponse = S2tGetServiceInfoResponse

@typing.final
class Speech2TextConfig(google.protobuf.message.Message):
    """/////////////////////////////////
    SPEECH-2-TEXT PIPELINE CONFIG //
    /////////////////////////////////

    Speech2TextConfig is a configuration message for the speech-to-text pipeline
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ACTIVE_FIELD_NUMBER: builtins.int
    INFERENCE_FIELD_NUMBER: builtins.int
    STREAMING_SERVER_FIELD_NUMBER: builtins.int
    VOICE_ACTIVITY_DETECTION_FIELD_NUMBER: builtins.int
    POST_PROCESSING_FIELD_NUMBER: builtins.int
    LOGGING_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Unique identifier for the configuration."""
    active: builtins.bool
    """Indicates if the configuration is active."""
    @property
    def description(self) -> global___S2tDescription:
        """Description of the speech-to-text system."""

    @property
    def inference(self) -> global___S2tInference:
        """Configuration for inference models."""

    @property
    def streaming_server(self) -> global___StreamingServer:
        """Configuration for the streaming server."""

    @property
    def voice_activity_detection(self) -> global___VoiceActivityDetection:
        """Configuration for voice activity detection."""

    @property
    def post_processing(self) -> global___PostProcessing:
        """Configuration for post-processing."""

    @property
    def logging(self) -> global___Logging:
        """Configuration for logging."""

    def __init__(
        self,
        *,
        id: builtins.str = ...,
        description: global___S2tDescription | None = ...,
        active: builtins.bool = ...,
        inference: global___S2tInference | None = ...,
        streaming_server: global___StreamingServer | None = ...,
        voice_activity_detection: global___VoiceActivityDetection | None = ...,
        post_processing: global___PostProcessing | None = ...,
        logging: global___Logging | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["description", b"description", "inference", b"inference", "logging", b"logging", "post_processing", b"post_processing", "streaming_server", b"streaming_server", "voice_activity_detection", b"voice_activity_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["active", b"active", "description", b"description", "id", b"id", "inference", b"inference", "logging", b"logging", "post_processing", b"post_processing", "streaming_server", b"streaming_server", "voice_activity_detection", b"voice_activity_detection"]) -> None: ...

global___Speech2TextConfig = Speech2TextConfig

@typing.final
class S2tDescription(google.protobuf.message.Message):
    """S2tDescription contains descriptive information about the speech-to-text pipeline."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    PIPELINE_OWNER_FIELD_NUMBER: builtins.int
    DOMAIN_FIELD_NUMBER: builtins.int
    COMMENTS_FIELD_NUMBER: builtins.int
    language: builtins.str
    """Language of the speech-to-text system."""
    pipeline_owner: builtins.str
    """Owner of the pipeline."""
    domain: builtins.str
    """Domain of the speech-to-text system."""
    comments: builtins.str
    """Comments about the system."""
    def __init__(
        self,
        *,
        language: builtins.str = ...,
        pipeline_owner: builtins.str = ...,
        domain: builtins.str = ...,
        comments: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comments", b"comments", "domain", b"domain", "language", b"language", "pipeline_owner", b"pipeline_owner"]) -> None: ...

global___S2tDescription = S2tDescription

@typing.final
class S2tInference(google.protobuf.message.Message):
    """S2tInference contains information about inference models used in the speech-to-text pipeline."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACOUSTIC_MODELS_FIELD_NUMBER: builtins.int
    LANGUAGE_MODELS_FIELD_NUMBER: builtins.int
    INFERENCE_BACKEND_FIELD_NUMBER: builtins.int
    inference_backend: global___InferenceBackend.ValueType
    """Configuration for the inference backend."""
    @property
    def acoustic_models(self) -> global___AcousticModels:
        """Configuration for the acoustic models."""

    @property
    def language_models(self) -> global___LanguageModels:
        """Configuration for the language models."""

    def __init__(
        self,
        *,
        acoustic_models: global___AcousticModels | None = ...,
        language_models: global___LanguageModels | None = ...,
        inference_backend: global___InferenceBackend.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["acoustic_models", b"acoustic_models", "language_models", b"language_models"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["acoustic_models", b"acoustic_models", "inference_backend", b"inference_backend", "language_models", b"language_models"]) -> None: ...

global___S2tInference = S2tInference

@typing.final
class AcousticModels(google.protobuf.message.Message):
    """AcousticModels contains information about different types of acoustic models."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    WAV2VEC_FIELD_NUMBER: builtins.int
    WAV2VEC_TRITON_FIELD_NUMBER: builtins.int
    WHISPER_FIELD_NUMBER: builtins.int
    WHISPER_TRITON_FIELD_NUMBER: builtins.int
    S2T_CLOUD_SERVICE_AMAZON_FIELD_NUMBER: builtins.int
    S2T_CLOUD_SERVICE_DEEPGRAM_FIELD_NUMBER: builtins.int
    S2T_CLOUD_SERVICE_GOOGLE_FIELD_NUMBER: builtins.int
    S2T_CLOUD_SERVICE_MICROSOFT_FIELD_NUMBER: builtins.int
    type: builtins.str
    """Type of the acoustic model."""
    @property
    def wav2vec(self) -> global___Wav2Vec:
        """Configuration for the Wav2Vec model."""

    @property
    def wav2vec_triton(self) -> global___Wav2VecTriton:
        """Configuration for the Wav2Vec model using Triton."""

    @property
    def whisper(self) -> global___Whisper:
        """Configuration for the Whisper model."""

    @property
    def whisper_triton(self) -> global___WhisperTriton:
        """Configuration for the Whisper model using Triton."""

    @property
    def s2t_cloud_service_amazon(self) -> global___S2tCloudServiceAmazon:
        """Amazon web service cloud service inference settings."""

    @property
    def s2t_cloud_service_deepgram(self) -> global___S2tCloudServiceDeepgram:
        """Deepgram cloud service inference settings."""

    @property
    def s2t_cloud_service_google(self) -> global___S2tCloudServiceGoogle:
        """Google cloud service inference settings."""

    @property
    def s2t_cloud_service_microsoft(self) -> global___S2tCloudServiceMicrosoft:
        """Microsoft Azure cloud service inference settings."""

    def __init__(
        self,
        *,
        type: builtins.str = ...,
        wav2vec: global___Wav2Vec | None = ...,
        wav2vec_triton: global___Wav2VecTriton | None = ...,
        whisper: global___Whisper | None = ...,
        whisper_triton: global___WhisperTriton | None = ...,
        s2t_cloud_service_amazon: global___S2tCloudServiceAmazon | None = ...,
        s2t_cloud_service_deepgram: global___S2tCloudServiceDeepgram | None = ...,
        s2t_cloud_service_google: global___S2tCloudServiceGoogle | None = ...,
        s2t_cloud_service_microsoft: global___S2tCloudServiceMicrosoft | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["s2t_cloud_service_amazon", b"s2t_cloud_service_amazon", "s2t_cloud_service_deepgram", b"s2t_cloud_service_deepgram", "s2t_cloud_service_google", b"s2t_cloud_service_google", "s2t_cloud_service_microsoft", b"s2t_cloud_service_microsoft", "wav2vec", b"wav2vec", "wav2vec_triton", b"wav2vec_triton", "whisper", b"whisper", "whisper_triton", b"whisper_triton"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["s2t_cloud_service_amazon", b"s2t_cloud_service_amazon", "s2t_cloud_service_deepgram", b"s2t_cloud_service_deepgram", "s2t_cloud_service_google", b"s2t_cloud_service_google", "s2t_cloud_service_microsoft", b"s2t_cloud_service_microsoft", "type", b"type", "wav2vec", b"wav2vec", "wav2vec_triton", b"wav2vec_triton", "whisper", b"whisper", "whisper_triton", b"whisper_triton"]) -> None: ...

global___AcousticModels = AcousticModels

@typing.final
class S2tCloudServiceAmazon(google.protobuf.message.Message):
    """S2tCloudServiceAmazon message contains settings for the Amazon web service Cloud service inference."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    STREAMING_AVAILABLE_FIELD_NUMBER: builtins.int
    ENABLE_PARTIAL_RESULTS_STABILIZATION_FIELD_NUMBER: builtins.int
    PARTIAL_RESULTS_STABILITY_FIELD_NUMBER: builtins.int
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    VOCABULARY_NAME_FIELD_NUMBER: builtins.int
    language: builtins.str
    """Language of the audio to transcribe by Amazon web service s2t cloud service. It should be 4-letter language code
    (BCP-47) e.g. 'en-US' or 'de-DE'.
    """
    streaming_available: builtins.bool
    """Specifies if streaming mode of Amazon web service speech to text is available for the selected language,
    otherwise batch mode transcription is used. See the list of languages and available transcription modes at:
    https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html
    """
    enable_partial_results_stabilization: builtins.bool
    """Enables or disables partial_results_stabilization feature. More details at:
    https://docs.aws.amazon.com/transcribe/latest/dg/streaming-partial-results.html#streaming-partial-result-stabilization
    """
    partial_results_stability: builtins.str
    """You can use this field to set the stability level of the transcription results.
    A higher stability level means that the transcription results are less likely to change.
    Higher stability levels can come with lower overall transcription accuracy.
    Defaults to "high" if not set explicitly.
    """
    language_model_name: builtins.str
    """The name of your customize language model you want to use.
    More details at: https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html
    """
    vocabulary_name: builtins.str
    """The name of your customize language model you want to use.
    More details at: https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html
    """
    def __init__(
        self,
        *,
        language: builtins.str = ...,
        streaming_available: builtins.bool = ...,
        enable_partial_results_stabilization: builtins.bool = ...,
        partial_results_stability: builtins.str = ...,
        language_model_name: builtins.str = ...,
        vocabulary_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["enable_partial_results_stabilization", b"enable_partial_results_stabilization", "language", b"language", "language_model_name", b"language_model_name", "partial_results_stability", b"partial_results_stability", "streaming_available", b"streaming_available", "vocabulary_name", b"vocabulary_name"]) -> None: ...

global___S2tCloudServiceAmazon = S2tCloudServiceAmazon

@typing.final
class S2tCloudServiceDeepgram(google.protobuf.message.Message):
    """S2tCloudServiceDeepgram message contains settings for the Deepgram Cloud service inference."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    PUNCTUATE_FIELD_NUMBER: builtins.int
    SMART_FORMAT_FIELD_NUMBER: builtins.int
    NUMERALS_FIELD_NUMBER: builtins.int
    MEASUREMENTS_FIELD_NUMBER: builtins.int
    DICTATION_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """Model name from one of the speech-to-text models provided by Deepgram for the desired use-case.
    Provided model names and details at: https://developers.deepgram.com/docs/model
    """
    language: builtins.str
    """Language of the audio to transcribe by Deepgram s2t cloud service. It should be 4-letter language code
    (BCP-47) e.g. 'en-US' or 'de-DE'.
    """
    punctuate: builtins.bool
    """Enables or disables punctuate feature of Deepgram to add punctuations to the resulted transcript.
    More details at: https://developers.deepgram.com/docs/punctuation
    """
    smart_format: builtins.bool
    """Enables or disables smart_format feature of Deepgram transcription result to improve readability.
    More details at: https://developers.deepgram.com/docs/smart-format
    """
    numerals: builtins.bool
    """Enables or disables numerals feature of Deepgram to convert numbers to numeric form in the resulted transcript.
    More details at: https://developers.deepgram.com/docs/numerals
    """
    measurements: builtins.bool
    """Enables or disables measurements feature of Deepgram to convert measurement units (i.e. Kilogram)
    to abbreviated form (i.e. Kg) in the resulted transcript.
    More details at: https://developers.deepgram.com/docs/measurements
    """
    dictation: builtins.bool
    """Enables or disables dictation feature of Deepgram to convert spoken dictation commands into their corresponding
    punctuation marks. More details at: https://developers.deepgram.com/docs/dictation
    """
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        language: builtins.str = ...,
        punctuate: builtins.bool = ...,
        smart_format: builtins.bool = ...,
        numerals: builtins.bool = ...,
        measurements: builtins.bool = ...,
        dictation: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dictation", b"dictation", "language", b"language", "measurements", b"measurements", "model_name", b"model_name", "numerals", b"numerals", "punctuate", b"punctuate", "smart_format", b"smart_format"]) -> None: ...

global___S2tCloudServiceDeepgram = S2tCloudServiceDeepgram

@typing.final
class S2tCloudServiceGoogle(google.protobuf.message.Message):
    """S2tCloudServiceGoogle message contains settings for the Google Cloud service inference."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    ENABLE_AUTOMATIC_PUNCTUATION_FIELD_NUMBER: builtins.int
    ENABLE_WORD_TIME_OFFSETS_FIELD_NUMBER: builtins.int
    ENABLE_WORD_CONFIDENCE_FIELD_NUMBER: builtins.int
    TRANSCRIPT_NORMALIZATION_FIELD_NUMBER: builtins.int
    MAX_ALTERNATIVES_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """Model name from one of the speech-to-text models provided by Google for the desired use-case.
    Provided model names and details at: https://cloud.google.com/speech-to-text/docs/transcription-model
    """
    language: builtins.str
    """Language of the audio to transcribe by Google s2t cloud service. It should be 4-letter language code
    (BCP-47) e.g. 'en-US' or 'de-DE'.
    """
    enable_automatic_punctuation: builtins.bool
    """Enables or disables automatic_punctuation feature of Google s2t to add punctuations to the resulted transcript.
    More details at: https://cloud.google.com/speech-to-text/docs/automatic-punctuation
    """
    enable_word_time_offsets: builtins.bool
    """Enables or disables word_time_offsets feature of Google s2t to add word-level timestamps (time-offsets)
    to the resulted transcript. More details at: https://cloud.google.com/speech-to-text/docs/async-time-offsets
    """
    enable_word_confidence: builtins.bool
    """Enables or disables word_confidence feature of Google s2t to add word-level confidence scores
    to the resulted transcript. More details at: https://cloud.google.com/speech-to-text/docs/word-confidence
    """
    transcript_normalization: builtins.bool
    """Enables or disables transcript_normalization feature of Google s2t to automatically
    replace parts of the transcript with phrases of your choosing. More details at:
    https://cloud.google.com/speech-to-text/v2/docs/reference/rpc/google.cloud.speech.v2#transcriptnormalization
    """
    max_alternatives: builtins.int
    """Maximum number of recognition hypotheses to be returned. The server may return fewer than max_alternatives.
    Valid values are 0-30. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
    """
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        language: builtins.str = ...,
        enable_automatic_punctuation: builtins.bool = ...,
        enable_word_time_offsets: builtins.bool = ...,
        enable_word_confidence: builtins.bool = ...,
        transcript_normalization: builtins.bool = ...,
        max_alternatives: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["enable_automatic_punctuation", b"enable_automatic_punctuation", "enable_word_confidence", b"enable_word_confidence", "enable_word_time_offsets", b"enable_word_time_offsets", "language", b"language", "max_alternatives", b"max_alternatives", "model_name", b"model_name", "transcript_normalization", b"transcript_normalization"]) -> None: ...

global___S2tCloudServiceGoogle = S2tCloudServiceGoogle

@typing.final
class S2tCloudServiceMicrosoft(google.protobuf.message.Message):
    """S2tCloudServiceMicrosoft message contains settings for the Microsoft Azure Cloud service inference."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    USE_FAST_TRANSCRIPTION_API_FIELD_NUMBER: builtins.int
    USE_DETAILED_OUTPUT_FORMAT_FIELD_NUMBER: builtins.int
    language: builtins.str
    """Language of the audio to transcribe by Microsoft Azure s2t cloud service. It should be 4-letter language code
    (BCP-47) e.g. 'en-US' or 'de-DE'.
    """
    use_fast_transcription_api: builtins.bool
    """Enables or disables the Microsoft Azure fast transcription API. It is faster than SDK but is in preview version.
    More details at: https://learn.microsoft.com/en-us/azure/ai-services/speech-service/fast-transcription-create
    """
    use_detailed_output_format: builtins.bool
    """Enables or disables the `detailed` format for the result of Microsoft Azure s2t service
    to add timestamps and confidences to the resulted transcript.
    """
    def __init__(
        self,
        *,
        language: builtins.str = ...,
        use_fast_transcription_api: builtins.bool = ...,
        use_detailed_output_format: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language", b"language", "use_detailed_output_format", b"use_detailed_output_format", "use_fast_transcription_api", b"use_fast_transcription_api"]) -> None: ...

global___S2tCloudServiceMicrosoft = S2tCloudServiceMicrosoft

@typing.final
class Whisper(google.protobuf.message.Message):
    """Whisper contains information about the Whisper model."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_PATH_FIELD_NUMBER: builtins.int
    USE_GPU_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    model_path: builtins.str
    """Path to the model."""
    use_gpu: builtins.bool
    """Indicates if GPU is used."""
    language: builtins.str
    """Default language of the model."""
    task: builtins.str
    """Default task of the model."""
    def __init__(
        self,
        *,
        model_path: builtins.str = ...,
        use_gpu: builtins.bool = ...,
        language: builtins.str = ...,
        task: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language", b"language", "model_path", b"model_path", "task", b"task", "use_gpu", b"use_gpu"]) -> None: ...

global___Whisper = Whisper

@typing.final
class WhisperTriton(google.protobuf.message.Message):
    """WhisperTriton contains information about the Whisper model using Triton."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROCESSOR_PATH_FIELD_NUMBER: builtins.int
    TRITON_MODEL_NAME_FIELD_NUMBER: builtins.int
    TRITON_MODEL_VERSION_FIELD_NUMBER: builtins.int
    CHECK_STATUS_TIMEOUT_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    processor_path: builtins.str
    """Path to the processor."""
    triton_model_name: builtins.str
    """Name of the Triton model."""
    triton_model_version: builtins.str
    """Version of the Triton model."""
    check_status_timeout: builtins.int
    """Timeout for checking model status."""
    language: builtins.str
    """Default language of the model."""
    task: builtins.str
    """Default task of the model. E.g., transcribe, translate, etc."""
    triton_server_host: builtins.str
    """Host name of triton inference server that serves the WhisperTriton model"""
    triton_server_port: builtins.int
    """Port number of triton inference server that serves the WhisperTriton model"""
    def __init__(
        self,
        *,
        processor_path: builtins.str = ...,
        triton_model_name: builtins.str = ...,
        triton_model_version: builtins.str = ...,
        check_status_timeout: builtins.int = ...,
        language: builtins.str = ...,
        task: builtins.str = ...,
        triton_server_host: builtins.str = ...,
        triton_server_port: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["check_status_timeout", b"check_status_timeout", "language", b"language", "processor_path", b"processor_path", "task", b"task", "triton_model_name", b"triton_model_name", "triton_model_version", b"triton_model_version", "triton_server_host", b"triton_server_host", "triton_server_port", b"triton_server_port"]) -> None: ...

global___WhisperTriton = WhisperTriton

@typing.final
class Wav2Vec(google.protobuf.message.Message):
    """Wav2Vec contains information about the Wav2Vec model."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_PATH_FIELD_NUMBER: builtins.int
    USE_GPU_FIELD_NUMBER: builtins.int
    model_path: builtins.str
    """Path to the model."""
    use_gpu: builtins.bool
    """Indicates if GPU is used."""
    def __init__(
        self,
        *,
        model_path: builtins.str = ...,
        use_gpu: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["model_path", b"model_path", "use_gpu", b"use_gpu"]) -> None: ...

global___Wav2Vec = Wav2Vec

@typing.final
class Wav2VecTriton(google.protobuf.message.Message):
    """Wav2VecTriton contains information about the Wav2Vec model using Triton."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROCESSOR_PATH_FIELD_NUMBER: builtins.int
    TRITON_MODEL_NAME_FIELD_NUMBER: builtins.int
    TRITON_MODEL_VERSION_FIELD_NUMBER: builtins.int
    CHECK_STATUS_TIMEOUT_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    processor_path: builtins.str
    """Path to the processor."""
    triton_model_name: builtins.str
    """Name of the Triton model."""
    triton_model_version: builtins.str
    """Version of the Triton model."""
    check_status_timeout: builtins.int
    """Timeout for checking model status."""
    triton_server_host: builtins.str
    """Host name of triton inference server that serves the Wav2VecTriton model"""
    triton_server_port: builtins.int
    """Port number of triton inference server that serves the Wav2VecTriton model"""
    def __init__(
        self,
        *,
        processor_path: builtins.str = ...,
        triton_model_name: builtins.str = ...,
        triton_model_version: builtins.str = ...,
        check_status_timeout: builtins.int = ...,
        triton_server_host: builtins.str = ...,
        triton_server_port: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["check_status_timeout", b"check_status_timeout", "processor_path", b"processor_path", "triton_model_name", b"triton_model_name", "triton_model_version", b"triton_model_version", "triton_server_host", b"triton_server_host", "triton_server_port", b"triton_server_port"]) -> None: ...

global___Wav2VecTriton = Wav2VecTriton

@typing.final
class PtFiles(google.protobuf.message.Message):
    """PtFiles contains information about PT files."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    STEP_FIELD_NUMBER: builtins.int
    path: builtins.str
    """Path to the PT files."""
    step: builtins.str
    """Step for the PT files."""
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        step: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "step", b"step"]) -> None: ...

global___PtFiles = PtFiles

@typing.final
class CkptFile(google.protobuf.message.Message):
    """CkptFile contains information about checkpoint files."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    path: builtins.str
    """Path to the checkpoint file."""
    def __init__(
        self,
        *,
        path: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["path", b"path"]) -> None: ...

global___CkptFile = CkptFile

@typing.final
class LanguageModels(google.protobuf.message.Message):
    """LanguageModels contains information about language models."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    BEAM_SIZE_FIELD_NUMBER: builtins.int
    DEFAULT_LM_FIELD_NUMBER: builtins.int
    BEAM_SEARCH_SCORER_ALPHA_FIELD_NUMBER: builtins.int
    BEAM_SEARCH_SCORER_BETA_FIELD_NUMBER: builtins.int
    path: builtins.str
    """Path to the directory of language models."""
    beam_size: builtins.int
    """Beam size for the search algorithm."""
    default_lm: builtins.str
    """Default language model to be selected if none is given."""
    beam_search_scorer_alpha: builtins.float
    """Weight for the language model scorer (alpha)."""
    beam_search_scorer_beta: builtins.float
    """Weight for the word insertion penalty (beta)."""
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        beam_size: builtins.int = ...,
        default_lm: builtins.str = ...,
        beam_search_scorer_alpha: builtins.float = ...,
        beam_search_scorer_beta: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["beam_search_scorer_alpha", b"beam_search_scorer_alpha", "beam_search_scorer_beta", b"beam_search_scorer_beta", "beam_size", b"beam_size", "default_lm", b"default_lm", "path", b"path"]) -> None: ...

global___LanguageModels = LanguageModels

@typing.final
class StreamingServer(google.protobuf.message.Message):
    """StreamingServer contains information about the streaming server."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOST_FIELD_NUMBER: builtins.int
    PORT_FIELD_NUMBER: builtins.int
    OUTPUT_STYLE_FIELD_NUMBER: builtins.int
    STREAMING_SPEECH_RECOGNITION_FIELD_NUMBER: builtins.int
    host: builtins.str
    """Hostname of the streaming server."""
    port: builtins.int
    """Port number of the streaming server."""
    output_style: builtins.str
    """Output style for the streaming server."""
    @property
    def streaming_speech_recognition(self) -> global___StreamingSpeechRecognition:
        """Configuration for streaming speech recognition."""

    def __init__(
        self,
        *,
        host: builtins.str = ...,
        port: builtins.int = ...,
        output_style: builtins.str = ...,
        streaming_speech_recognition: global___StreamingSpeechRecognition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["streaming_speech_recognition", b"streaming_speech_recognition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["host", b"host", "output_style", b"output_style", "port", b"port", "streaming_speech_recognition", b"streaming_speech_recognition"]) -> None: ...

global___StreamingServer = StreamingServer

@typing.final
class StreamingSpeechRecognition(google.protobuf.message.Message):
    """StreamingSpeechRecognition contains information about streaming speech recognition settings."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSCRIBE_NOT_FINAL_FIELD_NUMBER: builtins.int
    DECODING_METHOD_FIELD_NUMBER: builtins.int
    SAMPLING_RATE_FIELD_NUMBER: builtins.int
    MIN_AUDIO_CHUNK_SIZE_FIELD_NUMBER: builtins.int
    NEXT_CHUNK_TIMEOUT_FIELD_NUMBER: builtins.int
    TURN_DETECTION_FIELD_NUMBER: builtins.int
    transcribe_not_final: builtins.bool
    """Indicates whether to transcribe non-final results."""
    decoding_method: builtins.str
    """Decoding method for speech recognition."""
    sampling_rate: builtins.int
    """Sampling rate for audio input."""
    min_audio_chunk_size: builtins.int
    """Minimum audio chunk size for processing."""
    next_chunk_timeout: builtins.float
    """Timeout between audio chunks; if exceeded, the stream will be stopped."""
    @property
    def turn_detection(self) -> global___TurnDetectionOptions:
        """Configuration of the options to turn-detection in utterances"""

    def __init__(
        self,
        *,
        transcribe_not_final: builtins.bool = ...,
        decoding_method: builtins.str = ...,
        sampling_rate: builtins.int = ...,
        min_audio_chunk_size: builtins.int = ...,
        next_chunk_timeout: builtins.float = ...,
        turn_detection: global___TurnDetectionOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["turn_detection", b"turn_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["decoding_method", b"decoding_method", "min_audio_chunk_size", b"min_audio_chunk_size", "next_chunk_timeout", b"next_chunk_timeout", "sampling_rate", b"sampling_rate", "transcribe_not_final", b"transcribe_not_final", "turn_detection", b"turn_detection"]) -> None: ...

global___StreamingSpeechRecognition = StreamingSpeechRecognition

@typing.final
class TurnDetectionOptions(google.protobuf.message.Message):
    """Configuration of the options to turn-detection in utterances"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    FULL_UTTERANCE_DEPLOYMENT_FIELD_NUMBER: builtins.int
    LLM_HOST_FIELD_NUMBER: builtins.int
    LLM_PORT_FIELD_NUMBER: builtins.int
    LLM_REQUEST_TIMEOUT_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the turn-detection feature is active."""
    full_utterance_deployment: builtins.bool
    """Optional. Whether to transcribe the whole utterance when turn moment is detected. It is helpful to increase
    accuracy of transcriptions in cost of drop in speed. If deactivated, it just transcribe from last short silence
    period and concatenates the transcriptions of small audio chunks between tiny silences.
    """
    llm_host: builtins.str
    """Optional. Host name or IP address of the server that serves the LLM for turn-detection purpose."""
    llm_port: builtins.int
    """Optional. Port number of the server that serves the LLM for turn-detection purpose."""
    llm_request_timeout: builtins.float
    """Optional. Duration of request timeout in seconds to get result of request to LLM for turn-detection purpose.
    If the timeout occurs, result of turn-detection considered as False.
    """
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        full_utterance_deployment: builtins.bool | None = ...,
        llm_host: builtins.str | None = ...,
        llm_port: builtins.int | None = ...,
        llm_request_timeout: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_full_utterance_deployment", b"_full_utterance_deployment", "_llm_host", b"_llm_host", "_llm_port", b"_llm_port", "_llm_request_timeout", b"_llm_request_timeout", "active", b"active", "full_utterance_deployment", b"full_utterance_deployment", "llm_host", b"llm_host", "llm_port", b"llm_port", "llm_request_timeout", b"llm_request_timeout"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_full_utterance_deployment", b"_full_utterance_deployment", "_llm_host", b"_llm_host", "_llm_port", b"_llm_port", "_llm_request_timeout", b"_llm_request_timeout", "active", b"active", "full_utterance_deployment", b"full_utterance_deployment", "llm_host", b"llm_host", "llm_port", b"llm_port", "llm_request_timeout", b"llm_request_timeout"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_full_utterance_deployment", b"_full_utterance_deployment"]) -> typing.Literal["full_utterance_deployment"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_host", b"_llm_host"]) -> typing.Literal["llm_host"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_port", b"_llm_port"]) -> typing.Literal["llm_port"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_request_timeout", b"_llm_request_timeout"]) -> typing.Literal["llm_request_timeout"] | None: ...

global___TurnDetectionOptions = TurnDetectionOptions

@typing.final
class VoiceActivityDetection(google.protobuf.message.Message):
    """VoiceActivityDetection contains information about voice activity detection settings."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    SAMPLING_RATE_FIELD_NUMBER: builtins.int
    PYANNOTE_FIELD_NUMBER: builtins.int
    active: builtins.str
    """Indicates if voice activity detection is active."""
    sampling_rate: builtins.int
    """Sampling rate for voice activity detection."""
    @property
    def pyannote(self) -> global___Pyannote:
        """Configuration for the Pyannote model."""

    def __init__(
        self,
        *,
        active: builtins.str = ...,
        sampling_rate: builtins.int = ...,
        pyannote: global___Pyannote | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pyannote", b"pyannote"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["active", b"active", "pyannote", b"pyannote", "sampling_rate", b"sampling_rate"]) -> None: ...

global___VoiceActivityDetection = VoiceActivityDetection

@typing.final
class Pyannote(google.protobuf.message.Message):
    """Pyannote contains configuration for the Pyannote voice activity detection model.
    Library: [pyannote-audio](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    MIN_AUDIO_SIZE_FIELD_NUMBER: builtins.int
    MIN_DURATION_OFF_FIELD_NUMBER: builtins.int
    MIN_DURATION_ON_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """Full name of the Pyannote model."""
    min_audio_size: builtins.int
    """Minimum audio size for processing."""
    min_duration_off: builtins.float
    """Fill inactive regions shorter than that many seconds.
    Example [notebook](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """
    min_duration_on: builtins.float
    """Remove active regions shorter than that many seconds
    Example [notebook](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """
    triton_server_host: builtins.str
    """Host name of triton inference server that serves the Pyannote model"""
    triton_server_port: builtins.int
    """Port number of triton inference server that serves the Pyannote model"""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        min_audio_size: builtins.int = ...,
        min_duration_off: builtins.float = ...,
        min_duration_on: builtins.float = ...,
        triton_server_host: builtins.str = ...,
        triton_server_port: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["min_audio_size", b"min_audio_size", "min_duration_off", b"min_duration_off", "min_duration_on", b"min_duration_on", "model_name", b"model_name", "triton_server_host", b"triton_server_host", "triton_server_port", b"triton_server_port"]) -> None: ...

global___Pyannote = Pyannote

@typing.final
class PostProcessing(google.protobuf.message.Message):
    """PostProcessing contains the configuration for post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PIPELINE_FIELD_NUMBER: builtins.int
    POST_PROCESSORS_FIELD_NUMBER: builtins.int
    @property
    def pipeline(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of names of active post-processors."""

    @property
    def post_processors(self) -> global___PostProcessors:
        """Post-processor configurations."""

    def __init__(
        self,
        *,
        pipeline: collections.abc.Iterable[builtins.str] | None = ...,
        post_processors: global___PostProcessors | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["post_processors", b"post_processors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["pipeline", b"pipeline", "post_processors", b"post_processors"]) -> None: ...

global___PostProcessing = PostProcessing

@typing.final
class PostProcessors(google.protobuf.message.Message):
    """PostProcessors contains configurations for post-processors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SYM_SPELL_FIELD_NUMBER: builtins.int
    NORMALIZATION_FIELD_NUMBER: builtins.int
    LLM_POST_PROCESSING_FIELD_NUMBER: builtins.int
    @property
    def sym_spell(self) -> global___SymSpell:
        """Configuration of the SymSpell spelling correction."""

    @property
    def normalization(self) -> global___S2tNormalization:
        """Configuration of the normalization object."""

    @property
    def llm_post_processing(self) -> global___S2tLlmPostProcessing:
        """Configuration of the LLM post-processing."""

    def __init__(
        self,
        *,
        sym_spell: global___SymSpell | None = ...,
        normalization: global___S2tNormalization | None = ...,
        llm_post_processing: global___S2tLlmPostProcessing | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["llm_post_processing", b"llm_post_processing", "normalization", b"normalization", "sym_spell", b"sym_spell"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["llm_post_processing", b"llm_post_processing", "normalization", b"normalization", "sym_spell", b"sym_spell"]) -> None: ...

global___PostProcessors = PostProcessors

@typing.final
class SymSpell(google.protobuf.message.Message):
    """SymSpell contains configuration for the SymSpell spelling correction."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DICT_PATH_FIELD_NUMBER: builtins.int
    MAX_DICTIONARY_EDIT_DISTANCE_FIELD_NUMBER: builtins.int
    PREFIX_LENGTH_FIELD_NUMBER: builtins.int
    dict_path: builtins.str
    """Path to the dictionary used by symspell"""
    max_dictionary_edit_distance: builtins.int
    """The maximal edit-distance to consider for spelling correction (affects performance - bigger number
    takes longer to process!)
    """
    prefix_length: builtins.int
    """The length (number of characters) of the prefix to consider for filtering"""
    def __init__(
        self,
        *,
        dict_path: builtins.str = ...,
        max_dictionary_edit_distance: builtins.int = ...,
        prefix_length: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dict_path", b"dict_path", "max_dictionary_edit_distance", b"max_dictionary_edit_distance", "prefix_length", b"prefix_length"]) -> None: ...

global___SymSpell = SymSpell

@typing.final
class S2tNormalization(google.protobuf.message.Message):
    """S2tNormalization contains configuration for the speech-to-text normalization."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    PIPELINE_FIELD_NUMBER: builtins.int
    language: builtins.str
    """Language for normalization of transcriptions."""
    @property
    def pipeline(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of names of active normalizations."""

    def __init__(
        self,
        *,
        language: builtins.str = ...,
        pipeline: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language", b"language", "pipeline", b"pipeline"]) -> None: ...

global___S2tNormalization = S2tNormalization

@typing.final
class S2tLlmPostProcessing(google.protobuf.message.Message):
    """S2tLlmPostProcessing contains configuration for the speech-to-text postprocessing with LLM."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LLM_HOST_FIELD_NUMBER: builtins.int
    LLM_PORT_FIELD_NUMBER: builtins.int
    LLM_REQUEST_TIMEOUT_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_CASING_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_PUNCTUATION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_SPELLING_CORRECTION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_SEMANTIC_CORRECTION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_TRANSLATION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_INVERSE_NORMALIZATION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_NORMALIZATION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_SUMMARIZATION_OPTIONS_FIELD_NUMBER: builtins.int
    S2T_LLM_POST_PROCESSING_USER_PROMPT_OPTIONS_FIELD_NUMBER: builtins.int
    llm_host: builtins.str
    """Optional. Host name or IP address of the server that serves the LLM for post-processing purpose."""
    llm_port: builtins.int
    """Optional. Port number of the server that serves the LLM for post-processing purpose."""
    llm_request_timeout: builtins.float
    """Optional. Duration of request timeout in seconds to get result of request to LLM for post-processing purpose.
    If the timeout occurs, result of post-processing returns the input text with no change.
    """
    @property
    def s2t_llm_post_processing_casing_options(self) -> global___S2tLlmPostProcessingCasingOptions:
        """Optional. Configuration of the options to casing task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_punctuation_options(self) -> global___S2tLlmPostProcessingPunctuationOptions:
        """Optional. Configuration of the options to punctuation task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_spelling_correction_options(self) -> global___S2tLlmPostProcessingSpellCorrectionOptions:
        """Optional. Configuration of the options to spelling-correction task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_semantic_correction_options(self) -> global___S2tLlmPostProcessingSemanticCorrectionOptions:
        """Optional. Configuration of the options to semantic-correction task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_translation_options(self) -> global___S2tLlmPostProcessingTranslationOptions:
        """Optional. Configuration of the options to translation task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_inverse_normalization_options(self) -> global___S2tLlmPostProcessingInverseNormalizationOptions:
        """Optional. Configuration of the options to inverse-normalization task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_normalization_options(self) -> global___S2tLlmPostProcessingNormalizationOptions:
        """Optional. Configuration of the options to normalization task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_summarization_options(self) -> global___S2tLlmPostProcessingSummarizationOptions:
        """Optional. Configuration of the options to summarization task in LLM post-processing."""

    @property
    def s2t_llm_post_processing_user_prompt_options(self) -> global___S2tLlmPostProcessingUserPromptOptions:
        """Optional. Configuration of the options to user-prompt task in LLM post-processing."""

    def __init__(
        self,
        *,
        llm_host: builtins.str | None = ...,
        llm_port: builtins.int | None = ...,
        llm_request_timeout: builtins.float | None = ...,
        s2t_llm_post_processing_casing_options: global___S2tLlmPostProcessingCasingOptions | None = ...,
        s2t_llm_post_processing_punctuation_options: global___S2tLlmPostProcessingPunctuationOptions | None = ...,
        s2t_llm_post_processing_spelling_correction_options: global___S2tLlmPostProcessingSpellCorrectionOptions | None = ...,
        s2t_llm_post_processing_semantic_correction_options: global___S2tLlmPostProcessingSemanticCorrectionOptions | None = ...,
        s2t_llm_post_processing_translation_options: global___S2tLlmPostProcessingTranslationOptions | None = ...,
        s2t_llm_post_processing_inverse_normalization_options: global___S2tLlmPostProcessingInverseNormalizationOptions | None = ...,
        s2t_llm_post_processing_normalization_options: global___S2tLlmPostProcessingNormalizationOptions | None = ...,
        s2t_llm_post_processing_summarization_options: global___S2tLlmPostProcessingSummarizationOptions | None = ...,
        s2t_llm_post_processing_user_prompt_options: global___S2tLlmPostProcessingUserPromptOptions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_llm_host", b"_llm_host", "_llm_port", b"_llm_port", "_llm_request_timeout", b"_llm_request_timeout", "_s2t_llm_post_processing_casing_options", b"_s2t_llm_post_processing_casing_options", "_s2t_llm_post_processing_inverse_normalization_options", b"_s2t_llm_post_processing_inverse_normalization_options", "_s2t_llm_post_processing_normalization_options", b"_s2t_llm_post_processing_normalization_options", "_s2t_llm_post_processing_punctuation_options", b"_s2t_llm_post_processing_punctuation_options", "_s2t_llm_post_processing_semantic_correction_options", b"_s2t_llm_post_processing_semantic_correction_options", "_s2t_llm_post_processing_spelling_correction_options", b"_s2t_llm_post_processing_spelling_correction_options", "_s2t_llm_post_processing_summarization_options", b"_s2t_llm_post_processing_summarization_options", "_s2t_llm_post_processing_translation_options", b"_s2t_llm_post_processing_translation_options", "_s2t_llm_post_processing_user_prompt_options", b"_s2t_llm_post_processing_user_prompt_options", "llm_host", b"llm_host", "llm_port", b"llm_port", "llm_request_timeout", b"llm_request_timeout", "s2t_llm_post_processing_casing_options", b"s2t_llm_post_processing_casing_options", "s2t_llm_post_processing_inverse_normalization_options", b"s2t_llm_post_processing_inverse_normalization_options", "s2t_llm_post_processing_normalization_options", b"s2t_llm_post_processing_normalization_options", "s2t_llm_post_processing_punctuation_options", b"s2t_llm_post_processing_punctuation_options", "s2t_llm_post_processing_semantic_correction_options", b"s2t_llm_post_processing_semantic_correction_options", "s2t_llm_post_processing_spelling_correction_options", b"s2t_llm_post_processing_spelling_correction_options", "s2t_llm_post_processing_summarization_options", b"s2t_llm_post_processing_summarization_options", "s2t_llm_post_processing_translation_options", b"s2t_llm_post_processing_translation_options", "s2t_llm_post_processing_user_prompt_options", b"s2t_llm_post_processing_user_prompt_options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_llm_host", b"_llm_host", "_llm_port", b"_llm_port", "_llm_request_timeout", b"_llm_request_timeout", "_s2t_llm_post_processing_casing_options", b"_s2t_llm_post_processing_casing_options", "_s2t_llm_post_processing_inverse_normalization_options", b"_s2t_llm_post_processing_inverse_normalization_options", "_s2t_llm_post_processing_normalization_options", b"_s2t_llm_post_processing_normalization_options", "_s2t_llm_post_processing_punctuation_options", b"_s2t_llm_post_processing_punctuation_options", "_s2t_llm_post_processing_semantic_correction_options", b"_s2t_llm_post_processing_semantic_correction_options", "_s2t_llm_post_processing_spelling_correction_options", b"_s2t_llm_post_processing_spelling_correction_options", "_s2t_llm_post_processing_summarization_options", b"_s2t_llm_post_processing_summarization_options", "_s2t_llm_post_processing_translation_options", b"_s2t_llm_post_processing_translation_options", "_s2t_llm_post_processing_user_prompt_options", b"_s2t_llm_post_processing_user_prompt_options", "llm_host", b"llm_host", "llm_port", b"llm_port", "llm_request_timeout", b"llm_request_timeout", "s2t_llm_post_processing_casing_options", b"s2t_llm_post_processing_casing_options", "s2t_llm_post_processing_inverse_normalization_options", b"s2t_llm_post_processing_inverse_normalization_options", "s2t_llm_post_processing_normalization_options", b"s2t_llm_post_processing_normalization_options", "s2t_llm_post_processing_punctuation_options", b"s2t_llm_post_processing_punctuation_options", "s2t_llm_post_processing_semantic_correction_options", b"s2t_llm_post_processing_semantic_correction_options", "s2t_llm_post_processing_spelling_correction_options", b"s2t_llm_post_processing_spelling_correction_options", "s2t_llm_post_processing_summarization_options", b"s2t_llm_post_processing_summarization_options", "s2t_llm_post_processing_translation_options", b"s2t_llm_post_processing_translation_options", "s2t_llm_post_processing_user_prompt_options", b"s2t_llm_post_processing_user_prompt_options"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_host", b"_llm_host"]) -> typing.Literal["llm_host"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_port", b"_llm_port"]) -> typing.Literal["llm_port"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_llm_request_timeout", b"_llm_request_timeout"]) -> typing.Literal["llm_request_timeout"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_casing_options", b"_s2t_llm_post_processing_casing_options"]) -> typing.Literal["s2t_llm_post_processing_casing_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_inverse_normalization_options", b"_s2t_llm_post_processing_inverse_normalization_options"]) -> typing.Literal["s2t_llm_post_processing_inverse_normalization_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_normalization_options", b"_s2t_llm_post_processing_normalization_options"]) -> typing.Literal["s2t_llm_post_processing_normalization_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_punctuation_options", b"_s2t_llm_post_processing_punctuation_options"]) -> typing.Literal["s2t_llm_post_processing_punctuation_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_semantic_correction_options", b"_s2t_llm_post_processing_semantic_correction_options"]) -> typing.Literal["s2t_llm_post_processing_semantic_correction_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_spelling_correction_options", b"_s2t_llm_post_processing_spelling_correction_options"]) -> typing.Literal["s2t_llm_post_processing_spelling_correction_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_summarization_options", b"_s2t_llm_post_processing_summarization_options"]) -> typing.Literal["s2t_llm_post_processing_summarization_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_translation_options", b"_s2t_llm_post_processing_translation_options"]) -> typing.Literal["s2t_llm_post_processing_translation_options"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_s2t_llm_post_processing_user_prompt_options", b"_s2t_llm_post_processing_user_prompt_options"]) -> typing.Literal["s2t_llm_post_processing_user_prompt_options"] | None: ...

global___S2tLlmPostProcessing = S2tLlmPostProcessing

@typing.final
class S2tLlmPostProcessingCasingOptions(google.protobuf.message.Message):
    """Configuration of the options to casing task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the casing task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...

global___S2tLlmPostProcessingCasingOptions = S2tLlmPostProcessingCasingOptions

@typing.final
class S2tLlmPostProcessingPunctuationOptions(google.protobuf.message.Message):
    """Configuration of the options to punctuation task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the punctuation task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...

global___S2tLlmPostProcessingPunctuationOptions = S2tLlmPostProcessingPunctuationOptions

@typing.final
class S2tLlmPostProcessingSpellCorrectionOptions(google.protobuf.message.Message):
    """Configuration of the options to spelling-correctionsing task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the spelling-correction task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...

global___S2tLlmPostProcessingSpellCorrectionOptions = S2tLlmPostProcessingSpellCorrectionOptions

@typing.final
class S2tLlmPostProcessingSemanticCorrectionOptions(google.protobuf.message.Message):
    """Configuration of the options to semantic-correctionsing task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the semantic-correction task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "active", b"active"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...

global___S2tLlmPostProcessingSemanticCorrectionOptions = S2tLlmPostProcessingSemanticCorrectionOptions

@typing.final
class S2tLlmPostProcessingTranslationOptions(google.protobuf.message.Message):
    """Configuration of the options to translation task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the translation task of LLM post-processing is active."""
    language: builtins.str
    """Optional. Target language of the translation task of LLM post-processing."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        language: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_language", b"_language", "active", b"active", "language", b"language"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_language", b"_language", "active", b"active", "language", b"language"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_language", b"_language"]) -> typing.Literal["language"] | None: ...

global___S2tLlmPostProcessingTranslationOptions = S2tLlmPostProcessingTranslationOptions

@typing.final
class S2tLlmPostProcessingInverseNormalizationOptions(google.protobuf.message.Message):
    """Configuration of the options to inverse-normalization task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    PHONE_NUMBER_FIELD_NUMBER: builtins.int
    DATE_AND_TIME_FIELD_NUMBER: builtins.int
    CREDIT_CARD_NUMBER_FIELD_NUMBER: builtins.int
    SOCIAL_SECURITY_NUMBER_FIELD_NUMBER: builtins.int
    TIME_ZONE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the inverse-normalization task of LLM post-processing is active."""
    email: builtins.bool
    """Optional. Indicates if inverse-normalization of email address sub-task of LLM post-processing is active."""
    phone_number: builtins.bool
    """Optional. Indicates if inverse-normalization of phone number sub-task of LLM post-processing is active."""
    date_and_time: builtins.bool
    """Optional. Indicates if inverse-normalization of date and time sub-task of LLM post-processing is active."""
    credit_card_number: builtins.bool
    """Optional. Indicates if inverse-normalization of credit card number sub-task of LLM post-processing is active."""
    social_security_number: builtins.bool
    """Optional. Indicates if inverse-normalization of social security number sub-task of LLM post-processing is active"""
    time_zone: builtins.bool
    """Optional. Indicates if inverse-normalization of time zone sub-task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        email: builtins.bool | None = ...,
        phone_number: builtins.bool | None = ...,
        date_and_time: builtins.bool | None = ...,
        credit_card_number: builtins.bool | None = ...,
        social_security_number: builtins.bool | None = ...,
        time_zone: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_credit_card_number", b"_credit_card_number", "_date_and_time", b"_date_and_time", "_email", b"_email", "_phone_number", b"_phone_number", "_social_security_number", b"_social_security_number", "_time_zone", b"_time_zone", "active", b"active", "credit_card_number", b"credit_card_number", "date_and_time", b"date_and_time", "email", b"email", "phone_number", b"phone_number", "social_security_number", b"social_security_number", "time_zone", b"time_zone"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_credit_card_number", b"_credit_card_number", "_date_and_time", b"_date_and_time", "_email", b"_email", "_phone_number", b"_phone_number", "_social_security_number", b"_social_security_number", "_time_zone", b"_time_zone", "active", b"active", "credit_card_number", b"credit_card_number", "date_and_time", b"date_and_time", "email", b"email", "phone_number", b"phone_number", "social_security_number", b"social_security_number", "time_zone", b"time_zone"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_credit_card_number", b"_credit_card_number"]) -> typing.Literal["credit_card_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_date_and_time", b"_date_and_time"]) -> typing.Literal["date_and_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_email", b"_email"]) -> typing.Literal["email"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_phone_number", b"_phone_number"]) -> typing.Literal["phone_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_social_security_number", b"_social_security_number"]) -> typing.Literal["social_security_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_time_zone", b"_time_zone"]) -> typing.Literal["time_zone"] | None: ...

global___S2tLlmPostProcessingInverseNormalizationOptions = S2tLlmPostProcessingInverseNormalizationOptions

@typing.final
class S2tLlmPostProcessingNormalizationOptions(google.protobuf.message.Message):
    """Configuration of the options to normalization task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    PHONE_NUMBER_FIELD_NUMBER: builtins.int
    DATE_AND_TIME_FIELD_NUMBER: builtins.int
    CREDIT_CARD_NUMBER_FIELD_NUMBER: builtins.int
    SOCIAL_SECURITY_NUMBER_FIELD_NUMBER: builtins.int
    TIME_ZONE_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the normalization task of LLM post-processing is active."""
    email: builtins.bool
    """Optional. Indicates if normalization of email address sub-task of LLM post-processing is active."""
    phone_number: builtins.bool
    """Optional. Indicates if normalization of phone number sub-task of LLM post-processing is active."""
    date_and_time: builtins.bool
    """Optional. Indicates if normalization of date and time sub-task of LLM post-processing is active."""
    credit_card_number: builtins.bool
    """Optional. Indicates if normalization of credit card number sub-task of LLM post-processing is active."""
    social_security_number: builtins.bool
    """Optional. Indicates if normalization of social security number sub-task of LLM post-processing is active"""
    time_zone: builtins.bool
    """Optional. Indicates if normalization of time zone sub-task of LLM post-processing is active."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        email: builtins.bool | None = ...,
        phone_number: builtins.bool | None = ...,
        date_and_time: builtins.bool | None = ...,
        credit_card_number: builtins.bool | None = ...,
        social_security_number: builtins.bool | None = ...,
        time_zone: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_credit_card_number", b"_credit_card_number", "_date_and_time", b"_date_and_time", "_email", b"_email", "_phone_number", b"_phone_number", "_social_security_number", b"_social_security_number", "_time_zone", b"_time_zone", "active", b"active", "credit_card_number", b"credit_card_number", "date_and_time", b"date_and_time", "email", b"email", "phone_number", b"phone_number", "social_security_number", b"social_security_number", "time_zone", b"time_zone"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_credit_card_number", b"_credit_card_number", "_date_and_time", b"_date_and_time", "_email", b"_email", "_phone_number", b"_phone_number", "_social_security_number", b"_social_security_number", "_time_zone", b"_time_zone", "active", b"active", "credit_card_number", b"credit_card_number", "date_and_time", b"date_and_time", "email", b"email", "phone_number", b"phone_number", "social_security_number", b"social_security_number", "time_zone", b"time_zone"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_credit_card_number", b"_credit_card_number"]) -> typing.Literal["credit_card_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_date_and_time", b"_date_and_time"]) -> typing.Literal["date_and_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_email", b"_email"]) -> typing.Literal["email"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_phone_number", b"_phone_number"]) -> typing.Literal["phone_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_social_security_number", b"_social_security_number"]) -> typing.Literal["social_security_number"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_time_zone", b"_time_zone"]) -> typing.Literal["time_zone"] | None: ...

global___S2tLlmPostProcessingNormalizationOptions = S2tLlmPostProcessingNormalizationOptions

@typing.final
class S2tLlmPostProcessingSummarizationOptions(google.protobuf.message.Message):
    """Configuration of the options to summarization task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    MIN_CHARS_FIELD_NUMBER: builtins.int
    MAX_CHARS_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the summarization task of LLM post-processing is active."""
    min_chars: builtins.int
    """Optional. Minimum number of characters of the summary generated in summarization task of LLM post-processing."""
    max_chars: builtins.int
    """Optional. Maximum number of characters of the summary generated in summarization task of LLM post-processing."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        min_chars: builtins.int | None = ...,
        max_chars: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_max_chars", b"_max_chars", "_min_chars", b"_min_chars", "active", b"active", "max_chars", b"max_chars", "min_chars", b"min_chars"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_max_chars", b"_max_chars", "_min_chars", b"_min_chars", "active", b"active", "max_chars", b"max_chars", "min_chars", b"min_chars"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_chars", b"_max_chars"]) -> typing.Literal["max_chars"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_min_chars", b"_min_chars"]) -> typing.Literal["min_chars"] | None: ...

global___S2tLlmPostProcessingSummarizationOptions = S2tLlmPostProcessingSummarizationOptions

@typing.final
class S2tLlmPostProcessingUserPromptOptions(google.protobuf.message.Message):
    """Configuration of the options to user-prompt task in LLM post-processing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTIVE_FIELD_NUMBER: builtins.int
    PROMPT_FIELD_NUMBER: builtins.int
    active: builtins.bool
    """Optional. Indicates if the user-prompt task of LLM post-processing is active. This task overwrites"""
    prompt: builtins.str
    """Optional. The prompt to give LLM directly for post-processing purpose."""
    def __init__(
        self,
        *,
        active: builtins.bool | None = ...,
        prompt: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_active", b"_active", "_prompt", b"_prompt", "active", b"active", "prompt", b"prompt"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_active", b"_active", "_prompt", b"_prompt", "active", b"active", "prompt", b"prompt"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_active", b"_active"]) -> typing.Literal["active"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_prompt", b"_prompt"]) -> typing.Literal["prompt"] | None: ...

global___S2tLlmPostProcessingUserPromptOptions = S2tLlmPostProcessingUserPromptOptions

@typing.final
class Logging(google.protobuf.message.Message):
    """Logging contains configuration for logging."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    type: builtins.str
    """Type of logging."""
    path: builtins.str
    """Path for logging."""
    def __init__(
        self,
        *,
        type: builtins.str = ...,
        path: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "type", b"type"]) -> None: ...

global___Logging = Logging

@typing.final
class ListS2tLanguageModelsRequest(google.protobuf.message.Message):
    """/////////////////////////////////////////
    GET LIST OF AVAILABLE LANGUAGE MODELS //
    /////////////////////////////////////////

    ListS2tLanguageModelsRequest is used to request a list of available language models for specified pipelines.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IDS_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of pipeline IDs to retrieve their available language models.
        Example: ["pipeline_1", "pipeline_2"]
        """

    def __init__(
        self,
        *,
        ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ids", b"ids"]) -> None: ...

global___ListS2tLanguageModelsRequest = ListS2tLanguageModelsRequest

@typing.final
class LanguageModelPipelineId(google.protobuf.message.Message):
    """LanguageModelPipelineId contains information about a pipeline and its available language models."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PIPELINE_ID_FIELD_NUMBER: builtins.int
    MODEL_NAMES_FIELD_NUMBER: builtins.int
    pipeline_id: builtins.str
    """A pipeline ID. Example: "pipeline_1" """
    @property
    def model_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of all available language models for the corresponding pipeline ID. Example: ["model_1", "model_2"]"""

    def __init__(
        self,
        *,
        pipeline_id: builtins.str = ...,
        model_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["model_names", b"model_names", "pipeline_id", b"pipeline_id"]) -> None: ...

global___LanguageModelPipelineId = LanguageModelPipelineId

@typing.final
class ListS2tLanguageModelsResponse(google.protobuf.message.Message):
    """ListS2tLanguageModelsResponse is used to return the available language models for specified pipelines."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LM_PIPELINE_IDS_FIELD_NUMBER: builtins.int
    @property
    def lm_pipeline_ids(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LanguageModelPipelineId]:
        """Response is a list of LanguageModelPipelineId, where each element contains a pipeline ID and its associated
        language models.
        Example: [{pipeline_id: "pipeline_1", model_names: ["model_1", "model_2"]}, {pipeline_id: "pipeline_2",
        model_names: ["model_3"]}]
        """

    def __init__(
        self,
        *,
        lm_pipeline_ids: collections.abc.Iterable[global___LanguageModelPipelineId] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["lm_pipeline_ids", b"lm_pipeline_ids"]) -> None: ...

global___ListS2tLanguageModelsResponse = ListS2tLanguageModelsResponse

@typing.final
class CreateUserLanguageModelRequest(google.protobuf.message.Message):
    """///////////////////////////////////
    CUSTOM LANGUAGE MODEL FEATURES  //
    ///////////////////////////////////

    CreateUserLanguageModelRequest is used to request the creation of a new user-specific language model.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    language_model_name: builtins.str
    """Name of the language model to create. Example: "user_lm_1" """
    def __init__(
        self,
        *,
        language_model_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language_model_name", b"language_model_name"]) -> None: ...

global___CreateUserLanguageModelRequest = CreateUserLanguageModelRequest

@typing.final
class DeleteUserLanguageModelRequest(google.protobuf.message.Message):
    """DeleteUserLanguageModelRequest is used to request the deletion of a user-specific language model."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    language_model_name: builtins.str
    """Name of the language model to delete. Example: "user_lm_1" """
    def __init__(
        self,
        *,
        language_model_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language_model_name", b"language_model_name"]) -> None: ...

global___DeleteUserLanguageModelRequest = DeleteUserLanguageModelRequest

@typing.final
class AddDataToUserLanguageModelRequest(google.protobuf.message.Message):
    """AddDataToUserLanguageModelRequest is used to request the addition of data to a user-specific language model."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    ZIPPED_DATA_FIELD_NUMBER: builtins.int
    language_model_name: builtins.str
    """Name of the language model to which to add data. Example: "user_lm_1" """
    zipped_data: builtins.bytes
    """Zip file containing data in the form of text files.
    Example: A zip file with text files containing sentences or phrases in the target language.
    """
    def __init__(
        self,
        *,
        language_model_name: builtins.str = ...,
        zipped_data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language_model_name", b"language_model_name", "zipped_data", b"zipped_data"]) -> None: ...

global___AddDataToUserLanguageModelRequest = AddDataToUserLanguageModelRequest

@typing.final
class TrainUserLanguageModelRequest(google.protobuf.message.Message):
    """TrainUserLanguageModelRequest is used to request the training of a user-specific language model."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    language_model_name: builtins.str
    """Name of the language model to train. Example: "user_lm_1" """
    order: builtins.int
    """Order n of the ngram. Example: 3 (for trigram model)"""
    def __init__(
        self,
        *,
        language_model_name: builtins.str = ...,
        order: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language_model_name", b"language_model_name", "order", b"order"]) -> None: ...

global___TrainUserLanguageModelRequest = TrainUserLanguageModelRequest

@typing.final
class ListS2tNormalizationPipelinesRequest(google.protobuf.message.Message):
    """//////////////////////
    LIST OF S2T NORMALIZATION PIPELINES //
    //////////////////////

    The request message for ListS2tNormalizationPipelines.
    Filter pipelines by attributed in request.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    language: builtins.str
    """Optional. Define the language."""
    def __init__(
        self,
        *,
        language: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language", b"language"]) -> None: ...

global___ListS2tNormalizationPipelinesRequest = ListS2tNormalizationPipelinesRequest

@typing.final
class ListS2tNormalizationPipelinesResponse(google.protobuf.message.Message):
    """Pipeline Response representation.
    The response message for ListS2tNormalizationPipelines.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    S2T_NORMALIZATION_PIPELINES_FIELD_NUMBER: builtins.int
    @property
    def s2t_normalization_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Required. Representation of a list of normalization pipelines configurations.
        Retrieved by ListS2tNormalizationPipelines, containing the configurations of
        normalization pipelines with the specifications received in the ListS2tNormalizationPipelinesRequest.
        """

    def __init__(
        self,
        *,
        s2t_normalization_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["s2t_normalization_pipelines", b"s2t_normalization_pipelines"]) -> None: ...

global___ListS2tNormalizationPipelinesResponse = ListS2tNormalizationPipelinesResponse
