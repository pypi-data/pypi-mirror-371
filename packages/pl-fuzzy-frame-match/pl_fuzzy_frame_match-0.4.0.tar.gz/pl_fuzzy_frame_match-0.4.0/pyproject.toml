[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pl-fuzzy-frame-match"
version = "0.4.0"
description = "Efficient fuzzy matching for Polars DataFrames with support for multiple string similarity algorithms"
authors = ["Edward van Eechoud <evaneechoud@gmail.com>"]
license = "MIT"
readme = "readme.md"
homepage = "https://github.com/edwardvaneechoud/pl-fuzzy-frame-match"
repository = "https://github.com/edwardvaneechoud/pl-fuzzy-frame-match"
documentation = "https://github.com/edwardvaneechoud/pl-fuzzy-frame-match"
keywords = ["polars", "fuzzy", "matching", "string", "similarity", "dataframe"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
packages = [{include = "pl_fuzzy_frame_match"}]

[tool.poetry.dependencies]
python = "^3.10"
polars = [
    { version = ">=1.8.2, <=1.25.2", markers = "sys_platform == 'win32'" }, # For Windows, max version 1.25.2
    { version = ">=1.8.2, <1.32.0", markers = "sys_platform != 'win32'" } # For non-Windows, allows 1.26.0 up to (but not including) 2.0.0
                                                                      # Or whatever your desired range is for other OSes
]
polars-distance = "~0.4.3"
polars-simed = "^0.3.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
black = "^24.0.0"
ruff = "^0.6.0"
mypy = "^1.11.0"
pre-commit = "^3.8.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.3.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^3.0.0"

[tool.poetry.group.examples.dependencies]
jupyter = "^1.0.0"
matplotlib = "^3.9.0"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests", # Your directory to exclude
    "performance_test", # Add this line

]
[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.lint.isort]
known-third-party = ["polars", "polars_distance", "polars_simed"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "polars.*",
    "polars_distance.*",
    "polars_simed.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--cov=pl_fuzzy_frame_match",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
]

[tool.coverage.run]
source = ["pl_fuzzy_frame_match"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
