name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # For dynamic versioning
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-groups --frozen
    
    - name: Lint with ruff
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
    
    - name: Type check with mypy
      run: |
        uv run mypy src/
    
    - name: Test with pytest
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term
      env:
        # Mock environment variables for testing
        LIGHTCAST_CLIENT_ID: "test_client_id"
        LIGHTCAST_CLIENT_SECRET: "test_client_secret"
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-integration:
    name: Test Integration
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --all-groups --frozen
    
    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ -v
      env:
        # Mock environment variables for testing
        LIGHTCAST_CLIENT_ID: "test_client_id"
        LIGHTCAST_CLIENT_SECRET: "test_client_secret"

  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [test, test-integration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        tags: mcp-lightcast:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Test image can start and validate config
        docker run --rm \
          -e LIGHTCAST_CLIENT_ID=test_id \
          -e LIGHTCAST_CLIENT_SECRET=test_secret \
          mcp-lightcast:test --validate-config --quiet || echo "Expected to fail without real credentials"
    
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        target: development
        tags: mcp-lightcast:dev-test
        load: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v6
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --frozen
    
    - name: Run safety check
      run: |
        uv add --dev safety
        uv run safety check --json || true
    
    - name: Run bandit security linter
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json || true

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [test, test-integration, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, test-integration, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-lightcast
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # For dynamic versioning
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v6
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build package
      run: |
        uv build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true