name: Validate Conventional Commits

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

concurrency:
  group: conventional-commits-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  contents: read

jobs:
  validate-pr:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          # Optionally require a scope (uncomment to enforce)
          # requireScope: true
          # Validate the subject format
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # Ignore merge commits
          ignoreLabels: |
            bot
            ignore-semantic-pr
          # Custom message for invalid titles
          headerPattern: '^(\w*)(?:\(([\w\$\.\-\* ]*)\))?\: (.*)$'
          headerPatternCorrespondence: 'type,scope,subject'

  validate-commits:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python  
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install commitizen
        run: uv tool install commitizen

      - name: Validate commit messages
        run: |
          # Get the base branch (usually master/main)
          BASE_SHA=$(git merge-base HEAD origin/master)
          echo "üìã Validating commits from $BASE_SHA to HEAD"
          
          # Validate each commit message
          git log --format="%H %s" $BASE_SHA..HEAD | while read -r sha message; do
            echo "üîç Validating commit $sha: $message"
            
            # Skip validation for merge commits (they have a specific format)
            if [[ "$message" =~ ^Merge.* ]]; then
              echo "‚è≠Ô∏è  Skipping merge commit validation"
              continue
            fi
            
            if ! echo "$message" | uv tool run --from commitizen cz check; then
              echo "‚ùå Invalid commit message format: $message"
              echo ""
              echo "üìù Commit messages should follow the conventional commits format:"
              echo "   <type>[optional scope]: <description>"
              echo ""
              echo "Examples:"
              echo "   feat: add user authentication"
              echo "   fix: resolve login redirect issue"
              echo "   docs: update installation guide"
              echo "   chore: update dependencies"
              echo ""
              echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
              exit 1
            else
              echo "‚úÖ Valid commit message format"
            fi
          done
          
          echo "üéâ All commit messages are properly formatted!"

  provide-feedback:
    name: Provide Helpful Feedback  
    runs-on: ubuntu-latest
    needs: [validate-pr, validate-commits]
    if: always() && (needs.validate-pr.result == 'failure' || needs.validate-commits.result == 'failure')
    
    steps:
      - name: Comment on PR with guidance
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            
            const comment = `
            ## üìù Conventional Commits Required
            
            This PR needs to follow the [Conventional Commits](https://www.conventionalcommits.org/) format for automated versioning and releases.
            
            ### ‚úÖ **PR Title Format:**
            \`\`\`
            <type>[optional scope]: <description>
            \`\`\`
            
            ### üè∑Ô∏è **Valid Types:**
            - **feat**: A new feature  
            - **fix**: A bug fix
            - **docs**: Documentation changes
            - **style**: Code style changes (formatting, etc.)
            - **refactor**: Code refactoring
            - **perf**: Performance improvements
            - **test**: Adding or updating tests
            - **build**: Build system changes
            - **ci**: CI/CD changes
            - **chore**: Maintenance tasks
            
            ### üìã **Examples:**
            - \`feat: add two-factor authentication enforcement\`
            - \`fix: resolve URL resolution vulnerability\`
            - \`docs: update installation instructions\`
            - \`chore: update dependencies\`
            
            ### üöÄ **Why This Matters:**
            - **Automated versioning** - determines if release is major/minor/patch
            - **Automatic changelogs** - generates release notes from commit messages  
            - **Clear history** - makes it easy to understand what changed and why
            
            ---
            *This check will automatically re-run when you update the PR title or commit messages.*
            `;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });