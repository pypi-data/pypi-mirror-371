"""
Database creator.

This script creates the database on the user's local machine at its (script's) location. 
It checks if the database exists before creating a new one.

Also, populates the database with dummy data that were captured from a real device.
"""


import os
import sqlite3

# Getting the database path relative to the script file
script_dir = os.path.dirname(os.path.abspath(__file__))
database_path = os.path.join(script_dir, "detail.db")

def create_db() -> None:
    """
    Creates the database (sqlite3) on the user's local machine.
    After creating the database with the tables, it calls the populate_db() function.
    """
    # Create the database if it doesn't exist
    if not os.path.exists(database_path):
        conn = sqlite3.connect(database_path)
        cur = conn.cursor()
        cur.execute('''
    CREATE TABLE IF NOT EXISTS "Frequency" (
    	"id"	INTEGER,
    	"frequency"	REAL NOT NULL,
    	"power"	REAL NOT NULL,
    	"datetime"	TEXT,
    	PRIMARY KEY("id" AUTOINCREMENT)
    )''')
        cur.execute('''
    CREATE TABLE IF NOT EXISTS "FrequencySamples" (
    	"id"	INTEGER,
    	"fk"	INTEGER,
    	"real"	REAL,
    	"imag"	REAL,
    	PRIMARY KEY("id" AUTOINCREMENT),
    	FOREIGN KEY("fk") REFERENCES "Frequency"
    )''')
        cur.execute('''
    CREATE TABLE IF NOT EXISTS "Power" (
    	"id"	INTEGER,
    	"power"	REAL NOT NULL,
    	"datetime"	TEXT NOT NULL,
    	PRIMARY KEY("id" AUTOINCREMENT)
    )''')
        cur.execute('''
    CREATE TABLE IF NOT EXISTS "PowerFrequencies" (
    	"id"	INTEGER,
    	"fk"	INTEGER,
    	"frequency"	REAL NOT NULL,
    	PRIMARY KEY("id" AUTOINCREMENT),
    	FOREIGN KEY("fk") REFERENCES "Power"
    )
    ''')
        conn.commit()
        conn.close()
        print(f"\nCreated database: {database_path}")
        populate_db()


def populate_db() -> None:
    """
    Populates the database that wase created by the create_db() function with dummy data.
    Dummy data were captured by a real device so the database can simulate real cases.
    """
    conn = sqlite3.connect(database_path)
    cur = conn.cursor()
    data = [(105.55, 25.55,	"06-06-2025 12:13:36"),
    (105.55, 25.55,	"06-06-2025 12:13:37"),
    (105.55, 25.55,	"06-06-2025 12:13:38"),
    (105.55, 25.55,	"06-06-2025 12:13:39"),
    (105.55, 25.55,	"06-06-2025 12:13:40"),
    (105.2,	25.98,	"06-06-2025 12:13:41"),
    (105.3,	25.42,	"06-06-2025 12:13:42"),
    (105.4,	25.89,	"06-06-2025 12:13:42"),
    (105.5,	26.48,	"06-06-2025 12:13:42"),
    (105.6,	26.73,	"06-06-2025 12:13:42"),
    (105.7,	26.4,	"06-06-2025 12:13:42"),
    (105.8,	26.2,	"06-06-2025 12:13:43"),
    (105.9,	24.2,	"06-06-2025 12:13:43"),
    (106.2,	23.17,	"06-06-2025 12:13:43"),
    (106.3,	25.47,	"06-06-2025 12:13:43"),
    (106.4,	25.47,	"06-06-2025 12:13:43"),
    (106.5,	24.93,	"06-06-2025 12:13:44"),
    (106.6,	25.91,	"06-06-2025 12:13:44"),
    (106.7,	26.99,	"06-06-2025 12:13:44"),
    (106.8,	25.41,	"06-06-2025 12:13:44"),
    (106.9,	26.02,	"06-06-2025 12:13:44"),
    (107.0,	26.51,	"06-06-2025 12:13:45"),
    (107.1,	24.52,	"06-06-2025 12:13:45"),
    (107.2,	21.53,	"06-06-2025 12:13:45"),
    (107.3,	20.89,	"06-06-2025 12:13:45"),
    (107.4,	23.73,	"06-06-2025 12:13:46"),
    (107.5,	24.96,	"06-06-2025 12:13:46"),
    (107.6,	25.06,	"06-06-2025 12:13:46"),
    (107.7,	24.44,	"06-06-2025 12:13:46"),
    (107.8,	24.29,	"06-06-2025 12:13:46"),
    (107.9,	22.8,	"06-06-2025 12:13:47"),
    (108.0,	21.5,	"06-06-2025 12:13:47"),
    (108.1,	21.38,	"06-06-2025 12:13:47"),
    (108.2,	20.89,	"06-06-2025 12:13:47"),
    (108.3,	20.12,	"06-06-2025 12:13:47"),
    (103.7,	20.8,	"06-06-2025 12:13:48"),
    (105.1,	22.83,	"06-06-2025 12:13:48"),
    (105.2,	23.58,	"06-06-2025 12:13:48"),
    (105.3,	23.69,	"06-06-2025 12:13:48"),
    (105.4,	24.15,	"06-06-2025 12:13:48"),
    (105.5,	24.88,	"06-06-2025 12:13:49"),
    (105.6,	25.39,	"06-06-2025 12:13:49"),
    (105.7,	25.42,	"06-06-2025 12:13:49"),
    (105.8,	26.35,	"06-06-2025 12:13:49"),
    (105.9,	26.0,	"06-06-2025 12:13:49"),
    (106.2,	22.71,	"06-06-2025 12:13:50"),
    (106.3,	25.5,	"06-06-2025 12:13:50"),
    (106.4,	25.52,	"06-06-2025 12:13:50"),
    (106.5,	25.41,	"06-06-2025 12:13:50"),
    (106.6,	25.99,	"06-06-2025 12:13:50"),
    (106.7,	26.41,	"06-06-2025 12:13:51"),
    (106.8,	26.36,	"06-06-2025 12:13:51"),
    (106.9,	26.06,	"06-06-2025 12:13:51"),
    (107.0,	26.17,	"06-06-2025 12:13:51"),
    (107.1,	24.78,	"06-06-2025 12:13:51"),
    (107.2,	21.86,	"06-06-2025 12:13:52"),
    (107.3,	21.92,	"06-06-2025 12:13:52"),
    (107.4,	23.93,	"06-06-2025 12:13:52"),
    (107.5,	24.94,	"06-06-2025 12:13:52"),
    (107.6,	24.39,	"06-06-2025 12:13:52"),
    (107.7,	24.11,	"06-06-2025 12:13:53"),
    (107.8,	23.64,	"06-06-2025 12:13:53"),
    (107.9,	22.51,	"06-06-2025 12:13:53"),
    (108.0,	21.26,	"06-06-2025 12:13:53"),
    (108.1,	20.65,	"06-06-2025 12:13:53"),
    (108.2,	20.26,	"06-06-2025 12:13:54"),
    (103.7,	21.24,	"06-06-2025 12:13:54"),
    (105.1,	22.99,	"06-06-2025 12:13:54"),
    (106.2,	22.83,	"06-06-2025 12:16:14"),
    (106.3,	25.47,	"06-06-2025 12:16:14"),
    (106.4,	25.57,	"06-06-2025 12:16:14"),
    (106.5,	25.66,	"06-06-2025 12:16:14"),
    (106.6,	25.8,	"06-06-2025 12:16:14"),
    (106.7,	26.25,	"06-06-2025 12:16:15"),
    (106.8,	27.14,	"06-06-2025 12:16:15"),
    (106.9,	26.61,	"06-06-2025 12:16:15"),
    (107.0,	26.48,	"06-06-2025 12:16:15"),
    (107.1,	25.16,	"06-06-2025 12:16:15"),
    (107.2,	21.44,	"06-06-2025 12:16:16"),
    (107.3,	22.01,	"06-06-2025 12:16:16"),
    (107.4,	24.24,	"06-06-2025 12:16:16"),
    (107.5,	25.24,	"06-06-2025 12:16:16"),
    (107.6,	24.95,	"06-06-2025 12:16:16"),
    (107.7,	24.37,	"06-06-2025 12:16:17"),
    (107.8,	24.18,	"06-06-2025 12:16:17"),
    (107.9,	22.61,	"06-06-2025 12:16:17"),
    (108.0,	21.77,	"06-06-2025 12:16:17"),
    (108.1,	20.93,	"06-06-2025 12:16:17"),
    (108.2,	21.18,	"06-06-2025 12:16:18"),
    (103.7,	20.54,	"06-06-2025 12:16:18"),
    (104.3,	20.18,	"06-06-2025 12:16:18"),
    (105.1,	22.99,	"06-06-2025 12:16:18"),
    (105.2,	23.98,	"06-06-2025 12:16:18"),
    (105.3,	23.92,	"06-06-2025 12:16:19"),
    (105.4,	24.54,	"06-06-2025 12:16:19"),
    (105.5,	24.74,	"06-06-2025 12:16:19"),
    (105.6,	25.41,	"06-06-2025 12:16:19"),
    (105.7,	25.82,	"06-06-2025 12:16:19"),
    (105.8,	26.37,	"06-06-2025 12:16:20"),
    (105.9,	24.95,	"06-06-2025 12:16:20"),
    (106.0,	20.18,	"06-06-2025 12:16:20"),
    (106.2,	23.72,	"06-06-2025 12:16:20"),
    (106.3,	25.95,	"06-06-2025 12:16:20"),
    (106.4,	26.18,	"06-06-2025 12:16:21"),
    (106.5,	26.12,	"06-06-2025 12:16:21"),
    (106.6,	26.68,	"06-06-2025 12:16:21"),
    (106.7,	27.2,	"06-06-2025 12:16:21"),
    (106.8,	25.67,	"06-06-2025 12:16:21"),
    (106.9,	26.45,	"06-06-2025 12:16:22"),
    (107.0,	26.56,	"06-06-2025 12:16:22"),
    (107.1,	24.63,	"06-06-2025 12:16:22"),
    (107.2,	21.18,	"06-06-2025 12:16:22"),
    (107.3,	22.12,	"06-06-2025 12:16:22"),
    (107.4,	24.25,	"06-06-2025 12:16:23"),
    (107.5,	25.27,	"06-06-2025 12:16:23"),
    (107.6,	24.78,	"06-06-2025 12:18:23"),
    (107.7,	23.96,	"06-06-2025 12:20:23"),
    (107.6,	25.83,	"06-06-2025 12:23:24"),
    (107.7,	25.32,	"06-06-2025 12:23:25"),
    (107.8,	25.22,	"06-06-2025 12:23:25")]
    
    print("\nPopulating the database with dummy data...\n")
    for row in data:
        cur.execute("insert into Frequency (frequency, power, datetime) values (?, ?, ?)", row)
    conn.commit()
    conn.close()
