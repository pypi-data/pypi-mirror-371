# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


def swig_import_helper():
    import importlib
    pkg = __name__.rpartition('.')[0]
    mname = '.'.join((pkg, '_wallycore')).lstrip('.')
    try:
        return importlib.import_module(mname)
    except ImportError:
        return importlib.import_module('_wallycore')
_wallycore = swig_import_helper()
del swig_import_helper

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

WALLY_OK = _wallycore.WALLY_OK
WALLY_ERROR = _wallycore.WALLY_ERROR
WALLY_EINVAL = _wallycore.WALLY_EINVAL
WALLY_ENOMEM = _wallycore.WALLY_ENOMEM
WALLY_MAJOR_VER = _wallycore.WALLY_MAJOR_VER
WALLY_MINOR_VER = _wallycore.WALLY_MINOR_VER
WALLY_PATCH_VER = _wallycore.WALLY_PATCH_VER
WALLY_BUILD_VER = _wallycore.WALLY_BUILD_VER

def init(flags):
    return _wallycore.init(flags)
init = _wallycore.init

def cleanup(flags):
    return _wallycore.cleanup(flags)
cleanup = _wallycore.cleanup

def get_build_version():
    return _wallycore.get_build_version()
get_build_version = _wallycore.get_build_version

def bzero(bytes):
    return _wallycore.bzero(bytes)
bzero = _wallycore.bzero

def free_string(str):
    return _wallycore.free_string(str)
free_string = _wallycore.free_string
WALLY_SECP_RANDOMIZE_LEN = _wallycore.WALLY_SECP_RANDOMIZE_LEN

def secp_randomize(bytes):
    return _wallycore.secp_randomize(bytes)
secp_randomize = _wallycore.secp_randomize

def hex_verify(hex):
    return _wallycore.hex_verify(hex)
hex_verify = _wallycore.hex_verify

def hex_n_verify(hex, hex_len):
    return _wallycore.hex_n_verify(hex, hex_len)
hex_n_verify = _wallycore.hex_n_verify

def hex_from_bytes(bytes):
    return _wallycore.hex_from_bytes(bytes)
hex_from_bytes = _wallycore.hex_from_bytes

def hex_to_bytes(hex, bytes_out):
    return _wallycore.hex_to_bytes(hex, bytes_out)
hex_to_bytes = _wallycore.hex_to_bytes

def hex_n_to_bytes(hex, hex_len, bytes_out):
    return _wallycore.hex_n_to_bytes(hex, hex_len, bytes_out)
hex_n_to_bytes = _wallycore.hex_n_to_bytes
BASE58_FLAG_CHECKSUM = _wallycore.BASE58_FLAG_CHECKSUM
BASE58_CHECKSUM_LEN = _wallycore.BASE58_CHECKSUM_LEN

def base58_from_bytes(bytes, flags):
    return _wallycore.base58_from_bytes(bytes, flags)
base58_from_bytes = _wallycore.base58_from_bytes

def base58_to_bytes(str_in, flags, bytes_out):
    return _wallycore.base58_to_bytes(str_in, flags, bytes_out)
base58_to_bytes = _wallycore.base58_to_bytes

def base58_n_to_bytes(str_in, str_len, flags, bytes_out):
    return _wallycore.base58_n_to_bytes(str_in, str_len, flags, bytes_out)
base58_n_to_bytes = _wallycore.base58_n_to_bytes

def base58_get_length(str_in):
    return _wallycore.base58_get_length(str_in)
base58_get_length = _wallycore.base58_get_length

def base58_n_get_length(str_in, str_len):
    return _wallycore.base58_n_get_length(str_in, str_len)
base58_n_get_length = _wallycore.base58_n_get_length

def base64_from_bytes(bytes, flags):
    return _wallycore.base64_from_bytes(bytes, flags)
base64_from_bytes = _wallycore.base64_from_bytes

def base64_to_bytes(str_in, flags, bytes_out):
    return _wallycore.base64_to_bytes(str_in, flags, bytes_out)
base64_to_bytes = _wallycore.base64_to_bytes

def base64_n_to_bytes(str_in, str_len, flags, bytes_out):
    return _wallycore.base64_n_to_bytes(str_in, str_len, flags, bytes_out)
base64_n_to_bytes = _wallycore.base64_n_to_bytes

def base64_get_maximum_length(str_in, flags):
    return _wallycore.base64_get_maximum_length(str_in, flags)
base64_get_maximum_length = _wallycore.base64_get_maximum_length

def base64_n_get_maximum_length(str_in, str_len, flags):
    return _wallycore.base64_n_get_maximum_length(str_in, str_len, flags)
base64_n_get_maximum_length = _wallycore.base64_n_get_maximum_length

def is_elements_build():
    return _wallycore.is_elements_build()
is_elements_build = _wallycore.is_elements_build
WALLY_WIF_FLAG_COMPRESSED = _wallycore.WALLY_WIF_FLAG_COMPRESSED
WALLY_WIF_FLAG_UNCOMPRESSED = _wallycore.WALLY_WIF_FLAG_UNCOMPRESSED
WALLY_CA_PREFIX_LIQUID = _wallycore.WALLY_CA_PREFIX_LIQUID
WALLY_CA_PREFIX_LIQUID_REGTEST = _wallycore.WALLY_CA_PREFIX_LIQUID_REGTEST
WALLY_CA_PREFIX_LIQUID_TESTNET = _wallycore.WALLY_CA_PREFIX_LIQUID_TESTNET
WALLY_NETWORK_NONE = _wallycore.WALLY_NETWORK_NONE
WALLY_NETWORK_BITCOIN_MAINNET = _wallycore.WALLY_NETWORK_BITCOIN_MAINNET
WALLY_NETWORK_BITCOIN_REGTEST = _wallycore.WALLY_NETWORK_BITCOIN_REGTEST
WALLY_NETWORK_BITCOIN_TESTNET = _wallycore.WALLY_NETWORK_BITCOIN_TESTNET
WALLY_NETWORK_LIQUID = _wallycore.WALLY_NETWORK_LIQUID
WALLY_NETWORK_LIQUID_REGTEST = _wallycore.WALLY_NETWORK_LIQUID_REGTEST
WALLY_NETWORK_LIQUID_TESTNET = _wallycore.WALLY_NETWORK_LIQUID_TESTNET
WALLY_ADDRESS_TYPE_P2PKH = _wallycore.WALLY_ADDRESS_TYPE_P2PKH
WALLY_ADDRESS_TYPE_P2SH_P2WPKH = _wallycore.WALLY_ADDRESS_TYPE_P2SH_P2WPKH
WALLY_ADDRESS_TYPE_P2WPKH = _wallycore.WALLY_ADDRESS_TYPE_P2WPKH
WALLY_ADDRESS_VERSION_P2PKH_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_MAINNET
WALLY_ADDRESS_VERSION_P2PKH_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_TESTNET
WALLY_ADDRESS_VERSION_P2PKH_LIQUID = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID
WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST
WALLY_ADDRESS_VERSION_P2PKH_LIQUID_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2PKH_LIQUID_TESTNET
WALLY_ADDRESS_VERSION_P2SH_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_P2SH_MAINNET
WALLY_ADDRESS_VERSION_P2SH_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2SH_TESTNET
WALLY_ADDRESS_VERSION_P2SH_LIQUID = _wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID
WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST = _wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST
WALLY_ADDRESS_VERSION_P2SH_LIQUID_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_P2SH_LIQUID_TESTNET
WALLY_ADDRESS_VERSION_WIF_MAINNET = _wallycore.WALLY_ADDRESS_VERSION_WIF_MAINNET
WALLY_ADDRESS_VERSION_WIF_TESTNET = _wallycore.WALLY_ADDRESS_VERSION_WIF_TESTNET
WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN = _wallycore.WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN
WALLY_ADDRESS_PUBKEY_MAX_LEN = _wallycore.WALLY_ADDRESS_PUBKEY_MAX_LEN
WALLY_SEGWIT_V0_ADDRESS_PUBKEY_MAX_LEN = _wallycore.WALLY_SEGWIT_V0_ADDRESS_PUBKEY_MAX_LEN
WALLY_SEGWIT_V1_ADDRESS_PUBKEY_LEN = _wallycore.WALLY_SEGWIT_V1_ADDRESS_PUBKEY_LEN

def addr_segwit_from_bytes(bytes, addr_family, flags):
    return _wallycore.addr_segwit_from_bytes(bytes, addr_family, flags)
addr_segwit_from_bytes = _wallycore.addr_segwit_from_bytes

def addr_segwit_to_bytes(addr, addr_family, flags, bytes_out):
    return _wallycore.addr_segwit_to_bytes(addr, addr_family, flags, bytes_out)
addr_segwit_to_bytes = _wallycore.addr_segwit_to_bytes

def addr_segwit_n_to_bytes(addr, addr_len, addr_family, addr_family_len, flags, bytes_out):
    return _wallycore.addr_segwit_n_to_bytes(addr, addr_len, addr_family, addr_family_len, flags, bytes_out)
addr_segwit_n_to_bytes = _wallycore.addr_segwit_n_to_bytes

def addr_segwit_get_version(addr, addr_family, flags):
    return _wallycore.addr_segwit_get_version(addr, addr_family, flags)
addr_segwit_get_version = _wallycore.addr_segwit_get_version

def addr_segwit_n_get_version(addr, addr_len, addr_family, addr_family_len, flags):
    return _wallycore.addr_segwit_n_get_version(addr, addr_len, addr_family, addr_family_len, flags)
addr_segwit_n_get_version = _wallycore.addr_segwit_n_get_version

def address_to_scriptpubkey(addr, network, bytes_out):
    return _wallycore.address_to_scriptpubkey(addr, network, bytes_out)
address_to_scriptpubkey = _wallycore.address_to_scriptpubkey

def scriptpubkey_to_address(scriptpubkey, network):
    return _wallycore.scriptpubkey_to_address(scriptpubkey, network)
scriptpubkey_to_address = _wallycore.scriptpubkey_to_address

def wif_from_bytes(priv_key, prefix, flags):
    return _wallycore.wif_from_bytes(priv_key, prefix, flags)
wif_from_bytes = _wallycore.wif_from_bytes

def wif_to_bytes(wif, prefix, flags, bytes_out):
    return _wallycore.wif_to_bytes(wif, prefix, flags, bytes_out)
wif_to_bytes = _wallycore.wif_to_bytes

def wif_is_uncompressed(wif):
    return _wallycore.wif_is_uncompressed(wif)
wif_is_uncompressed = _wallycore.wif_is_uncompressed

def wif_to_public_key(wif, prefix, bytes_out):
    return _wallycore.wif_to_public_key(wif, prefix, bytes_out)
wif_to_public_key = _wallycore.wif_to_public_key

def bip32_key_to_address(hdkey, flags, version):
    return _wallycore.bip32_key_to_address(hdkey, flags, version)
bip32_key_to_address = _wallycore.bip32_key_to_address

def bip32_key_to_addr_segwit(hdkey, addr_family, flags):
    return _wallycore.bip32_key_to_addr_segwit(hdkey, addr_family, flags)
bip32_key_to_addr_segwit = _wallycore.bip32_key_to_addr_segwit

def wif_to_address(wif, prefix, version):
    return _wallycore.wif_to_address(wif, prefix, version)
wif_to_address = _wallycore.wif_to_address

def confidential_addr_to_addr(address, prefix):
    return _wallycore.confidential_addr_to_addr(address, prefix)
confidential_addr_to_addr = _wallycore.confidential_addr_to_addr

def confidential_addr_to_ec_public_key(address, prefix, bytes_out):
    return _wallycore.confidential_addr_to_ec_public_key(address, prefix, bytes_out)
confidential_addr_to_ec_public_key = _wallycore.confidential_addr_to_ec_public_key

def confidential_addr_from_addr(address, prefix, pub_key):
    return _wallycore.confidential_addr_from_addr(address, prefix, pub_key)
confidential_addr_from_addr = _wallycore.confidential_addr_from_addr

def confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family):
    return _wallycore.confidential_addr_to_addr_segwit(address, confidential_addr_family, addr_family)
confidential_addr_to_addr_segwit = _wallycore.confidential_addr_to_addr_segwit

def confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out):
    return _wallycore.confidential_addr_segwit_to_ec_public_key(address, confidential_addr_family, bytes_out)
confidential_addr_segwit_to_ec_public_key = _wallycore.confidential_addr_segwit_to_ec_public_key

def confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key):
    return _wallycore.confidential_addr_from_addr_segwit(address, addr_family, confidential_addr_family, pub_key)
confidential_addr_from_addr_segwit = _wallycore.confidential_addr_from_addr_segwit
WALLY_HOST_COMMITMENT_LEN = _wallycore.WALLY_HOST_COMMITMENT_LEN

def ae_host_commit_from_bytes(entropy, flags, bytes_out):
    return _wallycore.ae_host_commit_from_bytes(entropy, flags, bytes_out)
ae_host_commit_from_bytes = _wallycore.ae_host_commit_from_bytes

def ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out):
    return _wallycore.ae_signer_commit_from_bytes(priv_key, bytes, commitment, flags, s2c_opening_out)
ae_signer_commit_from_bytes = _wallycore.ae_signer_commit_from_bytes

def ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out):
    return _wallycore.ae_sig_from_bytes(priv_key, bytes, entropy, flags, bytes_out)
ae_sig_from_bytes = _wallycore.ae_sig_from_bytes

def ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig):
    return _wallycore.ae_verify(pub_key, bytes, entropy, s2c_opening, flags, sig)
ae_verify = _wallycore.ae_verify
BIP32_ENTROPY_LEN_128 = _wallycore.BIP32_ENTROPY_LEN_128
BIP32_ENTROPY_LEN_256 = _wallycore.BIP32_ENTROPY_LEN_256
BIP32_ENTROPY_LEN_512 = _wallycore.BIP32_ENTROPY_LEN_512
BIP32_KEY_FINGERPRINT_LEN = _wallycore.BIP32_KEY_FINGERPRINT_LEN
BIP32_SERIALIZED_LEN = _wallycore.BIP32_SERIALIZED_LEN
BIP32_INITIAL_HARDENED_CHILD = _wallycore.BIP32_INITIAL_HARDENED_CHILD
BIP32_PATH_MAX_LEN = _wallycore.BIP32_PATH_MAX_LEN
WALLY_BIP32_CHAIN_CODE_LEN = _wallycore.WALLY_BIP32_CHAIN_CODE_LEN
WALLY_BIP32_TWEAK_SUM_LEN = _wallycore.WALLY_BIP32_TWEAK_SUM_LEN
BIP32_FLAG_KEY_PRIVATE = _wallycore.BIP32_FLAG_KEY_PRIVATE
BIP32_FLAG_KEY_PUBLIC = _wallycore.BIP32_FLAG_KEY_PUBLIC
BIP32_FLAG_SKIP_HASH = _wallycore.BIP32_FLAG_SKIP_HASH
BIP32_FLAG_KEY_TWEAK_SUM = _wallycore.BIP32_FLAG_KEY_TWEAK_SUM
BIP32_FLAG_STR_WILDCARD = _wallycore.BIP32_FLAG_STR_WILDCARD
BIP32_FLAG_STR_BARE = _wallycore.BIP32_FLAG_STR_BARE
BIP32_FLAG_ALLOW_UPPER = _wallycore.BIP32_FLAG_ALLOW_UPPER
BIP32_FLAG_STR_MULTIPATH = _wallycore.BIP32_FLAG_STR_MULTIPATH
BIP32_VER_MAIN_PUBLIC = _wallycore.BIP32_VER_MAIN_PUBLIC
BIP32_VER_MAIN_PRIVATE = _wallycore.BIP32_VER_MAIN_PRIVATE
BIP32_VER_TEST_PUBLIC = _wallycore.BIP32_VER_TEST_PUBLIC
BIP32_VER_TEST_PRIVATE = _wallycore.BIP32_VER_TEST_PRIVATE
BIP32_PATH_LEN_MASK = _wallycore.BIP32_PATH_LEN_MASK
BIP32_PATH_LEN_SHIFT = _wallycore.BIP32_PATH_LEN_SHIFT
BIP32_PATH_MULTI_MASK = _wallycore.BIP32_PATH_MULTI_MASK
BIP32_PATH_MULTI_SHIFT = _wallycore.BIP32_PATH_MULTI_SHIFT
BIP32_PATH_WILDCARD_MASK = _wallycore.BIP32_PATH_WILDCARD_MASK
BIP32_PATH_WILDCARD_SHIFT = _wallycore.BIP32_PATH_WILDCARD_SHIFT
BIP32_PATH_IS_BARE = _wallycore.BIP32_PATH_IS_BARE
BIP32_PATH_IS_HARDENED = _wallycore.BIP32_PATH_IS_HARDENED
BIP32_PATH_IS_WILDCARD = _wallycore.BIP32_PATH_IS_WILDCARD
BIP32_PATH_IS_MULTIPATH = _wallycore.BIP32_PATH_IS_MULTIPATH

def bip32_key_free(hdkey):
    return _wallycore.bip32_key_free(hdkey)
bip32_key_free = _wallycore.bip32_key_free

def bip32_key_init_alloc(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160):
    return _wallycore.bip32_key_init_alloc(version, depth, child_num, chain_code, pub_key, priv_key, hash160, parent160)
bip32_key_init_alloc = _wallycore.bip32_key_init_alloc

def bip32_key_from_seed_custom_alloc(bytes, version, hmac_key, flags):
    return _wallycore.bip32_key_from_seed_custom_alloc(bytes, version, hmac_key, flags)
bip32_key_from_seed_custom_alloc = _wallycore.bip32_key_from_seed_custom_alloc

def bip32_key_from_seed_alloc(bytes, version, flags):
    return _wallycore.bip32_key_from_seed_alloc(bytes, version, flags)
bip32_key_from_seed_alloc = _wallycore.bip32_key_from_seed_alloc

def bip32_key_serialize(hdkey, flags, bytes_out):
    return _wallycore.bip32_key_serialize(hdkey, flags, bytes_out)
bip32_key_serialize = _wallycore.bip32_key_serialize

def bip32_key_unserialize_alloc(bytes):
    return _wallycore.bip32_key_unserialize_alloc(bytes)
bip32_key_unserialize_alloc = _wallycore.bip32_key_unserialize_alloc

def bip32_key_from_parent_alloc(hdkey, child_num, flags):
    return _wallycore.bip32_key_from_parent_alloc(hdkey, child_num, flags)
bip32_key_from_parent_alloc = _wallycore.bip32_key_from_parent_alloc

def bip32_key_from_parent_path_alloc(hdkey, child_path, flags):
    return _wallycore.bip32_key_from_parent_path_alloc(hdkey, child_path, flags)
bip32_key_from_parent_path_alloc = _wallycore.bip32_key_from_parent_path_alloc

def bip32_key_from_parent_path_str_alloc(hdkey, path_str, child_num, flags):
    return _wallycore.bip32_key_from_parent_path_str_alloc(hdkey, path_str, child_num, flags)
bip32_key_from_parent_path_str_alloc = _wallycore.bip32_key_from_parent_path_str_alloc

def bip32_key_from_parent_path_str_n_alloc(hdkey, path_str, path_str_len, child_num, flags):
    return _wallycore.bip32_key_from_parent_path_str_n_alloc(hdkey, path_str, path_str_len, child_num, flags)
bip32_key_from_parent_path_str_n_alloc = _wallycore.bip32_key_from_parent_path_str_n_alloc

def bip32_key_with_tweak_from_parent_path_alloc(hdkey, child_path, flags):
    return _wallycore.bip32_key_with_tweak_from_parent_path_alloc(hdkey, child_path, flags)
bip32_key_with_tweak_from_parent_path_alloc = _wallycore.bip32_key_with_tweak_from_parent_path_alloc

def bip32_key_to_base58(hdkey, flags):
    return _wallycore.bip32_key_to_base58(hdkey, flags)
bip32_key_to_base58 = _wallycore.bip32_key_to_base58

def bip32_key_from_base58_alloc(base58):
    return _wallycore.bip32_key_from_base58_alloc(base58)
bip32_key_from_base58_alloc = _wallycore.bip32_key_from_base58_alloc

def bip32_key_from_base58_n_alloc(base58, base58_len):
    return _wallycore.bip32_key_from_base58_n_alloc(base58, base58_len)
bip32_key_from_base58_n_alloc = _wallycore.bip32_key_from_base58_n_alloc

def bip32_key_strip_private_key(hdkey):
    return _wallycore.bip32_key_strip_private_key(hdkey)
bip32_key_strip_private_key = _wallycore.bip32_key_strip_private_key

def bip32_key_get_fingerprint(hdkey, bytes_out):
    return _wallycore.bip32_key_get_fingerprint(hdkey, bytes_out)
bip32_key_get_fingerprint = _wallycore.bip32_key_get_fingerprint

def bip32_path_from_str_len(path_str, child_num, multi_index, flags):
    return _wallycore.bip32_path_from_str_len(path_str, child_num, multi_index, flags)
bip32_path_from_str_len = _wallycore.bip32_path_from_str_len

def bip32_path_from_str(path_str, child_num, multi_index, flags, child_path_out):
    return _wallycore.bip32_path_from_str(path_str, child_num, multi_index, flags, child_path_out)
bip32_path_from_str = _wallycore.bip32_path_from_str

def bip32_path_from_str_n_len(path_str, path_str_len, child_num, multi_index, flags):
    return _wallycore.bip32_path_from_str_n_len(path_str, path_str_len, child_num, multi_index, flags)
bip32_path_from_str_n_len = _wallycore.bip32_path_from_str_n_len

def bip32_path_from_str_n(path_str, path_str_len, child_num, multi_index, flags, child_path_out):
    return _wallycore.bip32_path_from_str_n(path_str, path_str_len, child_num, multi_index, flags, child_path_out)
bip32_path_from_str_n = _wallycore.bip32_path_from_str_n

def bip32_path_str_get_features(path_str):
    return _wallycore.bip32_path_str_get_features(path_str)
bip32_path_str_get_features = _wallycore.bip32_path_str_get_features

def bip32_path_str_n_get_features(path_str, path_str_len):
    return _wallycore.bip32_path_str_n_get_features(path_str, path_str_len)
bip32_path_str_n_get_features = _wallycore.bip32_path_str_n_get_features
LIBWALLY_CORE_BIP32_INT_H = _wallycore.LIBWALLY_CORE_BIP32_INT_H

def bip32_key_get_chain_code(hdkey, bytes_out):
    return _wallycore.bip32_key_get_chain_code(hdkey, bytes_out)
bip32_key_get_chain_code = _wallycore.bip32_key_get_chain_code

def bip32_key_get_parent160(hdkey, bytes_out):
    return _wallycore.bip32_key_get_parent160(hdkey, bytes_out)
bip32_key_get_parent160 = _wallycore.bip32_key_get_parent160

def bip32_key_get_priv_key(hdkey, bytes_out):
    return _wallycore.bip32_key_get_priv_key(hdkey, bytes_out)
bip32_key_get_priv_key = _wallycore.bip32_key_get_priv_key

def bip32_key_get_hash160(hdkey, bytes_out):
    return _wallycore.bip32_key_get_hash160(hdkey, bytes_out)
bip32_key_get_hash160 = _wallycore.bip32_key_get_hash160

def bip32_key_get_pub_key(hdkey, bytes_out):
    return _wallycore.bip32_key_get_pub_key(hdkey, bytes_out)
bip32_key_get_pub_key = _wallycore.bip32_key_get_pub_key

def bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out):
    return _wallycore.bip32_key_get_pub_key_tweak_sum(hdkey, bytes_out)
bip32_key_get_pub_key_tweak_sum = _wallycore.bip32_key_get_pub_key_tweak_sum

def bip32_key_get_depth(hdkey):
    return _wallycore.bip32_key_get_depth(hdkey)
bip32_key_get_depth = _wallycore.bip32_key_get_depth

def bip32_key_get_child_num(hdkey):
    return _wallycore.bip32_key_get_child_num(hdkey)
bip32_key_get_child_num = _wallycore.bip32_key_get_child_num

def bip32_key_get_version(hdkey):
    return _wallycore.bip32_key_get_version(hdkey)
bip32_key_get_version = _wallycore.bip32_key_get_version
BIP38_KEY_NETWORK_MASK = _wallycore.BIP38_KEY_NETWORK_MASK
BIP38_KEY_MAINNET = _wallycore.BIP38_KEY_MAINNET
BIP38_KEY_TESTNET = _wallycore.BIP38_KEY_TESTNET
BIP38_KEY_COMPRESSED = _wallycore.BIP38_KEY_COMPRESSED
BIP38_KEY_EC_MULT = _wallycore.BIP38_KEY_EC_MULT
BIP38_KEY_QUICK_CHECK = _wallycore.BIP38_KEY_QUICK_CHECK
BIP38_KEY_RAW_MODE = _wallycore.BIP38_KEY_RAW_MODE
BIP38_KEY_SWAP_ORDER = _wallycore.BIP38_KEY_SWAP_ORDER
BIP38_SERIALIZED_LEN = _wallycore.BIP38_SERIALIZED_LEN

def bip38_raw_from_private_key(bytes, arg2, flags, bytes_out):
    return _wallycore.bip38_raw_from_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_from_private_key = _wallycore.bip38_raw_from_private_key

def bip38_from_private_key(bytes, arg2, flags):
    return _wallycore.bip38_from_private_key(bytes, arg2, flags)
bip38_from_private_key = _wallycore.bip38_from_private_key

def bip38_raw_to_private_key(bytes, arg2, flags, bytes_out):
    return _wallycore.bip38_raw_to_private_key(bytes, arg2, flags, bytes_out)
bip38_raw_to_private_key = _wallycore.bip38_raw_to_private_key

def bip38_to_private_key(bip38, arg2, flags, bytes_out):
    return _wallycore.bip38_to_private_key(bip38, arg2, flags, bytes_out)
bip38_to_private_key = _wallycore.bip38_to_private_key

def bip38_raw_get_flags(bytes):
    return _wallycore.bip38_raw_get_flags(bytes)
bip38_raw_get_flags = _wallycore.bip38_raw_get_flags

def bip38_get_flags(bip38):
    return _wallycore.bip38_get_flags(bip38)
bip38_get_flags = _wallycore.bip38_get_flags
BIP39_ENTROPY_LEN_128 = _wallycore.BIP39_ENTROPY_LEN_128
BIP39_ENTROPY_LEN_160 = _wallycore.BIP39_ENTROPY_LEN_160
BIP39_ENTROPY_LEN_192 = _wallycore.BIP39_ENTROPY_LEN_192
BIP39_ENTROPY_LEN_224 = _wallycore.BIP39_ENTROPY_LEN_224
BIP39_ENTROPY_LEN_256 = _wallycore.BIP39_ENTROPY_LEN_256
BIP39_ENTROPY_LEN_288 = _wallycore.BIP39_ENTROPY_LEN_288
BIP39_ENTROPY_LEN_320 = _wallycore.BIP39_ENTROPY_LEN_320
BIP39_SEED_LEN_512 = _wallycore.BIP39_SEED_LEN_512
BIP39_ENTROPY_MAX_LEN = _wallycore.BIP39_ENTROPY_MAX_LEN
BIP39_WORDLIST_LEN = _wallycore.BIP39_WORDLIST_LEN

def bip39_get_languages():
    return _wallycore.bip39_get_languages()
bip39_get_languages = _wallycore.bip39_get_languages

def bip39_get_wordlist(lang):
    return _wallycore.bip39_get_wordlist(lang)
bip39_get_wordlist = _wallycore.bip39_get_wordlist

def bip39_get_word(w, index):
    return _wallycore.bip39_get_word(w, index)
bip39_get_word = _wallycore.bip39_get_word

def bip39_mnemonic_from_bytes(w, bytes):
    return _wallycore.bip39_mnemonic_from_bytes(w, bytes)
bip39_mnemonic_from_bytes = _wallycore.bip39_mnemonic_from_bytes

def bip39_mnemonic_to_bytes(w, mnemonic, bytes_out):
    return _wallycore.bip39_mnemonic_to_bytes(w, mnemonic, bytes_out)
bip39_mnemonic_to_bytes = _wallycore.bip39_mnemonic_to_bytes

def bip39_mnemonic_validate(w, mnemonic):
    return _wallycore.bip39_mnemonic_validate(w, mnemonic)
bip39_mnemonic_validate = _wallycore.bip39_mnemonic_validate

def bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out):
    return _wallycore.bip39_mnemonic_to_seed(mnemonic, passphrase, bytes_out)
bip39_mnemonic_to_seed = _wallycore.bip39_mnemonic_to_seed

def bip39_mnemonic_to_seed512(mnemonic, passphrase, bytes_out):
    return _wallycore.bip39_mnemonic_to_seed512(mnemonic, passphrase, bytes_out)
bip39_mnemonic_to_seed512 = _wallycore.bip39_mnemonic_to_seed512

def bip85_get_languages():
    return _wallycore.bip85_get_languages()
bip85_get_languages = _wallycore.bip85_get_languages

def bip85_get_bip39_entropy(hdkey, lang, num_words, index, bytes_out):
    return _wallycore.bip85_get_bip39_entropy(hdkey, lang, num_words, index, bytes_out)
bip85_get_bip39_entropy = _wallycore.bip85_get_bip39_entropy

def bip85_get_rsa_entropy(hdkey, key_bits, index, bytes_out):
    return _wallycore.bip85_get_rsa_entropy(hdkey, key_bits, index, bytes_out)
bip85_get_rsa_entropy = _wallycore.bip85_get_rsa_entropy
WALLY_CS_MAX_ASSETS = _wallycore.WALLY_CS_MAX_ASSETS

def coinselect_assets(values, target, attempts, io_ratio, indices_out):
    return _wallycore.coinselect_assets(values, target, attempts, io_ratio, indices_out)
coinselect_assets = _wallycore.coinselect_assets

def scrypt(arg1, salt, cost, block_size, parallelism, bytes_out):
    return _wallycore.scrypt(arg1, salt, cost, block_size, parallelism, bytes_out)
scrypt = _wallycore.scrypt
AES_BLOCK_LEN = _wallycore.AES_BLOCK_LEN
AES_KEY_LEN_128 = _wallycore.AES_KEY_LEN_128
AES_KEY_LEN_192 = _wallycore.AES_KEY_LEN_192
AES_KEY_LEN_256 = _wallycore.AES_KEY_LEN_256
AES_FLAG_ENCRYPT = _wallycore.AES_FLAG_ENCRYPT
AES_FLAG_DECRYPT = _wallycore.AES_FLAG_DECRYPT

def aes_len(key, bytes, flags):
    return _wallycore.aes_len(key, bytes, flags)
aes_len = _wallycore.aes_len

def aes(key, bytes, flags, bytes_out):
    return _wallycore.aes(key, bytes, flags, bytes_out)
aes = _wallycore.aes

def aes_cbc_get_maximum_length(key, iv, bytes, flags):
    return _wallycore.aes_cbc_get_maximum_length(key, iv, bytes, flags)
aes_cbc_get_maximum_length = _wallycore.aes_cbc_get_maximum_length

def aes_cbc(key, iv, bytes, flags, bytes_out):
    return _wallycore.aes_cbc(key, iv, bytes, flags, bytes_out)
aes_cbc = _wallycore.aes_cbc
SHA256_LEN = _wallycore.SHA256_LEN
SHA512_LEN = _wallycore.SHA512_LEN

def sha256(bytes, bytes_out):
    return _wallycore.sha256(bytes, bytes_out)
sha256 = _wallycore.sha256

def sha256_midstate(bytes, bytes_out):
    return _wallycore.sha256_midstate(bytes, bytes_out)
sha256_midstate = _wallycore.sha256_midstate

def sha256d(bytes, bytes_out):
    return _wallycore.sha256d(bytes, bytes_out)
sha256d = _wallycore.sha256d

def sha512(bytes, bytes_out):
    return _wallycore.sha512(bytes, bytes_out)
sha512 = _wallycore.sha512

def bip340_tagged_hash(bytes, tag, bytes_out):
    return _wallycore.bip340_tagged_hash(bytes, tag, bytes_out)
bip340_tagged_hash = _wallycore.bip340_tagged_hash
RIPEMD160_LEN = _wallycore.RIPEMD160_LEN

def ripemd160(bytes, bytes_out):
    return _wallycore.ripemd160(bytes, bytes_out)
ripemd160 = _wallycore.ripemd160
HASH160_LEN = _wallycore.HASH160_LEN

def hash160(bytes, bytes_out):
    return _wallycore.hash160(bytes, bytes_out)
hash160 = _wallycore.hash160
HMAC_SHA256_LEN = _wallycore.HMAC_SHA256_LEN
HMAC_SHA512_LEN = _wallycore.HMAC_SHA512_LEN

def hmac_sha256(key, bytes, bytes_out):
    return _wallycore.hmac_sha256(key, bytes, bytes_out)
hmac_sha256 = _wallycore.hmac_sha256

def hmac_sha512(key, bytes, bytes_out):
    return _wallycore.hmac_sha512(key, bytes, bytes_out)
hmac_sha512 = _wallycore.hmac_sha512
PBKDF2_HMAC_SHA256_LEN = _wallycore.PBKDF2_HMAC_SHA256_LEN
PBKDF2_HMAC_SHA512_LEN = _wallycore.PBKDF2_HMAC_SHA512_LEN

def pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out):
    return _wallycore.pbkdf2_hmac_sha256(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha256 = _wallycore.pbkdf2_hmac_sha256

def pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out):
    return _wallycore.pbkdf2_hmac_sha512(arg1, salt, flags, cost, bytes_out)
pbkdf2_hmac_sha512 = _wallycore.pbkdf2_hmac_sha512
EC_PRIVATE_KEY_LEN = _wallycore.EC_PRIVATE_KEY_LEN
EC_PUBLIC_KEY_LEN = _wallycore.EC_PUBLIC_KEY_LEN
EC_XONLY_PUBLIC_KEY_LEN = _wallycore.EC_XONLY_PUBLIC_KEY_LEN
EC_PUBLIC_KEY_UNCOMPRESSED_LEN = _wallycore.EC_PUBLIC_KEY_UNCOMPRESSED_LEN
EC_MESSAGE_HASH_LEN = _wallycore.EC_MESSAGE_HASH_LEN
EC_SIGNATURE_LEN = _wallycore.EC_SIGNATURE_LEN
EC_SIGNATURE_RECOVERABLE_LEN = _wallycore.EC_SIGNATURE_RECOVERABLE_LEN
EC_SIGNATURE_DER_MAX_LEN = _wallycore.EC_SIGNATURE_DER_MAX_LEN
EC_SIGNATURE_DER_MAX_LOW_R_LEN = _wallycore.EC_SIGNATURE_DER_MAX_LOW_R_LEN
EC_SCALAR_LEN = _wallycore.EC_SCALAR_LEN
EC_FLAG_ECDSA = _wallycore.EC_FLAG_ECDSA
EC_FLAG_SCHNORR = _wallycore.EC_FLAG_SCHNORR
EC_FLAG_GRIND_R = _wallycore.EC_FLAG_GRIND_R
EC_FLAG_RECOVERABLE = _wallycore.EC_FLAG_RECOVERABLE
EC_FLAG_ELEMENTS = _wallycore.EC_FLAG_ELEMENTS
EC_FLAGS_ALL = _wallycore.EC_FLAGS_ALL

def ec_private_key_verify(priv_key):
    return _wallycore.ec_private_key_verify(priv_key)
ec_private_key_verify = _wallycore.ec_private_key_verify

def ec_public_key_verify(pub_key):
    return _wallycore.ec_public_key_verify(pub_key)
ec_public_key_verify = _wallycore.ec_public_key_verify

def ec_xonly_public_key_verify(pub_key):
    return _wallycore.ec_xonly_public_key_verify(pub_key)
ec_xonly_public_key_verify = _wallycore.ec_xonly_public_key_verify

def ec_public_key_from_private_key(priv_key, bytes_out):
    return _wallycore.ec_public_key_from_private_key(priv_key, bytes_out)
ec_public_key_from_private_key = _wallycore.ec_public_key_from_private_key

def ec_public_key_decompress(pub_key, bytes_out):
    return _wallycore.ec_public_key_decompress(pub_key, bytes_out)
ec_public_key_decompress = _wallycore.ec_public_key_decompress

def ec_public_key_negate(pub_key, bytes_out):
    return _wallycore.ec_public_key_negate(pub_key, bytes_out)
ec_public_key_negate = _wallycore.ec_public_key_negate

def ec_public_key_tweak(pub_key, tweak, bytes_out):
    return _wallycore.ec_public_key_tweak(pub_key, tweak, bytes_out)
ec_public_key_tweak = _wallycore.ec_public_key_tweak

def ec_public_key_bip341_tweak(pub_key, merkle_root, flags, bytes_out):
    return _wallycore.ec_public_key_bip341_tweak(pub_key, merkle_root, flags, bytes_out)
ec_public_key_bip341_tweak = _wallycore.ec_public_key_bip341_tweak

def ec_private_key_bip341_tweak(priv_key, merkle_root, flags, bytes_out):
    return _wallycore.ec_private_key_bip341_tweak(priv_key, merkle_root, flags, bytes_out)
ec_private_key_bip341_tweak = _wallycore.ec_private_key_bip341_tweak

def ec_sig_from_bytes_len(priv_key, bytes, flags):
    return _wallycore.ec_sig_from_bytes_len(priv_key, bytes, flags)
ec_sig_from_bytes_len = _wallycore.ec_sig_from_bytes_len

def ec_sig_from_bytes(priv_key, bytes, flags, bytes_out):
    return _wallycore.ec_sig_from_bytes(priv_key, bytes, flags, bytes_out)
ec_sig_from_bytes = _wallycore.ec_sig_from_bytes

def ec_sig_from_bytes_aux_len(priv_key, bytes, aux_rand, flags):
    return _wallycore.ec_sig_from_bytes_aux_len(priv_key, bytes, aux_rand, flags)
ec_sig_from_bytes_aux_len = _wallycore.ec_sig_from_bytes_aux_len

def ec_sig_from_bytes_aux(priv_key, bytes, aux_rand, flags, bytes_out):
    return _wallycore.ec_sig_from_bytes_aux(priv_key, bytes, aux_rand, flags, bytes_out)
ec_sig_from_bytes_aux = _wallycore.ec_sig_from_bytes_aux

def ec_sig_normalize(sig, bytes_out):
    return _wallycore.ec_sig_normalize(sig, bytes_out)
ec_sig_normalize = _wallycore.ec_sig_normalize

def ec_sig_to_der(sig, bytes_out):
    return _wallycore.ec_sig_to_der(sig, bytes_out)
ec_sig_to_der = _wallycore.ec_sig_to_der

def ec_sig_from_der(bytes, bytes_out):
    return _wallycore.ec_sig_from_der(bytes, bytes_out)
ec_sig_from_der = _wallycore.ec_sig_from_der

def ec_sig_verify(pub_key, bytes, flags, sig):
    return _wallycore.ec_sig_verify(pub_key, bytes, flags, sig)
ec_sig_verify = _wallycore.ec_sig_verify

def ec_sig_to_public_key(bytes, sig, bytes_out):
    return _wallycore.ec_sig_to_public_key(bytes, sig, bytes_out)
ec_sig_to_public_key = _wallycore.ec_sig_to_public_key

def ec_scalar_verify(scalar):
    return _wallycore.ec_scalar_verify(scalar)
ec_scalar_verify = _wallycore.ec_scalar_verify

def ec_scalar_add(scalar, operand, bytes_out):
    return _wallycore.ec_scalar_add(scalar, operand, bytes_out)
ec_scalar_add = _wallycore.ec_scalar_add

def ec_scalar_subtract(scalar, operand, bytes_out):
    return _wallycore.ec_scalar_subtract(scalar, operand, bytes_out)
ec_scalar_subtract = _wallycore.ec_scalar_subtract

def ec_scalar_multiply(scalar, operand, bytes_out):
    return _wallycore.ec_scalar_multiply(scalar, operand, bytes_out)
ec_scalar_multiply = _wallycore.ec_scalar_multiply
BITCOIN_MESSAGE_MAX_LEN = _wallycore.BITCOIN_MESSAGE_MAX_LEN
BITCOIN_MESSAGE_FLAG_HASH = _wallycore.BITCOIN_MESSAGE_FLAG_HASH

def format_bitcoin_message(bytes, flags, bytes_out):
    return _wallycore.format_bitcoin_message(bytes, flags, bytes_out)
format_bitcoin_message = _wallycore.format_bitcoin_message

def ecdh(pub_key, priv_key, bytes_out):
    return _wallycore.ecdh(pub_key, priv_key, bytes_out)
ecdh = _wallycore.ecdh
WALLY_S2C_DATA_LEN = _wallycore.WALLY_S2C_DATA_LEN
WALLY_S2C_OPENING_LEN = _wallycore.WALLY_S2C_OPENING_LEN

def s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out):
    return _wallycore.s2c_sig_from_bytes(priv_key, bytes, s2c_data, flags, s2c_opening_out, bytes_out)
s2c_sig_from_bytes = _wallycore.s2c_sig_from_bytes

def s2c_commitment_verify(sig, s2c_data, s2c_opening, flags):
    return _wallycore.s2c_commitment_verify(sig, s2c_data, s2c_opening, flags)
s2c_commitment_verify = _wallycore.s2c_commitment_verify

def aes_cbc_with_ecdh_key_get_maximum_length(priv_key, iv, bytes, pub_key, label, flags):
    return _wallycore.aes_cbc_with_ecdh_key_get_maximum_length(priv_key, iv, bytes, pub_key, label, flags)
aes_cbc_with_ecdh_key_get_maximum_length = _wallycore.aes_cbc_with_ecdh_key_get_maximum_length

def aes_cbc_with_ecdh_key(priv_key, iv, bytes, pub_key, label, flags, bytes_out):
    return _wallycore.aes_cbc_with_ecdh_key(priv_key, iv, bytes, pub_key, label, flags, bytes_out)
aes_cbc_with_ecdh_key = _wallycore.aes_cbc_with_ecdh_key
WALLY_MINISCRIPT_TAPSCRIPT = _wallycore.WALLY_MINISCRIPT_TAPSCRIPT
WALLY_MINISCRIPT_ONLY = _wallycore.WALLY_MINISCRIPT_ONLY
WALLY_MINISCRIPT_REQUIRE_CHECKSUM = _wallycore.WALLY_MINISCRIPT_REQUIRE_CHECKSUM
WALLY_MINISCRIPT_POLICY_TEMPLATE = _wallycore.WALLY_MINISCRIPT_POLICY_TEMPLATE
WALLY_MINISCRIPT_UNIQUE_KEYPATHS = _wallycore.WALLY_MINISCRIPT_UNIQUE_KEYPATHS
WALLY_MINISCRIPT_AS_ELEMENTS = _wallycore.WALLY_MINISCRIPT_AS_ELEMENTS
WALLY_MINISCRIPT_DEPTH_MASK = _wallycore.WALLY_MINISCRIPT_DEPTH_MASK
WALLY_MINISCRIPT_DEPTH_SHIFT = _wallycore.WALLY_MINISCRIPT_DEPTH_SHIFT
WALLY_MS_IS_RANGED = _wallycore.WALLY_MS_IS_RANGED
WALLY_MS_IS_MULTIPATH = _wallycore.WALLY_MS_IS_MULTIPATH
WALLY_MS_IS_PRIVATE = _wallycore.WALLY_MS_IS_PRIVATE
WALLY_MS_IS_UNCOMPRESSED = _wallycore.WALLY_MS_IS_UNCOMPRESSED
WALLY_MS_IS_RAW = _wallycore.WALLY_MS_IS_RAW
WALLY_MS_IS_DESCRIPTOR = _wallycore.WALLY_MS_IS_DESCRIPTOR
WALLY_MS_IS_X_ONLY = _wallycore.WALLY_MS_IS_X_ONLY
WALLY_MS_IS_PARENTED = _wallycore.WALLY_MS_IS_PARENTED
WALLY_MS_IS_ELEMENTS = _wallycore.WALLY_MS_IS_ELEMENTS
WALLY_MS_IS_SLIP77 = _wallycore.WALLY_MS_IS_SLIP77
WALLY_MS_IS_ELIP150 = _wallycore.WALLY_MS_IS_ELIP150
WALLY_MS_IS_ELIP151 = _wallycore.WALLY_MS_IS_ELIP151
WALLY_MS_ANY_BLINDING_KEY = _wallycore.WALLY_MS_ANY_BLINDING_KEY
WALLY_MS_CANONICAL_NO_CHECKSUM = _wallycore.WALLY_MS_CANONICAL_NO_CHECKSUM
WALLY_MS_BLINDING_KEY_INDEX = _wallycore.WALLY_MS_BLINDING_KEY_INDEX

def descriptor_parse(descriptor, vars_in, network, flags):
    return _wallycore.descriptor_parse(descriptor, vars_in, network, flags)
descriptor_parse = _wallycore.descriptor_parse

def descriptor_free(descriptor):
    return _wallycore.descriptor_free(descriptor)
descriptor_free = _wallycore.descriptor_free

def descriptor_canonicalize(descriptor, flags):
    return _wallycore.descriptor_canonicalize(descriptor, flags)
descriptor_canonicalize = _wallycore.descriptor_canonicalize

def descriptor_get_checksum(descriptor, flags):
    return _wallycore.descriptor_get_checksum(descriptor, flags)
descriptor_get_checksum = _wallycore.descriptor_get_checksum

def descriptor_get_network(descriptor):
    return _wallycore.descriptor_get_network(descriptor)
descriptor_get_network = _wallycore.descriptor_get_network

def descriptor_set_network(descriptor, network):
    return _wallycore.descriptor_set_network(descriptor, network)
descriptor_set_network = _wallycore.descriptor_set_network

def descriptor_get_features(descriptor):
    return _wallycore.descriptor_get_features(descriptor)
descriptor_get_features = _wallycore.descriptor_get_features

def descriptor_get_num_variants(descriptor):
    return _wallycore.descriptor_get_num_variants(descriptor)
descriptor_get_num_variants = _wallycore.descriptor_get_num_variants

def descriptor_get_num_paths(descriptor):
    return _wallycore.descriptor_get_num_paths(descriptor)
descriptor_get_num_paths = _wallycore.descriptor_get_num_paths

def descriptor_get_depth(descriptor):
    return _wallycore.descriptor_get_depth(descriptor)
descriptor_get_depth = _wallycore.descriptor_get_depth

def descriptor_get_num_keys(descriptor):
    return _wallycore.descriptor_get_num_keys(descriptor)
descriptor_get_num_keys = _wallycore.descriptor_get_num_keys

def descriptor_get_key(descriptor, index):
    return _wallycore.descriptor_get_key(descriptor, index)
descriptor_get_key = _wallycore.descriptor_get_key

def descriptor_get_key_features(descriptor, index):
    return _wallycore.descriptor_get_key_features(descriptor, index)
descriptor_get_key_features = _wallycore.descriptor_get_key_features

def descriptor_get_key_child_path_str_len(descriptor, index):
    return _wallycore.descriptor_get_key_child_path_str_len(descriptor, index)
descriptor_get_key_child_path_str_len = _wallycore.descriptor_get_key_child_path_str_len

def descriptor_get_key_child_path_str(descriptor, index):
    return _wallycore.descriptor_get_key_child_path_str(descriptor, index)
descriptor_get_key_child_path_str = _wallycore.descriptor_get_key_child_path_str

def descriptor_get_key_origin_fingerprint(descriptor, index, bytes_out):
    return _wallycore.descriptor_get_key_origin_fingerprint(descriptor, index, bytes_out)
descriptor_get_key_origin_fingerprint = _wallycore.descriptor_get_key_origin_fingerprint

def descriptor_get_key_origin_path_str_len(descriptor, index):
    return _wallycore.descriptor_get_key_origin_path_str_len(descriptor, index)
descriptor_get_key_origin_path_str_len = _wallycore.descriptor_get_key_origin_path_str_len

def descriptor_get_key_origin_path_str(descriptor, index):
    return _wallycore.descriptor_get_key_origin_path_str(descriptor, index)
descriptor_get_key_origin_path_str = _wallycore.descriptor_get_key_origin_path_str

def descriptor_to_script_get_maximum_length(descriptor, depth, index, variant, multi_index, child_num, flags):
    return _wallycore.descriptor_to_script_get_maximum_length(descriptor, depth, index, variant, multi_index, child_num, flags)
descriptor_to_script_get_maximum_length = _wallycore.descriptor_to_script_get_maximum_length

def descriptor_to_script(descriptor, depth, index, variant, multi_index, child_num, flags, bytes_out):
    return _wallycore.descriptor_to_script(descriptor, depth, index, variant, multi_index, child_num, flags, bytes_out)
descriptor_to_script = _wallycore.descriptor_to_script

def descriptor_to_address(descriptor, variant, multi_index, child_num, flags):
    return _wallycore.descriptor_to_address(descriptor, variant, multi_index, child_num, flags)
descriptor_to_address = _wallycore.descriptor_to_address

def descriptor_to_addresses(descriptor, variant, multi_index, child_num, flags, output):
    return _wallycore.descriptor_to_addresses(descriptor, variant, multi_index, child_num, flags, output)
descriptor_to_addresses = _wallycore.descriptor_to_addresses

def map_init_alloc(allocation_len, verify_fn):
    return _wallycore.map_init_alloc(allocation_len, verify_fn)
map_init_alloc = _wallycore.map_init_alloc

def map_free(map_in):
    return _wallycore.map_free(map_in)
map_free = _wallycore.map_free

def map_clear(map_in):
    return _wallycore.map_clear(map_in)
map_clear = _wallycore.map_clear

def map_add(map_in, key, value):
    return _wallycore.map_add(map_in, key, value)
map_add = _wallycore.map_add

def map_add_integer(map_in, key, value):
    return _wallycore.map_add_integer(map_in, key, value)
map_add_integer = _wallycore.map_add_integer

def map_replace(map_in, key, value):
    return _wallycore.map_replace(map_in, key, value)
map_replace = _wallycore.map_replace

def map_replace_integer(map_in, key, value):
    return _wallycore.map_replace_integer(map_in, key, value)
map_replace_integer = _wallycore.map_replace_integer

def map_remove(map_in, key):
    return _wallycore.map_remove(map_in, key)
map_remove = _wallycore.map_remove

def map_remove_integer(map_in, key):
    return _wallycore.map_remove_integer(map_in, key)
map_remove_integer = _wallycore.map_remove_integer

def map_find_from(map_in, index, key):
    return _wallycore.map_find_from(map_in, index, key)
map_find_from = _wallycore.map_find_from

def map_find(map_in, key):
    return _wallycore.map_find(map_in, key)
map_find = _wallycore.map_find

def map_find_integer(map_in, key):
    return _wallycore.map_find_integer(map_in, key)
map_find_integer = _wallycore.map_find_integer

def map_get_num_items(map_in):
    return _wallycore.map_get_num_items(map_in)
map_get_num_items = _wallycore.map_get_num_items

def map_get_item_key_length(map_in, index):
    return _wallycore.map_get_item_key_length(map_in, index)
map_get_item_key_length = _wallycore.map_get_item_key_length

def map_get_item_key(map_in, index, bytes_out):
    return _wallycore.map_get_item_key(map_in, index, bytes_out)
map_get_item_key = _wallycore.map_get_item_key

def map_get_item_integer_key(map_in, index):
    return _wallycore.map_get_item_integer_key(map_in, index)
map_get_item_integer_key = _wallycore.map_get_item_integer_key

def map_get_item_length(map_in, index):
    return _wallycore.map_get_item_length(map_in, index)
map_get_item_length = _wallycore.map_get_item_length

def map_get_item(map_in, index, bytes_out):
    return _wallycore.map_get_item(map_in, index, bytes_out)
map_get_item = _wallycore.map_get_item

def map_sort(map_in, flags):
    return _wallycore.map_sort(map_in, flags)
map_sort = _wallycore.map_sort

def map_combine(map_in, source):
    return _wallycore.map_combine(map_in, source)
map_combine = _wallycore.map_combine

def map_assign(map_in, source):
    return _wallycore.map_assign(map_in, source)
map_assign = _wallycore.map_assign

def map_find_bip32_public_key_from(map_in, index, hdkey):
    return _wallycore.map_find_bip32_public_key_from(map_in, index, hdkey)
map_find_bip32_public_key_from = _wallycore.map_find_bip32_public_key_from

def map_keypath_get_bip32_key_from_alloc(map_in, index, hdkey):
    return _wallycore.map_keypath_get_bip32_key_from_alloc(map_in, index, hdkey)
map_keypath_get_bip32_key_from_alloc = _wallycore.map_keypath_get_bip32_key_from_alloc

def keypath_bip32_verify(key, val):
    return _wallycore.keypath_bip32_verify(key, val)
keypath_bip32_verify = _wallycore.keypath_bip32_verify

def keypath_public_key_verify(key, val):
    return _wallycore.keypath_public_key_verify(key, val)
keypath_public_key_verify = _wallycore.keypath_public_key_verify

def keypath_xonly_public_key_verify(key, val):
    return _wallycore.keypath_xonly_public_key_verify(key, val)
keypath_xonly_public_key_verify = _wallycore.keypath_xonly_public_key_verify

def merkle_path_xonly_public_key_verify(key, val):
    return _wallycore.merkle_path_xonly_public_key_verify(key, val)
merkle_path_xonly_public_key_verify = _wallycore.merkle_path_xonly_public_key_verify

def map_keypath_bip32_init_alloc(allocation_len):
    return _wallycore.map_keypath_bip32_init_alloc(allocation_len)
map_keypath_bip32_init_alloc = _wallycore.map_keypath_bip32_init_alloc

def map_keypath_public_key_init_alloc(allocation_len):
    return _wallycore.map_keypath_public_key_init_alloc(allocation_len)
map_keypath_public_key_init_alloc = _wallycore.map_keypath_public_key_init_alloc

def map_keypath_add(map_in, pub_key, fingerprint, child_path):
    return _wallycore.map_keypath_add(map_in, pub_key, fingerprint, child_path)
map_keypath_add = _wallycore.map_keypath_add

def map_merkle_path_add(map_in, pub_key, merkle_hashes):
    return _wallycore.map_merkle_path_add(map_in, pub_key, merkle_hashes)
map_merkle_path_add = _wallycore.map_merkle_path_add

def keypath_get_fingerprint(val, bytes_out):
    return _wallycore.keypath_get_fingerprint(val, bytes_out)
keypath_get_fingerprint = _wallycore.keypath_get_fingerprint

def map_keypath_get_item_fingerprint(map_in, index, bytes_out):
    return _wallycore.map_keypath_get_item_fingerprint(map_in, index, bytes_out)
map_keypath_get_item_fingerprint = _wallycore.map_keypath_get_item_fingerprint

def keypath_get_path_len(val):
    return _wallycore.keypath_get_path_len(val)
keypath_get_path_len = _wallycore.keypath_get_path_len

def map_keypath_get_item_path_len(map_in, index):
    return _wallycore.map_keypath_get_item_path_len(map_in, index)
map_keypath_get_item_path_len = _wallycore.map_keypath_get_item_path_len

def keypath_get_path(val, child_path_out):
    return _wallycore.keypath_get_path(val, child_path_out)
keypath_get_path = _wallycore.keypath_get_path

def map_keypath_get_item_path(map_in, index, child_path_out):
    return _wallycore.map_keypath_get_item_path(map_in, index, child_path_out)
map_keypath_get_item_path = _wallycore.map_keypath_get_item_path

def map_hash_preimage_verify(key, val):
    return _wallycore.map_hash_preimage_verify(key, val)
map_hash_preimage_verify = _wallycore.map_hash_preimage_verify

def map_preimage_init_alloc(allocation_len):
    return _wallycore.map_preimage_init_alloc(allocation_len)
map_preimage_init_alloc = _wallycore.map_preimage_init_alloc

def map_preimage_ripemd160_add(map_in, value):
    return _wallycore.map_preimage_ripemd160_add(map_in, value)
map_preimage_ripemd160_add = _wallycore.map_preimage_ripemd160_add

def map_preimage_sha256_add(map_in, value):
    return _wallycore.map_preimage_sha256_add(map_in, value)
map_preimage_sha256_add = _wallycore.map_preimage_sha256_add

def map_preimage_hash160_add(map_in, value):
    return _wallycore.map_preimage_hash160_add(map_in, value)
map_preimage_hash160_add = _wallycore.map_preimage_hash160_add

def map_preimage_sha256d_add(map_in, value):
    return _wallycore.map_preimage_sha256d_add(map_in, value)
map_preimage_sha256d_add = _wallycore.map_preimage_sha256d_add
WALLY_PSBT_VERSION_0 = _wallycore.WALLY_PSBT_VERSION_0
WALLY_PSBT_VERSION_2 = _wallycore.WALLY_PSBT_VERSION_2
WALLY_PSBT_HIGHEST_VERSION = _wallycore.WALLY_PSBT_HIGHEST_VERSION
WALLY_PSBT_INIT_PSET = _wallycore.WALLY_PSBT_INIT_PSET
WALLY_PSBT_FLAG_NON_FINAL = _wallycore.WALLY_PSBT_FLAG_NON_FINAL
WALLY_PSBT_PROPRIETARY_TYPE = _wallycore.WALLY_PSBT_PROPRIETARY_TYPE
WALLY_PSBT_TXMOD_INPUTS = _wallycore.WALLY_PSBT_TXMOD_INPUTS
WALLY_PSBT_TXMOD_OUTPUTS = _wallycore.WALLY_PSBT_TXMOD_OUTPUTS
WALLY_PSBT_TXMOD_SINGLE = _wallycore.WALLY_PSBT_TXMOD_SINGLE
WALLY_PSET_TXMOD_RESERVED = _wallycore.WALLY_PSET_TXMOD_RESERVED
WALLY_PSBT_PARSE_FLAG_STRICT = _wallycore.WALLY_PSBT_PARSE_FLAG_STRICT
WALLY_PSBT_PARSE_FLAG_LOOSE = _wallycore.WALLY_PSBT_PARSE_FLAG_LOOSE
WALLY_PSBT_SERIALIZE_FLAG_REDUNDANT = _wallycore.WALLY_PSBT_SERIALIZE_FLAG_REDUNDANT
WALLY_PSBT_SERIALIZE_SIGS_ONLY = _wallycore.WALLY_PSBT_SERIALIZE_SIGS_ONLY
WALLY_PSBT_EXTRACT_FINAL = _wallycore.WALLY_PSBT_EXTRACT_FINAL
WALLY_PSBT_EXTRACT_NON_FINAL = _wallycore.WALLY_PSBT_EXTRACT_NON_FINAL
WALLY_PSBT_EXTRACT_OPT_FINAL = _wallycore.WALLY_PSBT_EXTRACT_OPT_FINAL
WALLY_PSBT_FINALIZE_NO_CLEAR = _wallycore.WALLY_PSBT_FINALIZE_NO_CLEAR
WALLY_PSBT_COMBINE_SIGS = _wallycore.WALLY_PSBT_COMBINE_SIGS
WALLY_PSBT_ID_BIP370 = _wallycore.WALLY_PSBT_ID_BIP370
WALLY_PSBT_ID_AS_V2 = _wallycore.WALLY_PSBT_ID_AS_V2
WALLY_PSBT_ID_USE_LOCKTIME = _wallycore.WALLY_PSBT_ID_USE_LOCKTIME
WALLY_PSET_BLINDED_NONE = _wallycore.WALLY_PSET_BLINDED_NONE
WALLY_PSET_BLINDED_REQUIRED = _wallycore.WALLY_PSET_BLINDED_REQUIRED
WALLY_PSET_BLINDED_PARTIAL = _wallycore.WALLY_PSET_BLINDED_PARTIAL
WALLY_PSET_BLINDED_FULL = _wallycore.WALLY_PSET_BLINDED_FULL
WALLY_PSET_BLIND_ALL = _wallycore.WALLY_PSET_BLIND_ALL
WALLY_SCALAR_OFFSET_LEN = _wallycore.WALLY_SCALAR_OFFSET_LEN

def psbt_input_set_previous_txid(input, txhash):
    return _wallycore.psbt_input_set_previous_txid(input, txhash)
psbt_input_set_previous_txid = _wallycore.psbt_input_set_previous_txid

def psbt_input_set_output_index(input, index):
    return _wallycore.psbt_input_set_output_index(input, index)
psbt_input_set_output_index = _wallycore.psbt_input_set_output_index

def psbt_input_set_sequence(input, sequence):
    return _wallycore.psbt_input_set_sequence(input, sequence)
psbt_input_set_sequence = _wallycore.psbt_input_set_sequence

def psbt_input_clear_sequence(input):
    return _wallycore.psbt_input_clear_sequence(input)
psbt_input_clear_sequence = _wallycore.psbt_input_clear_sequence

def psbt_input_set_utxo(input, utxo):
    return _wallycore.psbt_input_set_utxo(input, utxo)
psbt_input_set_utxo = _wallycore.psbt_input_set_utxo

def psbt_input_set_witness_utxo(input, witness_utxo):
    return _wallycore.psbt_input_set_witness_utxo(input, witness_utxo)
psbt_input_set_witness_utxo = _wallycore.psbt_input_set_witness_utxo

def psbt_input_set_witness_utxo_from_tx(input, utxo, index):
    return _wallycore.psbt_input_set_witness_utxo_from_tx(input, utxo, index)
psbt_input_set_witness_utxo_from_tx = _wallycore.psbt_input_set_witness_utxo_from_tx

def psbt_input_set_redeem_script(input, script):
    return _wallycore.psbt_input_set_redeem_script(input, script)
psbt_input_set_redeem_script = _wallycore.psbt_input_set_redeem_script

def psbt_input_set_witness_script(input, script):
    return _wallycore.psbt_input_set_witness_script(input, script)
psbt_input_set_witness_script = _wallycore.psbt_input_set_witness_script

def psbt_input_set_final_scriptsig(input, final_scriptsig):
    return _wallycore.psbt_input_set_final_scriptsig(input, final_scriptsig)
psbt_input_set_final_scriptsig = _wallycore.psbt_input_set_final_scriptsig

def psbt_input_set_final_witness(input, witness):
    return _wallycore.psbt_input_set_final_witness(input, witness)
psbt_input_set_final_witness = _wallycore.psbt_input_set_final_witness

def psbt_input_set_keypaths(input, map_in):
    return _wallycore.psbt_input_set_keypaths(input, map_in)
psbt_input_set_keypaths = _wallycore.psbt_input_set_keypaths

def psbt_input_find_keypath(input, pub_key):
    return _wallycore.psbt_input_find_keypath(input, pub_key)
psbt_input_find_keypath = _wallycore.psbt_input_find_keypath

def psbt_input_keypath_add(input, pub_key, fingerprint, child_path):
    return _wallycore.psbt_input_keypath_add(input, pub_key, fingerprint, child_path)
psbt_input_keypath_add = _wallycore.psbt_input_keypath_add

def psbt_input_taproot_keypath_add(input, pub_key, tapleaf_hashes, fingerprint, child_path):
    return _wallycore.psbt_input_taproot_keypath_add(input, pub_key, tapleaf_hashes, fingerprint, child_path)
psbt_input_taproot_keypath_add = _wallycore.psbt_input_taproot_keypath_add

def psbt_input_set_signatures(input, map_in):
    return _wallycore.psbt_input_set_signatures(input, map_in)
psbt_input_set_signatures = _wallycore.psbt_input_set_signatures

def psbt_input_set_taproot_signature(input, tap_sig):
    return _wallycore.psbt_input_set_taproot_signature(input, tap_sig)
psbt_input_set_taproot_signature = _wallycore.psbt_input_set_taproot_signature

def psbt_input_set_taproot_internal_key(input, pub_key):
    return _wallycore.psbt_input_set_taproot_internal_key(input, pub_key)
psbt_input_set_taproot_internal_key = _wallycore.psbt_input_set_taproot_internal_key

def psbt_input_find_signature(input, pub_key):
    return _wallycore.psbt_input_find_signature(input, pub_key)
psbt_input_find_signature = _wallycore.psbt_input_find_signature

def psbt_input_add_signature(input, pub_key, sig):
    return _wallycore.psbt_input_add_signature(input, pub_key, sig)
psbt_input_add_signature = _wallycore.psbt_input_add_signature

def psbt_input_set_unknowns(input, map_in):
    return _wallycore.psbt_input_set_unknowns(input, map_in)
psbt_input_set_unknowns = _wallycore.psbt_input_set_unknowns

def psbt_input_find_unknown(input, key):
    return _wallycore.psbt_input_find_unknown(input, key)
psbt_input_find_unknown = _wallycore.psbt_input_find_unknown

def psbt_input_set_sighash(input, sighash):
    return _wallycore.psbt_input_set_sighash(input, sighash)
psbt_input_set_sighash = _wallycore.psbt_input_set_sighash

def psbt_input_set_required_locktime(input, required_locktime):
    return _wallycore.psbt_input_set_required_locktime(input, required_locktime)
psbt_input_set_required_locktime = _wallycore.psbt_input_set_required_locktime

def psbt_input_clear_required_locktime(input):
    return _wallycore.psbt_input_clear_required_locktime(input)
psbt_input_clear_required_locktime = _wallycore.psbt_input_clear_required_locktime

def psbt_input_set_required_lockheight(input, required_lockheight):
    return _wallycore.psbt_input_set_required_lockheight(input, required_lockheight)
psbt_input_set_required_lockheight = _wallycore.psbt_input_set_required_lockheight

def psbt_input_clear_required_lockheight(input):
    return _wallycore.psbt_input_clear_required_lockheight(input)
psbt_input_clear_required_lockheight = _wallycore.psbt_input_clear_required_lockheight

def psbt_input_set_amount(input, amount):
    return _wallycore.psbt_input_set_amount(input, amount)
psbt_input_set_amount = _wallycore.psbt_input_set_amount

def psbt_input_get_amount_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_amount_rangeproof(input, bytes_out)
psbt_input_get_amount_rangeproof = _wallycore.psbt_input_get_amount_rangeproof

def psbt_input_get_amount_rangeproof_len(input):
    return _wallycore.psbt_input_get_amount_rangeproof_len(input)
psbt_input_get_amount_rangeproof_len = _wallycore.psbt_input_get_amount_rangeproof_len

def psbt_input_set_amount_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_amount_rangeproof(input, rangeproof)
psbt_input_set_amount_rangeproof = _wallycore.psbt_input_set_amount_rangeproof

def psbt_input_clear_amount_rangeproof(input):
    return _wallycore.psbt_input_clear_amount_rangeproof(input)
psbt_input_clear_amount_rangeproof = _wallycore.psbt_input_clear_amount_rangeproof

def psbt_input_get_asset(input, bytes_out):
    return _wallycore.psbt_input_get_asset(input, bytes_out)
psbt_input_get_asset = _wallycore.psbt_input_get_asset

def psbt_input_get_asset_len(input):
    return _wallycore.psbt_input_get_asset_len(input)
psbt_input_get_asset_len = _wallycore.psbt_input_get_asset_len

def psbt_input_set_asset(input, asset):
    return _wallycore.psbt_input_set_asset(input, asset)
psbt_input_set_asset = _wallycore.psbt_input_set_asset

def psbt_input_clear_asset(input):
    return _wallycore.psbt_input_clear_asset(input)
psbt_input_clear_asset = _wallycore.psbt_input_clear_asset

def psbt_input_get_asset_surjectionproof(input, bytes_out):
    return _wallycore.psbt_input_get_asset_surjectionproof(input, bytes_out)
psbt_input_get_asset_surjectionproof = _wallycore.psbt_input_get_asset_surjectionproof

def psbt_input_get_asset_surjectionproof_len(input):
    return _wallycore.psbt_input_get_asset_surjectionproof_len(input)
psbt_input_get_asset_surjectionproof_len = _wallycore.psbt_input_get_asset_surjectionproof_len

def psbt_input_set_asset_surjectionproof(input, surjectionproof):
    return _wallycore.psbt_input_set_asset_surjectionproof(input, surjectionproof)
psbt_input_set_asset_surjectionproof = _wallycore.psbt_input_set_asset_surjectionproof

def psbt_input_clear_asset_surjectionproof(input):
    return _wallycore.psbt_input_clear_asset_surjectionproof(input)
psbt_input_clear_asset_surjectionproof = _wallycore.psbt_input_clear_asset_surjectionproof

def psbt_input_set_issuance_amount(input, amount):
    return _wallycore.psbt_input_set_issuance_amount(input, amount)
psbt_input_set_issuance_amount = _wallycore.psbt_input_set_issuance_amount

def psbt_input_set_inflation_keys(input, value):
    return _wallycore.psbt_input_set_inflation_keys(input, value)
psbt_input_set_inflation_keys = _wallycore.psbt_input_set_inflation_keys

def psbt_input_set_pegin_amount(input, amount):
    return _wallycore.psbt_input_set_pegin_amount(input, amount)
psbt_input_set_pegin_amount = _wallycore.psbt_input_set_pegin_amount

def psbt_input_set_pegin_tx(input, tx):
    return _wallycore.psbt_input_set_pegin_tx(input, tx)
psbt_input_set_pegin_tx = _wallycore.psbt_input_set_pegin_tx

def psbt_input_set_pegin_witness(input, witness):
    return _wallycore.psbt_input_set_pegin_witness(input, witness)
psbt_input_set_pegin_witness = _wallycore.psbt_input_set_pegin_witness

def psbt_input_get_pegin_txout_proof(input, bytes_out):
    return _wallycore.psbt_input_get_pegin_txout_proof(input, bytes_out)
psbt_input_get_pegin_txout_proof = _wallycore.psbt_input_get_pegin_txout_proof

def psbt_input_get_pegin_txout_proof_len(input):
    return _wallycore.psbt_input_get_pegin_txout_proof_len(input)
psbt_input_get_pegin_txout_proof_len = _wallycore.psbt_input_get_pegin_txout_proof_len

def psbt_input_set_pegin_txout_proof(input, txout_proof):
    return _wallycore.psbt_input_set_pegin_txout_proof(input, txout_proof)
psbt_input_set_pegin_txout_proof = _wallycore.psbt_input_set_pegin_txout_proof

def psbt_input_clear_pegin_txout_proof(input):
    return _wallycore.psbt_input_clear_pegin_txout_proof(input)
psbt_input_clear_pegin_txout_proof = _wallycore.psbt_input_clear_pegin_txout_proof

def psbt_input_get_pegin_genesis_blockhash(input, bytes_out):
    return _wallycore.psbt_input_get_pegin_genesis_blockhash(input, bytes_out)
psbt_input_get_pegin_genesis_blockhash = _wallycore.psbt_input_get_pegin_genesis_blockhash

def psbt_input_get_pegin_genesis_blockhash_len(input):
    return _wallycore.psbt_input_get_pegin_genesis_blockhash_len(input)
psbt_input_get_pegin_genesis_blockhash_len = _wallycore.psbt_input_get_pegin_genesis_blockhash_len

def psbt_input_set_pegin_genesis_blockhash(input, genesis_blockhash):
    return _wallycore.psbt_input_set_pegin_genesis_blockhash(input, genesis_blockhash)
psbt_input_set_pegin_genesis_blockhash = _wallycore.psbt_input_set_pegin_genesis_blockhash

def psbt_input_clear_pegin_genesis_blockhash(input):
    return _wallycore.psbt_input_clear_pegin_genesis_blockhash(input)
psbt_input_clear_pegin_genesis_blockhash = _wallycore.psbt_input_clear_pegin_genesis_blockhash

def psbt_input_get_pegin_claim_script(input, bytes_out):
    return _wallycore.psbt_input_get_pegin_claim_script(input, bytes_out)
psbt_input_get_pegin_claim_script = _wallycore.psbt_input_get_pegin_claim_script

def psbt_input_get_pegin_claim_script_len(input):
    return _wallycore.psbt_input_get_pegin_claim_script_len(input)
psbt_input_get_pegin_claim_script_len = _wallycore.psbt_input_get_pegin_claim_script_len

def psbt_input_set_pegin_claim_script(input, script):
    return _wallycore.psbt_input_set_pegin_claim_script(input, script)
psbt_input_set_pegin_claim_script = _wallycore.psbt_input_set_pegin_claim_script

def psbt_input_clear_pegin_claim_script(input):
    return _wallycore.psbt_input_clear_pegin_claim_script(input)
psbt_input_clear_pegin_claim_script = _wallycore.psbt_input_clear_pegin_claim_script

def psbt_input_get_issuance_amount_commitment(input, bytes_out):
    return _wallycore.psbt_input_get_issuance_amount_commitment(input, bytes_out)
psbt_input_get_issuance_amount_commitment = _wallycore.psbt_input_get_issuance_amount_commitment

def psbt_input_get_issuance_amount_commitment_len(input):
    return _wallycore.psbt_input_get_issuance_amount_commitment_len(input)
psbt_input_get_issuance_amount_commitment_len = _wallycore.psbt_input_get_issuance_amount_commitment_len

def psbt_input_set_issuance_amount_commitment(input, commitment):
    return _wallycore.psbt_input_set_issuance_amount_commitment(input, commitment)
psbt_input_set_issuance_amount_commitment = _wallycore.psbt_input_set_issuance_amount_commitment

def psbt_input_clear_issuance_amount_commitment(input):
    return _wallycore.psbt_input_clear_issuance_amount_commitment(input)
psbt_input_clear_issuance_amount_commitment = _wallycore.psbt_input_clear_issuance_amount_commitment

def psbt_input_get_issuance_amount_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_issuance_amount_rangeproof(input, bytes_out)
psbt_input_get_issuance_amount_rangeproof = _wallycore.psbt_input_get_issuance_amount_rangeproof

def psbt_input_get_issuance_amount_rangeproof_len(input):
    return _wallycore.psbt_input_get_issuance_amount_rangeproof_len(input)
psbt_input_get_issuance_amount_rangeproof_len = _wallycore.psbt_input_get_issuance_amount_rangeproof_len

def psbt_input_set_issuance_amount_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_issuance_amount_rangeproof(input, rangeproof)
psbt_input_set_issuance_amount_rangeproof = _wallycore.psbt_input_set_issuance_amount_rangeproof

def psbt_input_clear_issuance_amount_rangeproof(input):
    return _wallycore.psbt_input_clear_issuance_amount_rangeproof(input)
psbt_input_clear_issuance_amount_rangeproof = _wallycore.psbt_input_clear_issuance_amount_rangeproof

def psbt_input_get_issuance_blinding_nonce(input, bytes_out):
    return _wallycore.psbt_input_get_issuance_blinding_nonce(input, bytes_out)
psbt_input_get_issuance_blinding_nonce = _wallycore.psbt_input_get_issuance_blinding_nonce

def psbt_input_get_issuance_blinding_nonce_len(input):
    return _wallycore.psbt_input_get_issuance_blinding_nonce_len(input)
psbt_input_get_issuance_blinding_nonce_len = _wallycore.psbt_input_get_issuance_blinding_nonce_len

def psbt_input_set_issuance_blinding_nonce(input, nonce):
    return _wallycore.psbt_input_set_issuance_blinding_nonce(input, nonce)
psbt_input_set_issuance_blinding_nonce = _wallycore.psbt_input_set_issuance_blinding_nonce

def psbt_input_clear_issuance_blinding_nonce(input):
    return _wallycore.psbt_input_clear_issuance_blinding_nonce(input)
psbt_input_clear_issuance_blinding_nonce = _wallycore.psbt_input_clear_issuance_blinding_nonce

def psbt_input_get_issuance_asset_entropy(input, bytes_out):
    return _wallycore.psbt_input_get_issuance_asset_entropy(input, bytes_out)
psbt_input_get_issuance_asset_entropy = _wallycore.psbt_input_get_issuance_asset_entropy

def psbt_input_get_issuance_asset_entropy_len(input):
    return _wallycore.psbt_input_get_issuance_asset_entropy_len(input)
psbt_input_get_issuance_asset_entropy_len = _wallycore.psbt_input_get_issuance_asset_entropy_len

def psbt_input_set_issuance_asset_entropy(input, entropy):
    return _wallycore.psbt_input_set_issuance_asset_entropy(input, entropy)
psbt_input_set_issuance_asset_entropy = _wallycore.psbt_input_set_issuance_asset_entropy

def psbt_input_clear_issuance_asset_entropy(input):
    return _wallycore.psbt_input_clear_issuance_asset_entropy(input)
psbt_input_clear_issuance_asset_entropy = _wallycore.psbt_input_clear_issuance_asset_entropy

def psbt_input_get_issuance_amount_blinding_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_issuance_amount_blinding_rangeproof(input, bytes_out)
psbt_input_get_issuance_amount_blinding_rangeproof = _wallycore.psbt_input_get_issuance_amount_blinding_rangeproof

def psbt_input_get_issuance_amount_blinding_rangeproof_len(input):
    return _wallycore.psbt_input_get_issuance_amount_blinding_rangeproof_len(input)
psbt_input_get_issuance_amount_blinding_rangeproof_len = _wallycore.psbt_input_get_issuance_amount_blinding_rangeproof_len

def psbt_input_set_issuance_amount_blinding_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_issuance_amount_blinding_rangeproof(input, rangeproof)
psbt_input_set_issuance_amount_blinding_rangeproof = _wallycore.psbt_input_set_issuance_amount_blinding_rangeproof

def psbt_input_clear_issuance_amount_blinding_rangeproof(input):
    return _wallycore.psbt_input_clear_issuance_amount_blinding_rangeproof(input)
psbt_input_clear_issuance_amount_blinding_rangeproof = _wallycore.psbt_input_clear_issuance_amount_blinding_rangeproof

def psbt_input_get_inflation_keys_commitment(input, bytes_out):
    return _wallycore.psbt_input_get_inflation_keys_commitment(input, bytes_out)
psbt_input_get_inflation_keys_commitment = _wallycore.psbt_input_get_inflation_keys_commitment

def psbt_input_get_inflation_keys_commitment_len(input):
    return _wallycore.psbt_input_get_inflation_keys_commitment_len(input)
psbt_input_get_inflation_keys_commitment_len = _wallycore.psbt_input_get_inflation_keys_commitment_len

def psbt_input_set_inflation_keys_commitment(input, commitment):
    return _wallycore.psbt_input_set_inflation_keys_commitment(input, commitment)
psbt_input_set_inflation_keys_commitment = _wallycore.psbt_input_set_inflation_keys_commitment

def psbt_input_clear_inflation_keys_commitment(input):
    return _wallycore.psbt_input_clear_inflation_keys_commitment(input)
psbt_input_clear_inflation_keys_commitment = _wallycore.psbt_input_clear_inflation_keys_commitment

def psbt_input_get_inflation_keys_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_inflation_keys_rangeproof(input, bytes_out)
psbt_input_get_inflation_keys_rangeproof = _wallycore.psbt_input_get_inflation_keys_rangeproof

def psbt_input_get_inflation_keys_rangeproof_len(input):
    return _wallycore.psbt_input_get_inflation_keys_rangeproof_len(input)
psbt_input_get_inflation_keys_rangeproof_len = _wallycore.psbt_input_get_inflation_keys_rangeproof_len

def psbt_input_set_inflation_keys_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_inflation_keys_rangeproof(input, rangeproof)
psbt_input_set_inflation_keys_rangeproof = _wallycore.psbt_input_set_inflation_keys_rangeproof

def psbt_input_clear_inflation_keys_rangeproof(input):
    return _wallycore.psbt_input_clear_inflation_keys_rangeproof(input)
psbt_input_clear_inflation_keys_rangeproof = _wallycore.psbt_input_clear_inflation_keys_rangeproof

def psbt_input_get_inflation_keys_blinding_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_inflation_keys_blinding_rangeproof(input, bytes_out)
psbt_input_get_inflation_keys_blinding_rangeproof = _wallycore.psbt_input_get_inflation_keys_blinding_rangeproof

def psbt_input_get_inflation_keys_blinding_rangeproof_len(input):
    return _wallycore.psbt_input_get_inflation_keys_blinding_rangeproof_len(input)
psbt_input_get_inflation_keys_blinding_rangeproof_len = _wallycore.psbt_input_get_inflation_keys_blinding_rangeproof_len

def psbt_input_set_inflation_keys_blinding_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_inflation_keys_blinding_rangeproof(input, rangeproof)
psbt_input_set_inflation_keys_blinding_rangeproof = _wallycore.psbt_input_set_inflation_keys_blinding_rangeproof

def psbt_input_clear_inflation_keys_blinding_rangeproof(input):
    return _wallycore.psbt_input_clear_inflation_keys_blinding_rangeproof(input)
psbt_input_clear_inflation_keys_blinding_rangeproof = _wallycore.psbt_input_clear_inflation_keys_blinding_rangeproof

def psbt_input_get_utxo_rangeproof(input, bytes_out):
    return _wallycore.psbt_input_get_utxo_rangeproof(input, bytes_out)
psbt_input_get_utxo_rangeproof = _wallycore.psbt_input_get_utxo_rangeproof

def psbt_input_get_utxo_rangeproof_len(input):
    return _wallycore.psbt_input_get_utxo_rangeproof_len(input)
psbt_input_get_utxo_rangeproof_len = _wallycore.psbt_input_get_utxo_rangeproof_len

def psbt_input_set_utxo_rangeproof(input, rangeproof):
    return _wallycore.psbt_input_set_utxo_rangeproof(input, rangeproof)
psbt_input_set_utxo_rangeproof = _wallycore.psbt_input_set_utxo_rangeproof

def psbt_input_clear_utxo_rangeproof(input):
    return _wallycore.psbt_input_clear_utxo_rangeproof(input)
psbt_input_clear_utxo_rangeproof = _wallycore.psbt_input_clear_utxo_rangeproof

def psbt_input_generate_explicit_proofs(input, satoshi, asset, abf, vbf, entropy):
    return _wallycore.psbt_input_generate_explicit_proofs(input, satoshi, asset, abf, vbf, entropy)
psbt_input_generate_explicit_proofs = _wallycore.psbt_input_generate_explicit_proofs

def psbt_input_is_finalized(input):
    return _wallycore.psbt_input_is_finalized(input)
psbt_input_is_finalized = _wallycore.psbt_input_is_finalized

def psbt_output_set_redeem_script(output, script):
    return _wallycore.psbt_output_set_redeem_script(output, script)
psbt_output_set_redeem_script = _wallycore.psbt_output_set_redeem_script

def psbt_output_set_witness_script(output, script):
    return _wallycore.psbt_output_set_witness_script(output, script)
psbt_output_set_witness_script = _wallycore.psbt_output_set_witness_script

def psbt_output_set_keypaths(output, map_in):
    return _wallycore.psbt_output_set_keypaths(output, map_in)
psbt_output_set_keypaths = _wallycore.psbt_output_set_keypaths

def psbt_output_find_keypath(output, pub_key):
    return _wallycore.psbt_output_find_keypath(output, pub_key)
psbt_output_find_keypath = _wallycore.psbt_output_find_keypath

def psbt_output_keypath_add(output, pub_key, fingerprint, child_path):
    return _wallycore.psbt_output_keypath_add(output, pub_key, fingerprint, child_path)
psbt_output_keypath_add = _wallycore.psbt_output_keypath_add

def psbt_output_taproot_keypath_add(output, pub_key, tapleaf_hashes, fingerprint, child_path):
    return _wallycore.psbt_output_taproot_keypath_add(output, pub_key, tapleaf_hashes, fingerprint, child_path)
psbt_output_taproot_keypath_add = _wallycore.psbt_output_taproot_keypath_add

def psbt_output_set_unknowns(output, map_in):
    return _wallycore.psbt_output_set_unknowns(output, map_in)
psbt_output_set_unknowns = _wallycore.psbt_output_set_unknowns

def psbt_output_find_unknown(output, key):
    return _wallycore.psbt_output_find_unknown(output, key)
psbt_output_find_unknown = _wallycore.psbt_output_find_unknown

def psbt_output_set_amount(output, amount):
    return _wallycore.psbt_output_set_amount(output, amount)
psbt_output_set_amount = _wallycore.psbt_output_set_amount

def psbt_output_clear_amount(output):
    return _wallycore.psbt_output_clear_amount(output)
psbt_output_clear_amount = _wallycore.psbt_output_clear_amount

def psbt_output_set_script(output, script):
    return _wallycore.psbt_output_set_script(output, script)
psbt_output_set_script = _wallycore.psbt_output_set_script

def psbt_output_set_taproot_internal_key(output, pub_key):
    return _wallycore.psbt_output_set_taproot_internal_key(output, pub_key)
psbt_output_set_taproot_internal_key = _wallycore.psbt_output_set_taproot_internal_key

def psbt_output_set_blinder_index(output, index):
    return _wallycore.psbt_output_set_blinder_index(output, index)
psbt_output_set_blinder_index = _wallycore.psbt_output_set_blinder_index

def psbt_output_clear_blinder_index(output):
    return _wallycore.psbt_output_clear_blinder_index(output)
psbt_output_clear_blinder_index = _wallycore.psbt_output_clear_blinder_index

def psbt_output_get_value_commitment(output, bytes_out):
    return _wallycore.psbt_output_get_value_commitment(output, bytes_out)
psbt_output_get_value_commitment = _wallycore.psbt_output_get_value_commitment

def psbt_output_get_value_commitment_len(output):
    return _wallycore.psbt_output_get_value_commitment_len(output)
psbt_output_get_value_commitment_len = _wallycore.psbt_output_get_value_commitment_len

def psbt_output_set_value_commitment(output, commitment):
    return _wallycore.psbt_output_set_value_commitment(output, commitment)
psbt_output_set_value_commitment = _wallycore.psbt_output_set_value_commitment

def psbt_output_clear_value_commitment(output):
    return _wallycore.psbt_output_clear_value_commitment(output)
psbt_output_clear_value_commitment = _wallycore.psbt_output_clear_value_commitment

def psbt_output_get_asset(output, bytes_out):
    return _wallycore.psbt_output_get_asset(output, bytes_out)
psbt_output_get_asset = _wallycore.psbt_output_get_asset

def psbt_output_get_asset_len(output):
    return _wallycore.psbt_output_get_asset_len(output)
psbt_output_get_asset_len = _wallycore.psbt_output_get_asset_len

def psbt_output_set_asset(output, asset):
    return _wallycore.psbt_output_set_asset(output, asset)
psbt_output_set_asset = _wallycore.psbt_output_set_asset

def psbt_output_clear_asset(output):
    return _wallycore.psbt_output_clear_asset(output)
psbt_output_clear_asset = _wallycore.psbt_output_clear_asset

def psbt_output_get_asset_commitment(output, bytes_out):
    return _wallycore.psbt_output_get_asset_commitment(output, bytes_out)
psbt_output_get_asset_commitment = _wallycore.psbt_output_get_asset_commitment

def psbt_output_get_asset_commitment_len(output):
    return _wallycore.psbt_output_get_asset_commitment_len(output)
psbt_output_get_asset_commitment_len = _wallycore.psbt_output_get_asset_commitment_len

def psbt_output_set_asset_commitment(output, commitment):
    return _wallycore.psbt_output_set_asset_commitment(output, commitment)
psbt_output_set_asset_commitment = _wallycore.psbt_output_set_asset_commitment

def psbt_output_clear_asset_commitment(output):
    return _wallycore.psbt_output_clear_asset_commitment(output)
psbt_output_clear_asset_commitment = _wallycore.psbt_output_clear_asset_commitment

def psbt_output_get_value_rangeproof(output, bytes_out):
    return _wallycore.psbt_output_get_value_rangeproof(output, bytes_out)
psbt_output_get_value_rangeproof = _wallycore.psbt_output_get_value_rangeproof

def psbt_output_get_value_rangeproof_len(output):
    return _wallycore.psbt_output_get_value_rangeproof_len(output)
psbt_output_get_value_rangeproof_len = _wallycore.psbt_output_get_value_rangeproof_len

def psbt_output_set_value_rangeproof(output, rangeproof):
    return _wallycore.psbt_output_set_value_rangeproof(output, rangeproof)
psbt_output_set_value_rangeproof = _wallycore.psbt_output_set_value_rangeproof

def psbt_output_clear_value_rangeproof(output):
    return _wallycore.psbt_output_clear_value_rangeproof(output)
psbt_output_clear_value_rangeproof = _wallycore.psbt_output_clear_value_rangeproof

def psbt_output_get_asset_surjectionproof(output, bytes_out):
    return _wallycore.psbt_output_get_asset_surjectionproof(output, bytes_out)
psbt_output_get_asset_surjectionproof = _wallycore.psbt_output_get_asset_surjectionproof

def psbt_output_get_asset_surjectionproof_len(output):
    return _wallycore.psbt_output_get_asset_surjectionproof_len(output)
psbt_output_get_asset_surjectionproof_len = _wallycore.psbt_output_get_asset_surjectionproof_len

def psbt_output_set_asset_surjectionproof(output, surjectionproof):
    return _wallycore.psbt_output_set_asset_surjectionproof(output, surjectionproof)
psbt_output_set_asset_surjectionproof = _wallycore.psbt_output_set_asset_surjectionproof

def psbt_output_clear_asset_surjectionproof(output):
    return _wallycore.psbt_output_clear_asset_surjectionproof(output)
psbt_output_clear_asset_surjectionproof = _wallycore.psbt_output_clear_asset_surjectionproof

def psbt_output_get_blinding_public_key(output, bytes_out):
    return _wallycore.psbt_output_get_blinding_public_key(output, bytes_out)
psbt_output_get_blinding_public_key = _wallycore.psbt_output_get_blinding_public_key

def psbt_output_get_blinding_public_key_len(output):
    return _wallycore.psbt_output_get_blinding_public_key_len(output)
psbt_output_get_blinding_public_key_len = _wallycore.psbt_output_get_blinding_public_key_len

def psbt_output_set_blinding_public_key(output, pub_key):
    return _wallycore.psbt_output_set_blinding_public_key(output, pub_key)
psbt_output_set_blinding_public_key = _wallycore.psbt_output_set_blinding_public_key

def psbt_output_clear_blinding_public_key(output):
    return _wallycore.psbt_output_clear_blinding_public_key(output)
psbt_output_clear_blinding_public_key = _wallycore.psbt_output_clear_blinding_public_key

def psbt_output_get_ecdh_public_key(output, bytes_out):
    return _wallycore.psbt_output_get_ecdh_public_key(output, bytes_out)
psbt_output_get_ecdh_public_key = _wallycore.psbt_output_get_ecdh_public_key

def psbt_output_get_ecdh_public_key_len(output):
    return _wallycore.psbt_output_get_ecdh_public_key_len(output)
psbt_output_get_ecdh_public_key_len = _wallycore.psbt_output_get_ecdh_public_key_len

def psbt_output_set_ecdh_public_key(output, pub_key):
    return _wallycore.psbt_output_set_ecdh_public_key(output, pub_key)
psbt_output_set_ecdh_public_key = _wallycore.psbt_output_set_ecdh_public_key

def psbt_output_clear_ecdh_public_key(output):
    return _wallycore.psbt_output_clear_ecdh_public_key(output)
psbt_output_clear_ecdh_public_key = _wallycore.psbt_output_clear_ecdh_public_key

def psbt_output_get_value_blinding_rangeproof(output, bytes_out):
    return _wallycore.psbt_output_get_value_blinding_rangeproof(output, bytes_out)
psbt_output_get_value_blinding_rangeproof = _wallycore.psbt_output_get_value_blinding_rangeproof

def psbt_output_get_value_blinding_rangeproof_len(output):
    return _wallycore.psbt_output_get_value_blinding_rangeproof_len(output)
psbt_output_get_value_blinding_rangeproof_len = _wallycore.psbt_output_get_value_blinding_rangeproof_len

def psbt_output_set_value_blinding_rangeproof(output, rangeproof):
    return _wallycore.psbt_output_set_value_blinding_rangeproof(output, rangeproof)
psbt_output_set_value_blinding_rangeproof = _wallycore.psbt_output_set_value_blinding_rangeproof

def psbt_output_clear_value_blinding_rangeproof(output):
    return _wallycore.psbt_output_clear_value_blinding_rangeproof(output)
psbt_output_clear_value_blinding_rangeproof = _wallycore.psbt_output_clear_value_blinding_rangeproof

def psbt_output_get_asset_blinding_surjectionproof(output, bytes_out):
    return _wallycore.psbt_output_get_asset_blinding_surjectionproof(output, bytes_out)
psbt_output_get_asset_blinding_surjectionproof = _wallycore.psbt_output_get_asset_blinding_surjectionproof

def psbt_output_get_asset_blinding_surjectionproof_len(output):
    return _wallycore.psbt_output_get_asset_blinding_surjectionproof_len(output)
psbt_output_get_asset_blinding_surjectionproof_len = _wallycore.psbt_output_get_asset_blinding_surjectionproof_len

def psbt_output_set_asset_blinding_surjectionproof(output, surjectionproof):
    return _wallycore.psbt_output_set_asset_blinding_surjectionproof(output, surjectionproof)
psbt_output_set_asset_blinding_surjectionproof = _wallycore.psbt_output_set_asset_blinding_surjectionproof

def psbt_output_clear_asset_blinding_surjectionproof(output):
    return _wallycore.psbt_output_clear_asset_blinding_surjectionproof(output)
psbt_output_clear_asset_blinding_surjectionproof = _wallycore.psbt_output_clear_asset_blinding_surjectionproof

def psbt_output_get_blinding_status(output, flags):
    return _wallycore.psbt_output_get_blinding_status(output, flags)
psbt_output_get_blinding_status = _wallycore.psbt_output_get_blinding_status

def psbt_init_alloc(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len, flags):
    return _wallycore.psbt_init_alloc(version, inputs_allocation_len, outputs_allocation_len, global_unknowns_allocation_len, flags)
psbt_init_alloc = _wallycore.psbt_init_alloc

def psbt_free(psbt):
    return _wallycore.psbt_free(psbt)
psbt_free = _wallycore.psbt_free

def psbt_set_version(psbt, flags, version):
    return _wallycore.psbt_set_version(psbt, flags, version)
psbt_set_version = _wallycore.psbt_set_version

def psbt_get_id(psbt, flags, bytes_out):
    return _wallycore.psbt_get_id(psbt, flags, bytes_out)
psbt_get_id = _wallycore.psbt_get_id

def psbt_get_locktime(psbt):
    return _wallycore.psbt_get_locktime(psbt)
psbt_get_locktime = _wallycore.psbt_get_locktime

def psbt_is_finalized(psbt):
    return _wallycore.psbt_is_finalized(psbt)
psbt_is_finalized = _wallycore.psbt_is_finalized

def psbt_is_input_finalized(psbt, index):
    return _wallycore.psbt_is_input_finalized(psbt, index)
psbt_is_input_finalized = _wallycore.psbt_is_input_finalized

def psbt_set_global_tx(psbt, tx):
    return _wallycore.psbt_set_global_tx(psbt, tx)
psbt_set_global_tx = _wallycore.psbt_set_global_tx

def psbt_set_tx_version(psbt, version):
    return _wallycore.psbt_set_tx_version(psbt, version)
psbt_set_tx_version = _wallycore.psbt_set_tx_version

def psbt_get_tx_version(psbt):
    return _wallycore.psbt_get_tx_version(psbt)
psbt_get_tx_version = _wallycore.psbt_get_tx_version

def psbt_set_fallback_locktime(psbt, locktime):
    return _wallycore.psbt_set_fallback_locktime(psbt, locktime)
psbt_set_fallback_locktime = _wallycore.psbt_set_fallback_locktime

def psbt_clear_fallback_locktime(psbt):
    return _wallycore.psbt_clear_fallback_locktime(psbt)
psbt_clear_fallback_locktime = _wallycore.psbt_clear_fallback_locktime

def psbt_set_tx_modifiable_flags(psbt, flags):
    return _wallycore.psbt_set_tx_modifiable_flags(psbt, flags)
psbt_set_tx_modifiable_flags = _wallycore.psbt_set_tx_modifiable_flags

def psbt_set_global_scalars(psbt, map_in):
    return _wallycore.psbt_set_global_scalars(psbt, map_in)
psbt_set_global_scalars = _wallycore.psbt_set_global_scalars

def psbt_add_global_scalar(psbt, scalar):
    return _wallycore.psbt_add_global_scalar(psbt, scalar)
psbt_add_global_scalar = _wallycore.psbt_add_global_scalar

def psbt_find_global_scalar(psbt, scalar):
    return _wallycore.psbt_find_global_scalar(psbt, scalar)
psbt_find_global_scalar = _wallycore.psbt_find_global_scalar

def psbt_set_pset_modifiable_flags(psbt, flags):
    return _wallycore.psbt_set_pset_modifiable_flags(psbt, flags)
psbt_set_pset_modifiable_flags = _wallycore.psbt_set_pset_modifiable_flags

def psbt_set_global_genesis_blockhash(psbt, genesis_blockhash):
    return _wallycore.psbt_set_global_genesis_blockhash(psbt, genesis_blockhash)
psbt_set_global_genesis_blockhash = _wallycore.psbt_set_global_genesis_blockhash

def psbt_has_global_genesis_blockhash(psbt):
    return _wallycore.psbt_has_global_genesis_blockhash(psbt)
psbt_has_global_genesis_blockhash = _wallycore.psbt_has_global_genesis_blockhash

def psbt_get_global_genesis_blockhash(psbt, bytes_out):
    return _wallycore.psbt_get_global_genesis_blockhash(psbt, bytes_out)
psbt_get_global_genesis_blockhash = _wallycore.psbt_get_global_genesis_blockhash

def psbt_find_input_spending_utxo(psbt, txhash, utxo_index):
    return _wallycore.psbt_find_input_spending_utxo(psbt, txhash, utxo_index)
psbt_find_input_spending_utxo = _wallycore.psbt_find_input_spending_utxo

def psbt_add_input_keypath(psbt, index, pub_key, fingerprint, child_path):
    return _wallycore.psbt_add_input_keypath(psbt, index, pub_key, fingerprint, child_path)
psbt_add_input_keypath = _wallycore.psbt_add_input_keypath

def psbt_add_input_taproot_keypath(psbt, index, flags, pub_key, tapleaf_hashes, fingerprint, child_path):
    return _wallycore.psbt_add_input_taproot_keypath(psbt, index, flags, pub_key, tapleaf_hashes, fingerprint, child_path)
psbt_add_input_taproot_keypath = _wallycore.psbt_add_input_taproot_keypath

def psbt_add_tx_input_at(psbt, index, flags, input):
    return _wallycore.psbt_add_tx_input_at(psbt, index, flags, input)
psbt_add_tx_input_at = _wallycore.psbt_add_tx_input_at

def psbt_remove_input(psbt, index):
    return _wallycore.psbt_remove_input(psbt, index)
psbt_remove_input = _wallycore.psbt_remove_input

def psbt_get_input_bip32_key_from_alloc(psbt, index, subindex, flags, hdkey):
    return _wallycore.psbt_get_input_bip32_key_from_alloc(psbt, index, subindex, flags, hdkey)
psbt_get_input_bip32_key_from_alloc = _wallycore.psbt_get_input_bip32_key_from_alloc

def psbt_get_input_signing_script_len(psbt, index):
    return _wallycore.psbt_get_input_signing_script_len(psbt, index)
psbt_get_input_signing_script_len = _wallycore.psbt_get_input_signing_script_len

def psbt_get_input_signing_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_signing_script(psbt, index, bytes_out)
psbt_get_input_signing_script = _wallycore.psbt_get_input_signing_script

def psbt_get_input_scriptcode_len(psbt, index, script):
    return _wallycore.psbt_get_input_scriptcode_len(psbt, index, script)
psbt_get_input_scriptcode_len = _wallycore.psbt_get_input_scriptcode_len

def psbt_get_input_scriptcode(psbt, index, script, bytes_out):
    return _wallycore.psbt_get_input_scriptcode(psbt, index, script, bytes_out)
psbt_get_input_scriptcode = _wallycore.psbt_get_input_scriptcode

def psbt_get_input_signature_hash(psbt, index, tx, script, flags, bytes_out):
    return _wallycore.psbt_get_input_signature_hash(psbt, index, tx, script, flags, bytes_out)
psbt_get_input_signature_hash = _wallycore.psbt_get_input_signature_hash

def psbt_add_output_keypath(psbt, index, pub_key, fingerprint, child_path):
    return _wallycore.psbt_add_output_keypath(psbt, index, pub_key, fingerprint, child_path)
psbt_add_output_keypath = _wallycore.psbt_add_output_keypath

def psbt_add_output_taproot_keypath(psbt, index, flags, pub_key, tapleaf_hashes, fingerprint, child_path):
    return _wallycore.psbt_add_output_taproot_keypath(psbt, index, flags, pub_key, tapleaf_hashes, fingerprint, child_path)
psbt_add_output_taproot_keypath = _wallycore.psbt_add_output_taproot_keypath

def psbt_add_tx_output_at(psbt, index, flags, output):
    return _wallycore.psbt_add_tx_output_at(psbt, index, flags, output)
psbt_add_tx_output_at = _wallycore.psbt_add_tx_output_at

def psbt_remove_output(psbt, index):
    return _wallycore.psbt_remove_output(psbt, index)
psbt_remove_output = _wallycore.psbt_remove_output

def psbt_from_bytes(bytes, flags):
    return _wallycore.psbt_from_bytes(bytes, flags)
psbt_from_bytes = _wallycore.psbt_from_bytes

def psbt_get_length(psbt, flags):
    return _wallycore.psbt_get_length(psbt, flags)
psbt_get_length = _wallycore.psbt_get_length

def psbt_to_bytes(psbt, flags, bytes_out):
    return _wallycore.psbt_to_bytes(psbt, flags, bytes_out)
psbt_to_bytes = _wallycore.psbt_to_bytes

def psbt_from_base64(str_in, flags):
    return _wallycore.psbt_from_base64(str_in, flags)
psbt_from_base64 = _wallycore.psbt_from_base64

def psbt_from_base64_n(str_in, str_len, flags):
    return _wallycore.psbt_from_base64_n(str_in, str_len, flags)
psbt_from_base64_n = _wallycore.psbt_from_base64_n

def psbt_to_base64(psbt, flags):
    return _wallycore.psbt_to_base64(psbt, flags)
psbt_to_base64 = _wallycore.psbt_to_base64

def psbt_from_tx(tx, version, flags):
    return _wallycore.psbt_from_tx(tx, version, flags)
psbt_from_tx = _wallycore.psbt_from_tx

def psbt_combine(psbt, source):
    return _wallycore.psbt_combine(psbt, source)
psbt_combine = _wallycore.psbt_combine

def psbt_combine_ex(psbt, flags, source):
    return _wallycore.psbt_combine_ex(psbt, flags, source)
psbt_combine_ex = _wallycore.psbt_combine_ex

def psbt_clone_alloc(psbt, flags):
    return _wallycore.psbt_clone_alloc(psbt, flags)
psbt_clone_alloc = _wallycore.psbt_clone_alloc

def psbt_blind_alloc(psbt, values, vbfs, assets, abfs, entropy, output_index, flags):
    return _wallycore.psbt_blind_alloc(psbt, values, vbfs, assets, abfs, entropy, output_index, flags)
psbt_blind_alloc = _wallycore.psbt_blind_alloc

def psbt_signing_cache_enable(psbt, flags):
    return _wallycore.psbt_signing_cache_enable(psbt, flags)
psbt_signing_cache_enable = _wallycore.psbt_signing_cache_enable

def psbt_signing_cache_disable(psbt):
    return _wallycore.psbt_signing_cache_disable(psbt)
psbt_signing_cache_disable = _wallycore.psbt_signing_cache_disable

def psbt_sign(psbt, key, flags):
    return _wallycore.psbt_sign(psbt, key, flags)
psbt_sign = _wallycore.psbt_sign

def psbt_sign_bip32(psbt, hdkey, flags):
    return _wallycore.psbt_sign_bip32(psbt, hdkey, flags)
psbt_sign_bip32 = _wallycore.psbt_sign_bip32

def psbt_sign_input_bip32(psbt, index, subindex, txhash, hdkey, flags):
    return _wallycore.psbt_sign_input_bip32(psbt, index, subindex, txhash, hdkey, flags)
psbt_sign_input_bip32 = _wallycore.psbt_sign_input_bip32

def psbt_finalize(psbt, flags):
    return _wallycore.psbt_finalize(psbt, flags)
psbt_finalize = _wallycore.psbt_finalize

def psbt_finalize_input(psbt, index, flags):
    return _wallycore.psbt_finalize_input(psbt, index, flags)
psbt_finalize_input = _wallycore.psbt_finalize_input

def psbt_extract(psbt, flags):
    return _wallycore.psbt_extract(psbt, flags)
psbt_extract = _wallycore.psbt_extract

def psbt_is_elements(psbt):
    return _wallycore.psbt_is_elements(psbt)
psbt_is_elements = _wallycore.psbt_is_elements
LIBWALLY_CORE_PSBT_MEMBERS_H = _wallycore.LIBWALLY_CORE_PSBT_MEMBERS_H

def psbt_get_global_tx_alloc(psbt):
    return _wallycore.psbt_get_global_tx_alloc(psbt)
psbt_get_global_tx_alloc = _wallycore.psbt_get_global_tx_alloc

def psbt_get_version(psbt):
    return _wallycore.psbt_get_version(psbt)
psbt_get_version = _wallycore.psbt_get_version

def psbt_get_num_inputs(psbt):
    return _wallycore.psbt_get_num_inputs(psbt)
psbt_get_num_inputs = _wallycore.psbt_get_num_inputs

def psbt_get_num_outputs(psbt):
    return _wallycore.psbt_get_num_outputs(psbt)
psbt_get_num_outputs = _wallycore.psbt_get_num_outputs

def psbt_get_fallback_locktime(psbt):
    return _wallycore.psbt_get_fallback_locktime(psbt)
psbt_get_fallback_locktime = _wallycore.psbt_get_fallback_locktime

def psbt_has_fallback_locktime(psbt):
    return _wallycore.psbt_has_fallback_locktime(psbt)
psbt_has_fallback_locktime = _wallycore.psbt_has_fallback_locktime

def psbt_get_tx_modifiable_flags(psbt):
    return _wallycore.psbt_get_tx_modifiable_flags(psbt)
psbt_get_tx_modifiable_flags = _wallycore.psbt_get_tx_modifiable_flags

def psbt_get_global_scalars_size(psbt):
    return _wallycore.psbt_get_global_scalars_size(psbt)
psbt_get_global_scalars_size = _wallycore.psbt_get_global_scalars_size

def psbt_get_global_scalar(psbt, index, bytes_out):
    return _wallycore.psbt_get_global_scalar(psbt, index, bytes_out)
psbt_get_global_scalar = _wallycore.psbt_get_global_scalar

def psbt_get_pset_modifiable_flags(psbt):
    return _wallycore.psbt_get_pset_modifiable_flags(psbt)
psbt_get_pset_modifiable_flags = _wallycore.psbt_get_pset_modifiable_flags

def psbt_get_input_utxo_alloc(psbt, index):
    return _wallycore.psbt_get_input_utxo_alloc(psbt, index)
psbt_get_input_utxo_alloc = _wallycore.psbt_get_input_utxo_alloc

def psbt_get_input_witness_utxo_alloc(psbt, index):
    return _wallycore.psbt_get_input_witness_utxo_alloc(psbt, index)
psbt_get_input_witness_utxo_alloc = _wallycore.psbt_get_input_witness_utxo_alloc

def psbt_get_input_best_utxo_alloc(psbt, index):
    return _wallycore.psbt_get_input_best_utxo_alloc(psbt, index)
psbt_get_input_best_utxo_alloc = _wallycore.psbt_get_input_best_utxo_alloc

def psbt_get_input_redeem_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_redeem_script(psbt, index, bytes_out)
psbt_get_input_redeem_script = _wallycore.psbt_get_input_redeem_script

def psbt_get_input_redeem_script_len(psbt, index):
    return _wallycore.psbt_get_input_redeem_script_len(psbt, index)
psbt_get_input_redeem_script_len = _wallycore.psbt_get_input_redeem_script_len

def psbt_get_input_witness_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_witness_script(psbt, index, bytes_out)
psbt_get_input_witness_script = _wallycore.psbt_get_input_witness_script

def psbt_get_input_witness_script_len(psbt, index):
    return _wallycore.psbt_get_input_witness_script_len(psbt, index)
psbt_get_input_witness_script_len = _wallycore.psbt_get_input_witness_script_len

def psbt_get_input_final_scriptsig(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_final_scriptsig(psbt, index, bytes_out)
psbt_get_input_final_scriptsig = _wallycore.psbt_get_input_final_scriptsig

def psbt_get_input_final_scriptsig_len(psbt, index):
    return _wallycore.psbt_get_input_final_scriptsig_len(psbt, index)
psbt_get_input_final_scriptsig_len = _wallycore.psbt_get_input_final_scriptsig_len

def psbt_get_input_final_witness_alloc(psbt, index):
    return _wallycore.psbt_get_input_final_witness_alloc(psbt, index)
psbt_get_input_final_witness_alloc = _wallycore.psbt_get_input_final_witness_alloc

def psbt_get_input_keypaths_size(psbt, index):
    return _wallycore.psbt_get_input_keypaths_size(psbt, index)
psbt_get_input_keypaths_size = _wallycore.psbt_get_input_keypaths_size

def psbt_find_input_keypath(psbt, index, key):
    return _wallycore.psbt_find_input_keypath(psbt, index, key)
psbt_find_input_keypath = _wallycore.psbt_find_input_keypath

def psbt_get_input_keypath(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_keypath(psbt, index, subindex, bytes_out)
psbt_get_input_keypath = _wallycore.psbt_get_input_keypath

def psbt_get_input_keypath_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_keypath_len(psbt, index, subindex)
psbt_get_input_keypath_len = _wallycore.psbt_get_input_keypath_len

def psbt_get_input_signatures_size(psbt, index):
    return _wallycore.psbt_get_input_signatures_size(psbt, index)
psbt_get_input_signatures_size = _wallycore.psbt_get_input_signatures_size

def psbt_find_input_signature(psbt, index, pub_key):
    return _wallycore.psbt_find_input_signature(psbt, index, pub_key)
psbt_find_input_signature = _wallycore.psbt_find_input_signature

def psbt_get_input_signature(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_signature(psbt, index, subindex, bytes_out)
psbt_get_input_signature = _wallycore.psbt_get_input_signature

def psbt_get_input_signature_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_signature_len(psbt, index, subindex)
psbt_get_input_signature_len = _wallycore.psbt_get_input_signature_len

def psbt_get_input_taproot_signature(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_taproot_signature(psbt, index, bytes_out)
psbt_get_input_taproot_signature = _wallycore.psbt_get_input_taproot_signature

def psbt_get_input_taproot_signature_len(psbt, index):
    return _wallycore.psbt_get_input_taproot_signature_len(psbt, index)
psbt_get_input_taproot_signature_len = _wallycore.psbt_get_input_taproot_signature_len

def psbt_get_input_taproot_internal_key(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_taproot_internal_key(psbt, index, bytes_out)
psbt_get_input_taproot_internal_key = _wallycore.psbt_get_input_taproot_internal_key

def psbt_get_input_taproot_internal_key_len(psbt, index):
    return _wallycore.psbt_get_input_taproot_internal_key_len(psbt, index)
psbt_get_input_taproot_internal_key_len = _wallycore.psbt_get_input_taproot_internal_key_len

def psbt_get_input_unknowns_size(psbt, index):
    return _wallycore.psbt_get_input_unknowns_size(psbt, index)
psbt_get_input_unknowns_size = _wallycore.psbt_get_input_unknowns_size

def psbt_find_input_unknown(psbt, index, key):
    return _wallycore.psbt_find_input_unknown(psbt, index, key)
psbt_find_input_unknown = _wallycore.psbt_find_input_unknown

def psbt_get_input_unknown(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_input_unknown(psbt, index, subindex, bytes_out)
psbt_get_input_unknown = _wallycore.psbt_get_input_unknown

def psbt_get_input_unknown_len(psbt, index, subindex):
    return _wallycore.psbt_get_input_unknown_len(psbt, index, subindex)
psbt_get_input_unknown_len = _wallycore.psbt_get_input_unknown_len

def psbt_get_input_sighash(psbt, index):
    return _wallycore.psbt_get_input_sighash(psbt, index)
psbt_get_input_sighash = _wallycore.psbt_get_input_sighash

def psbt_get_input_signature_type(psbt, index):
    return _wallycore.psbt_get_input_signature_type(psbt, index)
psbt_get_input_signature_type = _wallycore.psbt_get_input_signature_type

def psbt_get_input_previous_txid(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_previous_txid(psbt, index, bytes_out)
psbt_get_input_previous_txid = _wallycore.psbt_get_input_previous_txid

def psbt_get_input_output_index(psbt, index):
    return _wallycore.psbt_get_input_output_index(psbt, index)
psbt_get_input_output_index = _wallycore.psbt_get_input_output_index

def psbt_get_input_sequence(psbt, index):
    return _wallycore.psbt_get_input_sequence(psbt, index)
psbt_get_input_sequence = _wallycore.psbt_get_input_sequence

def psbt_get_input_required_locktime(psbt, index):
    return _wallycore.psbt_get_input_required_locktime(psbt, index)
psbt_get_input_required_locktime = _wallycore.psbt_get_input_required_locktime

def psbt_get_input_required_lockheight(psbt, index):
    return _wallycore.psbt_get_input_required_lockheight(psbt, index)
psbt_get_input_required_lockheight = _wallycore.psbt_get_input_required_lockheight

def psbt_set_input_utxo(psbt, index, utxo):
    return _wallycore.psbt_set_input_utxo(psbt, index, utxo)
psbt_set_input_utxo = _wallycore.psbt_set_input_utxo

def psbt_set_input_witness_utxo(psbt, index, witness_utxo):
    return _wallycore.psbt_set_input_witness_utxo(psbt, index, witness_utxo)
psbt_set_input_witness_utxo = _wallycore.psbt_set_input_witness_utxo

def psbt_set_input_witness_utxo_from_tx(psbt, index, utxo, utxo_index):
    return _wallycore.psbt_set_input_witness_utxo_from_tx(psbt, index, utxo, utxo_index)
psbt_set_input_witness_utxo_from_tx = _wallycore.psbt_set_input_witness_utxo_from_tx

def psbt_set_input_redeem_script(psbt, index, script):
    return _wallycore.psbt_set_input_redeem_script(psbt, index, script)
psbt_set_input_redeem_script = _wallycore.psbt_set_input_redeem_script

def psbt_set_input_witness_script(psbt, index, script):
    return _wallycore.psbt_set_input_witness_script(psbt, index, script)
psbt_set_input_witness_script = _wallycore.psbt_set_input_witness_script

def psbt_set_input_final_scriptsig(psbt, index, script):
    return _wallycore.psbt_set_input_final_scriptsig(psbt, index, script)
psbt_set_input_final_scriptsig = _wallycore.psbt_set_input_final_scriptsig

def psbt_set_input_final_witness(psbt, index, final_witness):
    return _wallycore.psbt_set_input_final_witness(psbt, index, final_witness)
psbt_set_input_final_witness = _wallycore.psbt_set_input_final_witness

def psbt_set_input_keypaths(psbt, index, map_in):
    return _wallycore.psbt_set_input_keypaths(psbt, index, map_in)
psbt_set_input_keypaths = _wallycore.psbt_set_input_keypaths

def psbt_set_input_signatures(psbt, index, map_in):
    return _wallycore.psbt_set_input_signatures(psbt, index, map_in)
psbt_set_input_signatures = _wallycore.psbt_set_input_signatures

def psbt_set_input_taproot_signature(psbt, index, sig):
    return _wallycore.psbt_set_input_taproot_signature(psbt, index, sig)
psbt_set_input_taproot_signature = _wallycore.psbt_set_input_taproot_signature

def psbt_set_input_taproot_internal_key(psbt, index, pub_key):
    return _wallycore.psbt_set_input_taproot_internal_key(psbt, index, pub_key)
psbt_set_input_taproot_internal_key = _wallycore.psbt_set_input_taproot_internal_key

def psbt_add_input_signature(psbt, index, pub_key, sig):
    return _wallycore.psbt_add_input_signature(psbt, index, pub_key, sig)
psbt_add_input_signature = _wallycore.psbt_add_input_signature

def psbt_set_input_unknowns(psbt, index, map_in):
    return _wallycore.psbt_set_input_unknowns(psbt, index, map_in)
psbt_set_input_unknowns = _wallycore.psbt_set_input_unknowns

def psbt_set_input_sighash(psbt, index, sighash):
    return _wallycore.psbt_set_input_sighash(psbt, index, sighash)
psbt_set_input_sighash = _wallycore.psbt_set_input_sighash

def psbt_set_input_previous_txid(psbt, index, txhash):
    return _wallycore.psbt_set_input_previous_txid(psbt, index, txhash)
psbt_set_input_previous_txid = _wallycore.psbt_set_input_previous_txid

def psbt_set_input_output_index(psbt, index, output_index):
    return _wallycore.psbt_set_input_output_index(psbt, index, output_index)
psbt_set_input_output_index = _wallycore.psbt_set_input_output_index

def psbt_set_input_sequence(psbt, index, sequence):
    return _wallycore.psbt_set_input_sequence(psbt, index, sequence)
psbt_set_input_sequence = _wallycore.psbt_set_input_sequence

def psbt_clear_input_sequence(psbt, index):
    return _wallycore.psbt_clear_input_sequence(psbt, index)
psbt_clear_input_sequence = _wallycore.psbt_clear_input_sequence

def psbt_set_input_required_locktime(psbt, index, locktime):
    return _wallycore.psbt_set_input_required_locktime(psbt, index, locktime)
psbt_set_input_required_locktime = _wallycore.psbt_set_input_required_locktime

def psbt_clear_input_required_locktime(psbt, index):
    return _wallycore.psbt_clear_input_required_locktime(psbt, index)
psbt_clear_input_required_locktime = _wallycore.psbt_clear_input_required_locktime

def psbt_has_input_required_locktime(psbt, index):
    return _wallycore.psbt_has_input_required_locktime(psbt, index)
psbt_has_input_required_locktime = _wallycore.psbt_has_input_required_locktime

def psbt_set_input_required_lockheight(psbt, index, lockheight):
    return _wallycore.psbt_set_input_required_lockheight(psbt, index, lockheight)
psbt_set_input_required_lockheight = _wallycore.psbt_set_input_required_lockheight

def psbt_clear_input_required_lockheight(psbt, index):
    return _wallycore.psbt_clear_input_required_lockheight(psbt, index)
psbt_clear_input_required_lockheight = _wallycore.psbt_clear_input_required_lockheight

def psbt_has_input_required_lockheight(psbt, index):
    return _wallycore.psbt_has_input_required_lockheight(psbt, index)
psbt_has_input_required_lockheight = _wallycore.psbt_has_input_required_lockheight

def psbt_get_input_amount(psbt, index):
    return _wallycore.psbt_get_input_amount(psbt, index)
psbt_get_input_amount = _wallycore.psbt_get_input_amount

def psbt_get_input_amount_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_amount_rangeproof(psbt, index, bytes_out)
psbt_get_input_amount_rangeproof = _wallycore.psbt_get_input_amount_rangeproof

def psbt_get_input_amount_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_amount_rangeproof_len(psbt, index)
psbt_get_input_amount_rangeproof_len = _wallycore.psbt_get_input_amount_rangeproof_len

def psbt_get_input_asset(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_asset(psbt, index, bytes_out)
psbt_get_input_asset = _wallycore.psbt_get_input_asset

def psbt_get_input_asset_len(psbt, index):
    return _wallycore.psbt_get_input_asset_len(psbt, index)
psbt_get_input_asset_len = _wallycore.psbt_get_input_asset_len

def psbt_get_input_asset_surjectionproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_asset_surjectionproof(psbt, index, bytes_out)
psbt_get_input_asset_surjectionproof = _wallycore.psbt_get_input_asset_surjectionproof

def psbt_get_input_asset_surjectionproof_len(psbt, index):
    return _wallycore.psbt_get_input_asset_surjectionproof_len(psbt, index)
psbt_get_input_asset_surjectionproof_len = _wallycore.psbt_get_input_asset_surjectionproof_len

def psbt_get_input_issuance_amount(psbt, index):
    return _wallycore.psbt_get_input_issuance_amount(psbt, index)
psbt_get_input_issuance_amount = _wallycore.psbt_get_input_issuance_amount

def psbt_get_input_inflation_keys(psbt, index):
    return _wallycore.psbt_get_input_inflation_keys(psbt, index)
psbt_get_input_inflation_keys = _wallycore.psbt_get_input_inflation_keys

def psbt_get_input_pegin_amount(psbt, index):
    return _wallycore.psbt_get_input_pegin_amount(psbt, index)
psbt_get_input_pegin_amount = _wallycore.psbt_get_input_pegin_amount

def psbt_get_input_pegin_txout_proof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_pegin_txout_proof(psbt, index, bytes_out)
psbt_get_input_pegin_txout_proof = _wallycore.psbt_get_input_pegin_txout_proof

def psbt_get_input_pegin_txout_proof_len(psbt, index):
    return _wallycore.psbt_get_input_pegin_txout_proof_len(psbt, index)
psbt_get_input_pegin_txout_proof_len = _wallycore.psbt_get_input_pegin_txout_proof_len

def psbt_get_input_pegin_genesis_blockhash(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_pegin_genesis_blockhash(psbt, index, bytes_out)
psbt_get_input_pegin_genesis_blockhash = _wallycore.psbt_get_input_pegin_genesis_blockhash

def psbt_get_input_pegin_genesis_blockhash_len(psbt, index):
    return _wallycore.psbt_get_input_pegin_genesis_blockhash_len(psbt, index)
psbt_get_input_pegin_genesis_blockhash_len = _wallycore.psbt_get_input_pegin_genesis_blockhash_len

def psbt_get_input_pegin_claim_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_pegin_claim_script(psbt, index, bytes_out)
psbt_get_input_pegin_claim_script = _wallycore.psbt_get_input_pegin_claim_script

def psbt_get_input_pegin_claim_script_len(psbt, index):
    return _wallycore.psbt_get_input_pegin_claim_script_len(psbt, index)
psbt_get_input_pegin_claim_script_len = _wallycore.psbt_get_input_pegin_claim_script_len

def psbt_get_input_issuance_amount_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_issuance_amount_commitment(psbt, index, bytes_out)
psbt_get_input_issuance_amount_commitment = _wallycore.psbt_get_input_issuance_amount_commitment

def psbt_get_input_issuance_amount_commitment_len(psbt, index):
    return _wallycore.psbt_get_input_issuance_amount_commitment_len(psbt, index)
psbt_get_input_issuance_amount_commitment_len = _wallycore.psbt_get_input_issuance_amount_commitment_len

def psbt_get_input_issuance_amount_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_issuance_amount_rangeproof(psbt, index, bytes_out)
psbt_get_input_issuance_amount_rangeproof = _wallycore.psbt_get_input_issuance_amount_rangeproof

def psbt_get_input_issuance_amount_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_issuance_amount_rangeproof_len(psbt, index)
psbt_get_input_issuance_amount_rangeproof_len = _wallycore.psbt_get_input_issuance_amount_rangeproof_len

def psbt_get_input_issuance_blinding_nonce(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_issuance_blinding_nonce(psbt, index, bytes_out)
psbt_get_input_issuance_blinding_nonce = _wallycore.psbt_get_input_issuance_blinding_nonce

def psbt_get_input_issuance_blinding_nonce_len(psbt, index):
    return _wallycore.psbt_get_input_issuance_blinding_nonce_len(psbt, index)
psbt_get_input_issuance_blinding_nonce_len = _wallycore.psbt_get_input_issuance_blinding_nonce_len

def psbt_get_input_issuance_asset_entropy(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_issuance_asset_entropy(psbt, index, bytes_out)
psbt_get_input_issuance_asset_entropy = _wallycore.psbt_get_input_issuance_asset_entropy

def psbt_get_input_issuance_asset_entropy_len(psbt, index):
    return _wallycore.psbt_get_input_issuance_asset_entropy_len(psbt, index)
psbt_get_input_issuance_asset_entropy_len = _wallycore.psbt_get_input_issuance_asset_entropy_len

def psbt_get_input_issuance_amount_blinding_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_issuance_amount_blinding_rangeproof(psbt, index, bytes_out)
psbt_get_input_issuance_amount_blinding_rangeproof = _wallycore.psbt_get_input_issuance_amount_blinding_rangeproof

def psbt_get_input_issuance_amount_blinding_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_issuance_amount_blinding_rangeproof_len(psbt, index)
psbt_get_input_issuance_amount_blinding_rangeproof_len = _wallycore.psbt_get_input_issuance_amount_blinding_rangeproof_len

def psbt_get_input_inflation_keys_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_inflation_keys_commitment(psbt, index, bytes_out)
psbt_get_input_inflation_keys_commitment = _wallycore.psbt_get_input_inflation_keys_commitment

def psbt_get_input_inflation_keys_commitment_len(psbt, index):
    return _wallycore.psbt_get_input_inflation_keys_commitment_len(psbt, index)
psbt_get_input_inflation_keys_commitment_len = _wallycore.psbt_get_input_inflation_keys_commitment_len

def psbt_get_input_inflation_keys_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_inflation_keys_rangeproof(psbt, index, bytes_out)
psbt_get_input_inflation_keys_rangeproof = _wallycore.psbt_get_input_inflation_keys_rangeproof

def psbt_get_input_inflation_keys_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_inflation_keys_rangeproof_len(psbt, index)
psbt_get_input_inflation_keys_rangeproof_len = _wallycore.psbt_get_input_inflation_keys_rangeproof_len

def psbt_get_input_inflation_keys_blinding_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_inflation_keys_blinding_rangeproof(psbt, index, bytes_out)
psbt_get_input_inflation_keys_blinding_rangeproof = _wallycore.psbt_get_input_inflation_keys_blinding_rangeproof

def psbt_get_input_inflation_keys_blinding_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_inflation_keys_blinding_rangeproof_len(psbt, index)
psbt_get_input_inflation_keys_blinding_rangeproof_len = _wallycore.psbt_get_input_inflation_keys_blinding_rangeproof_len

def psbt_get_input_utxo_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_input_utxo_rangeproof(psbt, index, bytes_out)
psbt_get_input_utxo_rangeproof = _wallycore.psbt_get_input_utxo_rangeproof

def psbt_get_input_utxo_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_input_utxo_rangeproof_len(psbt, index)
psbt_get_input_utxo_rangeproof_len = _wallycore.psbt_get_input_utxo_rangeproof_len

def psbt_set_input_amount(psbt, index, amount):
    return _wallycore.psbt_set_input_amount(psbt, index, amount)
psbt_set_input_amount = _wallycore.psbt_set_input_amount

def psbt_clear_input_amount(psbt, index):
    return _wallycore.psbt_clear_input_amount(psbt, index)
psbt_clear_input_amount = _wallycore.psbt_clear_input_amount

def psbt_set_input_amount_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_amount_rangeproof(psbt, index, rangeproof)
psbt_set_input_amount_rangeproof = _wallycore.psbt_set_input_amount_rangeproof

def psbt_clear_input_amount_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_amount_rangeproof(psbt, index)
psbt_clear_input_amount_rangeproof = _wallycore.psbt_clear_input_amount_rangeproof

def psbt_set_input_asset(psbt, index, asset):
    return _wallycore.psbt_set_input_asset(psbt, index, asset)
psbt_set_input_asset = _wallycore.psbt_set_input_asset

def psbt_clear_input_asset(psbt, index):
    return _wallycore.psbt_clear_input_asset(psbt, index)
psbt_clear_input_asset = _wallycore.psbt_clear_input_asset

def psbt_set_input_asset_surjectionproof(psbt, index, surjectionproof):
    return _wallycore.psbt_set_input_asset_surjectionproof(psbt, index, surjectionproof)
psbt_set_input_asset_surjectionproof = _wallycore.psbt_set_input_asset_surjectionproof

def psbt_clear_input_asset_surjectionproof(psbt, index):
    return _wallycore.psbt_clear_input_asset_surjectionproof(psbt, index)
psbt_clear_input_asset_surjectionproof = _wallycore.psbt_clear_input_asset_surjectionproof

def psbt_set_input_issuance_amount(psbt, index, amount):
    return _wallycore.psbt_set_input_issuance_amount(psbt, index, amount)
psbt_set_input_issuance_amount = _wallycore.psbt_set_input_issuance_amount

def psbt_set_input_inflation_keys(psbt, index, amount):
    return _wallycore.psbt_set_input_inflation_keys(psbt, index, amount)
psbt_set_input_inflation_keys = _wallycore.psbt_set_input_inflation_keys

def psbt_set_input_pegin_amount(psbt, index, amount):
    return _wallycore.psbt_set_input_pegin_amount(psbt, index, amount)
psbt_set_input_pegin_amount = _wallycore.psbt_set_input_pegin_amount

def psbt_set_input_pegin_txout_proof(psbt, index, txout_proof):
    return _wallycore.psbt_set_input_pegin_txout_proof(psbt, index, txout_proof)
psbt_set_input_pegin_txout_proof = _wallycore.psbt_set_input_pegin_txout_proof

def psbt_clear_input_pegin_txout_proof(psbt, index):
    return _wallycore.psbt_clear_input_pegin_txout_proof(psbt, index)
psbt_clear_input_pegin_txout_proof = _wallycore.psbt_clear_input_pegin_txout_proof

def psbt_set_input_pegin_genesis_blockhash(psbt, index, genesis_blockhash):
    return _wallycore.psbt_set_input_pegin_genesis_blockhash(psbt, index, genesis_blockhash)
psbt_set_input_pegin_genesis_blockhash = _wallycore.psbt_set_input_pegin_genesis_blockhash

def psbt_clear_input_pegin_genesis_blockhash(psbt, index):
    return _wallycore.psbt_clear_input_pegin_genesis_blockhash(psbt, index)
psbt_clear_input_pegin_genesis_blockhash = _wallycore.psbt_clear_input_pegin_genesis_blockhash

def psbt_set_input_pegin_claim_script(psbt, index, script):
    return _wallycore.psbt_set_input_pegin_claim_script(psbt, index, script)
psbt_set_input_pegin_claim_script = _wallycore.psbt_set_input_pegin_claim_script

def psbt_clear_input_pegin_claim_script(psbt, index):
    return _wallycore.psbt_clear_input_pegin_claim_script(psbt, index)
psbt_clear_input_pegin_claim_script = _wallycore.psbt_clear_input_pegin_claim_script

def psbt_set_input_issuance_amount_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_input_issuance_amount_commitment(psbt, index, commitment)
psbt_set_input_issuance_amount_commitment = _wallycore.psbt_set_input_issuance_amount_commitment

def psbt_clear_input_issuance_amount_commitment(psbt, index):
    return _wallycore.psbt_clear_input_issuance_amount_commitment(psbt, index)
psbt_clear_input_issuance_amount_commitment = _wallycore.psbt_clear_input_issuance_amount_commitment

def psbt_set_input_issuance_amount_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_issuance_amount_rangeproof(psbt, index, rangeproof)
psbt_set_input_issuance_amount_rangeproof = _wallycore.psbt_set_input_issuance_amount_rangeproof

def psbt_clear_input_issuance_amount_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_issuance_amount_rangeproof(psbt, index)
psbt_clear_input_issuance_amount_rangeproof = _wallycore.psbt_clear_input_issuance_amount_rangeproof

def psbt_set_input_issuance_blinding_nonce(psbt, index, nonce):
    return _wallycore.psbt_set_input_issuance_blinding_nonce(psbt, index, nonce)
psbt_set_input_issuance_blinding_nonce = _wallycore.psbt_set_input_issuance_blinding_nonce

def psbt_clear_input_issuance_blinding_nonce(psbt, index):
    return _wallycore.psbt_clear_input_issuance_blinding_nonce(psbt, index)
psbt_clear_input_issuance_blinding_nonce = _wallycore.psbt_clear_input_issuance_blinding_nonce

def psbt_set_input_issuance_asset_entropy(psbt, index, entropy):
    return _wallycore.psbt_set_input_issuance_asset_entropy(psbt, index, entropy)
psbt_set_input_issuance_asset_entropy = _wallycore.psbt_set_input_issuance_asset_entropy

def psbt_clear_input_issuance_asset_entropy(psbt, index):
    return _wallycore.psbt_clear_input_issuance_asset_entropy(psbt, index)
psbt_clear_input_issuance_asset_entropy = _wallycore.psbt_clear_input_issuance_asset_entropy

def psbt_set_input_issuance_amount_blinding_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_issuance_amount_blinding_rangeproof(psbt, index, rangeproof)
psbt_set_input_issuance_amount_blinding_rangeproof = _wallycore.psbt_set_input_issuance_amount_blinding_rangeproof

def psbt_clear_input_issuance_amount_blinding_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_issuance_amount_blinding_rangeproof(psbt, index)
psbt_clear_input_issuance_amount_blinding_rangeproof = _wallycore.psbt_clear_input_issuance_amount_blinding_rangeproof

def psbt_set_input_inflation_keys_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_input_inflation_keys_commitment(psbt, index, commitment)
psbt_set_input_inflation_keys_commitment = _wallycore.psbt_set_input_inflation_keys_commitment

def psbt_clear_input_inflation_keys_commitment(psbt, index):
    return _wallycore.psbt_clear_input_inflation_keys_commitment(psbt, index)
psbt_clear_input_inflation_keys_commitment = _wallycore.psbt_clear_input_inflation_keys_commitment

def psbt_set_input_inflation_keys_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_inflation_keys_rangeproof(psbt, index, rangeproof)
psbt_set_input_inflation_keys_rangeproof = _wallycore.psbt_set_input_inflation_keys_rangeproof

def psbt_clear_input_inflation_keys_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_inflation_keys_rangeproof(psbt, index)
psbt_clear_input_inflation_keys_rangeproof = _wallycore.psbt_clear_input_inflation_keys_rangeproof

def psbt_set_input_inflation_keys_blinding_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_inflation_keys_blinding_rangeproof(psbt, index, rangeproof)
psbt_set_input_inflation_keys_blinding_rangeproof = _wallycore.psbt_set_input_inflation_keys_blinding_rangeproof

def psbt_clear_input_inflation_keys_blinding_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_inflation_keys_blinding_rangeproof(psbt, index)
psbt_clear_input_inflation_keys_blinding_rangeproof = _wallycore.psbt_clear_input_inflation_keys_blinding_rangeproof

def psbt_set_input_utxo_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_input_utxo_rangeproof(psbt, index, rangeproof)
psbt_set_input_utxo_rangeproof = _wallycore.psbt_set_input_utxo_rangeproof

def psbt_clear_input_utxo_rangeproof(psbt, index):
    return _wallycore.psbt_clear_input_utxo_rangeproof(psbt, index)
psbt_clear_input_utxo_rangeproof = _wallycore.psbt_clear_input_utxo_rangeproof

def psbt_generate_input_explicit_proofs(psbt, index, satoshi, asset, abf, vbf, entropy):
    return _wallycore.psbt_generate_input_explicit_proofs(psbt, index, satoshi, asset, abf, vbf, entropy)
psbt_generate_input_explicit_proofs = _wallycore.psbt_generate_input_explicit_proofs

def psbt_get_output_redeem_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_redeem_script(psbt, index, bytes_out)
psbt_get_output_redeem_script = _wallycore.psbt_get_output_redeem_script

def psbt_get_output_redeem_script_len(psbt, index):
    return _wallycore.psbt_get_output_redeem_script_len(psbt, index)
psbt_get_output_redeem_script_len = _wallycore.psbt_get_output_redeem_script_len

def psbt_get_output_witness_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_witness_script(psbt, index, bytes_out)
psbt_get_output_witness_script = _wallycore.psbt_get_output_witness_script

def psbt_get_output_witness_script_len(psbt, index):
    return _wallycore.psbt_get_output_witness_script_len(psbt, index)
psbt_get_output_witness_script_len = _wallycore.psbt_get_output_witness_script_len

def psbt_get_output_keypaths_size(psbt, index):
    return _wallycore.psbt_get_output_keypaths_size(psbt, index)
psbt_get_output_keypaths_size = _wallycore.psbt_get_output_keypaths_size

def psbt_find_output_keypath(psbt, index, key):
    return _wallycore.psbt_find_output_keypath(psbt, index, key)
psbt_find_output_keypath = _wallycore.psbt_find_output_keypath

def psbt_get_output_keypath(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_output_keypath(psbt, index, subindex, bytes_out)
psbt_get_output_keypath = _wallycore.psbt_get_output_keypath

def psbt_get_output_keypath_len(psbt, index, subindex):
    return _wallycore.psbt_get_output_keypath_len(psbt, index, subindex)
psbt_get_output_keypath_len = _wallycore.psbt_get_output_keypath_len

def psbt_get_output_unknowns_size(psbt, index):
    return _wallycore.psbt_get_output_unknowns_size(psbt, index)
psbt_get_output_unknowns_size = _wallycore.psbt_get_output_unknowns_size

def psbt_find_output_unknown(psbt, index, key):
    return _wallycore.psbt_find_output_unknown(psbt, index, key)
psbt_find_output_unknown = _wallycore.psbt_find_output_unknown

def psbt_get_output_unknown(psbt, index, subindex, bytes_out):
    return _wallycore.psbt_get_output_unknown(psbt, index, subindex, bytes_out)
psbt_get_output_unknown = _wallycore.psbt_get_output_unknown

def psbt_get_output_unknown_len(psbt, index, subindex):
    return _wallycore.psbt_get_output_unknown_len(psbt, index, subindex)
psbt_get_output_unknown_len = _wallycore.psbt_get_output_unknown_len

def psbt_get_output_script(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_script(psbt, index, bytes_out)
psbt_get_output_script = _wallycore.psbt_get_output_script

def psbt_get_output_script_len(psbt, index):
    return _wallycore.psbt_get_output_script_len(psbt, index)
psbt_get_output_script_len = _wallycore.psbt_get_output_script_len

def psbt_get_output_amount(psbt, index):
    return _wallycore.psbt_get_output_amount(psbt, index)
psbt_get_output_amount = _wallycore.psbt_get_output_amount

def psbt_has_output_amount(psbt, index):
    return _wallycore.psbt_has_output_amount(psbt, index)
psbt_has_output_amount = _wallycore.psbt_has_output_amount

def psbt_get_output_taproot_internal_key(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_taproot_internal_key(psbt, index, bytes_out)
psbt_get_output_taproot_internal_key = _wallycore.psbt_get_output_taproot_internal_key

def psbt_get_output_taproot_internal_key_len(psbt, index):
    return _wallycore.psbt_get_output_taproot_internal_key_len(psbt, index)
psbt_get_output_taproot_internal_key_len = _wallycore.psbt_get_output_taproot_internal_key_len

def psbt_set_output_redeem_script(psbt, index, script):
    return _wallycore.psbt_set_output_redeem_script(psbt, index, script)
psbt_set_output_redeem_script = _wallycore.psbt_set_output_redeem_script

def psbt_set_output_witness_script(psbt, index, script):
    return _wallycore.psbt_set_output_witness_script(psbt, index, script)
psbt_set_output_witness_script = _wallycore.psbt_set_output_witness_script

def psbt_set_output_keypaths(psbt, index, map_in):
    return _wallycore.psbt_set_output_keypaths(psbt, index, map_in)
psbt_set_output_keypaths = _wallycore.psbt_set_output_keypaths

def psbt_set_output_unknowns(psbt, index, map_in):
    return _wallycore.psbt_set_output_unknowns(psbt, index, map_in)
psbt_set_output_unknowns = _wallycore.psbt_set_output_unknowns

def psbt_set_output_script(psbt, index, script):
    return _wallycore.psbt_set_output_script(psbt, index, script)
psbt_set_output_script = _wallycore.psbt_set_output_script

def psbt_set_output_amount(psbt, index, amount):
    return _wallycore.psbt_set_output_amount(psbt, index, amount)
psbt_set_output_amount = _wallycore.psbt_set_output_amount

def psbt_clear_output_amount(psbt, index):
    return _wallycore.psbt_clear_output_amount(psbt, index)
psbt_clear_output_amount = _wallycore.psbt_clear_output_amount

def psbt_set_output_taproot_internal_key(psbt, index, pub_key):
    return _wallycore.psbt_set_output_taproot_internal_key(psbt, index, pub_key)
psbt_set_output_taproot_internal_key = _wallycore.psbt_set_output_taproot_internal_key

def psbt_get_output_blinder_index(psbt, index):
    return _wallycore.psbt_get_output_blinder_index(psbt, index)
psbt_get_output_blinder_index = _wallycore.psbt_get_output_blinder_index

def psbt_has_output_blinder_index(psbt, index):
    return _wallycore.psbt_has_output_blinder_index(psbt, index)
psbt_has_output_blinder_index = _wallycore.psbt_has_output_blinder_index

def psbt_get_output_value_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_value_commitment(psbt, index, bytes_out)
psbt_get_output_value_commitment = _wallycore.psbt_get_output_value_commitment

def psbt_get_output_value_commitment_len(psbt, index):
    return _wallycore.psbt_get_output_value_commitment_len(psbt, index)
psbt_get_output_value_commitment_len = _wallycore.psbt_get_output_value_commitment_len

def psbt_get_output_asset(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_asset(psbt, index, bytes_out)
psbt_get_output_asset = _wallycore.psbt_get_output_asset

def psbt_get_output_asset_len(psbt, index):
    return _wallycore.psbt_get_output_asset_len(psbt, index)
psbt_get_output_asset_len = _wallycore.psbt_get_output_asset_len

def psbt_get_output_asset_commitment(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_asset_commitment(psbt, index, bytes_out)
psbt_get_output_asset_commitment = _wallycore.psbt_get_output_asset_commitment

def psbt_get_output_asset_commitment_len(psbt, index):
    return _wallycore.psbt_get_output_asset_commitment_len(psbt, index)
psbt_get_output_asset_commitment_len = _wallycore.psbt_get_output_asset_commitment_len

def psbt_get_output_value_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_value_rangeproof(psbt, index, bytes_out)
psbt_get_output_value_rangeproof = _wallycore.psbt_get_output_value_rangeproof

def psbt_get_output_value_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_output_value_rangeproof_len(psbt, index)
psbt_get_output_value_rangeproof_len = _wallycore.psbt_get_output_value_rangeproof_len

def psbt_get_output_asset_surjectionproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_asset_surjectionproof(psbt, index, bytes_out)
psbt_get_output_asset_surjectionproof = _wallycore.psbt_get_output_asset_surjectionproof

def psbt_get_output_asset_surjectionproof_len(psbt, index):
    return _wallycore.psbt_get_output_asset_surjectionproof_len(psbt, index)
psbt_get_output_asset_surjectionproof_len = _wallycore.psbt_get_output_asset_surjectionproof_len

def psbt_get_output_blinding_public_key(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_blinding_public_key(psbt, index, bytes_out)
psbt_get_output_blinding_public_key = _wallycore.psbt_get_output_blinding_public_key

def psbt_get_output_blinding_public_key_len(psbt, index):
    return _wallycore.psbt_get_output_blinding_public_key_len(psbt, index)
psbt_get_output_blinding_public_key_len = _wallycore.psbt_get_output_blinding_public_key_len

def psbt_get_output_ecdh_public_key(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_ecdh_public_key(psbt, index, bytes_out)
psbt_get_output_ecdh_public_key = _wallycore.psbt_get_output_ecdh_public_key

def psbt_get_output_ecdh_public_key_len(psbt, index):
    return _wallycore.psbt_get_output_ecdh_public_key_len(psbt, index)
psbt_get_output_ecdh_public_key_len = _wallycore.psbt_get_output_ecdh_public_key_len

def psbt_get_output_value_blinding_rangeproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_value_blinding_rangeproof(psbt, index, bytes_out)
psbt_get_output_value_blinding_rangeproof = _wallycore.psbt_get_output_value_blinding_rangeproof

def psbt_get_output_value_blinding_rangeproof_len(psbt, index):
    return _wallycore.psbt_get_output_value_blinding_rangeproof_len(psbt, index)
psbt_get_output_value_blinding_rangeproof_len = _wallycore.psbt_get_output_value_blinding_rangeproof_len

def psbt_get_output_asset_blinding_surjectionproof(psbt, index, bytes_out):
    return _wallycore.psbt_get_output_asset_blinding_surjectionproof(psbt, index, bytes_out)
psbt_get_output_asset_blinding_surjectionproof = _wallycore.psbt_get_output_asset_blinding_surjectionproof

def psbt_get_output_asset_blinding_surjectionproof_len(psbt, index):
    return _wallycore.psbt_get_output_asset_blinding_surjectionproof_len(psbt, index)
psbt_get_output_asset_blinding_surjectionproof_len = _wallycore.psbt_get_output_asset_blinding_surjectionproof_len

def psbt_set_output_blinder_index(psbt, index, idx):
    return _wallycore.psbt_set_output_blinder_index(psbt, index, idx)
psbt_set_output_blinder_index = _wallycore.psbt_set_output_blinder_index

def psbt_clear_output_blinder_index(psbt, index):
    return _wallycore.psbt_clear_output_blinder_index(psbt, index)
psbt_clear_output_blinder_index = _wallycore.psbt_clear_output_blinder_index

def psbt_set_output_value_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_output_value_commitment(psbt, index, commitment)
psbt_set_output_value_commitment = _wallycore.psbt_set_output_value_commitment

def psbt_clear_output_value_commitment(psbt, index):
    return _wallycore.psbt_clear_output_value_commitment(psbt, index)
psbt_clear_output_value_commitment = _wallycore.psbt_clear_output_value_commitment

def psbt_set_output_asset(psbt, index, asset):
    return _wallycore.psbt_set_output_asset(psbt, index, asset)
psbt_set_output_asset = _wallycore.psbt_set_output_asset

def psbt_clear_output_asset(psbt, index):
    return _wallycore.psbt_clear_output_asset(psbt, index)
psbt_clear_output_asset = _wallycore.psbt_clear_output_asset

def psbt_set_output_asset_commitment(psbt, index, commitment):
    return _wallycore.psbt_set_output_asset_commitment(psbt, index, commitment)
psbt_set_output_asset_commitment = _wallycore.psbt_set_output_asset_commitment

def psbt_clear_output_asset_commitment(psbt, index):
    return _wallycore.psbt_clear_output_asset_commitment(psbt, index)
psbt_clear_output_asset_commitment = _wallycore.psbt_clear_output_asset_commitment

def psbt_set_output_value_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_output_value_rangeproof(psbt, index, rangeproof)
psbt_set_output_value_rangeproof = _wallycore.psbt_set_output_value_rangeproof

def psbt_clear_output_value_rangeproof(psbt, index):
    return _wallycore.psbt_clear_output_value_rangeproof(psbt, index)
psbt_clear_output_value_rangeproof = _wallycore.psbt_clear_output_value_rangeproof

def psbt_set_output_asset_surjectionproof(psbt, index, surjectionproof):
    return _wallycore.psbt_set_output_asset_surjectionproof(psbt, index, surjectionproof)
psbt_set_output_asset_surjectionproof = _wallycore.psbt_set_output_asset_surjectionproof

def psbt_clear_output_asset_surjectionproof(psbt, index):
    return _wallycore.psbt_clear_output_asset_surjectionproof(psbt, index)
psbt_clear_output_asset_surjectionproof = _wallycore.psbt_clear_output_asset_surjectionproof

def psbt_set_output_blinding_public_key(psbt, index, pub_key):
    return _wallycore.psbt_set_output_blinding_public_key(psbt, index, pub_key)
psbt_set_output_blinding_public_key = _wallycore.psbt_set_output_blinding_public_key

def psbt_clear_output_blinding_public_key(psbt, index):
    return _wallycore.psbt_clear_output_blinding_public_key(psbt, index)
psbt_clear_output_blinding_public_key = _wallycore.psbt_clear_output_blinding_public_key

def psbt_set_output_ecdh_public_key(psbt, index, pub_key):
    return _wallycore.psbt_set_output_ecdh_public_key(psbt, index, pub_key)
psbt_set_output_ecdh_public_key = _wallycore.psbt_set_output_ecdh_public_key

def psbt_clear_output_ecdh_public_key(psbt, index):
    return _wallycore.psbt_clear_output_ecdh_public_key(psbt, index)
psbt_clear_output_ecdh_public_key = _wallycore.psbt_clear_output_ecdh_public_key

def psbt_set_output_value_blinding_rangeproof(psbt, index, rangeproof):
    return _wallycore.psbt_set_output_value_blinding_rangeproof(psbt, index, rangeproof)
psbt_set_output_value_blinding_rangeproof = _wallycore.psbt_set_output_value_blinding_rangeproof

def psbt_clear_output_value_blinding_rangeproof(psbt, index):
    return _wallycore.psbt_clear_output_value_blinding_rangeproof(psbt, index)
psbt_clear_output_value_blinding_rangeproof = _wallycore.psbt_clear_output_value_blinding_rangeproof

def psbt_set_output_asset_blinding_surjectionproof(psbt, index, surjectionproof):
    return _wallycore.psbt_set_output_asset_blinding_surjectionproof(psbt, index, surjectionproof)
psbt_set_output_asset_blinding_surjectionproof = _wallycore.psbt_set_output_asset_blinding_surjectionproof

def psbt_clear_output_asset_blinding_surjectionproof(psbt, index):
    return _wallycore.psbt_clear_output_asset_blinding_surjectionproof(psbt, index)
psbt_clear_output_asset_blinding_surjectionproof = _wallycore.psbt_clear_output_asset_blinding_surjectionproof

def psbt_get_output_blinding_status(output, index, flags):
    return _wallycore.psbt_get_output_blinding_status(output, index, flags)
psbt_get_output_blinding_status = _wallycore.psbt_get_output_blinding_status
WALLY_SCRIPT_TYPE_UNKNOWN = _wallycore.WALLY_SCRIPT_TYPE_UNKNOWN
WALLY_SCRIPT_TYPE_OP_RETURN = _wallycore.WALLY_SCRIPT_TYPE_OP_RETURN
WALLY_SCRIPT_TYPE_P2PKH = _wallycore.WALLY_SCRIPT_TYPE_P2PKH
WALLY_SCRIPT_TYPE_P2SH = _wallycore.WALLY_SCRIPT_TYPE_P2SH
WALLY_SCRIPT_TYPE_P2WPKH = _wallycore.WALLY_SCRIPT_TYPE_P2WPKH
WALLY_SCRIPT_TYPE_P2WSH = _wallycore.WALLY_SCRIPT_TYPE_P2WSH
WALLY_SCRIPT_TYPE_MULTISIG = _wallycore.WALLY_SCRIPT_TYPE_MULTISIG
WALLY_SCRIPT_TYPE_P2TR = _wallycore.WALLY_SCRIPT_TYPE_P2TR
WALLY_SCRIPT_TYPE_CSV2OF2_1 = _wallycore.WALLY_SCRIPT_TYPE_CSV2OF2_1
WALLY_SCRIPT_TYPE_CSV2OF2_1_OPT = _wallycore.WALLY_SCRIPT_TYPE_CSV2OF2_1_OPT
WALLY_SCRIPTPUBKEY_P2PKH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2PKH_LEN
WALLY_SCRIPTPUBKEY_P2SH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2SH_LEN
WALLY_SCRIPTPUBKEY_P2WPKH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2WPKH_LEN
WALLY_SCRIPTPUBKEY_P2WSH_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2WSH_LEN
WALLY_SCRIPTPUBKEY_P2TR_LEN = _wallycore.WALLY_SCRIPTPUBKEY_P2TR_LEN
WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN = _wallycore.WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN
WALLY_MAX_OP_RETURN_LEN = _wallycore.WALLY_MAX_OP_RETURN_LEN
WALLY_SCRIPTSIG_P2PKH_MAX_LEN = _wallycore.WALLY_SCRIPTSIG_P2PKH_MAX_LEN
WALLY_SCRIPTSIG_MAX_LEN = _wallycore.WALLY_SCRIPTSIG_MAX_LEN
WALLY_WITNESSSCRIPT_MAX_LEN = _wallycore.WALLY_WITNESSSCRIPT_MAX_LEN
WALLY_SCRIPT_VARINT_MAX_SIZE = _wallycore.WALLY_SCRIPT_VARINT_MAX_SIZE
WALLY_SCRIPT_HASH160 = _wallycore.WALLY_SCRIPT_HASH160
WALLY_SCRIPT_SHA256 = _wallycore.WALLY_SCRIPT_SHA256
WALLY_SCRIPT_AS_PUSH = _wallycore.WALLY_SCRIPT_AS_PUSH
WALLY_SCRIPT_MULTISIG_SORTED = _wallycore.WALLY_SCRIPT_MULTISIG_SORTED
OP_0 = _wallycore.OP_0
OP_FALSE = _wallycore.OP_FALSE
OP_PUSHDATA1 = _wallycore.OP_PUSHDATA1
OP_PUSHDATA2 = _wallycore.OP_PUSHDATA2
OP_PUSHDATA4 = _wallycore.OP_PUSHDATA4
OP_1NEGATE = _wallycore.OP_1NEGATE
OP_RESERVED = _wallycore.OP_RESERVED
OP_1 = _wallycore.OP_1
OP_TRUE = _wallycore.OP_TRUE
OP_2 = _wallycore.OP_2
OP_3 = _wallycore.OP_3
OP_4 = _wallycore.OP_4
OP_5 = _wallycore.OP_5
OP_6 = _wallycore.OP_6
OP_7 = _wallycore.OP_7
OP_8 = _wallycore.OP_8
OP_9 = _wallycore.OP_9
OP_10 = _wallycore.OP_10
OP_11 = _wallycore.OP_11
OP_12 = _wallycore.OP_12
OP_13 = _wallycore.OP_13
OP_14 = _wallycore.OP_14
OP_15 = _wallycore.OP_15
OP_16 = _wallycore.OP_16
OP_NOP = _wallycore.OP_NOP
OP_VER = _wallycore.OP_VER
OP_IF = _wallycore.OP_IF
OP_NOTIF = _wallycore.OP_NOTIF
OP_VERIF = _wallycore.OP_VERIF
OP_VERNOTIF = _wallycore.OP_VERNOTIF
OP_ELSE = _wallycore.OP_ELSE
OP_ENDIF = _wallycore.OP_ENDIF
OP_VERIFY = _wallycore.OP_VERIFY
OP_RETURN = _wallycore.OP_RETURN
OP_TOALTSTACK = _wallycore.OP_TOALTSTACK
OP_FROMALTSTACK = _wallycore.OP_FROMALTSTACK
OP_2DROP = _wallycore.OP_2DROP
OP_2DUP = _wallycore.OP_2DUP
OP_3DUP = _wallycore.OP_3DUP
OP_2OVER = _wallycore.OP_2OVER
OP_2ROT = _wallycore.OP_2ROT
OP_2SWAP = _wallycore.OP_2SWAP
OP_IFDUP = _wallycore.OP_IFDUP
OP_DEPTH = _wallycore.OP_DEPTH
OP_DROP = _wallycore.OP_DROP
OP_DUP = _wallycore.OP_DUP
OP_NIP = _wallycore.OP_NIP
OP_OVER = _wallycore.OP_OVER
OP_PICK = _wallycore.OP_PICK
OP_ROLL = _wallycore.OP_ROLL
OP_ROT = _wallycore.OP_ROT
OP_SWAP = _wallycore.OP_SWAP
OP_TUCK = _wallycore.OP_TUCK
OP_CAT = _wallycore.OP_CAT
OP_SUBSTR = _wallycore.OP_SUBSTR
OP_LEFT = _wallycore.OP_LEFT
OP_RIGHT = _wallycore.OP_RIGHT
OP_SIZE = _wallycore.OP_SIZE
OP_INVERT = _wallycore.OP_INVERT
OP_AND = _wallycore.OP_AND
OP_OR = _wallycore.OP_OR
OP_XOR = _wallycore.OP_XOR
OP_EQUAL = _wallycore.OP_EQUAL
OP_EQUALVERIFY = _wallycore.OP_EQUALVERIFY
OP_RESERVED1 = _wallycore.OP_RESERVED1
OP_RESERVED2 = _wallycore.OP_RESERVED2
OP_1ADD = _wallycore.OP_1ADD
OP_1SUB = _wallycore.OP_1SUB
OP_2MUL = _wallycore.OP_2MUL
OP_2DIV = _wallycore.OP_2DIV
OP_NEGATE = _wallycore.OP_NEGATE
OP_ABS = _wallycore.OP_ABS
OP_NOT = _wallycore.OP_NOT
OP_0NOTEQUAL = _wallycore.OP_0NOTEQUAL
OP_ADD = _wallycore.OP_ADD
OP_SUB = _wallycore.OP_SUB
OP_MUL = _wallycore.OP_MUL
OP_DIV = _wallycore.OP_DIV
OP_MOD = _wallycore.OP_MOD
OP_LSHIFT = _wallycore.OP_LSHIFT
OP_RSHIFT = _wallycore.OP_RSHIFT
OP_BOOLAND = _wallycore.OP_BOOLAND
OP_BOOLOR = _wallycore.OP_BOOLOR
OP_NUMEQUAL = _wallycore.OP_NUMEQUAL
OP_NUMEQUALVERIFY = _wallycore.OP_NUMEQUALVERIFY
OP_NUMNOTEQUAL = _wallycore.OP_NUMNOTEQUAL
OP_LESSTHAN = _wallycore.OP_LESSTHAN
OP_GREATERTHAN = _wallycore.OP_GREATERTHAN
OP_LESSTHANOREQUAL = _wallycore.OP_LESSTHANOREQUAL
OP_GREATERTHANOREQUAL = _wallycore.OP_GREATERTHANOREQUAL
OP_MIN = _wallycore.OP_MIN
OP_MAX = _wallycore.OP_MAX
OP_WITHIN = _wallycore.OP_WITHIN
OP_RIPEMD160 = _wallycore.OP_RIPEMD160
OP_SHA1 = _wallycore.OP_SHA1
OP_SHA256 = _wallycore.OP_SHA256
OP_HASH160 = _wallycore.OP_HASH160
OP_HASH256 = _wallycore.OP_HASH256
OP_CODESEPARATOR = _wallycore.OP_CODESEPARATOR
OP_CHECKSIG = _wallycore.OP_CHECKSIG
OP_CHECKSIGVERIFY = _wallycore.OP_CHECKSIGVERIFY
OP_CHECKMULTISIG = _wallycore.OP_CHECKMULTISIG
OP_CHECKMULTISIGVERIFY = _wallycore.OP_CHECKMULTISIGVERIFY
OP_NOP1 = _wallycore.OP_NOP1
OP_CHECKLOCKTIMEVERIFY = _wallycore.OP_CHECKLOCKTIMEVERIFY
OP_NOP2 = _wallycore.OP_NOP2
OP_CHECKSEQUENCEVERIFY = _wallycore.OP_CHECKSEQUENCEVERIFY
OP_NOP3 = _wallycore.OP_NOP3
OP_NOP4 = _wallycore.OP_NOP4
OP_NOP5 = _wallycore.OP_NOP5
OP_NOP6 = _wallycore.OP_NOP6
OP_NOP7 = _wallycore.OP_NOP7
OP_NOP8 = _wallycore.OP_NOP8
OP_NOP9 = _wallycore.OP_NOP9
OP_NOP10 = _wallycore.OP_NOP10
OP_INVALIDOPCODE = _wallycore.OP_INVALIDOPCODE

def scriptpubkey_get_type(bytes):
    return _wallycore.scriptpubkey_get_type(bytes)
scriptpubkey_get_type = _wallycore.scriptpubkey_get_type

def scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_p2pkh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2pkh_from_bytes = _wallycore.scriptpubkey_p2pkh_from_bytes

def scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out):
    return _wallycore.scriptsig_p2pkh_from_sig(pub_key, sig, sighash, bytes_out)
scriptsig_p2pkh_from_sig = _wallycore.scriptsig_p2pkh_from_sig

def witness_p2wpkh_from_sig(pub_key, sig, sighash, witness):
    return _wallycore.witness_p2wpkh_from_sig(pub_key, sig, sighash, witness)
witness_p2wpkh_from_sig = _wallycore.witness_p2wpkh_from_sig

def scriptsig_p2pkh_from_der(pub_key, sig, bytes_out):
    return _wallycore.scriptsig_p2pkh_from_der(pub_key, sig, bytes_out)
scriptsig_p2pkh_from_der = _wallycore.scriptsig_p2pkh_from_der

def witness_p2wpkh_from_der(pub_key, sig, witness):
    return _wallycore.witness_p2wpkh_from_der(pub_key, sig, witness)
witness_p2wpkh_from_der = _wallycore.witness_p2wpkh_from_der

def scriptpubkey_p2tr_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_p2tr_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2tr_from_bytes = _wallycore.scriptpubkey_p2tr_from_bytes

def witness_p2tr_from_sig(sig, witness):
    return _wallycore.witness_p2tr_from_sig(sig, witness)
witness_p2tr_from_sig = _wallycore.witness_p2tr_from_sig

def scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_op_return_from_bytes(bytes, flags, bytes_out)
scriptpubkey_op_return_from_bytes = _wallycore.scriptpubkey_op_return_from_bytes

def scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out):
    return _wallycore.scriptpubkey_p2sh_from_bytes(bytes, flags, bytes_out)
scriptpubkey_p2sh_from_bytes = _wallycore.scriptpubkey_p2sh_from_bytes

def scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out):
    return _wallycore.scriptpubkey_multisig_from_bytes(bytes, threshold, flags, bytes_out)
scriptpubkey_multisig_from_bytes = _wallycore.scriptpubkey_multisig_from_bytes

def scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out):
    return _wallycore.scriptsig_multisig_from_bytes(script, bytes, sighash, flags, bytes_out)
scriptsig_multisig_from_bytes = _wallycore.scriptsig_multisig_from_bytes

def witness_multisig_from_bytes(script, bytes, sighash, flags, witness):
    return _wallycore.witness_multisig_from_bytes(script, bytes, sighash, flags, witness)
witness_multisig_from_bytes = _wallycore.witness_multisig_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out):
    return _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes = _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes

def scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out):
    return _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes, csv_blocks, flags, bytes_out)
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wallycore.scriptpubkey_csv_2of2_then_1_from_bytes_opt

def scriptpubkey_csv_blocks_from_csv_2of2_then_1(bytes):
    return _wallycore.scriptpubkey_csv_blocks_from_csv_2of2_then_1(bytes)
scriptpubkey_csv_blocks_from_csv_2of2_then_1 = _wallycore.scriptpubkey_csv_blocks_from_csv_2of2_then_1

def script_push_from_bytes(bytes, flags, bytes_out):
    return _wallycore.script_push_from_bytes(bytes, flags, bytes_out)
script_push_from_bytes = _wallycore.script_push_from_bytes

def varint_get_length(value):
    return _wallycore.varint_get_length(value)
varint_get_length = _wallycore.varint_get_length

def varint_to_bytes(value, bytes_out):
    return _wallycore.varint_to_bytes(value, bytes_out)
varint_to_bytes = _wallycore.varint_to_bytes

def varbuff_get_length(bytes):
    return _wallycore.varbuff_get_length(bytes)
varbuff_get_length = _wallycore.varbuff_get_length

def varbuff_to_bytes(bytes, bytes_out):
    return _wallycore.varbuff_to_bytes(bytes, bytes_out)
varbuff_to_bytes = _wallycore.varbuff_to_bytes

def witness_program_from_bytes(bytes, flags, bytes_out):
    return _wallycore.witness_program_from_bytes(bytes, flags, bytes_out)
witness_program_from_bytes = _wallycore.witness_program_from_bytes

def witness_program_from_bytes_and_version(bytes, version, flags, bytes_out):
    return _wallycore.witness_program_from_bytes_and_version(bytes, version, flags, bytes_out)
witness_program_from_bytes_and_version = _wallycore.witness_program_from_bytes_and_version

def elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len):
    return _wallycore.elements_pegout_script_size(genesis_blockhash_len, mainchain_script_len, sub_pubkey_len, whitelistproof_len)
elements_pegout_script_size = _wallycore.elements_pegout_script_size

def elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out):
    return _wallycore.elements_pegout_script_from_bytes(genesis_blockhash, mainchain_script, sub_pubkey, whitelistproof, flags, bytes_out)
elements_pegout_script_from_bytes = _wallycore.elements_pegout_script_from_bytes

def elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out):
    return _wallycore.elements_pegin_contract_script_from_bytes(redeem_script, script, flags, bytes_out)
elements_pegin_contract_script_from_bytes = _wallycore.elements_pegin_contract_script_from_bytes

def symmetric_key_from_seed(bytes, bytes_out):
    return _wallycore.symmetric_key_from_seed(bytes, bytes_out)
symmetric_key_from_seed = _wallycore.symmetric_key_from_seed

def symmetric_key_from_parent(bytes, version, label, bytes_out):
    return _wallycore.symmetric_key_from_parent(bytes, version, label, bytes_out)
symmetric_key_from_parent = _wallycore.symmetric_key_from_parent
WALLY_TX_SEQUENCE_FINAL = _wallycore.WALLY_TX_SEQUENCE_FINAL
WALLY_TX_VERSION_1 = _wallycore.WALLY_TX_VERSION_1
WALLY_TX_VERSION_2 = _wallycore.WALLY_TX_VERSION_2
WALLY_TX_IS_ELEMENTS = _wallycore.WALLY_TX_IS_ELEMENTS
WALLY_TX_IS_ISSUANCE = _wallycore.WALLY_TX_IS_ISSUANCE
WALLY_TX_IS_PEGIN = _wallycore.WALLY_TX_IS_PEGIN
WALLY_TX_IS_COINBASE = _wallycore.WALLY_TX_IS_COINBASE
WALLY_SATOSHI_PER_BTC = _wallycore.WALLY_SATOSHI_PER_BTC
WALLY_BTC_MAX = _wallycore.WALLY_BTC_MAX
WALLY_TXHASH_LEN = _wallycore.WALLY_TXHASH_LEN
WALLY_TX_FLAG_USE_WITNESS = _wallycore.WALLY_TX_FLAG_USE_WITNESS
WALLY_TX_FLAG_USE_ELEMENTS = _wallycore.WALLY_TX_FLAG_USE_ELEMENTS
WALLY_TX_FLAG_ALLOW_PARTIAL = _wallycore.WALLY_TX_FLAG_ALLOW_PARTIAL
WALLY_TX_FLAG_PRE_BIP144 = _wallycore.WALLY_TX_FLAG_PRE_BIP144
WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE = _wallycore.WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE
WALLY_TX_CLONE_FLAG_NON_FINAL = _wallycore.WALLY_TX_CLONE_FLAG_NON_FINAL
WALLY_TX_DUMMY_NULL = _wallycore.WALLY_TX_DUMMY_NULL
WALLY_TX_DUMMY_SIG = _wallycore.WALLY_TX_DUMMY_SIG
WALLY_TX_DUMMY_SIG_LOW_R = _wallycore.WALLY_TX_DUMMY_SIG_LOW_R
WALLY_SIGHASH_DEFAULT = _wallycore.WALLY_SIGHASH_DEFAULT
WALLY_SIGHASH_ALL = _wallycore.WALLY_SIGHASH_ALL
WALLY_SIGHASH_NONE = _wallycore.WALLY_SIGHASH_NONE
WALLY_SIGHASH_SINGLE = _wallycore.WALLY_SIGHASH_SINGLE
WALLY_SIGHASH_FORKID = _wallycore.WALLY_SIGHASH_FORKID
WALLY_SIGHASH_RANGEPROOF = _wallycore.WALLY_SIGHASH_RANGEPROOF
WALLY_SIGHASH_ANYPREVOUT = _wallycore.WALLY_SIGHASH_ANYPREVOUT
WALLY_SIGHASH_ANYPREVOUTANYSCRIPT = _wallycore.WALLY_SIGHASH_ANYPREVOUTANYSCRIPT
WALLY_SIGHASH_ANYONECANPAY = _wallycore.WALLY_SIGHASH_ANYONECANPAY
WALLY_SIGHASH_MASK = _wallycore.WALLY_SIGHASH_MASK
WALLY_SIGHASH_TR_IN_MASK = _wallycore.WALLY_SIGHASH_TR_IN_MASK
WALLY_SIGTYPE_PRE_SW = _wallycore.WALLY_SIGTYPE_PRE_SW
WALLY_SIGTYPE_SW_V0 = _wallycore.WALLY_SIGTYPE_SW_V0
WALLY_SIGTYPE_SW_V1 = _wallycore.WALLY_SIGTYPE_SW_V1
WALLY_SIGTYPE_MASK = _wallycore.WALLY_SIGTYPE_MASK
WALLY_TX_ASSET_CT_EMPTY_PREFIX = _wallycore.WALLY_TX_ASSET_CT_EMPTY_PREFIX
WALLY_TX_ASSET_CT_EXPLICIT_PREFIX = _wallycore.WALLY_TX_ASSET_CT_EXPLICIT_PREFIX
WALLY_TX_ASSET_CT_VALUE_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_A
WALLY_TX_ASSET_CT_VALUE_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_VALUE_PREFIX_B
WALLY_TX_ASSET_CT_ASSET_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_A
WALLY_TX_ASSET_CT_ASSET_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_ASSET_PREFIX_B
WALLY_TX_ASSET_CT_NONCE_PREFIX_A = _wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_A
WALLY_TX_ASSET_CT_NONCE_PREFIX_B = _wallycore.WALLY_TX_ASSET_CT_NONCE_PREFIX_B
WALLY_TX_ASSET_TAG_LEN = _wallycore.WALLY_TX_ASSET_TAG_LEN
WALLY_TX_ASSET_CT_VALUE_LEN = _wallycore.WALLY_TX_ASSET_CT_VALUE_LEN
WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN = _wallycore.WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN
WALLY_TX_ASSET_CT_ASSET_LEN = _wallycore.WALLY_TX_ASSET_CT_ASSET_LEN
WALLY_TX_ASSET_CT_NONCE_LEN = _wallycore.WALLY_TX_ASSET_CT_NONCE_LEN
WALLY_TX_ASSET_CT_LEN = _wallycore.WALLY_TX_ASSET_CT_LEN
WALLY_TX_ISSUANCE_FLAG = _wallycore.WALLY_TX_ISSUANCE_FLAG
WALLY_TX_PEGIN_FLAG = _wallycore.WALLY_TX_PEGIN_FLAG
WALLY_TX_INDEX_MASK = _wallycore.WALLY_TX_INDEX_MASK
WALLY_NO_CODESEPARATOR = _wallycore.WALLY_NO_CODESEPARATOR

def tx_witness_stack_init_alloc(allocation_len):
    return _wallycore.tx_witness_stack_init_alloc(allocation_len)
tx_witness_stack_init_alloc = _wallycore.tx_witness_stack_init_alloc

def tx_witness_stack_clone_alloc(stack):
    return _wallycore.tx_witness_stack_clone_alloc(stack)
tx_witness_stack_clone_alloc = _wallycore.tx_witness_stack_clone_alloc

def tx_witness_stack_get_num_items(stack):
    return _wallycore.tx_witness_stack_get_num_items(stack)
tx_witness_stack_get_num_items = _wallycore.tx_witness_stack_get_num_items

def tx_witness_stack_add(stack, witness):
    return _wallycore.tx_witness_stack_add(stack, witness)
tx_witness_stack_add = _wallycore.tx_witness_stack_add

def tx_witness_stack_add_dummy(stack, flags):
    return _wallycore.tx_witness_stack_add_dummy(stack, flags)
tx_witness_stack_add_dummy = _wallycore.tx_witness_stack_add_dummy

def tx_witness_stack_set(stack, index, witness):
    return _wallycore.tx_witness_stack_set(stack, index, witness)
tx_witness_stack_set = _wallycore.tx_witness_stack_set

def tx_witness_stack_set_dummy(stack, index, flags):
    return _wallycore.tx_witness_stack_set_dummy(stack, index, flags)
tx_witness_stack_set_dummy = _wallycore.tx_witness_stack_set_dummy

def tx_witness_stack_from_bytes(bytes):
    return _wallycore.tx_witness_stack_from_bytes(bytes)
tx_witness_stack_from_bytes = _wallycore.tx_witness_stack_from_bytes

def tx_witness_stack_get_length(stack):
    return _wallycore.tx_witness_stack_get_length(stack)
tx_witness_stack_get_length = _wallycore.tx_witness_stack_get_length

def tx_witness_stack_to_bytes(stack, bytes_out):
    return _wallycore.tx_witness_stack_to_bytes(stack, bytes_out)
tx_witness_stack_to_bytes = _wallycore.tx_witness_stack_to_bytes

def tx_witness_stack_free(stack):
    return _wallycore.tx_witness_stack_free(stack)
tx_witness_stack_free = _wallycore.tx_witness_stack_free

def tx_input_init_alloc(txhash, utxo_index, sequence, script, witness):
    return _wallycore.tx_input_init_alloc(txhash, utxo_index, sequence, script, witness)
tx_input_init_alloc = _wallycore.tx_input_init_alloc

def tx_input_clone_alloc(tx_input_in, input):
    return _wallycore.tx_input_clone_alloc(tx_input_in, input)
tx_input_clone_alloc = _wallycore.tx_input_clone_alloc

def tx_input_free(input):
    return _wallycore.tx_input_free(input)
tx_input_free = _wallycore.tx_input_free

def tx_output_init_alloc(satoshi, script):
    return _wallycore.tx_output_init_alloc(satoshi, script)
tx_output_init_alloc = _wallycore.tx_output_init_alloc

def tx_output_clone_alloc(tx_output_in):
    return _wallycore.tx_output_clone_alloc(tx_output_in)
tx_output_clone_alloc = _wallycore.tx_output_clone_alloc

def tx_output_free(output):
    return _wallycore.tx_output_free(output)
tx_output_free = _wallycore.tx_output_free

def tx_init_alloc(version, locktime, inputs_allocation_len, outputs_allocation_len):
    return _wallycore.tx_init_alloc(version, locktime, inputs_allocation_len, outputs_allocation_len)
tx_init_alloc = _wallycore.tx_init_alloc

def tx_clone_alloc(tx, flags):
    return _wallycore.tx_clone_alloc(tx, flags)
tx_clone_alloc = _wallycore.tx_clone_alloc

def tx_add_input(tx, input):
    return _wallycore.tx_add_input(tx, input)
tx_add_input = _wallycore.tx_add_input

def tx_add_input_at(tx, index, input):
    return _wallycore.tx_add_input_at(tx, index, input)
tx_add_input_at = _wallycore.tx_add_input_at

def tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags):
    return _wallycore.tx_add_raw_input(tx, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input = _wallycore.tx_add_raw_input

def tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags):
    return _wallycore.tx_add_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, flags)
tx_add_raw_input_at = _wallycore.tx_add_raw_input_at

def tx_remove_input(tx, index):
    return _wallycore.tx_remove_input(tx, index)
tx_remove_input = _wallycore.tx_remove_input

def tx_set_input_script(tx, index, script):
    return _wallycore.tx_set_input_script(tx, index, script)
tx_set_input_script = _wallycore.tx_set_input_script

def tx_set_input_witness(tx, index, stack):
    return _wallycore.tx_set_input_witness(tx, index, stack)
tx_set_input_witness = _wallycore.tx_set_input_witness

def tx_add_output(tx, output):
    return _wallycore.tx_add_output(tx, output)
tx_add_output = _wallycore.tx_add_output

def tx_add_output_at(tx, index, output):
    return _wallycore.tx_add_output_at(tx, index, output)
tx_add_output_at = _wallycore.tx_add_output_at

def tx_add_raw_output(tx, satoshi, script, flags):
    return _wallycore.tx_add_raw_output(tx, satoshi, script, flags)
tx_add_raw_output = _wallycore.tx_add_raw_output

def tx_add_raw_output_at(tx, index, satoshi, script, flags):
    return _wallycore.tx_add_raw_output_at(tx, index, satoshi, script, flags)
tx_add_raw_output_at = _wallycore.tx_add_raw_output_at

def tx_remove_output(tx, index):
    return _wallycore.tx_remove_output(tx, index)
tx_remove_output = _wallycore.tx_remove_output

def tx_get_witness_count(tx):
    return _wallycore.tx_get_witness_count(tx)
tx_get_witness_count = _wallycore.tx_get_witness_count

def tx_free(tx):
    return _wallycore.tx_free(tx)
tx_free = _wallycore.tx_free

def tx_get_txid(tx, bytes_out):
    return _wallycore.tx_get_txid(tx, bytes_out)
tx_get_txid = _wallycore.tx_get_txid

def get_hash_prevouts(txhashes, utxo_indices, bytes_out):
    return _wallycore.get_hash_prevouts(txhashes, utxo_indices, bytes_out)
get_hash_prevouts = _wallycore.get_hash_prevouts

def tx_get_hash_prevouts(tx, index, num_inputs, bytes_out):
    return _wallycore.tx_get_hash_prevouts(tx, index, num_inputs, bytes_out)
tx_get_hash_prevouts = _wallycore.tx_get_hash_prevouts

def tx_get_length(tx, flags):
    return _wallycore.tx_get_length(tx, flags)
tx_get_length = _wallycore.tx_get_length

def tx_from_bytes(bytes, flags):
    return _wallycore.tx_from_bytes(bytes, flags)
tx_from_bytes = _wallycore.tx_from_bytes

def tx_from_hex(hex, flags):
    return _wallycore.tx_from_hex(hex, flags)
tx_from_hex = _wallycore.tx_from_hex

def tx_to_bytes(tx, flags, bytes_out):
    return _wallycore.tx_to_bytes(tx, flags, bytes_out)
tx_to_bytes = _wallycore.tx_to_bytes

def tx_to_hex(tx, flags):
    return _wallycore.tx_to_hex(tx, flags)
tx_to_hex = _wallycore.tx_to_hex

def tx_get_weight(tx):
    return _wallycore.tx_get_weight(tx)
tx_get_weight = _wallycore.tx_get_weight

def tx_get_vsize(tx):
    return _wallycore.tx_get_vsize(tx)
tx_get_vsize = _wallycore.tx_get_vsize

def tx_vsize_from_weight(weight):
    return _wallycore.tx_vsize_from_weight(weight)
tx_vsize_from_weight = _wallycore.tx_vsize_from_weight

def tx_get_total_output_satoshi(tx):
    return _wallycore.tx_get_total_output_satoshi(tx)
tx_get_total_output_satoshi = _wallycore.tx_get_total_output_satoshi

def tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out):
    return _wallycore.tx_get_btc_signature_hash(tx, index, script, satoshi, sighash, flags, bytes_out)
tx_get_btc_signature_hash = _wallycore.tx_get_btc_signature_hash

def tx_get_btc_taproot_signature_hash(tx, index, scripts, values, tapleaf_script, key_version, codesep_position, annex, sighash, flags, bytes_out):
    return _wallycore.tx_get_btc_taproot_signature_hash(tx, index, scripts, values, tapleaf_script, key_version, codesep_position, annex, sighash, flags, bytes_out)
tx_get_btc_taproot_signature_hash = _wallycore.tx_get_btc_taproot_signature_hash

def tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out):
    return _wallycore.tx_get_signature_hash(tx, index, script, extra, extra_offset, satoshi, sighash, tx_sighash, flags, bytes_out)
tx_get_signature_hash = _wallycore.tx_get_signature_hash

def tx_get_input_signature_hash(tx, index, scripts, assets, values, script, key_version, codesep_position, annex, genesis_blockhash, sighash, flags, cache, bytes_out):
    return _wallycore.tx_get_input_signature_hash(tx, index, scripts, assets, values, script, key_version, codesep_position, annex, genesis_blockhash, sighash, flags, cache, bytes_out)
tx_get_input_signature_hash = _wallycore.tx_get_input_signature_hash

def tx_is_coinbase(tx):
    return _wallycore.tx_is_coinbase(tx)
tx_is_coinbase = _wallycore.tx_is_coinbase

def tx_get_elements_weight_discount(tx, flags):
    return _wallycore.tx_get_elements_weight_discount(tx, flags)
tx_get_elements_weight_discount = _wallycore.tx_get_elements_weight_discount

def tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof):
    return _wallycore.tx_elements_input_issuance_set(input, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof)
tx_elements_input_issuance_set = _wallycore.tx_elements_input_issuance_set

def tx_elements_input_issuance_free(input):
    return _wallycore.tx_elements_input_issuance_free(input)
tx_elements_input_issuance_free = _wallycore.tx_elements_input_issuance_free

def tx_elements_input_init_alloc(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness):
    return _wallycore.tx_elements_input_init_alloc(txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness)
tx_elements_input_init_alloc = _wallycore.tx_elements_input_init_alloc

def tx_elements_input_is_pegin(input):
    return _wallycore.tx_elements_input_is_pegin(input)
tx_elements_input_is_pegin = _wallycore.tx_elements_input_is_pegin

def tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof):
    return _wallycore.tx_elements_output_commitment_set(output, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_commitment_set = _wallycore.tx_elements_output_commitment_set

def tx_elements_output_commitment_free(output):
    return _wallycore.tx_elements_output_commitment_free(output)
tx_elements_output_commitment_free = _wallycore.tx_elements_output_commitment_free

def tx_elements_output_init_alloc(script, asset, value, nonce, surjectionproof, rangeproof):
    return _wallycore.tx_elements_output_init_alloc(script, asset, value, nonce, surjectionproof, rangeproof)
tx_elements_output_init_alloc = _wallycore.tx_elements_output_init_alloc

def tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return _wallycore.tx_add_elements_raw_input(tx, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input = _wallycore.tx_add_elements_raw_input

def tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags):
    return _wallycore.tx_add_elements_raw_input_at(tx, index, txhash, utxo_index, sequence, script, witness, nonce, entropy, issuance_amount, inflation_keys, issuance_amount_rangeproof, inflation_keys_rangeproof, pegin_witness, flags)
tx_add_elements_raw_input_at = _wallycore.tx_add_elements_raw_input_at

def tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return _wallycore.tx_add_elements_raw_output(tx, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output = _wallycore.tx_add_elements_raw_output

def tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags):
    return _wallycore.tx_add_elements_raw_output_at(tx, index, script, asset, value, nonce, surjectionproof, rangeproof, flags)
tx_add_elements_raw_output_at = _wallycore.tx_add_elements_raw_output_at

def tx_is_elements(tx):
    return _wallycore.tx_is_elements(tx)
tx_is_elements = _wallycore.tx_is_elements

def tx_confidential_value_from_satoshi(satoshi, bytes_out):
    return _wallycore.tx_confidential_value_from_satoshi(satoshi, bytes_out)
tx_confidential_value_from_satoshi = _wallycore.tx_confidential_value_from_satoshi

def tx_confidential_value_to_satoshi(value):
    return _wallycore.tx_confidential_value_to_satoshi(value)
tx_confidential_value_to_satoshi = _wallycore.tx_confidential_value_to_satoshi

def tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out):
    return _wallycore.tx_get_elements_signature_hash(tx, index, script, value, sighash, flags, bytes_out)
tx_get_elements_signature_hash = _wallycore.tx_get_elements_signature_hash

def tx_elements_issuance_generate_entropy(txhash, utxo_index, contract_hash, bytes_out):
    return _wallycore.tx_elements_issuance_generate_entropy(txhash, utxo_index, contract_hash, bytes_out)
tx_elements_issuance_generate_entropy = _wallycore.tx_elements_issuance_generate_entropy

def tx_elements_issuance_calculate_asset(entropy, bytes_out):
    return _wallycore.tx_elements_issuance_calculate_asset(entropy, bytes_out)
tx_elements_issuance_calculate_asset = _wallycore.tx_elements_issuance_calculate_asset

def tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out):
    return _wallycore.tx_elements_issuance_calculate_reissuance_token(entropy, flags, bytes_out)
tx_elements_issuance_calculate_reissuance_token = _wallycore.tx_elements_issuance_calculate_reissuance_token
LIBWALLY_CORE_TRANSACTION_MEMBERS_H = _wallycore.LIBWALLY_CORE_TRANSACTION_MEMBERS_H

def tx_input_get_txhash(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_txhash(tx_input_in, bytes_out)
tx_input_get_txhash = _wallycore.tx_input_get_txhash

def tx_input_get_script(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_script(tx_input_in, bytes_out)
tx_input_get_script = _wallycore.tx_input_get_script

def tx_input_get_script_len(tx_input_in):
    return _wallycore.tx_input_get_script_len(tx_input_in)
tx_input_get_script_len = _wallycore.tx_input_get_script_len

def tx_input_get_witness_num_items(tx_input_in):
    return _wallycore.tx_input_get_witness_num_items(tx_input_in)
tx_input_get_witness_num_items = _wallycore.tx_input_get_witness_num_items

def tx_input_get_witness(tx_input_in, index, bytes_out):
    return _wallycore.tx_input_get_witness(tx_input_in, index, bytes_out)
tx_input_get_witness = _wallycore.tx_input_get_witness

def tx_input_get_witness_len(tx_input_in, index):
    return _wallycore.tx_input_get_witness_len(tx_input_in, index)
tx_input_get_witness_len = _wallycore.tx_input_get_witness_len

def tx_input_get_index(tx_input_in):
    return _wallycore.tx_input_get_index(tx_input_in)
tx_input_get_index = _wallycore.tx_input_get_index

def tx_input_get_sequence(tx_input_in):
    return _wallycore.tx_input_get_sequence(tx_input_in)
tx_input_get_sequence = _wallycore.tx_input_get_sequence

def tx_input_set_txhash(tx_input, txhash):
    return _wallycore.tx_input_set_txhash(tx_input, txhash)
tx_input_set_txhash = _wallycore.tx_input_set_txhash

def tx_input_set_script(tx_input, script):
    return _wallycore.tx_input_set_script(tx_input, script)
tx_input_set_script = _wallycore.tx_input_set_script

def tx_input_set_witness(tx_input, witness):
    return _wallycore.tx_input_set_witness(tx_input, witness)
tx_input_set_witness = _wallycore.tx_input_set_witness

def tx_input_set_index(tx_input, index):
    return _wallycore.tx_input_set_index(tx_input, index)
tx_input_set_index = _wallycore.tx_input_set_index

def tx_input_set_sequence(tx_input, sequence):
    return _wallycore.tx_input_set_sequence(tx_input, sequence)
tx_input_set_sequence = _wallycore.tx_input_set_sequence

def tx_input_get_blinding_nonce(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_blinding_nonce(tx_input_in, bytes_out)
tx_input_get_blinding_nonce = _wallycore.tx_input_get_blinding_nonce

def tx_input_get_entropy(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_entropy(tx_input_in, bytes_out)
tx_input_get_entropy = _wallycore.tx_input_get_entropy

def tx_input_get_issuance_amount(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_issuance_amount(tx_input_in, bytes_out)
tx_input_get_issuance_amount = _wallycore.tx_input_get_issuance_amount

def tx_input_get_issuance_amount_len(tx_input_in):
    return _wallycore.tx_input_get_issuance_amount_len(tx_input_in)
tx_input_get_issuance_amount_len = _wallycore.tx_input_get_issuance_amount_len

def tx_input_get_inflation_keys(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_inflation_keys(tx_input_in, bytes_out)
tx_input_get_inflation_keys = _wallycore.tx_input_get_inflation_keys

def tx_input_get_inflation_keys_len(tx_input_in):
    return _wallycore.tx_input_get_inflation_keys_len(tx_input_in)
tx_input_get_inflation_keys_len = _wallycore.tx_input_get_inflation_keys_len

def tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_issuance_amount_rangeproof(tx_input_in, bytes_out)
tx_input_get_issuance_amount_rangeproof = _wallycore.tx_input_get_issuance_amount_rangeproof

def tx_input_get_issuance_amount_rangeproof_len(tx_input_in):
    return _wallycore.tx_input_get_issuance_amount_rangeproof_len(tx_input_in)
tx_input_get_issuance_amount_rangeproof_len = _wallycore.tx_input_get_issuance_amount_rangeproof_len

def tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out):
    return _wallycore.tx_input_get_inflation_keys_rangeproof(tx_input_in, bytes_out)
tx_input_get_inflation_keys_rangeproof = _wallycore.tx_input_get_inflation_keys_rangeproof

def tx_input_get_inflation_keys_rangeproof_len(tx_input_in):
    return _wallycore.tx_input_get_inflation_keys_rangeproof_len(tx_input_in)
tx_input_get_inflation_keys_rangeproof_len = _wallycore.tx_input_get_inflation_keys_rangeproof_len

def tx_input_set_blinding_nonce(tx_input_in, blinding_nonce):
    return _wallycore.tx_input_set_blinding_nonce(tx_input_in, blinding_nonce)
tx_input_set_blinding_nonce = _wallycore.tx_input_set_blinding_nonce

def tx_input_set_entropy(tx_input_in, entropy):
    return _wallycore.tx_input_set_entropy(tx_input_in, entropy)
tx_input_set_entropy = _wallycore.tx_input_set_entropy

def tx_input_set_inflation_keys(tx_input_in, inflation_keys):
    return _wallycore.tx_input_set_inflation_keys(tx_input_in, inflation_keys)
tx_input_set_inflation_keys = _wallycore.tx_input_set_inflation_keys

def tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof):
    return _wallycore.tx_input_set_inflation_keys_rangeproof(tx_input_in, inflation_keys_rangeproof)
tx_input_set_inflation_keys_rangeproof = _wallycore.tx_input_set_inflation_keys_rangeproof

def tx_input_set_issuance_amount(tx_input_in, issuance_amount):
    return _wallycore.tx_input_set_issuance_amount(tx_input_in, issuance_amount)
tx_input_set_issuance_amount = _wallycore.tx_input_set_issuance_amount

def tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof):
    return _wallycore.tx_input_set_issuance_amount_rangeproof(tx_input_in, issuance_amount_rangeproof)
tx_input_set_issuance_amount_rangeproof = _wallycore.tx_input_set_issuance_amount_rangeproof

def tx_output_get_script(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_script(tx_output_in, bytes_out)
tx_output_get_script = _wallycore.tx_output_get_script

def tx_output_get_script_len(tx_output_in):
    return _wallycore.tx_output_get_script_len(tx_output_in)
tx_output_get_script_len = _wallycore.tx_output_get_script_len

def tx_output_get_satoshi(tx_output_in):
    return _wallycore.tx_output_get_satoshi(tx_output_in)
tx_output_get_satoshi = _wallycore.tx_output_get_satoshi

def tx_output_set_script(tx_output_in, script):
    return _wallycore.tx_output_set_script(tx_output_in, script)
tx_output_set_script = _wallycore.tx_output_set_script

def tx_output_set_satoshi(tx_output_in, satoshi):
    return _wallycore.tx_output_set_satoshi(tx_output_in, satoshi)
tx_output_set_satoshi = _wallycore.tx_output_set_satoshi

def tx_output_get_asset(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_asset(tx_output_in, bytes_out)
tx_output_get_asset = _wallycore.tx_output_get_asset

def tx_output_get_asset_len(tx_output_in):
    return _wallycore.tx_output_get_asset_len(tx_output_in)
tx_output_get_asset_len = _wallycore.tx_output_get_asset_len

def tx_output_get_value(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_value(tx_output_in, bytes_out)
tx_output_get_value = _wallycore.tx_output_get_value

def tx_output_get_value_len(tx_output_in):
    return _wallycore.tx_output_get_value_len(tx_output_in)
tx_output_get_value_len = _wallycore.tx_output_get_value_len

def tx_output_get_nonce(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_nonce(tx_output_in, bytes_out)
tx_output_get_nonce = _wallycore.tx_output_get_nonce

def tx_output_get_nonce_len(tx_output_in):
    return _wallycore.tx_output_get_nonce_len(tx_output_in)
tx_output_get_nonce_len = _wallycore.tx_output_get_nonce_len

def tx_output_get_surjectionproof(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_surjectionproof(tx_output_in, bytes_out)
tx_output_get_surjectionproof = _wallycore.tx_output_get_surjectionproof

def tx_output_get_surjectionproof_len(tx_output_in):
    return _wallycore.tx_output_get_surjectionproof_len(tx_output_in)
tx_output_get_surjectionproof_len = _wallycore.tx_output_get_surjectionproof_len

def tx_output_get_rangeproof(tx_output_in, bytes_out):
    return _wallycore.tx_output_get_rangeproof(tx_output_in, bytes_out)
tx_output_get_rangeproof = _wallycore.tx_output_get_rangeproof

def tx_output_get_rangeproof_len(tx_output_in):
    return _wallycore.tx_output_get_rangeproof_len(tx_output_in)
tx_output_get_rangeproof_len = _wallycore.tx_output_get_rangeproof_len

def tx_output_set_asset(tx_output_in, asset):
    return _wallycore.tx_output_set_asset(tx_output_in, asset)
tx_output_set_asset = _wallycore.tx_output_set_asset

def tx_output_set_value(tx_output_in, value):
    return _wallycore.tx_output_set_value(tx_output_in, value)
tx_output_set_value = _wallycore.tx_output_set_value

def tx_output_set_nonce(tx_output_in, nonce):
    return _wallycore.tx_output_set_nonce(tx_output_in, nonce)
tx_output_set_nonce = _wallycore.tx_output_set_nonce

def tx_output_set_surjectionproof(tx_output_in, surjectionproof):
    return _wallycore.tx_output_set_surjectionproof(tx_output_in, surjectionproof)
tx_output_set_surjectionproof = _wallycore.tx_output_set_surjectionproof

def tx_output_set_rangeproof(tx_output_in, rangeproof):
    return _wallycore.tx_output_set_rangeproof(tx_output_in, rangeproof)
tx_output_set_rangeproof = _wallycore.tx_output_set_rangeproof

def tx_get_version(tx_in):
    return _wallycore.tx_get_version(tx_in)
tx_get_version = _wallycore.tx_get_version

def tx_get_locktime(tx_in):
    return _wallycore.tx_get_locktime(tx_in)
tx_get_locktime = _wallycore.tx_get_locktime

def tx_get_num_inputs(tx_in):
    return _wallycore.tx_get_num_inputs(tx_in)
tx_get_num_inputs = _wallycore.tx_get_num_inputs

def tx_get_num_outputs(tx_in):
    return _wallycore.tx_get_num_outputs(tx_in)
tx_get_num_outputs = _wallycore.tx_get_num_outputs

def tx_get_input_txhash(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_txhash(tx_in, index, bytes_out)
tx_get_input_txhash = _wallycore.tx_get_input_txhash

def tx_get_input_script(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_script(tx_in, index, bytes_out)
tx_get_input_script = _wallycore.tx_get_input_script

def tx_get_input_script_len(tx_in, index):
    return _wallycore.tx_get_input_script_len(tx_in, index)
tx_get_input_script_len = _wallycore.tx_get_input_script_len

def tx_get_input_witness_num_items(tx_in, index):
    return _wallycore.tx_get_input_witness_num_items(tx_in, index)
tx_get_input_witness_num_items = _wallycore.tx_get_input_witness_num_items

def tx_get_input_witness(tx_in, index, wit_index, bytes_out):
    return _wallycore.tx_get_input_witness(tx_in, index, wit_index, bytes_out)
tx_get_input_witness = _wallycore.tx_get_input_witness

def tx_get_input_witness_len(tx_in, index, wit_index):
    return _wallycore.tx_get_input_witness_len(tx_in, index, wit_index)
tx_get_input_witness_len = _wallycore.tx_get_input_witness_len

def tx_get_input_index(tx_in, index):
    return _wallycore.tx_get_input_index(tx_in, index)
tx_get_input_index = _wallycore.tx_get_input_index

def tx_get_input_sequence(tx_in, index):
    return _wallycore.tx_get_input_sequence(tx_in, index)
tx_get_input_sequence = _wallycore.tx_get_input_sequence

def tx_set_input_index(tx_in, index, index_in):
    return _wallycore.tx_set_input_index(tx_in, index, index_in)
tx_set_input_index = _wallycore.tx_set_input_index

def tx_set_input_sequence(tx_in, index, sequence):
    return _wallycore.tx_set_input_sequence(tx_in, index, sequence)
tx_set_input_sequence = _wallycore.tx_set_input_sequence

def tx_set_input_txhash(tx_in, index, txhash):
    return _wallycore.tx_set_input_txhash(tx_in, index, txhash)
tx_set_input_txhash = _wallycore.tx_set_input_txhash

def tx_get_input_blinding_nonce(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_blinding_nonce(tx_in, index, bytes_out)
tx_get_input_blinding_nonce = _wallycore.tx_get_input_blinding_nonce

def tx_get_input_entropy(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_entropy(tx_in, index, bytes_out)
tx_get_input_entropy = _wallycore.tx_get_input_entropy

def tx_get_input_issuance_amount(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_issuance_amount(tx_in, index, bytes_out)
tx_get_input_issuance_amount = _wallycore.tx_get_input_issuance_amount

def tx_get_input_issuance_amount_len(tx_in, index):
    return _wallycore.tx_get_input_issuance_amount_len(tx_in, index)
tx_get_input_issuance_amount_len = _wallycore.tx_get_input_issuance_amount_len

def tx_get_input_inflation_keys(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_inflation_keys(tx_in, index, bytes_out)
tx_get_input_inflation_keys = _wallycore.tx_get_input_inflation_keys

def tx_get_input_inflation_keys_len(tx_in, index):
    return _wallycore.tx_get_input_inflation_keys_len(tx_in, index)
tx_get_input_inflation_keys_len = _wallycore.tx_get_input_inflation_keys_len

def tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_issuance_amount_rangeproof(tx_in, index, bytes_out)
tx_get_input_issuance_amount_rangeproof = _wallycore.tx_get_input_issuance_amount_rangeproof

def tx_get_input_issuance_amount_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_input_issuance_amount_rangeproof_len(tx_in, index)
tx_get_input_issuance_amount_rangeproof_len = _wallycore.tx_get_input_issuance_amount_rangeproof_len

def tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_input_inflation_keys_rangeproof(tx_in, index, bytes_out)
tx_get_input_inflation_keys_rangeproof = _wallycore.tx_get_input_inflation_keys_rangeproof

def tx_get_input_inflation_keys_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_input_inflation_keys_rangeproof_len(tx_in, index)
tx_get_input_inflation_keys_rangeproof_len = _wallycore.tx_get_input_inflation_keys_rangeproof_len

def tx_set_input_blinding_nonce(tx_in, index, blinding_nonce):
    return _wallycore.tx_set_input_blinding_nonce(tx_in, index, blinding_nonce)
tx_set_input_blinding_nonce = _wallycore.tx_set_input_blinding_nonce

def tx_set_input_entropy(tx_in, index, entropy):
    return _wallycore.tx_set_input_entropy(tx_in, index, entropy)
tx_set_input_entropy = _wallycore.tx_set_input_entropy

def tx_set_input_inflation_keys(tx_in, index, inflation_keys):
    return _wallycore.tx_set_input_inflation_keys(tx_in, index, inflation_keys)
tx_set_input_inflation_keys = _wallycore.tx_set_input_inflation_keys

def tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof):
    return _wallycore.tx_set_input_inflation_keys_rangeproof(tx_in, index, inflation_keys_rangeproof)
tx_set_input_inflation_keys_rangeproof = _wallycore.tx_set_input_inflation_keys_rangeproof

def tx_set_input_issuance_amount(tx_in, index, issuance_amount):
    return _wallycore.tx_set_input_issuance_amount(tx_in, index, issuance_amount)
tx_set_input_issuance_amount = _wallycore.tx_set_input_issuance_amount

def tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof):
    return _wallycore.tx_set_input_issuance_amount_rangeproof(tx_in, index, issuance_amount_rangeproof)
tx_set_input_issuance_amount_rangeproof = _wallycore.tx_set_input_issuance_amount_rangeproof

def tx_get_output_script(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_script(tx_in, index, bytes_out)
tx_get_output_script = _wallycore.tx_get_output_script

def tx_get_output_script_len(tx_in, index):
    return _wallycore.tx_get_output_script_len(tx_in, index)
tx_get_output_script_len = _wallycore.tx_get_output_script_len

def tx_get_output_satoshi(tx_in, index):
    return _wallycore.tx_get_output_satoshi(tx_in, index)
tx_get_output_satoshi = _wallycore.tx_get_output_satoshi

def tx_set_output_script(tx_in, index, script):
    return _wallycore.tx_set_output_script(tx_in, index, script)
tx_set_output_script = _wallycore.tx_set_output_script

def tx_set_output_satoshi(tx_in, index, satoshi):
    return _wallycore.tx_set_output_satoshi(tx_in, index, satoshi)
tx_set_output_satoshi = _wallycore.tx_set_output_satoshi

def tx_get_output_asset(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_asset(tx_in, index, bytes_out)
tx_get_output_asset = _wallycore.tx_get_output_asset

def tx_get_output_value(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_value(tx_in, index, bytes_out)
tx_get_output_value = _wallycore.tx_get_output_value

def tx_get_output_value_len(tx_in, index):
    return _wallycore.tx_get_output_value_len(tx_in, index)
tx_get_output_value_len = _wallycore.tx_get_output_value_len

def tx_get_output_nonce(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_nonce(tx_in, index, bytes_out)
tx_get_output_nonce = _wallycore.tx_get_output_nonce

def tx_get_output_surjectionproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_surjectionproof(tx_in, index, bytes_out)
tx_get_output_surjectionproof = _wallycore.tx_get_output_surjectionproof

def tx_get_output_surjectionproof_len(tx_in, index):
    return _wallycore.tx_get_output_surjectionproof_len(tx_in, index)
tx_get_output_surjectionproof_len = _wallycore.tx_get_output_surjectionproof_len

def tx_get_output_rangeproof(tx_in, index, bytes_out):
    return _wallycore.tx_get_output_rangeproof(tx_in, index, bytes_out)
tx_get_output_rangeproof = _wallycore.tx_get_output_rangeproof

def tx_get_output_rangeproof_len(tx_in, index):
    return _wallycore.tx_get_output_rangeproof_len(tx_in, index)
tx_get_output_rangeproof_len = _wallycore.tx_get_output_rangeproof_len

def tx_set_output_asset(tx_in, index, asset):
    return _wallycore.tx_set_output_asset(tx_in, index, asset)
tx_set_output_asset = _wallycore.tx_set_output_asset

def tx_set_output_value(tx_in, index, value):
    return _wallycore.tx_set_output_value(tx_in, index, value)
tx_set_output_value = _wallycore.tx_set_output_value

def tx_set_output_nonce(tx_in, index, nonce):
    return _wallycore.tx_set_output_nonce(tx_in, index, nonce)
tx_set_output_nonce = _wallycore.tx_set_output_nonce

def tx_set_output_surjectionproof(tx_in, index, surjectionproof):
    return _wallycore.tx_set_output_surjectionproof(tx_in, index, surjectionproof)
tx_set_output_surjectionproof = _wallycore.tx_set_output_surjectionproof

def tx_set_output_rangeproof(tx_in, index, rangeproof):
    return _wallycore.tx_set_output_rangeproof(tx_in, index, rangeproof)
tx_set_output_rangeproof = _wallycore.tx_set_output_rangeproof
ASSET_TAG_LEN = _wallycore.ASSET_TAG_LEN
BLINDING_FACTOR_LEN = _wallycore.BLINDING_FACTOR_LEN
ASSET_GENERATOR_LEN = _wallycore.ASSET_GENERATOR_LEN
ASSET_COMMITMENT_LEN = _wallycore.ASSET_COMMITMENT_LEN
ASSET_RANGEPROOF_MAX_LEN = _wallycore.ASSET_RANGEPROOF_MAX_LEN
ASSET_EXPLICIT_RANGEPROOF_MAX_LEN = _wallycore.ASSET_EXPLICIT_RANGEPROOF_MAX_LEN
ASSET_SURJECTIONPROOF_MAX_LEN = _wallycore.ASSET_SURJECTIONPROOF_MAX_LEN
ASSET_EXPLICIT_SURJECTIONPROOF_LEN = _wallycore.ASSET_EXPLICIT_SURJECTIONPROOF_LEN

def asset_generator_from_bytes(asset, abf, bytes_out):
    return _wallycore.asset_generator_from_bytes(asset, abf, bytes_out)
asset_generator_from_bytes = _wallycore.asset_generator_from_bytes

def ecdh_nonce_hash(pub_key, priv_key, bytes_out):
    return _wallycore.ecdh_nonce_hash(pub_key, priv_key, bytes_out)
ecdh_nonce_hash = _wallycore.ecdh_nonce_hash

def asset_final_vbf(values, num_inputs, abf, vbf, bytes_out):
    return _wallycore.asset_final_vbf(values, num_inputs, abf, vbf, bytes_out)
asset_final_vbf = _wallycore.asset_final_vbf

def asset_scalar_offset(value, abf, vbf, bytes_out):
    return _wallycore.asset_scalar_offset(value, abf, vbf, bytes_out)
asset_scalar_offset = _wallycore.asset_scalar_offset

def asset_value_commitment(value, vbf, generator, bytes_out):
    return _wallycore.asset_value_commitment(value, vbf, generator, bytes_out)
asset_value_commitment = _wallycore.asset_value_commitment

def asset_rangeproof_get_maximum_len(value, min_bits):
    return _wallycore.asset_rangeproof_get_maximum_len(value, min_bits)
asset_rangeproof_get_maximum_len = _wallycore.asset_rangeproof_get_maximum_len

def asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return _wallycore.asset_rangeproof_with_nonce(value, nonce_hash, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof_with_nonce = _wallycore.asset_rangeproof_with_nonce

def asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out):
    return _wallycore.asset_rangeproof(value, pub_key, priv_key, asset, abf, vbf, commitment, extra, generator, min_value, exp, min_bits, bytes_out)
asset_rangeproof = _wallycore.asset_rangeproof

def explicit_rangeproof(value, nonce, vbf, commitment, generator, bytes_out):
    return _wallycore.explicit_rangeproof(value, nonce, vbf, commitment, generator, bytes_out)
explicit_rangeproof = _wallycore.explicit_rangeproof

def explicit_rangeproof_verify(rangeproof, value, commitment, generator):
    return _wallycore.explicit_rangeproof_verify(rangeproof, value, commitment, generator)
explicit_rangeproof_verify = _wallycore.explicit_rangeproof_verify

def asset_surjectionproof_size(num_inputs):
    return _wallycore.asset_surjectionproof_size(num_inputs)
asset_surjectionproof_size = _wallycore.asset_surjectionproof_size

def asset_surjectionproof_len(output_asset, output_abf, output_generator, bytes, asset, abf, generator):
    return _wallycore.asset_surjectionproof_len(output_asset, output_abf, output_generator, bytes, asset, abf, generator)
asset_surjectionproof_len = _wallycore.asset_surjectionproof_len

def asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out):
    return _wallycore.asset_surjectionproof(output_asset, output_abf, output_generator, bytes, asset, abf, generator, bytes_out)
asset_surjectionproof = _wallycore.asset_surjectionproof

def explicit_surjectionproof(output_asset, output_abf, output_generator, bytes_out):
    return _wallycore.explicit_surjectionproof(output_asset, output_abf, output_generator, bytes_out)
explicit_surjectionproof = _wallycore.explicit_surjectionproof

def explicit_surjectionproof_verify(surjectionproof, output_asset, output_generator):
    return _wallycore.explicit_surjectionproof_verify(surjectionproof, output_asset, output_generator)
explicit_surjectionproof_verify = _wallycore.explicit_surjectionproof_verify

def asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return _wallycore.asset_unblind_with_nonce(nonce_hash, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind_with_nonce = _wallycore.asset_unblind_with_nonce

def asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out):
    return _wallycore.asset_unblind(pub_key, priv_key, proof, commitment, extra, generator, asset_out, abf_out, vbf_out)
asset_unblind = _wallycore.asset_unblind

def asset_blinding_key_from_seed(bytes, bytes_out):
    return _wallycore.asset_blinding_key_from_seed(bytes, bytes_out)
asset_blinding_key_from_seed = _wallycore.asset_blinding_key_from_seed

def asset_blinding_key_to_ec_private_key(bytes, script, bytes_out):
    return _wallycore.asset_blinding_key_to_ec_private_key(bytes, script, bytes_out)
asset_blinding_key_to_ec_private_key = _wallycore.asset_blinding_key_to_ec_private_key

def asset_blinding_key_to_ec_public_key(bytes, script, bytes_out):
    return _wallycore.asset_blinding_key_to_ec_public_key(bytes, script, bytes_out)
asset_blinding_key_to_ec_public_key = _wallycore.asset_blinding_key_to_ec_public_key

def elip150_private_key_to_ec_private_key(bytes, script, bytes_out):
    return _wallycore.elip150_private_key_to_ec_private_key(bytes, script, bytes_out)
elip150_private_key_to_ec_private_key = _wallycore.elip150_private_key_to_ec_private_key

def elip150_private_key_to_ec_public_key(bytes, script, bytes_out):
    return _wallycore.elip150_private_key_to_ec_public_key(bytes, script, bytes_out)
elip150_private_key_to_ec_public_key = _wallycore.elip150_private_key_to_ec_public_key

def elip150_public_key_to_ec_public_key(bytes, script, bytes_out):
    return _wallycore.elip150_public_key_to_ec_public_key(bytes, script, bytes_out)
elip150_public_key_to_ec_public_key = _wallycore.elip150_public_key_to_ec_public_key
WALLY_ABF_VBF_LEN = _wallycore.WALLY_ABF_VBF_LEN

def asset_blinding_key_to_abf_vbf(bytes, hash_prevouts, output_index, bytes_out):
    return _wallycore.asset_blinding_key_to_abf_vbf(bytes, hash_prevouts, output_index, bytes_out)
asset_blinding_key_to_abf_vbf = _wallycore.asset_blinding_key_to_abf_vbf

def asset_blinding_key_to_abf(bytes, hash_prevouts, output_index, bytes_out):
    return _wallycore.asset_blinding_key_to_abf(bytes, hash_prevouts, output_index, bytes_out)
asset_blinding_key_to_abf = _wallycore.asset_blinding_key_to_abf

def asset_blinding_key_to_vbf(bytes, hash_prevouts, output_index, bytes_out):
    return _wallycore.asset_blinding_key_to_vbf(bytes, hash_prevouts, output_index, bytes_out)
asset_blinding_key_to_vbf = _wallycore.asset_blinding_key_to_vbf

def asset_pak_whitelistproof_size(num_keys):
    return _wallycore.asset_pak_whitelistproof_size(num_keys)
asset_pak_whitelistproof_size = _wallycore.asset_pak_whitelistproof_size

def asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out):
    return _wallycore.asset_pak_whitelistproof(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key, bytes_out)
asset_pak_whitelistproof = _wallycore.asset_pak_whitelistproof

def asset_pak_whitelistproof_len(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key):
    return _wallycore.asset_pak_whitelistproof_len(online_keys, offline_keys, key_index, sub_pubkey, online_priv_key, summed_key)
asset_pak_whitelistproof_len = _wallycore.asset_pak_whitelistproof_len
# This file is compatible with both classic and new-style classes.


# Support functions for the SWIG python wrapper

def _wrap_bin(fn, length, resize=False):
    """ Wrap functions that take an output buffer to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        buf = bytearray(n)
        ret = fn(*list(args)+[buf])
        if resize:
            # Truncate buf to bytes written if needed. Also assert the
            # wrapper allocated enough space for the returned value to fit.
            assert ret <= n, f'{fn.__name__}: {ret} > {n}'
            return buf[0:ret] if ret != n else buf
        if ret is not None:
            assert ret == n
        return buf
    return wrapped

def _wrap_int_array(fn, length, resize=False):
    """ Wrap functions that take an output integer array to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        out = [None] * n
        ret = fn(*list(args)+[out])
        if resize:
            # Truncate as per _wrap_bin
            assert ret <= n
            return out[0:ret] if ret != n else out
        if ret is not None:
            assert ret == n
        return out
    return wrapped

def _wrap_with_defaults(fn, min_args, max_args, def_value):
    """ Wrap functions that take argument defaults """
    def wrapped(*args):
        args = list(args)
        n = len(args)
        assert n >= min_args
        r = max_args - n
        return fn(*args+[def_value]*r)
    return wrapped

# Length calculation functions TODO: Implement these in the C API
def hex_to_bytes_len(hex_str):
    return len(hex_str) // 2

def hex_n_to_bytes_len(hex_str, n):
    return n // 2

def base58_to_bytes_len(base58, flags):
    return base58_get_length(base58)

def base58_n_to_bytes_len(base58, n, flags):
    return base58_n_get_length(base58, n)

def format_bitcoin_message_len(msg, flags):
    if flags & BITCOIN_MESSAGE_FLAG_HASH:
        return SHA256_LEN
    msg_len = len(msg)
    return 25 + msg_len + (1 if msg_len < 253 else 3)

def script_push_from_bytes_len(data, flags):
    if flags & WALLY_SCRIPT_HASH160:
        return HASH160_LEN + 1
    elif flags & WALLY_SCRIPT_SHA256:
        return SHA256_LEN + 1
    push_len, opcode_len = len(data), 5
    for l, op_len in [(76, 1), (256, 2), (65536, 3)]:
        if push_len < l:
            opcode_len = op_len
            break
    return push_len + opcode_len

def scriptpubkey_csv_2of2_then_1_from_bytes_opt_len(pubkeys, csv_blocks, flags):
    # TODO: If we expose scriptint functions we can calc the real length here
    # instead of hardcoding 4 (largest push for the max csv_blocks of 0xffff)
    return 6 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4

def scriptpubkey_csv_2of2_then_1_from_bytes_len(pubkeys, csv_blocks, flags):
    # TODO: See scriptpubkey_csv_2of2_then_1_from_bytes_opt_len
    return 9 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4

def scriptpubkey_multisig_from_bytes_len(pubkeys, threshold, flags):
    return 3 + (len(pubkeys) // EC_PUBLIC_KEY_LEN) * (EC_PUBLIC_KEY_LEN + 1)

def scriptsig_multisig_from_bytes_len(script, sigs, sighashes, flags):
    der_len = (len(sigs) // EC_SIGNATURE_LEN) * (EC_SIGNATURE_DER_MAX_LEN + 2)
    script_len = script_push_from_bytes_len(script, 0)
    return 1 + der_len + script_len

def wif_to_public_key_len(wif, prefix):
    return EC_PUBLIC_KEY_UNCOMPRESSED_LEN if wif_is_uncompressed(wif) else EC_PUBLIC_KEY_LEN

if is_elements_build():
    def elements_pegout_script_from_bytes_len(bh, mcs, pk, whl, flags):
        return elements_pegout_script_size(len(bh), len(mcs), len(pk), len(whl))

    def elements_pegin_contract_script_from_bytes_len(rs, cs, flags):
        return len(rs)

# Work around SWIG wrapping unisgned constants
# See https://github.com/swig/swig/issues/1287
BIP32_INITIAL_HARDENED_CHILD = 0x80000000
WALLY_PSET_BLIND_ALL = 0xffffffff
WALLY_SATOSHI_MAX = WALLY_BTC_MAX * WALLY_SATOSHI_PER_BTC
WALLY_TX_SEQUENCE_FINAL = 0xffffffff
WALLY_NO_CODESEPARATOR = 0xffffffff

# BEGIN AUTOGENERATED
addr_segwit_n_to_bytes = _wrap_bin(addr_segwit_n_to_bytes, WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN, resize=True)
addr_segwit_to_bytes = _wrap_bin(addr_segwit_to_bytes, WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN, resize=True)
address_to_scriptpubkey = _wrap_bin(address_to_scriptpubkey, WALLY_ADDRESS_PUBKEY_MAX_LEN, resize=True)
ae_host_commit_from_bytes = _wrap_bin(ae_host_commit_from_bytes, WALLY_HOST_COMMITMENT_LEN)
ae_sig_from_bytes = _wrap_bin(ae_sig_from_bytes, EC_SIGNATURE_LEN)
ae_signer_commit_from_bytes = _wrap_bin(ae_signer_commit_from_bytes, WALLY_S2C_OPENING_LEN)
aes = _wrap_bin(aes, aes_len)
aes_cbc = _wrap_bin(aes_cbc, aes_cbc_get_maximum_length, resize=True)
aes_cbc_with_ecdh_key = _wrap_bin(aes_cbc_with_ecdh_key, aes_cbc_with_ecdh_key_get_maximum_length, resize=True)
base58_n_to_bytes = _wrap_bin(base58_n_to_bytes, base58_n_to_bytes_len, resize=True)
base58_to_bytes = _wrap_bin(base58_to_bytes, base58_to_bytes_len, resize=True)
base64_n_to_bytes = _wrap_bin(base64_n_to_bytes, base64_n_get_maximum_length, resize=True)
base64_to_bytes = _wrap_bin(base64_to_bytes, base64_get_maximum_length, resize=True)
bip32_key_from_base58 = bip32_key_from_base58_alloc
bip32_key_from_base58_n = bip32_key_from_base58_n_alloc
bip32_key_from_parent = bip32_key_from_parent_alloc
bip32_key_from_parent_path = bip32_key_from_parent_path_alloc
bip32_key_from_parent_path_str = bip32_key_from_parent_path_str_alloc
bip32_key_from_parent_path_str_n = bip32_key_from_parent_path_str_n_alloc
bip32_key_from_seed = bip32_key_from_seed_alloc
bip32_key_from_seed_custom = bip32_key_from_seed_custom_alloc
bip32_key_get_chain_code = _wrap_bin(bip32_key_get_chain_code, WALLY_BIP32_CHAIN_CODE_LEN)
bip32_key_get_fingerprint = _wrap_bin(bip32_key_get_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
bip32_key_get_hash160 = _wrap_bin(bip32_key_get_hash160, HASH160_LEN)
bip32_key_get_parent160 = _wrap_bin(bip32_key_get_parent160, HASH160_LEN)
bip32_key_get_priv_key = _wrap_bin(bip32_key_get_priv_key, EC_PRIVATE_KEY_LEN)
bip32_key_get_pub_key = _wrap_bin(bip32_key_get_pub_key, EC_PUBLIC_KEY_LEN)
bip32_key_init = bip32_key_init_alloc
bip32_key_serialize = _wrap_bin(bip32_key_serialize, BIP32_SERIALIZED_LEN)
bip32_key_unserialize = bip32_key_unserialize_alloc
bip32_path_from_str = _wrap_int_array(bip32_path_from_str, bip32_path_from_str_len)
bip32_path_from_str_n = _wrap_int_array(bip32_path_from_str_n, bip32_path_from_str_n_len)
bip340_tagged_hash = _wrap_bin(bip340_tagged_hash, SHA256_LEN)
bip38_raw_from_private_key = _wrap_bin(bip38_raw_from_private_key, BIP38_SERIALIZED_LEN)
bip38_raw_to_private_key = _wrap_bin(bip38_raw_to_private_key, EC_PRIVATE_KEY_LEN)
bip38_to_private_key = _wrap_bin(bip38_to_private_key, EC_PRIVATE_KEY_LEN)
bip39_mnemonic_to_bytes = _wrap_bin(bip39_mnemonic_to_bytes, BIP39_ENTROPY_MAX_LEN, resize=True)
bip39_mnemonic_to_seed512 = _wrap_bin(bip39_mnemonic_to_seed512, BIP39_SEED_LEN_512)
bip85_get_bip39_entropy = _wrap_bin(bip85_get_bip39_entropy, HMAC_SHA512_LEN, resize=True)
bip85_get_rsa_entropy = _wrap_bin(bip85_get_rsa_entropy, HMAC_SHA512_LEN, resize=True)
descriptor_get_key_origin_fingerprint = _wrap_bin(descriptor_get_key_origin_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
descriptor_to_script = _wrap_bin(descriptor_to_script, descriptor_to_script_get_maximum_length, resize=True)
ec_private_key_bip341_tweak = _wrap_bin(ec_private_key_bip341_tweak, EC_PRIVATE_KEY_LEN)
ec_public_key_bip341_tweak = _wrap_bin(ec_public_key_bip341_tweak, EC_PUBLIC_KEY_LEN)
ec_public_key_decompress = _wrap_bin(ec_public_key_decompress, EC_PUBLIC_KEY_UNCOMPRESSED_LEN)
ec_public_key_from_private_key = _wrap_bin(ec_public_key_from_private_key, EC_PUBLIC_KEY_LEN)
ec_public_key_negate = _wrap_bin(ec_public_key_negate, EC_PUBLIC_KEY_LEN)
ec_public_key_tweak = _wrap_bin(ec_public_key_tweak, EC_PUBLIC_KEY_LEN)
ec_scalar_add = _wrap_bin(ec_scalar_add, EC_SCALAR_LEN)
ec_scalar_multiply = _wrap_bin(ec_scalar_multiply, EC_SCALAR_LEN)
ec_scalar_subtract = _wrap_bin(ec_scalar_subtract, EC_SCALAR_LEN)
ec_sig_from_bytes = _wrap_bin(ec_sig_from_bytes, ec_sig_from_bytes_len)
ec_sig_from_bytes_aux = _wrap_bin(ec_sig_from_bytes_aux, ec_sig_from_bytes_aux_len)
ec_sig_from_der = _wrap_bin(ec_sig_from_der, EC_SIGNATURE_LEN)
ec_sig_normalize = _wrap_bin(ec_sig_normalize, EC_SIGNATURE_LEN)
ec_sig_to_der = _wrap_bin(ec_sig_to_der, EC_SIGNATURE_DER_MAX_LEN, resize=True)
ec_sig_to_public_key = _wrap_bin(ec_sig_to_public_key, EC_PUBLIC_KEY_LEN)
ecdh = _wrap_bin(ecdh, SHA256_LEN)
format_bitcoin_message = _wrap_bin(format_bitcoin_message, format_bitcoin_message_len, resize=True)
get_hash_prevouts = _wrap_bin(get_hash_prevouts, SHA256_LEN)
hash160 = _wrap_bin(hash160, HASH160_LEN)
hex_n_to_bytes = _wrap_bin(hex_n_to_bytes, hex_n_to_bytes_len)
hex_to_bytes = _wrap_bin(hex_to_bytes, hex_to_bytes_len)
hmac_sha256 = _wrap_bin(hmac_sha256, HMAC_SHA256_LEN)
hmac_sha512 = _wrap_bin(hmac_sha512, HMAC_SHA512_LEN)
keypath_get_fingerprint = _wrap_bin(keypath_get_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
keypath_get_path = _wrap_int_array(keypath_get_path, keypath_get_path_len)
map_get_item = _wrap_bin(map_get_item, map_get_item_length)
map_get_item_key = _wrap_bin(map_get_item_key, map_get_item_key_length)
map_init = map_init_alloc
map_keypath_bip32_init = map_keypath_bip32_init_alloc
map_keypath_get_bip32_key_from = map_keypath_get_bip32_key_from_alloc
map_keypath_get_item_fingerprint = _wrap_bin(map_keypath_get_item_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
map_keypath_get_item_path = _wrap_int_array(map_keypath_get_item_path, map_keypath_get_item_path_len)
map_keypath_public_key_init = map_keypath_public_key_init_alloc
map_preimage_init = map_preimage_init_alloc
pbkdf2_hmac_sha256 = _wrap_bin(pbkdf2_hmac_sha256, PBKDF2_HMAC_SHA256_LEN)
pbkdf2_hmac_sha512 = _wrap_bin(pbkdf2_hmac_sha512, PBKDF2_HMAC_SHA512_LEN)
psbt_clone = psbt_clone_alloc
psbt_get_global_tx = psbt_get_global_tx_alloc
psbt_get_id = _wrap_bin(psbt_get_id, WALLY_TXHASH_LEN)
psbt_get_input_best_utxo = psbt_get_input_best_utxo_alloc
psbt_get_input_bip32_key_from = psbt_get_input_bip32_key_from_alloc
psbt_get_input_final_scriptsig = _wrap_bin(psbt_get_input_final_scriptsig, psbt_get_input_final_scriptsig_len)
psbt_get_input_final_witness = psbt_get_input_final_witness_alloc
psbt_get_input_keypath = _wrap_bin(psbt_get_input_keypath, psbt_get_input_keypath_len)
psbt_get_input_previous_txid = _wrap_bin(psbt_get_input_previous_txid, WALLY_TXHASH_LEN)
psbt_get_input_redeem_script = _wrap_bin(psbt_get_input_redeem_script, psbt_get_input_redeem_script_len)
psbt_get_input_scriptcode = _wrap_bin(psbt_get_input_scriptcode, psbt_get_input_scriptcode_len)
psbt_get_input_signature = _wrap_bin(psbt_get_input_signature, psbt_get_input_signature_len)
psbt_get_input_signature_hash = _wrap_bin(psbt_get_input_signature_hash, SHA256_LEN)
psbt_get_input_signing_script = _wrap_bin(psbt_get_input_signing_script, psbt_get_input_signing_script_len)
psbt_get_input_taproot_internal_key = _wrap_bin(psbt_get_input_taproot_internal_key, psbt_get_input_taproot_internal_key_len)
psbt_get_input_taproot_signature = _wrap_bin(psbt_get_input_taproot_signature, psbt_get_input_taproot_signature_len)
psbt_get_input_unknown = _wrap_bin(psbt_get_input_unknown, psbt_get_input_unknown_len)
psbt_get_input_utxo = psbt_get_input_utxo_alloc
psbt_get_input_witness_script = _wrap_bin(psbt_get_input_witness_script, psbt_get_input_witness_script_len)
psbt_get_input_witness_utxo = psbt_get_input_witness_utxo_alloc
psbt_get_output_keypath = _wrap_bin(psbt_get_output_keypath, psbt_get_output_keypath_len)
psbt_get_output_redeem_script = _wrap_bin(psbt_get_output_redeem_script, psbt_get_output_redeem_script_len)
psbt_get_output_script = _wrap_bin(psbt_get_output_script, psbt_get_output_script_len)
psbt_get_output_taproot_internal_key = _wrap_bin(psbt_get_output_taproot_internal_key, psbt_get_output_taproot_internal_key_len)
psbt_get_output_unknown = _wrap_bin(psbt_get_output_unknown, psbt_get_output_unknown_len)
psbt_get_output_witness_script = _wrap_bin(psbt_get_output_witness_script, psbt_get_output_witness_script_len)
psbt_init = psbt_init_alloc
psbt_to_bytes = _wrap_bin(psbt_to_bytes, psbt_get_length)
ripemd160 = _wrap_bin(ripemd160, RIPEMD160_LEN)
script_push_from_bytes = _wrap_bin(script_push_from_bytes, script_push_from_bytes_len, resize=True)
scriptpubkey_csv_2of2_then_1_from_bytes = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes, scriptpubkey_csv_2of2_then_1_from_bytes_len, resize=True)
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes_opt, scriptpubkey_csv_2of2_then_1_from_bytes_opt_len, resize=True)
scriptpubkey_multisig_from_bytes = _wrap_bin(scriptpubkey_multisig_from_bytes, scriptpubkey_multisig_from_bytes_len, resize=True)
scriptpubkey_op_return_from_bytes = _wrap_bin(scriptpubkey_op_return_from_bytes, WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN, resize=True)
scriptpubkey_p2pkh_from_bytes = _wrap_bin(scriptpubkey_p2pkh_from_bytes, WALLY_SCRIPTPUBKEY_P2PKH_LEN, resize=True)
scriptpubkey_p2sh_from_bytes = _wrap_bin(scriptpubkey_p2sh_from_bytes, WALLY_SCRIPTPUBKEY_P2SH_LEN, resize=True)
scriptpubkey_p2tr_from_bytes = _wrap_bin(scriptpubkey_p2tr_from_bytes, WALLY_SCRIPTPUBKEY_P2TR_LEN, resize=True)
scriptsig_multisig_from_bytes = _wrap_bin(scriptsig_multisig_from_bytes, scriptsig_multisig_from_bytes_len, resize=True)
scriptsig_p2pkh_from_der = _wrap_bin(scriptsig_p2pkh_from_der, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
scriptsig_p2pkh_from_sig = _wrap_bin(scriptsig_p2pkh_from_sig, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
sha256 = _wrap_bin(sha256, SHA256_LEN)
sha256_midstate = _wrap_bin(sha256_midstate, SHA256_LEN)
sha256d = _wrap_bin(sha256d, SHA256_LEN)
sha512 = _wrap_bin(sha512, SHA512_LEN)
symmetric_key_from_parent = _wrap_bin(symmetric_key_from_parent, HMAC_SHA512_LEN)
symmetric_key_from_seed = _wrap_bin(symmetric_key_from_seed, HMAC_SHA512_LEN)
tx_clone = tx_clone_alloc
tx_get_btc_signature_hash = _wrap_bin(tx_get_btc_signature_hash, SHA256_LEN)
tx_get_btc_taproot_signature_hash = _wrap_bin(tx_get_btc_taproot_signature_hash, SHA256_LEN)
tx_get_hash_prevouts = _wrap_bin(tx_get_hash_prevouts, SHA256_LEN)
tx_get_input_script = _wrap_bin(tx_get_input_script, tx_get_input_script_len)
tx_get_input_signature_hash = _wrap_bin(tx_get_input_signature_hash, SHA256_LEN)
tx_get_input_txhash = _wrap_bin(tx_get_input_txhash, WALLY_TXHASH_LEN)
tx_get_input_witness = _wrap_bin(tx_get_input_witness, tx_get_input_witness_len)
tx_get_output_script = _wrap_bin(tx_get_output_script, tx_get_output_script_len)
tx_get_signature_hash = _wrap_bin(tx_get_signature_hash, SHA256_LEN)
tx_get_txid = _wrap_bin(tx_get_txid, WALLY_TXHASH_LEN)
tx_init = tx_init_alloc
tx_input_clone = tx_input_clone_alloc
tx_input_get_script = _wrap_bin(tx_input_get_script, tx_input_get_script_len)
tx_input_get_txhash = _wrap_bin(tx_input_get_txhash, WALLY_TXHASH_LEN)
tx_input_get_witness = _wrap_bin(tx_input_get_witness, tx_input_get_witness_len)
tx_input_init = tx_input_init_alloc
tx_output_clone = tx_output_clone_alloc
tx_output_get_script = _wrap_bin(tx_output_get_script, tx_output_get_script_len)
tx_output_init = tx_output_init_alloc
tx_to_bytes = _wrap_bin(tx_to_bytes, tx_get_length)
tx_witness_stack_clone = tx_witness_stack_clone_alloc
tx_witness_stack_init = tx_witness_stack_init_alloc
tx_witness_stack_to_bytes = _wrap_bin(tx_witness_stack_to_bytes, tx_witness_stack_get_length)
varbuff_to_bytes = _wrap_bin(varbuff_to_bytes, varbuff_get_length)
varint_to_bytes = _wrap_bin(varint_to_bytes, varint_get_length)
wif_to_bytes = _wrap_bin(wif_to_bytes, EC_PRIVATE_KEY_LEN)
wif_to_public_key = _wrap_bin(wif_to_public_key, wif_to_public_key_len)
witness_program_from_bytes = _wrap_bin(witness_program_from_bytes, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)
witness_program_from_bytes_and_version = _wrap_bin(witness_program_from_bytes_and_version, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)
if is_elements_build():
    asset_blinding_key_from_seed = _wrap_bin(asset_blinding_key_from_seed, HMAC_SHA512_LEN)
    asset_blinding_key_to_abf = _wrap_bin(asset_blinding_key_to_abf, BLINDING_FACTOR_LEN)
    asset_blinding_key_to_abf_vbf = _wrap_bin(asset_blinding_key_to_abf_vbf, WALLY_ABF_VBF_LEN)
    asset_blinding_key_to_ec_private_key = _wrap_bin(asset_blinding_key_to_ec_private_key, EC_PRIVATE_KEY_LEN)
    asset_blinding_key_to_ec_public_key = _wrap_bin(asset_blinding_key_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    asset_blinding_key_to_vbf = _wrap_bin(asset_blinding_key_to_vbf, BLINDING_FACTOR_LEN)
    asset_final_vbf = _wrap_bin(asset_final_vbf, BLINDING_FACTOR_LEN)
    asset_generator_from_bytes = _wrap_bin(asset_generator_from_bytes, ASSET_GENERATOR_LEN)
    asset_pak_whitelistproof = _wrap_bin(asset_pak_whitelistproof, asset_pak_whitelistproof_len)
    asset_rangeproof = _wrap_bin(asset_rangeproof, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    asset_rangeproof_with_nonce = _wrap_bin(asset_rangeproof_with_nonce, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    asset_scalar_offset = _wrap_bin(asset_scalar_offset, EC_SCALAR_LEN)
    asset_surjectionproof = _wrap_bin(asset_surjectionproof, asset_surjectionproof_len)
    asset_value_commitment = _wrap_bin(asset_value_commitment, ASSET_COMMITMENT_LEN)
    bip32_key_get_pub_key_tweak_sum = _wrap_bin(bip32_key_get_pub_key_tweak_sum, WALLY_BIP32_TWEAK_SUM_LEN)
    bip32_key_with_tweak_from_parent_path = bip32_key_with_tweak_from_parent_path_alloc
    coinselect_assets = _wrap_int_array(coinselect_assets, WALLY_CS_MAX_ASSETS, resize=True)
    confidential_addr_segwit_to_ec_public_key = _wrap_bin(confidential_addr_segwit_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    confidential_addr_to_ec_public_key = _wrap_bin(confidential_addr_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    ecdh_nonce_hash = _wrap_bin(ecdh_nonce_hash, SHA256_LEN)
    elements_pegin_contract_script_from_bytes = _wrap_bin(elements_pegin_contract_script_from_bytes, elements_pegin_contract_script_from_bytes_len, resize=True)
    elements_pegout_script_from_bytes = _wrap_bin(elements_pegout_script_from_bytes, elements_pegout_script_from_bytes_len, resize=True)
    elip150_private_key_to_ec_private_key = _wrap_bin(elip150_private_key_to_ec_private_key, EC_PRIVATE_KEY_LEN)
    elip150_private_key_to_ec_public_key = _wrap_bin(elip150_private_key_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    elip150_public_key_to_ec_public_key = _wrap_bin(elip150_public_key_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    explicit_rangeproof = _wrap_bin(explicit_rangeproof, ASSET_EXPLICIT_RANGEPROOF_MAX_LEN, resize=True)
    explicit_surjectionproof = _wrap_bin(explicit_surjectionproof, ASSET_EXPLICIT_SURJECTIONPROOF_LEN)
    psbt_blind = psbt_blind_alloc
    psbt_get_global_genesis_blockhash = _wrap_bin(psbt_get_global_genesis_blockhash, SHA256_LEN, resize=True)
    psbt_get_global_scalar = _wrap_bin(psbt_get_global_scalar, WALLY_SCALAR_OFFSET_LEN)
    psbt_get_input_amount_rangeproof = _wrap_bin(psbt_get_input_amount_rangeproof, psbt_get_input_amount_rangeproof_len)
    psbt_get_input_asset = _wrap_bin(psbt_get_input_asset, psbt_get_input_asset_len)
    psbt_get_input_asset_surjectionproof = _wrap_bin(psbt_get_input_asset_surjectionproof, psbt_get_input_asset_surjectionproof_len)
    psbt_get_input_inflation_keys_blinding_rangeproof = _wrap_bin(psbt_get_input_inflation_keys_blinding_rangeproof, psbt_get_input_inflation_keys_blinding_rangeproof_len)
    psbt_get_input_inflation_keys_commitment = _wrap_bin(psbt_get_input_inflation_keys_commitment, psbt_get_input_inflation_keys_commitment_len)
    psbt_get_input_inflation_keys_rangeproof = _wrap_bin(psbt_get_input_inflation_keys_rangeproof, psbt_get_input_inflation_keys_rangeproof_len)
    psbt_get_input_issuance_amount_blinding_rangeproof = _wrap_bin(psbt_get_input_issuance_amount_blinding_rangeproof, psbt_get_input_issuance_amount_blinding_rangeproof_len)
    psbt_get_input_issuance_amount_commitment = _wrap_bin(psbt_get_input_issuance_amount_commitment, psbt_get_input_issuance_amount_commitment_len)
    psbt_get_input_issuance_amount_rangeproof = _wrap_bin(psbt_get_input_issuance_amount_rangeproof, psbt_get_input_issuance_amount_rangeproof_len)
    psbt_get_input_issuance_asset_entropy = _wrap_bin(psbt_get_input_issuance_asset_entropy, psbt_get_input_issuance_asset_entropy_len)
    psbt_get_input_issuance_blinding_nonce = _wrap_bin(psbt_get_input_issuance_blinding_nonce, psbt_get_input_issuance_blinding_nonce_len)
    psbt_get_input_pegin_claim_script = _wrap_bin(psbt_get_input_pegin_claim_script, psbt_get_input_pegin_claim_script_len)
    psbt_get_input_pegin_genesis_blockhash = _wrap_bin(psbt_get_input_pegin_genesis_blockhash, psbt_get_input_pegin_genesis_blockhash_len)
    psbt_get_input_pegin_txout_proof = _wrap_bin(psbt_get_input_pegin_txout_proof, psbt_get_input_pegin_txout_proof_len)
    psbt_get_input_utxo_rangeproof = _wrap_bin(psbt_get_input_utxo_rangeproof, psbt_get_input_utxo_rangeproof_len)
    psbt_get_output_asset = _wrap_bin(psbt_get_output_asset, psbt_get_output_asset_len)
    psbt_get_output_asset_blinding_surjectionproof = _wrap_bin(psbt_get_output_asset_blinding_surjectionproof, psbt_get_output_asset_blinding_surjectionproof_len)
    psbt_get_output_asset_commitment = _wrap_bin(psbt_get_output_asset_commitment, psbt_get_output_asset_commitment_len)
    psbt_get_output_asset_surjectionproof = _wrap_bin(psbt_get_output_asset_surjectionproof, psbt_get_output_asset_surjectionproof_len)
    psbt_get_output_blinding_public_key = _wrap_bin(psbt_get_output_blinding_public_key, psbt_get_output_blinding_public_key_len)
    psbt_get_output_ecdh_public_key = _wrap_bin(psbt_get_output_ecdh_public_key, psbt_get_output_ecdh_public_key_len)
    psbt_get_output_value_blinding_rangeproof = _wrap_bin(psbt_get_output_value_blinding_rangeproof, psbt_get_output_value_blinding_rangeproof_len)
    psbt_get_output_value_commitment = _wrap_bin(psbt_get_output_value_commitment, psbt_get_output_value_commitment_len)
    psbt_get_output_value_rangeproof = _wrap_bin(psbt_get_output_value_rangeproof, psbt_get_output_value_rangeproof_len)
    psbt_input_get_amount_rangeproof = _wrap_bin(psbt_input_get_amount_rangeproof, psbt_input_get_amount_rangeproof_len)
    psbt_input_get_asset = _wrap_bin(psbt_input_get_asset, psbt_input_get_asset_len)
    psbt_input_get_asset_surjectionproof = _wrap_bin(psbt_input_get_asset_surjectionproof, psbt_input_get_asset_surjectionproof_len)
    psbt_input_get_inflation_keys_blinding_rangeproof = _wrap_bin(psbt_input_get_inflation_keys_blinding_rangeproof, psbt_input_get_inflation_keys_blinding_rangeproof_len)
    psbt_input_get_inflation_keys_commitment = _wrap_bin(psbt_input_get_inflation_keys_commitment, psbt_input_get_inflation_keys_commitment_len)
    psbt_input_get_inflation_keys_rangeproof = _wrap_bin(psbt_input_get_inflation_keys_rangeproof, psbt_input_get_inflation_keys_rangeproof_len)
    psbt_input_get_issuance_amount_blinding_rangeproof = _wrap_bin(psbt_input_get_issuance_amount_blinding_rangeproof, psbt_input_get_issuance_amount_blinding_rangeproof_len)
    psbt_input_get_issuance_amount_commitment = _wrap_bin(psbt_input_get_issuance_amount_commitment, psbt_input_get_issuance_amount_commitment_len)
    psbt_input_get_issuance_amount_rangeproof = _wrap_bin(psbt_input_get_issuance_amount_rangeproof, psbt_input_get_issuance_amount_rangeproof_len)
    psbt_input_get_issuance_asset_entropy = _wrap_bin(psbt_input_get_issuance_asset_entropy, psbt_input_get_issuance_asset_entropy_len)
    psbt_input_get_issuance_blinding_nonce = _wrap_bin(psbt_input_get_issuance_blinding_nonce, psbt_input_get_issuance_blinding_nonce_len)
    psbt_input_get_pegin_claim_script = _wrap_bin(psbt_input_get_pegin_claim_script, psbt_input_get_pegin_claim_script_len)
    psbt_input_get_pegin_genesis_blockhash = _wrap_bin(psbt_input_get_pegin_genesis_blockhash, psbt_input_get_pegin_genesis_blockhash_len)
    psbt_input_get_pegin_txout_proof = _wrap_bin(psbt_input_get_pegin_txout_proof, psbt_input_get_pegin_txout_proof_len)
    psbt_input_get_utxo_rangeproof = _wrap_bin(psbt_input_get_utxo_rangeproof, psbt_input_get_utxo_rangeproof_len)
    psbt_output_get_asset = _wrap_bin(psbt_output_get_asset, psbt_output_get_asset_len)
    psbt_output_get_asset_blinding_surjectionproof = _wrap_bin(psbt_output_get_asset_blinding_surjectionproof, psbt_output_get_asset_blinding_surjectionproof_len)
    psbt_output_get_asset_commitment = _wrap_bin(psbt_output_get_asset_commitment, psbt_output_get_asset_commitment_len)
    psbt_output_get_asset_surjectionproof = _wrap_bin(psbt_output_get_asset_surjectionproof, psbt_output_get_asset_surjectionproof_len)
    psbt_output_get_blinding_public_key = _wrap_bin(psbt_output_get_blinding_public_key, psbt_output_get_blinding_public_key_len)
    psbt_output_get_ecdh_public_key = _wrap_bin(psbt_output_get_ecdh_public_key, psbt_output_get_ecdh_public_key_len)
    psbt_output_get_value_blinding_rangeproof = _wrap_bin(psbt_output_get_value_blinding_rangeproof, psbt_output_get_value_blinding_rangeproof_len)
    psbt_output_get_value_commitment = _wrap_bin(psbt_output_get_value_commitment, psbt_output_get_value_commitment_len)
    psbt_output_get_value_rangeproof = _wrap_bin(psbt_output_get_value_rangeproof, psbt_output_get_value_rangeproof_len)
    tx_confidential_value_from_satoshi = _wrap_bin(tx_confidential_value_from_satoshi, WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_elements_input_init = tx_elements_input_init_alloc
    tx_elements_issuance_calculate_asset = _wrap_bin(tx_elements_issuance_calculate_asset, SHA256_LEN)
    tx_elements_issuance_calculate_reissuance_token = _wrap_bin(tx_elements_issuance_calculate_reissuance_token, SHA256_LEN)
    tx_elements_issuance_generate_entropy = _wrap_bin(tx_elements_issuance_generate_entropy, SHA256_LEN)
    tx_elements_output_init = tx_elements_output_init_alloc
    tx_get_elements_signature_hash = _wrap_bin(tx_get_elements_signature_hash, SHA256_LEN)
    tx_get_input_blinding_nonce = _wrap_bin(tx_get_input_blinding_nonce, SHA256_LEN)
    tx_get_input_entropy = _wrap_bin(tx_get_input_entropy, SHA256_LEN)
    tx_get_input_inflation_keys = _wrap_bin(tx_get_input_inflation_keys, tx_get_input_inflation_keys_len)
    tx_get_input_inflation_keys_rangeproof = _wrap_bin(tx_get_input_inflation_keys_rangeproof, tx_get_input_inflation_keys_rangeproof_len)
    tx_get_input_issuance_amount = _wrap_bin(tx_get_input_issuance_amount, tx_get_input_issuance_amount_len)
    tx_get_input_issuance_amount_rangeproof = _wrap_bin(tx_get_input_issuance_amount_rangeproof, tx_get_input_issuance_amount_rangeproof_len)
    tx_get_output_asset = _wrap_bin(tx_get_output_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    tx_get_output_nonce = _wrap_bin(tx_get_output_nonce, WALLY_TX_ASSET_CT_NONCE_LEN)
    tx_get_output_rangeproof = _wrap_bin(tx_get_output_rangeproof, tx_get_output_rangeproof_len)
    tx_get_output_surjectionproof = _wrap_bin(tx_get_output_surjectionproof, tx_get_output_surjectionproof_len)
    tx_get_output_value = _wrap_bin(tx_get_output_value, tx_get_output_value_len)
    tx_input_get_blinding_nonce = _wrap_bin(tx_input_get_blinding_nonce, SHA256_LEN)
    tx_input_get_entropy = _wrap_bin(tx_input_get_entropy, SHA256_LEN)
    tx_input_get_inflation_keys = _wrap_bin(tx_input_get_inflation_keys, tx_input_get_inflation_keys_len)
    tx_input_get_inflation_keys_rangeproof = _wrap_bin(tx_input_get_inflation_keys_rangeproof, tx_input_get_inflation_keys_rangeproof_len)
    tx_input_get_issuance_amount = _wrap_bin(tx_input_get_issuance_amount, tx_input_get_issuance_amount_len)
    tx_input_get_issuance_amount_rangeproof = _wrap_bin(tx_input_get_issuance_amount_rangeproof, tx_input_get_issuance_amount_rangeproof_len)
    tx_output_get_asset = _wrap_bin(tx_output_get_asset, tx_output_get_asset_len)
    tx_output_get_nonce = _wrap_bin(tx_output_get_nonce, tx_output_get_nonce_len)
    tx_output_get_rangeproof = _wrap_bin(tx_output_get_rangeproof, tx_output_get_rangeproof_len)
    tx_output_get_surjectionproof = _wrap_bin(tx_output_get_surjectionproof, tx_output_get_surjectionproof_len)
    tx_output_get_value = _wrap_bin(tx_output_get_value, tx_output_get_value_len)
# END AUTOGENERATED

# Manual wrappers for multi-valued buffer returns
def _s2c_sig_from_bytes_fn(fn):
    def wrapped(*args):
        buffers = [bytearray(WALLY_S2C_OPENING_LEN), bytearray(EC_SIGNATURE_LEN)]
        fn(*list(args) + buffers)
        return buffers[0], buffers[1]
    return wrapped
s2c_sig_from_bytes = _s2c_sig_from_bytes_fn(s2c_sig_from_bytes)

if is_elements_build():
    tx_elements_input_init = _wrap_with_defaults(tx_elements_input_init, 4, 12, None)
    tx_elements_output_init = _wrap_with_defaults(tx_elements_output_init, 3, 6, None)

    def _asset_unblind_fn(fn):
        def wrapped(*args):
            buffers = [bytearray(ASSET_TAG_LEN) for _ in range(3)]
            ret = fn(*list(args) + buffers)
            return ret, buffers[0], buffers[1], buffers[2]
        return wrapped
    asset_unblind_with_nonce = _asset_unblind_fn(asset_unblind_with_nonce)
    asset_unblind = _asset_unblind_fn(asset_unblind)

# Convenience helpers
def base58check_from_bytes(buf):
    return base58_from_bytes(buf, BASE58_FLAG_CHECKSUM)

def base58check_to_bytes(base58):
    return base58_to_bytes(base58, BASE58_FLAG_CHECKSUM)

def tx_witness_stack_create(witnesses):
    """ Create a witness stack from a list of witness programs """
    witness_stack = tx_witness_stack_init(len(witnesses))
    for witness_script in witnesses:
        tx_witness_stack_add(witness_stack, witness_script)
    return witness_stack

def map_to_dict(m):
    """ Create a Python dict from a wally_map """
    ret, i, n = dict(), 0, map_get_num_items(m)
    while i < n:
        key_len = map_get_item_key_length(m, i)
        if key_len:
            key = bytes(map_get_item_key(m, i))
        else:
            key = map_get_item_integer_key(m, i)
        ret[key] = map_get_item(m, i)
        i += 1
    return ret

def map_from_dict(d):
    """ Create a wally_map from a Python dict """
    ret = map_init(len(d), None)
    for k, v in d.items():
        fn = map_add_integer if type(k) is int else map_add
        fn(ret, k, v)
    return ret

# Backwards compatibility for ABI changes
psbt_from_bytes = _wrap_with_defaults(psbt_from_bytes, 1, 2, 0)
psbt_from_base64 = _wrap_with_defaults(psbt_from_base64, 1, 2, 0)
psbt_extract = _wrap_with_defaults(psbt_extract, 1, 2, 0)
psbt_finalize = _wrap_with_defaults(psbt_finalize, 1, 2, 0)
