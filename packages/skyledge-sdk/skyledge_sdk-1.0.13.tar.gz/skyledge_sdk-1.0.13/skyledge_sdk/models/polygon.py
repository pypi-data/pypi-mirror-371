# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from skyledge_sdk.models.crs import Crs
from skyledge_sdk.models.lng_lat_alt import LngLatAlt
from typing import Optional, Set
from typing_extensions import Self

class Polygon(BaseModel):
    """
    Polygon
    """ # noqa: E501
    crs: Optional[Crs] = None
    bbox: Optional[List[Union[StrictFloat, StrictInt]]] = None
    coordinates: Optional[List[List[LngLatAlt]]] = None
    __properties: ClassVar[List[str]] = ["crs", "bbox", "coordinates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Polygon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crs
        if self.crs:
            _dict['crs'] = self.crs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in coordinates (list of list)
        _items = []
        if self.coordinates:
            for _item_coordinates in self.coordinates:
                if _item_coordinates:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_coordinates if _inner_item is not None]
                    )
            _dict['coordinates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Polygon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crs": Crs.from_dict(obj["crs"]) if obj.get("crs") is not None else None,
            "bbox": obj.get("bbox"),
            "coordinates": [
                    [LngLatAlt.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["coordinates"]
                ] if obj.get("coordinates") is not None else None
        })
        return _obj


