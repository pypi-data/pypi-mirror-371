# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from skyledge_sdk.models.email_channel import EmailChannel
from skyledge_sdk.models.push_channel import PushChannel
from skyledge_sdk.models.sms_channel import SmsChannel
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

NOTIFICATIONACTIONCONFIGCHANNELSINNER_ONE_OF_SCHEMAS = ["EmailChannel", "PushChannel", "SmsChannel"]

class NotificationActionConfigChannelsInner(BaseModel):
    """
    NotificationActionConfigChannelsInner
    """
    # data type: EmailChannel
    oneof_schema_1_validator: Optional[EmailChannel] = None
    # data type: PushChannel
    oneof_schema_2_validator: Optional[PushChannel] = None
    # data type: SmsChannel
    oneof_schema_3_validator: Optional[SmsChannel] = None
    actual_instance: Optional[Union[EmailChannel, PushChannel, SmsChannel]] = None
    one_of_schemas: Set[str] = { "EmailChannel", "PushChannel", "SmsChannel" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = NotificationActionConfigChannelsInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: EmailChannel
        if not isinstance(v, EmailChannel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmailChannel`")
        else:
            match += 1
        # validate data type: PushChannel
        if not isinstance(v, PushChannel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PushChannel`")
        else:
            match += 1
        # validate data type: SmsChannel
        if not isinstance(v, SmsChannel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SmsChannel`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in NotificationActionConfigChannelsInner with oneOf schemas: EmailChannel, PushChannel, SmsChannel. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in NotificationActionConfigChannelsInner with oneOf schemas: EmailChannel, PushChannel, SmsChannel. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into EmailChannel
        try:
            instance.actual_instance = EmailChannel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PushChannel
        try:
            instance.actual_instance = PushChannel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SmsChannel
        try:
            instance.actual_instance = SmsChannel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into NotificationActionConfigChannelsInner with oneOf schemas: EmailChannel, PushChannel, SmsChannel. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into NotificationActionConfigChannelsInner with oneOf schemas: EmailChannel, PushChannel, SmsChannel. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], EmailChannel, PushChannel, SmsChannel]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


