# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from skyledge_sdk.models.event_display import EventDisplay
from skyledge_sdk.models.importance import Importance
from typing import Optional, Set
from typing_extensions import Self

class EventTypeResponse(BaseModel):
    """
    EventTypeResponse
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    title: StrictStr
    description: StrictStr
    location_type: StrictStr = Field(alias="locationType")
    created_at: StrictStr = Field(alias="createdAt")
    owner_id: StrictStr = Field(alias="ownerId")
    state: StrictStr
    category: StrictStr
    allowed_states: List[StrictStr] = Field(alias="allowedStates")
    default_importance_level: Importance = Field(alias="defaultImportanceLevel")
    identifier: StrictStr
    event_display: Optional[EventDisplay] = Field(default=None, alias="eventDisplay")
    control_rooms: Optional[List[StrictStr]] = Field(default=None, alias="controlRooms")
    __properties: ClassVar[List[str]] = ["id", "name", "title", "description", "locationType", "createdAt", "ownerId", "state", "category", "allowedStates", "defaultImportanceLevel", "identifier", "eventDisplay", "controlRooms"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNPUBLISHED', 'PUBLISHED', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('UNPUBLISHED', 'PUBLISHED', 'ARCHIVED')")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DISCRETE', 'ONGOING']):
            raise ValueError("must be one of enum values ('DISCRETE', 'ONGOING')")
        return value

    @field_validator('allowed_states')
    def allowed_states_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['UNPUBLISHED', 'PUBLISHED', 'ARCHIVED']):
                raise ValueError("each list item must be one of ('UNPUBLISHED', 'PUBLISHED', 'ARCHIVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_importance_level
        if self.default_importance_level:
            _dict['defaultImportanceLevel'] = self.default_importance_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_display
        if self.event_display:
            _dict['eventDisplay'] = self.event_display.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "locationType": obj.get("locationType"),
            "createdAt": obj.get("createdAt"),
            "ownerId": obj.get("ownerId"),
            "state": obj.get("state"),
            "category": obj.get("category"),
            "allowedStates": obj.get("allowedStates"),
            "defaultImportanceLevel": Importance.from_dict(obj["defaultImportanceLevel"]) if obj.get("defaultImportanceLevel") is not None else None,
            "identifier": obj.get("identifier"),
            "eventDisplay": EventDisplay.from_dict(obj["eventDisplay"]) if obj.get("eventDisplay") is not None else None,
            "controlRooms": obj.get("controlRooms")
        })
        return _obj


