# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from skyledge_sdk.models.action import Action
from skyledge_sdk.models.filter import Filter
from skyledge_sdk.models.model_property import ModelProperty
from skyledge_sdk.models.quick_filter import QuickFilter
from typing import Optional, Set
from typing_extensions import Self

class TaskTypeResponse(BaseModel):
    """
    TaskTypeResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    identifier: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = Field(default=None, alias="ownerId")
    icon: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    last_modified_at: Optional[StrictStr] = Field(default=None, alias="lastModifiedAt")
    attributes: Dict[str, Any]
    properties: List[ModelProperty]
    actions: List[Action]
    custom_filters: List[Filter] = Field(alias="customFilters")
    quick_filters: List[QuickFilter] = Field(alias="quickFilters")
    __properties: ClassVar[List[str]] = ["id", "identifier", "ownerId", "icon", "name", "title", "description", "createdAt", "lastModifiedAt", "attributes", "properties", "actions", "customFilters", "quickFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_filters (list)
        _items = []
        if self.custom_filters:
            for _item_custom_filters in self.custom_filters:
                if _item_custom_filters:
                    _items.append(_item_custom_filters.to_dict())
            _dict['customFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quick_filters (list)
        _items = []
        if self.quick_filters:
            for _item_quick_filters in self.quick_filters:
                if _item_quick_filters:
                    _items.append(_item_quick_filters.to_dict())
            _dict['quickFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "ownerId": obj.get("ownerId"),
            "icon": obj.get("icon"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "createdAt": obj.get("createdAt"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "attributes": obj.get("attributes"),
            "properties": [ModelProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "customFilters": [Filter.from_dict(_item) for _item in obj["customFilters"]] if obj.get("customFilters") is not None else None,
            "quickFilters": [QuickFilter.from_dict(_item) for _item in obj["quickFilters"]] if obj.get("quickFilters") is not None else None
        })
        return _obj


