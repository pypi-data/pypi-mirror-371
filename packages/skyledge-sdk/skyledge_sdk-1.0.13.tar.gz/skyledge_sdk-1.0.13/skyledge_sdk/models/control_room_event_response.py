# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from skyledge_sdk.models.linked_asset_response import LinkedAssetResponse
from skyledge_sdk.models.linked_place_response import LinkedPlaceResponse
from typing import Optional, Set
from typing_extensions import Self

class ControlRoomEventResponse(BaseModel):
    """
    ControlRoomEventResponse
    """ # noqa: E501
    id: StrictStr
    event_type_id: StrictStr = Field(alias="eventTypeId")
    title: StrictStr
    description: StrictStr
    importance_level: StrictInt = Field(alias="importanceLevel")
    qualifier: StrictStr
    location: Optional[Dict[str, Any]] = None
    created_at: StrictStr = Field(alias="createdAt")
    last_modified_at: StrictStr = Field(alias="lastModifiedAt")
    recorded_at: StrictStr = Field(alias="recordedAt")
    root_recorded_at: StrictStr = Field(alias="rootRecordedAt")
    external_urls: Dict[str, StrictStr] = Field(alias="externalUrls")
    dynamic_attributes: Dict[str, Any] = Field(alias="dynamicAttributes")
    cleared: StrictBool
    linked_assets: List[LinkedAssetResponse] = Field(alias="linkedAssets")
    linked_places: List[LinkedPlaceResponse] = Field(alias="linkedPlaces")
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "eventTypeId", "title", "description", "importanceLevel", "qualifier", "location", "createdAt", "lastModifiedAt", "recordedAt", "rootRecordedAt", "externalUrls", "dynamicAttributes", "cleared", "linkedAssets", "linkedPlaces", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'COMPLETE', 'RESOLVED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'COMPLETE', 'RESOLVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControlRoomEventResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in linked_assets (list)
        _items = []
        if self.linked_assets:
            for _item_linked_assets in self.linked_assets:
                if _item_linked_assets:
                    _items.append(_item_linked_assets.to_dict())
            _dict['linkedAssets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in linked_places (list)
        _items = []
        if self.linked_places:
            for _item_linked_places in self.linked_places:
                if _item_linked_places:
                    _items.append(_item_linked_places.to_dict())
            _dict['linkedPlaces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControlRoomEventResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "eventTypeId": obj.get("eventTypeId"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "importanceLevel": obj.get("importanceLevel"),
            "qualifier": obj.get("qualifier"),
            "location": obj.get("location"),
            "createdAt": obj.get("createdAt"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "recordedAt": obj.get("recordedAt"),
            "rootRecordedAt": obj.get("rootRecordedAt"),
            "externalUrls": obj.get("externalUrls"),
            "dynamicAttributes": obj.get("dynamicAttributes"),
            "cleared": obj.get("cleared"),
            "linkedAssets": [LinkedAssetResponse.from_dict(_item) for _item in obj["linkedAssets"]] if obj.get("linkedAssets") is not None else None,
            "linkedPlaces": [LinkedPlaceResponse.from_dict(_item) for _item in obj["linkedPlaces"]] if obj.get("linkedPlaces") is not None else None,
            "state": obj.get("state")
        })
        return _obj


