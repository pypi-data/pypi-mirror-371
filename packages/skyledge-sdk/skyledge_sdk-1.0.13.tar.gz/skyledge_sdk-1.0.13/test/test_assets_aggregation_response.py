# coding: utf-8

"""
    Skyledge API

    Sky Ledge is an operational insights platform that gives you the visibility and control you need to minimise inefficiencies, oversight, theft, and ultimately, unnecessary costs associated with your operations.

    The version of the OpenAPI document: 1.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from skyledge_sdk.models.assets_aggregation_response import AssetsAggregationResponse

class TestAssetsAggregationResponse(unittest.TestCase):
    """AssetsAggregationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AssetsAggregationResponse:
        """Test AssetsAggregationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AssetsAggregationResponse`
        """
        model = AssetsAggregationResponse()
        if include_optional:
            return AssetsAggregationResponse(
                results = [
                    skyledge_sdk.models.aggregated_response.AggregatedResponse(
                        asset_id = '', 
                        values = {
                            'key' : 1.337
                            }, 
                        cycle_values = {
                            'key' : {
                                'key' : 1.337
                                }
                            }, 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                grouped_results = {
                    'key' : [
                        skyledge_sdk.models.aggregated_response.AggregatedResponse(
                            asset_id = '', 
                            values = {
                                'key' : 1.337
                                }, 
                            cycle_values = {
                                'key' : {
                                    'key' : 1.337
                                    }
                                }, 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ]
                    },
                assets = [
                    skyledge_sdk.models.asset_response.AssetResponse(
                        id = '', 
                        asset_identifier = '', 
                        asset_type_id = '', 
                        name = '', 
                        description = '', 
                        created_at = '', 
                        last_modified_at = '', 
                        recorded_at = '', 
                        location = {
                            'key' : null
                            }, 
                        external_urls = {
                            'key' : ''
                            }, 
                        attributes = {
                            'key' : null
                            }, 
                        metrics = {
                            'key' : null
                            }, )
                    ],
                date_grouping = skyledge_sdk.models.date_grouping.DateGrouping(
                    period = 'day', 
                    time_zone = '', ),
                date_range = skyledge_sdk.models.range.Range(
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                total_count = 56
            )
        else:
            return AssetsAggregationResponse(
        )
        """

    def testAssetsAggregationResponse(self):
        """Test AssetsAggregationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
