[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "licensingpy"
version = "1.0.0"
description = "üîê Secure offline licensing system with beautiful CLI, ECDSA signatures, and hardware fingerprinting"
authors = ["LicensingPy Team <licensing@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/jiri-otoupal/LicensingPy"
repository = "https://github.com/jiri-otoupal/LicensingPy"
documentation = "https://github.com/jiri-otoupal/LicensingPy"
keywords = [
    "licensing",
    "security", 
    "cryptography",
    "ecdsa",
    "hardware-fingerprinting",
    "offline-licensing",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities"
]
packages = [{include = "licensing"}]

[tool.poetry.dependencies]
python = "^3.8.1"
pycryptodome = "^3.19.0"
click = "^8.0.0"
rich = "^14.1.0"
netifaces = {version = "^0.11.0", optional = true}
psutil = {version = "^5.9.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-mock = "^3.11.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.4.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.2.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-mock = "^3.11.0"
pytest-cov = "^4.1.0"
tox = "^4.11.0"

[tool.poetry.extras]
hardware = ["netifaces", "psutil"]
all = ["netifaces", "psutil"]

[tool.poetry.scripts]
licensingpy = "licensing.cli:cli"
licensing = "licensing.cli:cli"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/jiri-otoupal/LicensingPy/issues"
"Changelog" = "https://github.com/jiri-otoupal/LicensingPy/blob/main/CHANGELOG.md"
"Documentation" = "https://github.com/jiri-otoupal/LicensingPy"
"Funding" = "https://github.com/sponsors/jiri-otoupal"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "netifaces.*",
    "psutil.*",
    "Crypto.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=licensing",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "linux: marks tests as Linux-specific",
    "windows: marks tests as Windows-specific",
    "hardware: marks tests that require hardware access"
]

# Coverage configuration
[tool.coverage.run]
source = ["licensing"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/examples/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
