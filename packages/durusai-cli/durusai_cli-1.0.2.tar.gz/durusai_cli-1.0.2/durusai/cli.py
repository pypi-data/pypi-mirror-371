"""
–û—Å–Ω–æ–≤–Ω–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è DurusAI
"""
import sys
import typer
from typing import Optional
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.markdown import Markdown
from rich.progress import Progress, SpinnerColumn, TextColumn
import time

from . import __version__
from .config import Config
from .auth import AuthManager
from .api_client import SyncDurusAIClient
from .exceptions import DurusAIError, AuthenticationError, NetworkError
from .interactive import InteractiveMode
from .updater import UpdateManager


# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = typer.Typer(
    name="durusai",
    help="ü§ñ DurusAI Native CLI - AI-powered assistant",
    add_completion=False,
    rich_markup_mode="rich"
)

console = Console()


def version_callback(value: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"""
    if value:
        console.print(f"DurusAI CLI v{__version__}")
        raise typer.Exit()


@app.callback()
def main(
    version: Optional[bool] = typer.Option(None, "--version", "-v", callback=version_callback, 
                                         help="–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"),
    endpoint: Optional[str] = typer.Option(None, "--endpoint", "-e", 
                                         help="API endpoint"),
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
):
    """ü§ñ DurusAI Native CLI - AI-powered assistant"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    
    if endpoint:
        config.set_api_endpoint(endpoint)
    
    if profile:
        config.set_default_profile(profile)


@app.command()
def login(
    username: Optional[str] = typer.Option(None, "--username", "-u", 
                                         help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
):
    """üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É DurusAI"""
    config = Config()
    auth_manager = AuthManager(config)
    
    success = auth_manager.login(username=username, profile=profile)
    if not success:
        raise typer.Exit(1)


@app.command()
def logout(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤—ã—Ö–æ–¥–∞"),
    all_profiles: bool = typer.Option(False, "--all", "-a", 
                                    help="–í—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"),
):
    """üëã –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã DurusAI"""
    config = Config()
    auth_manager = AuthManager(config)
    
    auth_manager.logout(profile=profile, all_profiles=all_profiles)


@app.command()
def whoami(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"),
):
    """üë§ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    config = Config()
    auth_manager = AuthManager(config)
    
    user_info = auth_manager.whoami(profile=profile)
    if not user_info:
        raise typer.Exit(1)


@app.command()
def query(
    prompt: str = typer.Argument(..., help="–í–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ AI"),
    model: Optional[str] = typer.Option(None, "--model", "-m", 
                                      help="–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
    max_tokens: Optional[int] = typer.Option(None, "--max-tokens", 
                                           help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
    temperature: Optional[float] = typer.Option(None, "--temperature", "-t",
                                              help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-2.0)"),
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    stream: bool = typer.Option(False, "--stream", "-s",
                              help="–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞"),
    no_markdown: bool = typer.Option(False, "--no-markdown",
                                   help="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown"),
):
    """üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ AI"""
    config = Config()
    auth_manager = AuthManager(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not auth_manager.is_authenticated(profile):
        console.print("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", style="red")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –≤—Ö–æ–¥–∞", style="yellow")
        raise typer.Exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    client = auth_manager.get_authenticated_client(profile)
    if not client:
        console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç", style="red")
        raise typer.Exit(1)
    
    try:
        with client:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                transient=True,
            ) as progress:
                task = progress.add_task("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", total=None)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = client.query(
                    prompt=prompt,
                    model=model,
                    max_tokens=max_tokens,
                    temperature=temperature,
                    stream=stream
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_text = result["response"]
            model_used = result.get("model_used", "unknown")
            tokens_used = result.get("tokens_used", {})
            processing_time = result.get("processing_time", 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if no_markdown:
                console.print(response_text)
            else:
                try:
                    console.print(Markdown(response_text))
                except:
                    console.print(response_text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            if config.get("settings.show_token_usage", True):
                console.print()
                console.print(Panel.fit(
                    f"[dim]–ú–æ–¥–µ–ª—å: {model_used} | "
                    f"–¢–æ–∫–µ–Ω—ã: {tokens_used.get('total', 0)} | "
                    f"–í—Ä–µ–º—è: {processing_time:.1f}—Å[/dim]",
                    style="blue"
                ))
            
    except AuthenticationError:
        console.print("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", style="red")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login'", style="yellow")
        raise typer.Exit(1)
    
    except NetworkError as e:
        console.print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", style="red")
        raise typer.Exit(1)
    
    except Exception as e:
        console.print(f"üí• –û—à–∏–±–∫–∞: {e}", style="red")
        raise typer.Exit(1)


@app.command()
def chat(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    model: Optional[str] = typer.Option(None, "--model", "-m", 
                                      help="–ú–æ–¥–µ–ª—å AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
):
    """üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å AI"""
    config = Config()
    auth_manager = AuthManager(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not auth_manager.is_authenticated(profile):
        console.print("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", style="red")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –≤—Ö–æ–¥–∞", style="yellow")
        raise typer.Exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    client = auth_manager.get_authenticated_client(profile)
    if not client:
        console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç", style="red")
        raise typer.Exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    interactive_mode = InteractiveMode(client, config, model)
    interactive_mode.run()


@app.command()
def models(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
):
    """üîß –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI"""
    config = Config()
    auth_manager = AuthManager(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not auth_manager.is_authenticated(profile):
        console.print("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", style="red")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –≤—Ö–æ–¥–∞", style="yellow")
        raise typer.Exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    client = auth_manager.get_authenticated_client(profile)
    if not client:
        console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç", style="red")
        raise typer.Exit(1)
    
    try:
        with client:
            result = client.get_models()
            models = result.get("models", [])
            
            if not models:
                console.print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", style="red")
                return
            
            table = Table(title="ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI")
            table.add_column("ID", style="cyan", no_wrap=True)
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
            table.add_column("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", style="yellow")
            table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")
            table.add_column("–ö–æ–Ω—Ç–µ–∫—Å—Ç", justify="right")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
            
            for model in models:
                status = "‚úÖ" if model.get("available") else "‚ùå"
                context_length = f"{model.get('context_length', 0):,}"
                
                table.add_row(
                    model.get("id", ""),
                    model.get("name", ""),
                    model.get("provider", ""),
                    status,
                    context_length,
                    model.get("description", "")
                )
            
            console.print(table)
            
    except Exception as e:
        console.print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}", style="red")
        raise typer.Exit(1)


@app.command()
def stats(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
):
    """üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    config = Config()
    auth_manager = AuthManager(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if not auth_manager.is_authenticated(profile):
        console.print("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", style="red")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –≤—Ö–æ–¥–∞", style="yellow")
        raise typer.Exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç  
    client = auth_manager.get_authenticated_client(profile)
    if not client:
        console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç", style="red")
        raise typer.Exit(1)
    
    try:
        with client:
            result = client.get_stats()
            
            console.print("üìä [bold blue]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è[/bold blue]")
            console.print()
            console.print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: [bold]{result.get('total_requests', 0)}[/bold]")
            console.print(f"üéØ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: [bold]{result.get('total_tokens', 0):,}[/bold]")
            console.print(f"üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: [bold]{result.get('requests_today', 0)}[/bold]")
            console.print(f"üéØ –¢–æ–∫–µ–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è: [bold]{result.get('tokens_today', 0):,}[/bold]")
            
            remaining = result.get('remaining_quota')
            if remaining is not None:
                console.print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∫–≤–æ—Ç—ã: [bold]{remaining:,}[/bold]")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
            tokens_by_model = result.get('tokens_by_model', {})
            if tokens_by_model:
                console.print()
                console.print("[bold blue]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º:[/bold blue]")
                
                table = Table(show_header=True, header_style="bold magenta")
                table.add_column("–ú–æ–¥–µ–ª—å", style="cyan")
                table.add_column("–¢–æ–∫–µ–Ω—ã", justify="right", style="green")
                
                for model, tokens in tokens_by_model.items():
                    table.add_row(model, f"{tokens:,}")
                
                console.print(table)
                
    except Exception as e:
        console.print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
        raise typer.Exit(1)


@app.command()
def config(
    key: Optional[str] = typer.Argument(None, help="–ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
    value: Optional[str] = typer.Argument(None, help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"),
    list_all: bool = typer.Option(False, "--list", "-l", 
                                help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
):
    """‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    config_obj = Config()
    
    if list_all:
        console.print("‚öôÔ∏è [bold blue]–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è[/bold blue]")
        console.print()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        console.print(f"üåê API Endpoint: [cyan]{config_obj.get_api_endpoint()}[/cyan]")
        console.print(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: [yellow]{config_obj.get_default_profile()}[/yellow]")
        console.print()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = config_obj.get("settings", {})
        console.print("[bold blue]–ù–∞—Å—Ç—Ä–æ–π–∫–∏:[/bold blue]")
        for key, value in settings.items():
            console.print(f"   {key}: [green]{value}[/green]")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        display = config_obj.get("display", {})
        console.print()
        console.print("[bold blue]–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:[/bold blue]")
        for key, value in display.items():
            console.print(f"   {key}: [green]{value}[/green]")
        
        return
    
    if key and value:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è –±—É–ª–µ–≤—ã—Ö/—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            import json
            try:
                parsed_value = json.loads(value)
            except:
                parsed_value = value  # –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            config_obj.set(key, parsed_value)
            console.print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ [cyan]{key}[/cyan] = [green]{parsed_value}[/green]")
            
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", style="red")
            raise typer.Exit(1)
    
    elif key:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        value = config_obj.get(key)
        if value is not None:
            console.print(f"[cyan]{key}[/cyan] = [green]{value}[/green]")
        else:
            console.print(f"‚ùå –ö–ª—é—á [cyan]{key}[/cyan] –Ω–µ –Ω–∞–π–¥–µ–Ω", style="red")
            raise typer.Exit(1)
    
    else:
        console.print("‚ùì –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


@app.command()
def health(
    profile: Optional[str] = typer.Option(None, "--profile", "-p", 
                                        help="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
):
    """üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ API"""
    config = Config()
    
    try:
        with SyncDurusAIClient(config) as client:
            result = client.health_check()
            
            status = result.get("status", "unknown")
            service = result.get("service", "unknown")
            version = result.get("version", "unknown")
            
            if status == "healthy":
                console.print("‚úÖ API –∑–¥–æ—Ä–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç", style="green")
                console.print(f"üîß –°–µ—Ä–≤–∏—Å: {service}")
                console.print(f"üì¶ –í–µ—Ä—Å–∏—è: {version}")
            else:
                console.print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å API: {status}", style="yellow")
            
    except NetworkError:
        console.print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {config.get_api_endpoint()}", style="red")
        console.print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ endpoint", style="yellow")
        raise typer.Exit(1)
    
    except Exception as e:
        console.print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", style="red")
        raise typer.Exit(1)


@app.command()
def update(
    check_only: bool = typer.Option(False, "--check", "-c",
                                  help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"),
    force: bool = typer.Option(False, "--force", "-f",
                             help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"),
):
    """üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CLI"""
    config = Config()
    update_manager = UpdateManager(config)
    
    try:
        if check_only:
            # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
            update_info = update_manager.checker.check_for_updates(force=True)
            
            if not update_info:
                console.print("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", style="yellow")
                return
            
            if update_info["available"]:
                current = update_info["current_version"]
                latest = update_info["latest_version"]
                console.print(f"üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: [red]{current}[/red] ‚Üí [green]{latest}[/green]")
                console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [cyan]durusai update[/cyan] –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            else:
                console.print("‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è", style="green")
        
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
            success = update_manager.check_and_notify(force=force, interactive=True)
            if not success and force:
                console.print("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è", style="blue")
    
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}", style="red")
        raise typer.Exit(1)


def main():
    """Entry point –¥–ª—è CLI"""
    try:
        app()
    except KeyboardInterrupt:
        console.print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="yellow")
        sys.exit(0)
    except Exception as e:
        console.print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()