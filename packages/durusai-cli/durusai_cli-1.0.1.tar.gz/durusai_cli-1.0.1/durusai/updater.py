"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è DurusAI CLI
"""
import os
import sys
import json
import subprocess
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from pathlib import Path
import httpx
from packaging import version

from .config import Config
from .exceptions import NetworkError


class UpdateChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π DurusAI CLI"""
    
    def __init__(self, config: Optional[Config] = None):
        self.config = config or Config()
        self.github_api = "https://api.github.com/repos/durusai/cli"
        self.pypi_api = "https://pypi.org/pypi/durusai/json"
        self.current_version = self._get_current_version()
        self.update_check_file = self.config.config_dir / "last_update_check.json"
    
    def _get_current_version(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é CLI"""
        try:
            from . import __version__
            return __version__
        except ImportError:
            return "1.0.0"
    
    def _should_check_updates(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not self.config.get("settings.auto_update", True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
        if not self.update_check_file.exists():
            return True
        
        try:
            with open(self.update_check_file, 'r') as f:
                data = json.load(f)
            
            last_check = datetime.fromisoformat(data.get("last_check", "2020-01-01"))
            check_interval = timedelta(hours=data.get("check_interval_hours", 24))
            
            return datetime.now() >= last_check + check_interval
            
        except (json.JSONDecodeError, KeyError, ValueError):
            return True
    
    def _save_update_check(self, latest_version: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        data = {
            "last_check": datetime.now().isoformat(),
            "check_interval_hours": 24,
            "current_version": self.current_version,
            "latest_version": latest_version
        }
        
        try:
            with open(self.update_check_file, 'w') as f:
                json.dump(data, f, indent=2)
        except IOError:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    
    def check_pypi_version(self) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –Ω–∞ PyPI"""
        try:
            with httpx.Client(timeout=10) as client:
                response = client.get(self.pypi_api)
                
                if response.status_code == 200:
                    data = response.json()
                    return data["info"]["version"]
                    
        except (httpx.RequestError, KeyError, json.JSONDecodeError):
            pass
        
        return None
    
    def check_github_version(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ –Ω–∞ GitHub"""
        try:
            with httpx.Client(timeout=10) as client:
                response = client.get(f"{self.github_api}/releases/latest")
                
                if response.status_code == 200:
                    data = response.json()
                    return {
                        "version": data["tag_name"].lstrip("v"),
                        "url": data["html_url"],
                        "published_at": data["published_at"],
                        "body": data["body"],
                        "assets": [
                            {
                                "name": asset["name"],
                                "download_url": asset["browser_download_url"],
                                "size": asset["size"]
                            }
                            for asset in data["assets"]
                        ]
                    }
                    
        except (httpx.RequestError, KeyError, json.JSONDecodeError):
            pass
        
        return None
    
    def compare_versions(self, current: str, latest: str) -> int:
        """–°—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: -1 (—Å—Ç–∞—Ä—à–µ), 0 (—Ä–∞–≤–Ω—ã), 1 (–Ω–æ–≤–µ–µ)"""
        try:
            current_ver = version.parse(current)
            latest_ver = version.parse(latest)
            
            if current_ver < latest_ver:
                return -1
            elif current_ver > latest_ver:
                return 1
            else:
                return 0
                
        except Exception:
            # Fallback –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if current < latest:
                return -1
            elif current > latest:
                return 1
            else:
                return 0
    
    def check_for_updates(self, force: bool = False) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not force and not self._should_check_updates():
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyPI
        pypi_version = self.check_pypi_version()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub
        github_info = self.check_github_version()
        github_version = github_info["version"] if github_info else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
        latest_version = pypi_version or github_version
        
        if not latest_version:
            self._save_update_check()
            return None
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
        comparison = self.compare_versions(self.current_version, latest_version)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        self._save_update_check(latest_version)
        
        if comparison < 0:  # –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            return {
                "available": True,
                "current_version": self.current_version,
                "latest_version": latest_version,
                "pypi_version": pypi_version,
                "github_info": github_info,
                "update_methods": self._get_update_methods()
            }
        
        return {
            "available": False,
            "current_version": self.current_version,
            "latest_version": latest_version
        }
    
    def _get_update_methods(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        methods = []
        
        # PyPI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        methods.append({
            "name": "PyPI (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "command": "pip install --upgrade durusai",
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PyPI"
        })
        
        # pip install —Å --user
        methods.append({
            "name": "PyPI (user install)",
            "command": "pip install --user --upgrade durusai",
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
        })
        
        # pipx –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        methods.append({
            "name": "pipx",
            "command": "pipx upgrade durusai",
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pipx (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)"
        })
        
        return methods
    
    def install_update(self, method: str = "pip") -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            if method == "pip":
                cmd = [sys.executable, "-m", "pip", "install", "--upgrade", "durusai"]
            elif method == "pip-user":
                cmd = [sys.executable, "-m", "pip", "install", "--user", "--upgrade", "durusai"]
            elif method == "pipx":
                cmd = ["pipx", "upgrade", "durusai"]
            else:
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå Timeout –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            return False


class UpdateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å UI"""
    
    def __init__(self, config: Optional[Config] = None):
        self.config = config or Config()
        self.checker = UpdateChecker(config)
    
    def check_and_notify(self, force: bool = False, interactive: bool = True) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            update_info = self.checker.check_for_updates(force)
            
            if not update_info:
                if force:
                    print("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            if not update_info["available"]:
                if force:
                    print(f"‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {update_info['current_version']}")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            self._show_update_notification(update_info)
            
            if interactive:
                return self._prompt_for_update(update_info)
            
            return True
            
        except Exception as e:
            if force:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _show_update_notification(self, update_info: Dict[str, Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        from rich.console import Console
        from rich.panel import Panel
        
        console = Console()
        
        current = update_info["current_version"]
        latest = update_info["latest_version"]
        
        message = f"üÜï [bold green]–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ![/bold green]\n\n"
        message += f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: [red]{current}[/red]\n"
        message += f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: [green]{latest}[/green]\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub —Ä–µ–ª–∏–∑–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        github_info = update_info.get("github_info")
        if github_info:
            published = github_info.get("published_at", "").split("T")[0]
            message += f"–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: [dim]{published}[/dim]\n"
            
            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            body = github_info.get("body", "")
            if body and len(body) < 200:
                message += f"\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n[dim]{body[:200]}[/dim]\n"
        
        message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [cyan]durusai update[/cyan] –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        
        console.print(Panel(
            message,
            title="üöÄ DurusAI CLI Update",
            border_style="green"
        ))
    
    def _prompt_for_update(self, update_info: Dict[str, Any]) -> bool:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–∏—Ç—å—Å—è"""
        from rich.prompt import Confirm
        
        if Confirm.ask("\n‚ùì –û–±–Ω–æ–≤–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å?", default=False):
            return self._interactive_update(update_info)
        
        return False
    
    def _interactive_update(self, update_info: Dict[str, Any]) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        from rich.console import Console
        from rich.prompt import IntPrompt
        
        console = Console()
        
        methods = update_info["update_methods"]
        
        console.print("\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        for i, method in enumerate(methods, 1):
            console.print(f"[{i}] {method['name']} - {method['description']}")
        
        try:
            choice = IntPrompt.ask(
                "–í–∞—à –≤—ã–±–æ—Ä",
                choices=[str(i) for i in range(1, len(methods) + 1)],
                default=1
            )
            
            selected_method = methods[choice - 1]
            console.print(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: [cyan]{selected_method['command']}[/cyan]")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if choice == 1:
                success = self.checker.install_update("pip")
            elif choice == 2:
                success = self.checker.install_update("pip-user")
            elif choice == 3:
                success = self.checker.install_update("pipx")
            else:
                success = False
            
            if success:
                console.print("‚úÖ [green]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ![/green]")
                console.print("üîÑ [yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ CLI –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π[/yellow]")
                return True
            else:
                console.print("‚ùå [red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏[/red]")
                console.print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
                return False
                
        except KeyboardInterrupt:
            console.print("\nüö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        except Exception as e:
            console.print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            return False


def check_updates_on_startup(config: Optional[Config] = None, quiet: bool = True):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ CLI (–≤ —Ñ–æ–Ω–µ)"""
    if quiet:
        # –¢–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–æ–Ω–µ
        try:
            manager = UpdateManager(config)
            manager.check_and_notify(force=False, interactive=False)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–∏—Ö–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        manager = UpdateManager(config)
        return manager.check_and_notify(force=True, interactive=True)