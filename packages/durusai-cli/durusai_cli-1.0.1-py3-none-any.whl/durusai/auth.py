"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è DurusAI CLI
"""
import getpass
from typing import Optional, Dict, Any
from rich.console import Console
from rich.prompt import Prompt

from .config import Config
from .api_client import SyncDurusAIClient
from .exceptions import AuthenticationError, NetworkError


class AuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–µ—Å—Å–∏–π"""
    
    def __init__(self, config: Optional[Config] = None):
        self.config = config or Config()
        self.console = Console()
    
    def login(self, username: Optional[str] = None, password: Optional[str] = None,
              profile: Optional[str] = None) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
        profile = profile or self.config.get_default_profile()
        
        try:
            # –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
            if not username:
                username = Prompt.ask("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            if not password:
                password = getpass.getpass("üîë –ü–∞—Ä–æ–ª—å: ")
            
            # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            with SyncDurusAIClient(self.config) as client:
                self.console.print("üîÑ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...", style="blue")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
                result = client.login(username, password)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
                self.config.save_token(
                    profile=profile,
                    access_token=result["access_token"],
                    refresh_token=result.get("refresh_token")
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = result.get("user", {})
                
                self.console.print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", style="green")
                self.console.print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('username', username)}")
                self.console.print(f"üëë –†–æ–ª—å: {user_info.get('role', 'unknown')}")
                self.console.print(f"üìÅ –ü—Ä–æ—Ñ–∏–ª—å: {profile}")
                
                return True
                
        except AuthenticationError as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", style="red")
            return False
        
        except NetworkError as e:
            self.console.print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", style="red")
            self.console.print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API", style="yellow")
            return False
        
        except Exception as e:
            self.console.print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
            return False
    
    def logout(self, profile: Optional[str] = None, all_profiles: bool = False):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if all_profiles:
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            profiles = self.config.list_profiles()
            for prof in profiles:
                self.config.delete_tokens(prof)
            
            self.console.print("‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω", style="green")
        else:
            profile = profile or self.config.get_default_profile()
            self.config.delete_tokens(profile)
            
            self.console.print(f"‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è '{profile}' –≤—ã–ø–æ–ª–Ω–µ–Ω", style="green")
    
    def whoami(self, profile: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        profile = profile or self.config.get_default_profile()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
        token = self.config.get_token(profile)
        if not token:
            self.console.print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile}' –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", style="red")
            self.console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –≤—Ö–æ–¥–∞", style="yellow")
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
            with SyncDurusAIClient(self.config) as client:
                client.set_tokens(token)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = client.get_user_info()
                
                self.console.print("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", style="blue bold")
                self.console.print(f"   –ò–º—è: {user_info.get('username')}")
                self.console.print(f"   Email: {user_info.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.console.print(f"   –†–æ–ª—å: {user_info.get('role')}")
                self.console.print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if user_info.get('is_active') else '‚ùå'}")
                self.console.print(f"   –°–æ–∑–¥–∞–Ω: {user_info.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                self.console.print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {user_info.get('last_login', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                self.console.print(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile}")
                self.console.print(f"   API endpoint: {self.config.get_api_endpoint()}")
                
                return user_info
                
        except AuthenticationError:
            self.console.print(f"‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile}' –∏—Å—Ç–µ–∫", style="red")
            self.console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'durusai login' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞", style="yellow")
            return None
        
        except NetworkError as e:
            self.console.print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", style="red")
            return None
        
        except Exception as e:
            self.console.print(f"üí• –û—à–∏–±–∫–∞: {e}", style="red")
            return None
    
    def is_authenticated(self, profile: Optional[str] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        profile = profile or self.config.get_default_profile()
        return self.config.get_token(profile) is not None
    
    def get_authenticated_client(self, profile: Optional[str] = None) -> Optional[SyncDurusAIClient]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç"""
        profile = profile or self.config.get_default_profile()
        token = self.config.get_token(profile)
        
        if not token:
            return None
        
        client = SyncDurusAIClient(self.config)
        client.set_tokens(token, self.config.get_refresh_token(profile))
        return client