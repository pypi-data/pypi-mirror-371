"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è DurusAI CLI
"""
from typing import Optional, List, Dict, Any
import sys

from .config import Config
from .api_client import SyncDurusAIClient
from .exceptions import AuthenticationError, NetworkError
from .local_file_ops import LocalFileOperations, detect_file_command, format_file_list, extract_project_structure, extract_file_path, parse_bash_commands, execute_bash_command
from .simple_console import colored_print, show_welcome, show_help, show_session_stats, show_exit_stats, simple_input


class InteractiveMode:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å AI - –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    
    def __init__(self, client: SyncDurusAIClient, config: Config, 
                 default_model: Optional[str] = None):
        self.client = client
        self.config = config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
        self.current_model = default_model or config.get("settings.default_model", "claude-3-sonnet-20240229")
        self.conversation_history: List[Dict[str, Any]] = []
        self.session_stats = {
            "queries": 0,
            "total_tokens": 0
        }
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.file_ops = LocalFileOperations()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        self.last_response = ""  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /copy
        self.auto_execute = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∫–æ–º–∞–Ω–¥
    
    def process_command(self, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏"""
        if not text.startswith('/'):
            return True
        
        parts = text.split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if command in ['/quit', '/exit']:
            return False
        
        elif command == '/help':
            show_help()
        
        elif command == '/clear':
            self.conversation_history.clear()
            colored_print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞", "green")
        
        elif command == '/model':
            if args:
                self.current_model = args[0]
                colored_print(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.current_model}", "green")
            else:
                colored_print(f"üìã –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {self.current_model}", "cyan")
        
        elif command == '/history':
            self.show_history()
        
        elif command == '/stats':
            show_session_stats(self.session_stats["queries"], self.session_stats["total_tokens"])
        
        elif command == '/copy':
            if self.last_response:
                filename = args[0] if args else "last_response.md"
                try:
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(self.last_response)
                    colored_print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}", "green")
                except Exception as e:
                    colored_print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", "red")
            else:
                colored_print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "yellow")
        
        elif command == '/auto':
            self.auto_execute = not self.auto_execute
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if self.auto_execute else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            colored_print(f"üîß –ê–≤—Ç–æ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∫–æ–º–∞–Ω–¥ {status}", "cyan")
        
        else:
            colored_print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}", "red")
            colored_print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", "yellow")
        
        return True
    
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.conversation_history:
            colored_print("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", "yellow")
            return
        
        print("\nüìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
        print("=" * 50)
        
        for i, entry in enumerate(self.conversation_history, 1):
            print(f"\nüî∑ –ó–∞–ø—Ä–æ—Å #{i}:")
            print(entry["query"])
            print(f"\nü§ñ –û—Ç–≤–µ—Ç ({entry['model']}):")
            print(entry["response"])
            print("-" * 50)
    
    def analyze_project_structure(self, directory: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            from pathlib import Path
            dir_path = Path(directory)
            
            info = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
            if (dir_path / ".git").exists():
                info.append("Git repository")
            
            if (dir_path / "package.json").exists():
                info.append("Node.js project")
            
            if (dir_path / "requirements.txt").exists():
                info.append("Python project with requirements")
            
            if (dir_path / "pyproject.toml").exists():
                info.append("Python project with pyproject.toml")
            
            if (dir_path / "setup.py").exists():
                info.append("Python package")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            files = list(dir_path.iterdir())
            py_files = [f for f in files if f.suffix == '.py']
            js_files = [f for f in files if f.suffix in ['.js', '.ts']]
            
            if py_files:
                info.append(f"Python files: {len(py_files)}")
            if js_files:
                info.append(f"JavaScript/TypeScript files: {len(js_files)}")
            
            return "; ".join(info) if info else "Empty directory"
            
        except Exception:
            return "Unknown structure"
    
    def handle_file_command(self, file_command: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ"""
        command = file_command["command"]
        args = file_command.get("args", [])
        
        try:
            if command == "pwd":
                current_dir = self.file_ops.pwd()
                colored_print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}", "cyan")
            
            elif command == "ls":
                show_details = "-la" in args or "-lah" in args or "-al" in args
                path = None
                
                for arg in args:
                    if not arg.startswith('-'):
                        path = arg
                        break
                
                files_info = self.file_ops.ls(path, show_hidden=show_details)
                formatted_output = format_file_list(files_info)
                print(formatted_output)
            
            elif command == "cd":
                if not args:
                    colored_print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞", "red")
                    return
                
                result = self.file_ops.cd(args[0])
                if result.get("success"):
                    colored_print(f"‚úÖ {result['message']}", "green")
                else:
                    colored_print(f"‚ùå {result['error']}", "red")
            
            elif command == "tree":
                path = args[0] if args else None
                result = self.file_ops.tree(path)
                if result.get("success"):
                    print(result["tree"])
                else:
                    colored_print(f"‚ùå {result['error']}", "red")
            
            elif command == "smart_file_operation":
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ 3 AI –º–æ–¥–µ–ª–∏
                query = args[0] if args else ""
                current_dir = self.file_ops.pwd()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                project_info = self.analyze_project_structure(current_dir)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è 3 AI –º–æ–¥–µ–ª–µ–π
                smart_prompt = f"""–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ Claude Code –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ö–£–©–ê–Ø –î–ò–†–ï–ö–¢–û–†–ò–Ø: {current_dir}
–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: {project_info}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–°–ò–¢: {query}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: 
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å - —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å
2. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
3. –°–æ–∑–¥–∞–π –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
4. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç ```python filename.py

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: —Å–æ–∑–¥–∞–≤–∞–π —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {current_dir}, –ù–ï –≤ /app/workspace!

–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞:"""

                colored_print("ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 3 AI –º–æ–¥–µ–ª–∏ (Claude/GPT/Gemini)...", "blue")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 3 AI –º–æ–¥–µ–ª–∏
                result = self.client.query(
                    prompt=smart_prompt,
                    model=self.current_model
                )
                
                response = result["response"]
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç AI –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                print(response)
                self.last_response = response
                
                # –ü–∞—Ä—Å–∏–º –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ
                project_structure = extract_project_structure(response)
                
                if project_structure['has_project']:
                    colored_print("\nüîß –°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...", "yellow")
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
                    for dir_name in project_structure['directories']:
                        result_dir = self.file_ops.mkdir(dir_name, parents=True)
                        if result_dir.get("success"):
                            colored_print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}/{dir_name}", "green")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    created_files = []
                    for file_info in project_structure['files']:
                        filename = file_info['filename']
                        content = file_info['content']
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å
                        if project_structure['directories']:
                            project_dir = project_structure['directories'][0]
                            file_path = f"{project_dir}/{filename}"
                        else:
                            file_path = filename
                        
                        result_file = self.file_ops.write_file(file_path, content)
                        if result_file.get("success"):
                            full_path = f"{current_dir}/{file_path}"
                            colored_print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {full_path}", "green")
                            created_files.append(full_path)
                    
                    if created_files:
                        colored_print(f"\nüéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ –≤: {current_dir}", "green")
                        colored_print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}", "cyan")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                tokens_used = result.get("tokens_used", {}).get("total", 0)
                model_used = result.get("model_used", self.current_model)
                self.session_stats["queries"] += 1
                self.session_stats["total_tokens"] += tokens_used
                
                if tokens_used > 0:
                    print(f"\n–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}")
                
                return True
        
        except Exception as e:
            colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", "red")
    
    def handle_query(self, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
            file_command = detect_file_command(query)
            
            if file_command:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
                self.handle_file_command(file_command)
                return True
            
            # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            colored_print("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", "blue")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è AI
            current_dir = self.file_ops.pwd()
            project_info = self.analyze_project_structure(current_dir)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            contextual_prompt = f"""–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ Claude Code –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–ï–ö–£–©–ê–Ø –î–ò–†–ï–ö–¢–û–†–ò–Ø: {current_dir}
–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: {project_info}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–†–û–°–ò–¢: {query}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω—è–π –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
- –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ - –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
- –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π - –¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∫–æ–¥–æ–º
- –í–°–ï–ì–î–ê —Ä–∞–±–æ—Ç–∞–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {current_dir}
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π Docker –∏–ª–∏ /app/workspace

–í—ã–ø–æ–ª–Ω–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"""

            result = self.client.query(
                prompt=contextual_prompt,
                model=self.current_model
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response = result["response"]
            model_used = result.get("model_used", self.current_model)
            tokens_used = result.get("tokens_used", {}).get("total", 0)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            print(response)
            self.last_response = response
            
            # –ü–∞—Ä—Å–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
            commands = parse_bash_commands(response)
            if commands:
                colored_print(f"\nüîß –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(commands)}", "yellow")
                
                for cmd_info in commands:
                    command = cmd_info['command']
                    colored_print(f"‚ñ∂Ô∏è {command}", "cyan")
                    
                    if self.auto_execute:
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        result = execute_bash_command(command, self.file_ops)
                        if result.get("success"):
                            colored_print(f"‚úÖ {result.get('message', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ')}", "green")
                        else:
                            colored_print(f"‚ùå {result.get('error', '–û—à–∏–±–∫–∞')}", "red")
                    else:
                        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        try:
                            confirm = input(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É '{command}'? (y/n): ")
                            if confirm.lower() in ['y', 'yes', '–¥–∞']:
                                result = execute_bash_command(command, self.file_ops)
                                if result.get("success"):
                                    colored_print(f"‚úÖ {result.get('message', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ')}", "green")
                                else:
                                    colored_print(f"‚ùå {result.get('error', '–û—à–∏–±–∫–∞')}", "red")
                        except (EOFError, KeyboardInterrupt):
                            colored_print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", "yellow")
                            break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.session_stats["queries"] += 1
            self.session_stats["total_tokens"] += tokens_used
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "query": query,
                "response": response,
                "model": model_used,
                "tokens": tokens_used
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if tokens_used > 0:
                print(f"\n–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}")
            
        except AuthenticationError:
            colored_print("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", "red")
            return False
        
        except NetworkError as e:
            colored_print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", "red")
            return True
        
        except Exception as e:
            colored_print(f"üí• –û—à–∏–±–∫–∞: {e}", "red")
            return True
        
        return True
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        show_welcome()
        
        try:
            while True:
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π readline
                    user_input = simple_input()
                    
                    text = user_input.strip()
                    
                    if not text:
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    if text.startswith('/'):
                        if not self.process_command(text):
                            break
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ AI
                        if not self.handle_query(text):
                            break
                    
                    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    
                except KeyboardInterrupt:
                    colored_print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quit –¥–ª—è –≤—ã—Ö–æ–¥–∞", "yellow")
                    continue
                    
        except (EOFError, KeyboardInterrupt):
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        show_exit_stats(self.session_stats["queries"], self.session_stats["total_tokens"])