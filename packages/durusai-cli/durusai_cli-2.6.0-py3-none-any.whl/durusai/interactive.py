"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π REPL —Ä–µ–∂–∏–º –¥–ª—è DurusAI CLI
"""
from typing import Optional, List, Dict, Any
from prompt_toolkit import PromptSession
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.shortcuts import confirm
from prompt_toolkit.styles import Style
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.key_binding import KeyBindings
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.table import Table
import sys

from .config import Config
from .api_client import SyncDurusAIClient
from .exceptions import AuthenticationError, NetworkError
from .local_file_ops import LocalFileOperations, detect_file_command, format_file_list, extract_project_structure, extract_file_path


class InteractiveMode:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å AI"""
    
    def __init__(self, client: SyncDurusAIClient, config: Config, 
                 default_model: Optional[str] = None):
        self.client = client
        self.config = config
        self.console = Console()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
        self.current_model = default_model or config.get("settings.default_model", "claude-3-sonnet-20240229")
        self.conversation_history: List[Dict[str, Any]] = []
        self.session_stats = {
            "queries": 0,
            "total_tokens": 0
        }
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.file_ops = LocalFileOperations()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.use_pager = config.get("display.pager_enabled", True)
        self.last_response = ""  # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /copy
        
        # –°—Ç–∏–ª—å –¥–ª—è prompt_toolkit
        self.style = Style.from_dict({
            'prompt': '#00aa00 bold',
            'input': '#ffffff',
            'completion-menu.completion': 'bg:#008888 #ffffff',
            'completion-menu.completion.current': 'bg:#00aaaa #000000',
            'scrollbar.background': 'bg:#88aaaa',
            'scrollbar.button': 'bg:#222222',
        })
        
        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        self.completer = WordCompleter([
            '/help', '/quit', '/exit', '/clear', '/history',
            '/model', '/models', '/stats', '/save', '/load',
            '/settings', '/export', '/pager', '/copy'
        ])
        
        # Key bindings
        self.bindings = KeyBindings()
        
        @self.bindings.add('c-c')
        def _(event):
            """Ctrl+C - –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
            event.app.exit(exception=KeyboardInterrupt)
        
        @self.bindings.add('c-d')
        def _(event):
            """Ctrl+D - –≤—ã—Ö–æ–¥"""
            event.app.exit()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session = PromptSession(
            completer=self.completer,
            style=self.style,
            key_bindings=self.bindings,
            mouse_support=True,
            complete_style='multi-column'
        )
    
    def show_welcome(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å—Ç–∏–ª–µ Claude"""
        # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö —Ä–∞–º–æ–∫
        self.console.print(f"ü§ñ [bold blue]DurusAI[/bold blue]")
        self.console.print(f"[dim]–ú–æ–¥–µ–ª—å: {self.current_model} | –ö–æ–º–∞–Ω–¥—ã: /help, /model, /quit[/dim]")
        self.console.print()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_table = Table(title="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", show_header=True, header_style="bold blue")
        help_table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="green", no_wrap=True)
        help_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        help_table.add_column("–ü—Ä–∏–º–µ—Ä", style="dim")
        
        commands = [
            ("/help", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É", "/help"),
            ("/model <name>", "–°–º–µ–Ω–∏—Ç—å AI –º–æ–¥–µ–ª—å", "/model gpt-4"),
            ("/models", "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", "/models"),
            ("/clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", "/clear"),
            ("/history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", "/history"),
            ("/stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏", "/stats"),
            ("/settings", "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"),
            ("/export", "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä", "/export chat.md"),
            ("/pager", "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ–π–¥–∂–µ—Ä –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "/pager"),
            ("/copy", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª", "/copy response.md"),
            ("/quit, /exit", "–í—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", "/quit"),
            ("Ctrl+C", "–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å", ""),
            ("Ctrl+D", "–ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥", ""),
        ]
        
        for cmd, desc, example in commands:
            help_table.add_row(cmd, desc, example)
        
        self.console.print(help_table)
    
    def process_command(self, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏"""
        if not text.startswith('/'):
            return True
        
        parts = text.split()
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if command in ['/quit', '/exit']:
            return False
        
        elif command == '/help':
            self.show_help()
        
        elif command == '/clear':
            self.conversation_history.clear()
            self.console.print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞", style="green")
        
        elif command == '/model':
            if args:
                self.current_model = args[0]
                self.console.print(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: [cyan]{self.current_model}[/cyan]")
            else:
                self.console.print(f"üìã –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: [cyan]{self.current_model}[/cyan]")
        
        elif command == '/models':
            self.show_models()
        
        elif command == '/history':
            self.show_history()
        
        elif command == '/stats':
            self.show_session_stats()
        
        elif command == '/settings':
            self.show_settings()
        
        elif command == '/export':
            filename = args[0] if args else "chat_export.md"
            self.export_conversation(filename)
        
        elif command == '/pager':
            self.use_pager = not self.use_pager
            status = "–≤–∫–ª—é—á–µ–Ω" if self.use_pager else "–æ—Ç–∫–ª—é—á–µ–Ω"
            self.console.print(f"üìÑ –ü–µ–π–¥–∂–µ—Ä {status}")
        
        elif command == '/copy':
            if self.last_response:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª
                filename = args[0] if args else "last_response.md"
                try:
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(self.last_response)
                    self.console.print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: [cyan]{filename}[/cyan]")
                except Exception as e:
                    self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", style="red")
            else:
                self.console.print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", style="yellow")
        
        else:
            self.console.print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: [red]{command}[/red]")
            self.console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [green]/help[/green] –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        return True
    
    def show_models(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        try:
            result = self.client.get_models()
            models = result.get("models", [])
            
            if not models:
                self.console.print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", style="red")
                return
            
            table = Table(title="ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            table.add_column("ID", style="cyan")
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
            table.add_column("–°—Ç–∞—Ç—É—Å")
            table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")
            
            for model in models:
                status = "‚úÖ" if model.get("available") else "‚ùå"
                current = "üëà" if model.get("id") == self.current_model else ""
                
                table.add_row(
                    f"{model.get('id', '')} {current}",
                    model.get("name", ""),
                    status,
                    model.get("description", "")
                )
            
            self.console.print(table)
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}", style="red")
    
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.conversation_history:
            self.console.print("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", style="yellow")
            return
        
        self.console.print("üìú [bold blue]–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞[/bold blue]")
        self.console.print()
        
        for i, entry in enumerate(self.conversation_history, 1):
            # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.console.print(f"[bold blue]#{i} –í–æ–ø—Ä–æ—Å:[/bold blue]")
            self.console.print(Panel(entry["query"], border_style="blue", padding=(0, 1)))
            
            # –û—Ç–≤–µ—Ç AI
            self.console.print(f"[bold green]#{i} –û—Ç–≤–µ—Ç ({entry['model']}):[/bold green]")
            try:
                self.console.print(Panel(Markdown(entry["response"]), border_style="green", padding=(0, 1)))
            except:
                self.console.print(Panel(entry["response"], border_style="green", padding=(0, 1)))
            
            self.console.print()
    
    def show_session_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        self.console.print("üìä [bold blue]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏[/bold blue]")
        self.console.print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: [cyan]{self.session_stats['queries']}[/cyan]")
        self.console.print(f"   –¢–æ–∫–µ–Ω–æ–≤: [cyan]{self.session_stats['total_tokens']:,}[/cyan]")
        self.console.print(f"   –ú–æ–¥–µ–ª—å: [yellow]{self.current_model}[/yellow]")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.console.print("‚öôÔ∏è [bold blue]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏[/bold blue]")
        self.console.print(f"   –ú–æ–¥–µ–ª—å: [yellow]{self.current_model}[/yellow]")
        self.console.print(f"   API endpoint: [dim]{self.config.get_api_endpoint()}[/dim]")
        self.console.print(f"   Timeout: [cyan]{self.config.get('settings.timeout')}—Å[/cyan]")
        self.console.print(f"   Stream responses: [cyan]{self.config.get('settings.stream_responses')}[/cyan]")
    
    def export_conversation(self, filename: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ñ–∞–π–ª"""
        if not self.conversation_history:
            self.console.print("üì≠ –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", style="yellow")
            return
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("# DurusAI Conversation Export\n\n")
                f.write(f"**Model:** {self.current_model}\n")
                f.write(f"**Total queries:** {self.session_stats['queries']}\n")
                f.write(f"**Total tokens:** {self.session_stats['total_tokens']:,}\n\n")
                f.write("---\n\n")
                
                for i, entry in enumerate(self.conversation_history, 1):
                    f.write(f"## Query #{i}\n\n")
                    f.write(f"**User:** {entry['query']}\n\n")
                    f.write(f"**AI ({entry['model']}):**\n\n")
                    f.write(f"{entry['response']}\n\n")
                    f.write("---\n\n")
            
            self.console.print(f"‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: [cyan]{filename}[/cyan]")
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", style="red")
    
    def print_with_pager(self, content: str, is_markdown: bool = True):
        """–í—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ–π–¥–∂–µ—Ä–∞ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        lines = content.split('\n')
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π –∏ –ø–µ–π–¥–∂–µ—Ä –≤–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ–π–¥–∂–µ—Ä
        if len(lines) > 20 and self.use_pager:
            try:
                from rich.pager import Pager
                if is_markdown:
                    with Pager():
                        self.console.print(Markdown(content))
                else:
                    with Pager():
                        self.console.print(content)
            except:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥
                if is_markdown:
                    try:
                        self.console.print(Markdown(content))
                    except:
                        self.console.print(content)
                else:
                    self.console.print(content)
        else:
            # –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if is_markdown:
                try:
                    self.console.print(Markdown(content))
                except:
                    self.console.print(content)
            else:
                self.console.print(content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /copy
        self.last_response = content
    
    def handle_file_command(self, file_command: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ª–æ–∫–∞–ª—å–Ω–æ"""
        command = file_command["command"]
        args = file_command["args"]
        
        try:
            if command == "pwd":
                current_dir = self.file_ops.pwd()
                self.console.print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: [cyan]{current_dir}[/cyan]")
            
            elif command == "ls":
                show_details = "-la" in args or "-lah" in args or "-al" in args
                path = None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                for arg in args:
                    if not arg.startswith('-'):
                        path = arg
                        break
                
                files_info = self.file_ops.ls(path, show_hidden=show_details)
                formatted_output = format_file_list(files_info)
                self.console.print(formatted_output)
            
            elif command == "cd":
                if not args:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞", style="red")
                    return
                
                result = self.file_ops.cd(args[0])
                if result.get("success"):
                    self.console.print(f"‚úÖ {result['message']}", style="green")
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "mkdir":
                if not args:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", style="red")
                    return
                
                result = self.file_ops.mkdir(args[0], parents=True)
                if result.get("success"):
                    self.console.print(f"‚úÖ {result['message']}", style="green")
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "cat":
                if not args:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞", style="red")
                    return
                
                result = self.file_ops.cat(args[0])
                if result.get("success"):
                    self.console.print(f"üìÑ [cyan]{result['file_path']}[/cyan]:")
                    self.console.print(Panel(result["content"], border_style="blue"))
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "tree":
                path = args[0] if args else None
                result = self.file_ops.tree(path)
                if result.get("success"):
                    self.console.print(result["tree"])
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "rm":
                if not file_command.get("args"):
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", style="red")
                    return
                
                files_to_remove = file_command["args"]
                recursive = file_command.get("recursive", False)
                force = file_command.get("force", False)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if "*" in " ".join(files_to_remove) and not force:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
                    import glob
                    all_matches = []
                    for pattern in files_to_remove:
                        if "*" in pattern:
                            matches = glob.glob(pattern)
                            all_matches.extend(matches)
                        else:
                            all_matches.append(pattern)
                    
                    if all_matches:
                        self.console.print("‚ö†Ô∏è [yellow]–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:[/yellow]")
                        for match in all_matches[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            self.console.print(f"   üìÑ {match}")
                        if len(all_matches) > 10:
                            self.console.print(f"   ... –∏ –µ—â–µ {len(all_matches) - 10} —Ñ–∞–π–ª–æ–≤")
                        
                        from prompt_toolkit.shortcuts import confirm
                        if not confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"):
                            self.console.print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", style="yellow")
                            return
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
                for file_path in files_to_remove:
                    result = self.file_ops.rm(file_path, recursive=recursive, force=force)
                    if result.get("success"):
                        self.console.print(f"‚úÖ {result['message']}", style="green")
                    else:
                        self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "cp":
                if len(args) < 2:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", style="red")
                    return
                
                result = self.file_ops.cp(args[0], args[1])
                if result.get("success"):
                    self.console.print(f"‚úÖ {result['message']}", style="green")
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "mv":
                if len(args) < 2:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", style="red")
                    return
                
                result = self.file_ops.mv(args[0], args[1])
                if result.get("success"):
                    self.console.print(f"‚úÖ {result['message']}", style="green")
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "create_project":
                # –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI, –Ω–æ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                query = args[0] if args else ""
                current_dir = self.file_ops.pwd()
                
                self.console.print("ü§ñ [dim]–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ...[/dim]")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                local_prompt = f"""–í–ê–ñ–ù–û: –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ Claude Code - —Å–æ–∑–¥–∞–≤–∞–π —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_dir}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –°–æ–∑–¥–∞–π —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Docker –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç: {query}

–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç –ø—Ä—è–º–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
                result = self.client.query(
                    prompt=local_prompt,
                    model=self.current_model
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º AI –æ—Ç–≤–µ—Ç —Å –ø–µ–π–¥–∂–µ—Ä–æ–º
                response = result["response"]
                self.print_with_pager(response, is_markdown=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
                project_structure = extract_project_structure(response)
                
                if project_structure['has_project']:
                    self.console.print("\nüîß [yellow]–°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ...[/yellow]")
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    for dir_name in project_structure['directories']:
                        result_dir = self.file_ops.mkdir(dir_name, parents=True)
                        if result_dir.get("success"):
                            self.console.print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: [cyan]{dir_name}[/cyan]")
                        else:
                            self.console.print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: {result_dir.get('error', '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
                    for file_info in project_structure['files']:
                        filename = file_info['filename']
                        content = file_info['content']
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–µ–π
                        if project_structure['directories']:
                            project_dir = project_structure['directories'][0]
                            file_path = f"{project_dir}/{filename}"
                        else:
                            file_path = filename
                        
                        result_file = self.file_ops.write_file(file_path, content)
                        if result_file.get("success"):
                            self.console.print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: [green]{file_path}[/green]")
                        else:
                            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {file_path}: {result_file.get('error')}")
                    
                    self.console.print(f"\nüéâ [green]–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.file_ops.pwd()}[/green]")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                tokens_used = result.get("tokens_used", {}).get("total", 0)
                model_used = result.get("model_used", self.current_model)
                
                self.session_stats["queries"] += 1
                self.session_stats["total_tokens"] += tokens_used
                
                if tokens_used > 0:
                    self.console.print(f"\n[dim]–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}[/dim]")
                
                return True
            
            elif command == "write":
                if len(args) < 2:
                    self.console.print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∏–º—è —Ñ–∞–π–ª–∞", style="red")
                    return
                
                content = args[0]
                filename = args[1]
                
                result = self.file_ops.write_file(filename, content)
                if result.get("success"):
                    self.console.print(f"‚úÖ {result['message']}", style="green")
                else:
                    self.console.print(f"‚ùå {result['error']}", style="red")
            
            elif command == "refactor":
                # –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
                query = args[0] if args else ""
                file_path = extract_file_path(query)
                
                if file_path:
                    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                    file_result = self.file_ops.cat(file_path)
                    if file_result.get("success"):
                        current_code = file_result["content"]
                        self.console.print(f"üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: [cyan]{file_path}[/cyan]")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ AI
                        refactor_prompt = f"""–ü—Ä–æ—á–∏—Ç–∞–π –∏ —É–ª—É—á—à–∏ —ç—Ç–æ—Ç Python –∫–æ–¥:

```python
{current_code}
```

–°–¥–µ–ª–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥:
1. –£–ª—É—á—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
2. –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏  
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥
4. –°–ª–µ–¥—É–π PEP 8

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ```python"""

                        self.console.print("ü§ñ [dim]–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 3 AI –º–æ–¥–µ–ª–∏...[/dim]")
                        
                        result = self.client.query(
                            prompt=refactor_prompt,
                            model=self.current_model
                        )
                        
                        response = result["response"]
                        
                        # –ü–∞—Ä—Å–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥
                        project_structure = extract_project_structure(response)
                        if project_structure['files']:
                            improved_code = project_structure['files'][0]['content']
                            backup_path = f"{file_path}.backup"
                            
                            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                            self.file_ops.cp(file_path, backup_path)
                            self.console.print(f"üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: [yellow]{backup_path}[/yellow]")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥
                            write_result = self.file_ops.write_file(file_path, improved_code)
                            if write_result.get("success"):
                                self.console.print(f"‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: [green]{file_path}[/green]")
                            else:
                                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {write_result.get('error')}")
                        else:
                            self.print_with_pager(response, is_markdown=True)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        tokens_used = result.get("tokens_used", {}).get("total", 0)
                        model_used = result.get("model_used", self.current_model)
                        self.session_stats["queries"] += 1
                        self.session_stats["total_tokens"] += tokens_used
                        if tokens_used > 0:
                            self.console.print(f"\n[dim]–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}[/dim]")
                    else:
                        self.console.print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_result.get('error')}")
                else:
                    self.console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–ø—Ä–æ—Å–µ")
            
            elif command == "read_and_analyze":
                # –ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
                query = args[0] if args else ""
                file_path = extract_file_path(query)
                
                if file_path:
                    file_result = self.file_ops.cat(file_path)
                    if file_result.get("success"):
                        self.console.print(f"üìÑ [cyan]{file_result['file_path']}[/cyan]:")
                        self.console.print(Panel(file_result["content"], border_style="blue"))
                        
                        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
                        if any(word in query.lower() for word in ['–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', 'analyze', '—á—Ç–æ –¥–µ–ª–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏']):
                            analyze_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç:\n\n```python\n{file_result['content']}\n```"
                            
                            self.console.print("\nü§ñ [dim]–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ —á–µ—Ä–µ–∑ AI...[/dim]")
                            result = self.client.query(prompt=analyze_prompt, model=self.current_model)
                            
                            try:
                                self.console.print(Markdown(result["response"]))
                            except:
                                self.console.print(result["response"])
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            tokens_used = result.get("tokens_used", {}).get("total", 0)
                            model_used = result.get("model_used", self.current_model)
                            self.session_stats["queries"] += 1
                            self.session_stats["total_tokens"] += tokens_used
                            if tokens_used > 0:
                                self.console.print(f"\n[dim]–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}[/dim]")
                    else:
                        self.console.print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_result.get('error')}")
                else:
                    self.console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–ø—Ä–æ—Å–µ")
        
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", style="red")
    
    def handle_query(self, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
            file_command = detect_file_command(query)
            
            if file_command:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
                self.handle_file_command(file_command)
                return True
            
            # –ï—Å–ª–∏ –Ω–µ —Ñ–∞–π–ª–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ AI
            self.console.print("ü§ñ [dim]–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...[/dim]")
            
            result = self.client.query(
                prompt=query,
                model=self.current_model
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response = result["response"]
            model_used = result.get("model_used", self.current_model)
            tokens_used = result.get("tokens_used", {}).get("total", 0)
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –æ—Ç–≤–µ—Ç —Å –ø–µ–π–¥–∂–µ—Ä–æ–º
            self.print_with_pager(response, is_markdown=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.session_stats["queries"] += 1
            self.session_stats["total_tokens"] += tokens_used
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "query": query,
                "response": response,
                "model": model_used,
                "tokens": tokens_used
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if tokens_used > 0:
                self.console.print(f"[dim]–¢–æ–∫–µ–Ω—ã: {tokens_used} | –ú–æ–¥–µ–ª—å: {model_used}[/dim]")
            
        except AuthenticationError:
            self.console.print("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", style="red")
            return False
        
        except NetworkError as e:
            self.console.print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", style="red")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        
        except Exception as e:
            self.console.print(f"üí• –û—à–∏–±–∫–∞: {e}", style="red")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        
        return True
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.show_welcome()
        
        try:
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                    user_input = self.session.prompt(
                        HTML('<prompt>durusai> </prompt>'),
                        multiline=False
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None (Ctrl+D –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏)
                    if user_input is None:
                        break
                    
                    text = user_input.strip()
                    
                    if not text:
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    if text.startswith('/'):
                        if not self.process_command(text):
                            break
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ AI
                        if not self.handle_query(text):
                            break
                    
                    self.console.print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    
                except KeyboardInterrupt:
                    self.console.print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    if confirm("\n–í—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞?"):
                        break
                    self.console.print()
                
                except EOFError:
                    break
        
        except Exception as e:
            self.console.print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
        
        finally:
            # –ü—Ä–æ—â–∞–Ω–∏–µ
            if self.session_stats["queries"] > 0:
                self.console.print(Panel.fit(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:\n"
                    f"   –ó–∞–ø—Ä–æ—Å–æ–≤: [cyan]{self.session_stats['queries']}[/cyan]\n"
                    f"   –¢–æ–∫–µ–Ω–æ–≤: [cyan]{self.session_stats['total_tokens']:,}[/cyan]\n\n"
                    f"üëã [yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]",
                    title="üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
                    border_style="blue"
                ))
            else:
                self.console.print("üëã [yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")