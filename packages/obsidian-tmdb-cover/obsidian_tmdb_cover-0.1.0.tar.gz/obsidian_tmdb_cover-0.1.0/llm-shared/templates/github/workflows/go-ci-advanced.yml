---
name: Go CI (Advanced)

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    name: Test
    strategy:
      matrix:
        go-version: [1.24, 1.25]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install Task (Unix)
        if: runner.os != 'Windows'
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Task (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install go-task
        shell: powershell

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Run tests with coverage
        run: task test-ci

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.25]
    runs-on: ${{ matrix.os }}
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install Task (Unix)
        if: runner.os != 'Windows'
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Task (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install go-task
        shell: powershell

      - name: Build
        run: task build-ci

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}
          path: |
            build/
            *.exe
          if-no-files-found: ignore
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Run gosec security scanner
        uses: securecodewarrior/github-action-gosec@v2
        with:
          args: '-fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
