# =============================================================================
# Agent FastAPI Service - Clean Docker Build
# =============================================================================
#
# Lightweight FastAPI service for agent development that connects to
# separate PostgreSQL service (postgres-agent)
#
# Target: FastAPI-only container for Agent development service
# External Port: 38886 (FastAPI)
# Database: Connects to postgres-agent:5432/hive_agent
#
# =============================================================================

# ============================================================================
# STAGE 1: UV Dependencies Builder (reuse existing pattern)
# ============================================================================
FROM python:3.12-slim as builder

# Install UV from official source
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

# Set working directory
WORKDIR /app

# Copy dependency files and README for package build
COPY pyproject.toml uv.lock README.md ./

# Install dependencies with UV sync (production only, no dev dependencies) + BuildKit cache
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# ============================================================================
# STAGE 2: Agent Production - FastAPI Service Only
# ============================================================================
FROM python:3.12-slim as agent-production

# Build metadata labels for enterprise tracking
LABEL org.opencontainers.image.title="Automagik Hive Agent FastAPI"
LABEL org.opencontainers.image.description="Agent development FastAPI service"
LABEL org.opencontainers.image.vendor="Automagik"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.service="agent-fastapi"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    UV_NO_CACHE=1 \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    PATH="/app/.venv/bin:$PATH"

# Copy UV from builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

# Copy Python virtual environment from builder stage
COPY --from=builder /app/.venv /app/.venv

# Create application user and fix permissions
RUN groupadd --gid 1000 hive \
    && useradd --uid 1000 --gid hive --shell /bin/bash --create-home hive \
    && chown -R hive:hive /app/.venv

# Set working directory and create necessary directories
WORKDIR /app
RUN mkdir -p /app/logs /app/data /app/uploads \
    && chown -R hive:hive /app/logs /app/data /app/uploads \
    && chown hive:hive /app

# Copy application files with proper ownership
COPY --chown=hive:hive pyproject.toml uv.lock README.md ./
COPY --chown=hive:hive alembic.ini ./  
COPY --chown=hive:hive alembic/ ./alembic/
COPY --chown=hive:hive lib/ ./lib/
COPY --chown=hive:hive ai/ ./ai/
COPY --chown=hive:hive api/ ./api/
COPY --chown=hive:hive common/ ./common/
COPY --chown=hive:hive scripts/ ./scripts/
COPY --chown=hive:hive logging_whitelist.yaml ./
COPY --chown=hive:hive .mcp.json ./

# Port configuration
ARG API_PORT=38886
ENV HIVE_API_PORT=${API_PORT}

# Expose port
EXPOSE ${API_PORT}

# Health check for FastAPI service
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${HIVE_API_PORT:-38886}/api/v1/health || exit 1

# Start FastAPI application using UV (as root to avoid permission issues)
CMD ["python", "api/serve.py"]