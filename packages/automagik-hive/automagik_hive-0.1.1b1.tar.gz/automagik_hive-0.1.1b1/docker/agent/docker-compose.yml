# =============================================================================
# Agent Development Container - All-in-One PostgreSQL + FastAPI  
# =============================================================================
#
# Unified container architecture for agent development and testing:
# - PostgreSQL database with pgvector extension (internal port 5432)
# - FastAPI application with Agent development API (external port 35532)
# - Supervisord process management for multi-service coordination
# - Complete isolation from main workspace and Genie container
#
# Usage:
#   docker-compose -f docker-compose-agent.yml up -d
#   docker-compose -f docker-compose-agent.yml logs -f
#   docker-compose -f docker-compose-agent.yml down
#
# Integration:
#   uvx automagik-hive --agent-serve     # Start Agent container
#   uvx automagik-hive --agent-logs      # View Agent logs
#   uvx automagik-hive --agent-stop      # Stop Agent container
#
# =============================================================================

# Shared build arguments for Agent container
x-agent-build-args: &agent-build-args
  BUILD_VERSION: ${BUILD_VERSION:-latest}
  BUILD_DATE: ${BUILD_DATE:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
  GIT_SHA: ${GIT_SHA:-$(git rev-parse HEAD 2>/dev/null || echo "unknown")}
  API_PORT: 35532
  CONTAINER_TYPE: agent

services:
  # Standalone PostgreSQL for Agent Development
  agent-postgres:
    image: agnohq/pgvector:16
    container_name: hive-agent-postgres
    restart: unless-stopped
    ports:
      - "35532:5432"  # Agent PostgreSQL port
    env_file:
      - ../../.env  # Load main environment as base
    environment:
      # Agent-specific postgres overrides
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_pass
      - POSTGRES_DB=hive_agent
      - PGDATA=/var/lib/postgresql/data/pgdata
    # Note: No volume mapping = ephemeral storage
    # Each container restart creates a fresh database
    # Note: No user restriction for ephemeral storage to avoid permission issues
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    networks:
      - agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Agent FastAPI Service (connects to agent-postgres)
  agent-api:
    build:
      context: ../../
      dockerfile: docker/agent/Dockerfile.agent
      args:
        <<: *agent-build-args
      platforms:
        - linux/amd64
      target: agent-production
    container_name: hive-agent-api
    restart: unless-stopped
    ports:
      - "38886:38886"  # Agent development API (different from postgres port)
    env_file:
      - ../../.env  # Load main environment as base
    environment:
      # Agent-specific overrides only
      - HIVE_API_PORT=38886
      - HIVE_DATABASE_URL=postgresql+psycopg://test_user:test_pass@agent-postgres:5432/hive_agent
      - HIVE_API_KEY=hive_agent-test-key-12345-67890-abcdef-ghijkl
      - HIVE_CORS_ORIGINS=http://localhost:3000,http://localhost:38886
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_pass
      - POSTGRES_DB=hive_agent
    volumes:
      - agent_app_logs:/app/logs                        # Application logs
      - agent_app_data:/app/data                        # Application data
    depends_on:
      agent-postgres:
        condition: service_healthy
    networks:
      - agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:38886/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Agent network configuration
networks:
  agent_network:
    driver: bridge
    name: hive_agent_network

# Agent persistent volumes
volumes:
  agent_app_logs:
    driver: local
    name: hive_agent_app_logs
  agent_app_data:
    driver: local
    name: hive_agent_app_data
  agent_supervisor_logs:
    driver: local
    name: hive_agent_supervisor_logs