name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  style:
    name: Check the code style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - uses: pre-commit/action@v3.0.0

  tests:
    name: Run the tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Set up test environment
      run: |
        python -m pip install --upgrade pip
        pip install .[test]
        pip install pytest-cov
    - name: Run tests
      run: |
        pytest --cov=dotevals --cov-branch
    - name: Check for coverage file
      run: ls -la
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data
        path: .coverage
        if-no-files-found: error
        include-hidden-files: true
  coverage:
    name: Combine & check coverage.
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout
      pull-requests: write # for "PR comment"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: "3.10"

      - name: Set up environment
        run: |
          pip install --upgrade "coverage[toml]>=5.1" diff-cover

      - uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: Fetch master for coverage diff
        run: |
          git fetch --no-tags --prune origin main

      - name: Combine coverage & fail if it's <100%.
        run: |
          # Combine coverage files (not needed now, but maybe later)
          # python -m coverage combine

          # Produce an html report with absolute coverage information
          python -m coverage html --skip-covered --skip-empty

          # Report relative coverage and write to the workflow's summary
          python -m coverage xml
          diff-cover coverage.xml --markdown-report=coverage.md --fail-under=100 || (cat coverage.md >> $GITHUB_STEP_SUMMARY && exit 1)

      - name: PR comment
        uses: dottxt-ai/dottxt-utils/.github/actions/pr_comment_file@actions
        with:
          comment-id: coverage
          filename: coverage.md
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: success() || failure()

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: failure()
