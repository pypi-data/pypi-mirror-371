name: ðŸŽª Superset Showtime Environment Manager

# Trigger on circus tent labels
on:
  pull_request_target:
    types: [labeled, unlabeled, synchronize, closed]

jobs:
  # Job 1: Check for showtime triggers and extract SHA
  evaluate-triggers:
    name: Evaluate showtime triggers
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    outputs:
      should-build: ${{ steps.eval-triggers.outputs.should-build }}
      should-cleanup: ${{ steps.eval-triggers.outputs.should-cleanup }}
      sha: ${{ steps.get-sha.outputs.sha }}
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Check for showtime trigger labels
        id: eval-triggers
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" && "${{ contains(github.event.label.name, 'ðŸŽª trigger-start') }}" == "true" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "synchronize" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.action }}" == "closed" ]]; then
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "should-cleanup=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR SHA
        id: get-sha
        if: steps.eval-triggers.outputs.should-build == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prSha = context.payload.pull_request.head.sha;
            console.log(`PR SHA: ${prSha}`);
            core.setOutput("sha", prSha);

  # Job 2: Build Docker image (from original ephemeral-env.yml)
  docker-build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}-build
      cancel-in-progress: true
    needs: evaluate-triggers
    if: needs.evaluate-triggers.outputs.should-build == 'true'
    name: Build ephemeral environment image
    runs-on: ubuntu-24.04
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ needs.evaluate-triggers.outputs.sha }} )"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.evaluate-triggers.outputs.sha }}
          persist-credentials: false

      - name: Setup Docker Environment
        uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          build: "true"
          install-docker-compose: "false"

      - name: Setup supersetbot
        uses: ./.github/actions/setup-supersetbot/

      - name: Build ephemeral env image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          supersetbot docker \
            --push \
            --load \
            --preset ci \
            --platform linux/amd64 \
            --context-ref "${{ needs.evaluate-triggers.outputs.sha }}" \
            --extra-flags "--build-arg INCLUDE_CHROMIUM=false"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: superset-ci
          IMAGE_TAG: apache/superset:${{ needs.evaluate-triggers.outputs.sha }}-ci
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:pr-$PR_NUMBER-ci
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

  # Job 3: Handle showtime operations (our new logic)
  showtime-handler:
    needs: [evaluate-triggers, docker-build]
    if: needs.evaluate-triggers.outputs.should-build == 'true'

    concurrency:
      group: showtime-${{ github.event.pull_request.number || github.run_id }}
      cancel-in-progress: true

    name: Process showtime operations
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Install Superset Showtime
        run: |
          pip install superset-showtime

      - name: Process circus triggers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
          GITHUB_ORG: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          python -m showtime handle-trigger ${{ github.event.pull_request.number }}

      - name: Handle synchronize events (new commits)
        if: github.event_name == 'synchronize'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
          GITHUB_ORG: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          python -m showtime handle-sync ${{ github.event.pull_request.number }}

  # Job 4: Immediate cleanup when PR is closed/merged
  pr-cleanup:
    needs: evaluate-triggers
    if: needs.evaluate-triggers.outputs.should-cleanup == 'true'
    name: Clean up closed PR environment
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Install Superset Showtime
        run: |
          pip install superset-showtime

      - name: Clean up closed PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
          GITHUB_ORG: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          python -m showtime stop ${{ github.event.pull_request.number }} --force
