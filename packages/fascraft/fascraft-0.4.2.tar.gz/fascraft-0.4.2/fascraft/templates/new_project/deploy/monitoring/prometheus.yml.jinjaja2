# Prometheus configuration for {{ project_name }}
# This configuration monitors the FastAPI application and infrastructure

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    project: "{{ project_name }}"
    environment: "production"

rule_files:
  - "{{ project_name }}_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics
    scrape_interval: 15s

  # FastAPI Application
  - job_name: '{{ project_name }}-app'
    static_configs:
      - targets: ['{{ project_name }}-service:8000']
    metrics_path: /metrics
    scrape_interval: 10s
    scrape_timeout: 5s
    honor_labels: true
    metrics_path: /metrics
    
    # Relabeling rules
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+)(?::\d+)?'
        replacement: '${1}'
      
      - source_labels: [__address__]
        target_label: __metrics_path__
        regex: '([^:]+)(?::\d+)?'
        replacement: '/metrics'
      
      - source_labels: [__address__]
        target_label: __scheme__
        regex: '([^:]+)(?::\d+)?'
        replacement: 'http'

  # Node Exporter (if running on hosts)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s
    metrics_path: /metrics

  # cAdvisor (container metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: /metrics

  # Redis Exporter
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 15s
    metrics_path: /metrics

  # PostgreSQL Exporter
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 15s
    metrics_path: /metrics

  # Nginx Exporter (if using nginx)
  - job_name: 'nginx-exporter'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 15s
    metrics_path: /metrics

  # Blackbox Exporter (endpoint monitoring)
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - 'https://{{ project_name }}.example.com/api/v1/health'
        - 'https://{{ project_name }}.example.com/docs'
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # ECS Service Discovery (if using AWS ECS)
  - job_name: 'ecs-service-discovery'
    ec2_sd_configs:
      - region: us-east-1
        port: 8000
    relabel_configs:
      - source_labels: [__meta_ec2_tag_Name]
        regex: '{{ project_name }}-.*'
        action: keep
      - source_labels: [__meta_ec2_private_ip]
        target_label: __address__
        replacement: '${1}:8000'
      - source_labels: [__meta_ec2_instance_id]
        target_label: instance
      - source_labels: [__meta_ec2_tag_Environment]
        target_label: environment

  # Kubernetes Service Discovery (if using K8s)
  - job_name: 'kubernetes-service-discovery'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - default
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        regex: '{{ project_name }}'
        action: keep
      - source_labels: [__meta_kubernetes_pod_ip]
        target_label: __address__
        replacement: '${1}:8000'
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      - source_labels: [__meta_kubernetes_namespace]
        target_label: namespace

# Recording rules for common metrics
recording_rules:
  - record: '{{ project_name }}:http_requests_total:rate5m'
    expr: rate(http_requests_total{job="{{ project_name }}-app"}[5m])
  
  - record: '{{ project_name }}:http_request_duration_seconds:rate5m'
    expr: rate(http_request_duration_seconds{job="{{ project_name }}-app"}[5m])
  
  - record: '{{ project_name }}:http_requests_in_flight:current'
    expr: http_requests_in_flight{job="{{ project_name }}-app"}
  
  - record: '{{ project_name }}:process_cpu_seconds_total:rate5m'
    expr: rate(process_cpu_seconds_total{job="{{ project_name }}-app"}[5m])
  
  - record: '{{ project_name }}:process_resident_memory_bytes:current'
    expr: process_resident_memory_bytes{job="{{ project_name }}-app"}

# Storage configuration
storage:
  tsdb:
    path: /prometheus
    retention.time: 30d
    retention.size: 10GB

# Remote write configuration (for long-term storage)
remote_write:
  - url: "http://remote-storage:9201/write"
    remote_timeout: 30s
    write_relabel_configs:
      - source_labels: [__name__]
        regex: '{{ project_name }}.*'
        action: keep

# Remote read configuration
remote_read:
  - url: "http://remote-storage:9201/read"
    read_timeout: 30s
    required_matchers:
      project: "{{ project_name }}"
