apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    function-pythonic.package: efc
  namespace: crossplane-system
  name: pythonic-composites
data:
  alert.py: |
    from pathlib import Path

    class EFCObservability(BaseComposite):

        def compose(self):
            self.provider = f"influxdb-{self.spec.influxdbInstance}"
            # create grafana folders
            folder_uid = self.create_folder()
            # create grafana datasource
            datasource_uid = self.get_ds_uid()
            self.create_dashboard(folder_uid)
            self.create_rule_group(datasource_uid)

        def create_folder(self):
            folder = self.resources.folder('oss.grafana.crossplane.io/v1alpha1', 'Folder')
            folder.metadata.labels.cluster = self.environment.cluster.name
            folder.spec.providerConfigRef.name = self.provider
            folder.spec.forProvider.title = self.spec.title
            return folder.status.atProvider.uid

        def create_dashboard(self, folder_uid):
            dashboard = self.resources.dashboard('oss.grafana.crossplane.io/v1alpha1', 'Dashboard')
            dashboard.metadata.name = self.metadata.name
            dashboard.metadata.labels.cluster = self.environment.cluster.name
            dashboard.spec.providerConfigRef.name = self.provider
            dashboard.spec.forProvider.folder = folder_uid
            dashboard.spec.forProvider.configJson = Path(__file__).with_name('dashboard.json').read_text()
            return dashboard.status.atProvider.uid

        def get_ds_uid(self):
            return self.requireds.datasource(
                'oss.grafana.crossplane.io/v1alpha1',
                'DataSource',
                name=f"influxdb-{self.spec.influxdbInstance}"
            )[0].status.atProvider.uid

        def create_rule_group(self, datasource_uid):
            rule_group = self.resources.rule_group('alerting.grafana.crossplane.io/v1alpha1', 'RuleGroup')
            rule_group.metadata.name = self.metadata.name
            rule_group.spec.forProvider.name = 'EFC'
            rule_group.metadata.labels.cluster = self.environment.cluster.name
            rule_group.spec.providerConfigRef.name = self.provider
            rule_group.spec.forProvider.folderSelector.matchLabels.cluster = self.environment.cluster.name
            rule_group.spec.forProvider.intervalSeconds = 300
            for ix, spec in enumerate(self.spec.rules):
                self.create_rule(spec, rule_group.spec.forProvider.rule[ix], datasource_uid)

        def create_rule(self, spec, rule, datasource_uid):
            rule.name = spec.name
            rule.isPaused = spec.pause
            rule.execErrState = 'Alerting'
            rule['for'] = '2m'
            rule.noDataState = 'NoData'
            rule.condition = 'B'
            rule.annotations.summary = f"{spec.name} backlog above {spec.threshold} events"
            rule.annotations.description = f"{spec.name} backlog which determines the health of the processing pipeline"
            rule.annotations.__dashboardUid__ = 'ec19dcc4-17d1-4837-9a1c-8a31b7ef96e0'
            rule.annotations.__panelId__ = '3'
            rule.annotations.runbook_url = 'https://helpsystems.atlassian.net/wiki/spaces/FP/pages/185696827/Event+Fusion+Center+EFC'
            rule.labels.product = 'event-fusion-center'
            rule.labels.fta_application = self.environment.cluster.tags.map['FTA-application']
            rule.labels.fta_environment = self.environment.cluster.tags.map['FTA-environment']
            rule.labels.pagerduty = f"efc-{spec.severity}"
            rule.notificationSettings[0].contactPoint = f"efc-{spec.severity}"
            rule.data[0].datasourceUid = datasource_uid
            rule.data[0].refId ='A'
            rule.data[0].queryType = ''
            rule.data[0].relativeTimeRange[0]['from'] = 600
            rule.data[0].relativeTimeRange[0].to = 0
            model = Map()
            model.refId = 'A'
            model.resultFormat = 'time_series'
            model.interval = ''
            model.intervalFactor = 2
            model.query = ' |> '.join([
                'from(bucket: "fortra-efc")',
                'range(start: -5m)',
                'filter(fn: (r) => r["_measurement"] == "stream")',
                f'filter(fn: (r) => r["_field"] == "{spec.name.lower()}")',
                'aggregateWindow(every: 5m, fn: sum, createEmpty: false)',
                'last()',
            ])
            rule.data[0].model = format(model, 'json')
            rule.data[1].datasourceUid = '-100'
            rule.data[1].refId = 'B'
            rule.data[1].queryType = ''
            rule.data[1].relativeTimeRange[0]['from'] = 0
            rule.data[1].relativeTimeRange[0].to = 0
            model = Map()
            model.refId = 'B'
            model.type = 'classic_conditions'
            model.hide = False
            model.intervalMs = 1000
            model.maxDataPoints = 43200
            model.datasource.type = '__expr__'
            model.datasource.uid = '-100'
            model.conditions[0].type = 'query'
            model.conditions[0].query.params[0] = 'A'
            model.conditions[0].evaluator.type = 'gt'
            model.conditions[0].evaluator.params[0] = spec.threshold
            model.conditions[0].operator.type = 'and'
            model.conditions[0].reducer.type = 'last'
            rule.data[1].model = format(model, 'json')
  dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "EFC Rest Check metrics",
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 2,
      "id": 163,
      "links": [],
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${promdata}"
          },
          "description": "% of used space from Opensearch data nodes",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  },
                  {
                    "color": "light-orange",
                    "value": 80
                  },
                  {
                    "color": "semi-dark-red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 6,
            "x": 0,
            "y": 0
          },
          "id": 6,
          "options": {
            "minVizHeight": 75,
            "minVizWidth": 75,
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true,
            "sizing": "auto"
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "expr": "sum(kubelet_volume_stats_used_bytes{cluster=\"efc-prod\", namespace=\"opensearch\", persistentvolumeclaim=~\"data-opensearch-nodes.*\"}) by (pods) / \nsum(kubelet_volume_stats_capacity_bytes{namespace=\"opensearch\", persistentvolumeclaim=~\"data-opensearch-nodes.*\"}) by (pods) * 100",
              "instant": false,
              "legendFormat": "__auto",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Storage Usage",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${promdata}"
          },
          "description": "Storage Capacity from Opensearch data nodes pvc.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "continuous-GrYlRd"
              },
              "decimals": 2,
              "fieldMinMax": false,
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  }
                ]
              },
              "unit": "TB"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 6,
            "x": 6,
            "y": 0
          },
          "id": 7,
          "options": {
            "displayMode": "lcd",
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": false
            },
            "maxVizHeight": 300,
            "minVizHeight": 16,
            "minVizWidth": 0,
            "namePlacement": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [],
              "fields": "",
              "values": false
            },
            "showUnfilled": true,
            "sizing": "manual",
            "text": {
              "titleSize": 76,
              "valueSize": 50
            },
            "valueMode": "color"
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "expr": "sum(kubelet_volume_stats_capacity_bytes{cluster=\"efc-prod\", namespace=\"opensearch\", persistentvolumeclaim=~\"data-opensearch-nodes.*\"}) by (pods) / (1000^4)",
              "instant": false,
              "legendFormat": "__auto",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Storage Capacity",
          "type": "bargauge"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${influxdata}"
          },
          "description": "Total of backlogged Integration events captured every 5 minutes.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 12,
                "gradientMode": "opacity",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineStyle": {
                  "fill": "solid"
                },
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "dashed"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  },
                  {
                    "color": "red",
                    "value": 500000
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDB-METRIC-EFC}"
              },
              "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"stream\")\n  |> filter(fn: (r) => r[\"_field\"] == \"integrationevents\")\n  |> aggregateWindow(every: 5m, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")",
              "refId": "A"
            }
          ],
          "title": "Integrations",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${influxdata}"
          },
          "description": "Total of backlogged Enrichments captured every 5 minutes.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 17,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "dashed"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  },
                  {
                    "color": "red",
                    "value": 50000
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 9
          },
          "id": 1,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDB-METRIC-EFC}"
              },
              "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"stream\")\n  |> filter(fn: (r) => r[\"_field\"] == \"enrichmentevents\")\n  |> aggregateWindow(every: 5m, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")",
              "refId": "A"
            }
          ],
          "title": "Enrichments",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${influxdata}"
          },
          "description": "Total of backlogged Bulk events captured every 5 minutes.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  },
                  {
                    "color": "red",
                    "value": 50000
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 9
          },
          "id": 2,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDB-METRIC-EFC}"
              },
              "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"stream\")\n  |> filter(fn: (r) => r[\"_field\"] == \"bulkevents\")\n  |> aggregateWindow(every: 5m, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")",
              "refId": "A"
            }
          ],
          "title": "OpenSearch",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${influxdata}"
          },
          "description": "Total of backlogged Rules captured every 5 minutes.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 17,
                "gradientMode": "opacity",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "dashed"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": 0
                  },
                  {
                    "color": "red",
                    "value": 50000
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 18
          },
          "id": 5,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.2.0-16677249643",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDB-METRIC-EFC}"
              },
              "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"stream\")\n  |> filter(fn: (r) => r[\"_field\"] == \"ruleevents\")\n  |> aggregateWindow(every: 5m, fn: sum, createEmpty: false)\n  |> yield(name: \"sum\")",
              "refId": "A"
            }
          ],
          "title": "Rules",
          "type": "timeseries"
        }
      ],
      "preload": false,
      "refresh": "",
      "schemaVersion": 41,
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {
              "text": "fortra-efc",
              "value": "fortra-efc"
            },
            "datasource": {
              "type": "influxdb",
              "uid": "${influxdata}"
            },
            "definition": "buckets()",
            "description": "InfluxDB bucket to select.",
            "hide": 2,
            "includeAll": false,
            "label": "bucket",
            "name": "bucket",
            "options": [],
            "query": {
              "query": "buckets()"
            },
            "refresh": 1,
            "regex": "/fortra-efc/",
            "type": "query"
          },
          {
            "current": {
              "text": "influxdb-efc-dev-metric",
              "value": "ceusvfs2fcv7kf"
            },
            "description": "InfluxDB datasource",
            "hide": 2,
            "includeAll": false,
            "label": "influxdata",
            "name": "influxdata",
            "options": [],
            "query": "influxdb",
            "refresh": 1,
            "regex": "/.*efc*/",
            "type": "datasource"
          },
          {
            "current": {
              "text": "grafanacloud-fortradev-prom",
              "value": "grafanacloud-prom"
            },
            "description": "Datasource for Prometheus",
            "hide": 2,
            "includeAll": false,
            "label": "promdata",
            "name": "promdata",
            "options": [],
            "query": "prometheus",
            "refresh": 1,
            "regex": "/.*fortra*/",
            "type": "datasource"
          }
        ]
      },
      "time": {
        "from": "now-3h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "browser",
      "title": "EFC",
      "uid": "rogzdf2",
      "version": 1
    }
