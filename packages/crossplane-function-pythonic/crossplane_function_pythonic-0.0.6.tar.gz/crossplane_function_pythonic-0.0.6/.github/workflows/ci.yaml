name: CI

on:
  push:
    branches:
    - main
    - release-*
  pull_request: {}
  workflow_dispatch:
    inputs:
      version:
        description: Package version (e.g. v0.1.0)
        required: false

env:
  # Common versions
  PYTHON_VERSION: '3.13.7' # TODO: Used?
  HATCH_VERSION: '1.12.0'
  DOCKER_BUILDX_VERSION: 'v0.26.1'

  # These environment variables are important to the Crossplane CLI install.sh
  # script. They determine what version it installs.
  XP_CHANNEL: stable
  XP_VERSION: current

  # This CI job will automatically push new builds to xpkg.upbound.io if the
  # XPKG_ACCESS_ID and XPKG_TOKEN secrets are set in the GitHub respository (or
  # organization) settings. Create a token at https://accounts.upbound.io.
  # XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}

  # The package to push, without a version tag. The default matches GitHub. For
  # example xpkg.upbound.io/crossplane/function-template-go.
  # XPKG: xpkg.upbound.io/${{ github.repository}}
  CROSSPLANE_REGORG: ghcr.io/${{ github.repository}}

  # The PyPi project version to push. The default is v0.0.0+gitdate-gitsha.
  PYPI_VERSION: ${{ inputs.version }}

  # The package version to push. The default is 0.0.0-gitsha.
  XPKG_VERSION: ${{ inputs.version }}

jobs:
  # lint:
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Setup Hatch
  #       run: pipx install hatch==1.14.1

  #     - name: Lint
  #       run: hatch run lint:check

  test:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Hatch
      run: pipx install hatch==1.14.1

    - name: Run Unit Tests
      run: hatch run test:ci

    #- name: Pytest coverage comment
    #  uses: MishaKav/pytest-coverage-comment@v1.1.54
    #  with:
    #    badge-title: Coverage
    #    title: Coverage Report
    #    pytest-xml-coverage-path: reports/pytest-coverage.xml
    #    junitxml-title: Unit Tests
    #    junitxml-path: reports/pytest-junit.xml
        #hide-badge: false
        #hide-report: false
        #create-new-comment: false
        #hide-comment: false
        #report-only-changed-files: false
        #remove-link-from-badge: false
        #unique-id-for-comment: python3.8

  build-pypi:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Hatch
        run: pipx install hatch==${{ env.HATCH_VERSION }}

      # If a version wasn't explicitly passed as a workflow_dispatch input we
      # default to version v0.0.0+<git-commit-date>-<git-short-sha>, for example
      # v0.0.0+20231101115142-1091066df799. This is a simple implementation of
      # Go's pseudo-versions: https://go.dev/ref/mod#pseudo-versions.
      - name: Set Default PyPI Project Version
        if: env.PYPI_VERSION == ''
        run: echo "PYPI_VERSION=v0.0.0+$(date -d@$(git show -s --format=%ct) +%Y%m%d%H%M%S)-$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV

      - name: Set PyPI Project Version
        run: hatch version ${{ env.PYPI_VERSION }}

      - name: Build Sdist and Wheel
        run: hatch build

      - name: Upload Sdist and Wheel to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: "dist/*"
          if-no-files-found: error
          retention-days: 1

  # We want to build most packages for the amd64 and arm64 architectures. To
  # speed this up we build single-platform packages in parallel. We then upload
  # those packages to GitHub as a build artifact. The push job downloads those
  # artifacts and pushes them as a single multi-platform package. 
  build-xpkg:
    needs:
      - build-pypi
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: true
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Wheel from GitHub
        uses: actions/download-artifact@v5
        with:
          name: dist
          pattern: '*.whl'
          path: dist

      # We ask Docker to use GitHub Action's native caching support to speed up
      # the build, per https://docs.docker.com/build/cache/backends/gha/.
      - name: Build Runtime
        id: image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: image
          build-args:
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          outputs: type=docker,dest=runtime-${{ matrix.arch }}.tar

      - name: Setup the Crossplane CLI
        run: "mkdir bin && cd bin && curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      - name: Build Package
        run: bin/crossplane xpkg build --package-file=${{ matrix.arch }}.xpkg --package-root=package/ --embed-runtime-image-tarball=runtime-${{ matrix.arch }}.tar

      - name: Upload Single-Platform Package
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.arch }}
          path: "*.xpkg"
          if-no-files-found: error
          retention-days: 1

  publish-pypi:
    # Don't publish unless we were run with an explicit version.
    if: ${{ inputs.version != '' }}
    needs:
      - build-xpkg # only publish if xpkg builds succeeds
    runs-on: ubuntu-24.04
    steps:
      - name: Download Sdist and Wheel from GitHub
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Setup Hatch
        run: pipx install hatch==${{ env.HATCH_VERSION }}

      - name: Publish to PyPI
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_API_TOKEN }}
        run: hatch publish --no-prompt

  # This job downloads the single-platform packages built by the build job, and
  # pushes them as a multi-platform package. We only push the package it the
  # XPKG_ACCESS_ID and XPKG_TOKEN secrets were provided.
  push-xpkg:
    needs:
      - build-xpkg
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Single-Platform Packages
        uses: actions/download-artifact@v4
        with:
          # See https://github.com/docker/build-push-action/blob/263435/README.md#summaries
          pattern: "!*.dockerbuild"
          path: .
          merge-multiple: true

      - name: Setup the Crossplane CLI
        run: "mkdir bin && cd bin && curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      # If a version wasn't explicitly passed as a workflow_dispatch input we
      # default to version v0.0.0-<git-commit-date>-<git-short-sha>, for example
      # v0.0.0-20231101115142-1091066df799. This is a simple implementation of
      # Go's pseudo-versions: https://go.dev/ref/mod#pseudo-versions.
      - name: Set Default Multi-Platform Package Version
        if: env.XPKG_VERSION == ''
        run: echo "XPKG_VERSION=v0.0.0-$(date -d@$(git show -s --format=%ct) +%Y%m%d%H%M%S)-$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV

      # - name: Login to Upbound
      #   uses: docker/login-action@v3
      #   if: env.XPKG_ACCESS_ID != ''
      #   with:
      #     registry: xpkg.upbound.io
      #     username: ${{ secrets.XPKG_ACCESS_ID }}
      #     password: ${{ secrets.XPKG_TOKEN }}

      # - name: Push Multi-Platform Package to Upbound
      #   if: env.XPKG_ACCESS_ID != ''
      #   run: "bin/crossplane --verbose xpkg push --package-files $(echo *.xpkg|tr ' ' ,) ${{ env.XPKG }}:${{ env.XPKG_VERSION }}"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Multi-Platform Package to GHCR
        run: "bin/crossplane --verbose xpkg push --package-files $(echo *.xpkg|tr ' ' ,) ${{ env.CROSSPLANE_REGORG }}:${{ env.XPKG_VERSION }}"
