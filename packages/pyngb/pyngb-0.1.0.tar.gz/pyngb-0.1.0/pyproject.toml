[project]
name = "pyngb"
version = "0.1.0"
description = "Unofficial parser for NETZSCH STA (Simultaneous Thermal Analysis) NGB instrument binary files. Not affiliated with, endorsed by, or approved by NETZSCH-GerÃ¤tebau GmbH."
readme = "README.md"
authors = [
    { name = "Grayson Bellamy", email = "gbellamy@umd.edu" }
]
license = { file = "LICENSE.txt" }
keywords = ["ngb", "netzsch", "sta", "thermal-analysis", "scientific-data", "binary-parsing", "unofficial"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"
dependencies = [
    "polars>=0.20.0",
    "pyarrow>=10.0.0",
    "numpy>=1.20.0",
    "scipy>=1.13.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
]
performance = [
    "psutil>=5.9.0",
    "memory_profiler>=0.60.0",
]
visualization = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",  # Optional for better plot styling
]

[project.urls]
Homepage = "https://github.com/GraysonBellamy/pyngb"
Documentation = "https://graysonbellamy.github.io/pyngb/"
Repository = "https://github.com/GraysonBellamy/pyngb.git"
Issues = "https://github.com/GraysonBellamy/pyngb/issues"
Changelog = "https://github.com/GraysonBellamy/pyngb/blob/main/CHANGELOG.md"

[project.scripts]
pyngb = "pyngb.api.loaders:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "ignore::RuntimeWarning:numpy",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by ruff formatter)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex (let's not worry about complexity for now)
    "B905",   # `zip()` without an explicit `strict=` parameter
    "UP007",  # Use `X | Y` for type annotations (not ready for this yet)
    "T201",   # Print statements (allow for debugging/CLI tools)
    "TID252", # Relative imports from parent modules (common in packages)
    "B006",   # Mutable default arguments (common pattern, can be addressed later)
    "B007",   # Loop control variable not used (common in iteration patterns)
    "B011",   # Assert False (used in tests)
    "B017",   # pytest.raises(Exception) - allow for broad exception testing
    "PT001",  # Use @pytest.fixture over @pytest.fixture() - allow parentheses for clarity
    "PT011",  # pytest.raises(Exception) is too broad - allow for now
    "PT012",  # pytest.raises() should contain single statement - allow for now
    "PT015",  # Assertion always fails - allow in tests
    "PT017",  # Assert on exception in except block - common test pattern
    "PT018",  # Assertion should be broken down - allow complex assertions
    "PT023",  # Use @pytest.mark.slow over @pytest.mark.slow() - allow parentheses for clarity
    "RET504", # Unnecessary assignment before return - allow for clarity
    "SIM105", # Use contextlib.suppress - allow try/except patterns
    "SIM117", # Use single with statement - allow nested contexts
    "SIM118", # Use key in dict instead of key in dict.keys() - allow for clarity
    "ARG002", # Unused method argument - common in overrides/interfaces
    "I001",   # Import block is un-sorted - handled by pre-commit ruff formatting
]
per-file-ignores = {}

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can be stricter later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Disabled to avoid unused ignore comments
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "polars.*",
    "pyarrow.*",
    "numpy.*",
    "psutil.*",
    "memory_profiler.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection for subprocess

[tool.pydocstyle]
convention = "numpy"
add-ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line (allow multi-line)
    "D102",  # Missing docstring in public method (too strict for now)
    "D301",  # Use r""" if any backslashes in docstring (allow regular strings)
    "D401",  # First line should be in imperative mood (too strict)
    "D406",  # Section name should end with newline (formatting preference)
    "D407",  # Missing dashed underline after section (formatting preference)
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
fail-under = 80
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "psutil>=6.1.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.8",
]
build = [
    "build>=1.3.0",
]
