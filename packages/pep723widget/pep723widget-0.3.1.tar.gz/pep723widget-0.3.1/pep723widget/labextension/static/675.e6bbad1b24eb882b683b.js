"use strict";(self.webpackChunkpep723widget=self.webpackChunkpep723widget||[]).push([[675],{675:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var o=n(361),a=n(427),i=n(134),s=n(256),d=n(310),c=n(269);async function l(e="",t={}){const n=c.ServerConnection.makeSettings(),o=d.URLExt.join(n.baseUrl,"pep723widget",e);let a;try{a=await c.ServerConnection.makeRequest(o,t,n)}catch(e){throw new c.ServerConnection.NetworkError(e)}let i=await a.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",a)}if(!a.ok)throw new c.ServerConnection.ResponseError(a,i.message||i);return i}class r extends s.Widget{constructor(e){super(),this._latestLockfileContent=null,this._context=e,this.addClass("pep723-notebook-widget"),this.title.label="PEP 723 Viewer",this.title.closable=!0,this.title.iconClass="jp-NotebookIcon",this._createContent(),this._context.model.contentChanged.connect(this._onContentChanged,this)}_createContent(){const e=document.createElement("div");e.className="pep723-container";const t=document.createElement("h2");t.textContent="PEP 723 Dependency Manager",e.appendChild(t);const n=this._validateNotebook();if(!n.valid)return n.needsInitialization?this._createInitializationPage(e):this._createErrorPage(e,n.error),void this.node.appendChild(e);this._createMainInterface(e),this.node.appendChild(e)}_createInitializationPage(e){const t=document.createElement("div");t.className="pep723-init",t.innerHTML='\n      <div class="init-icon">üìã</div>\n      <h3>Script metadata not found</h3>\n      <p>This notebook doesn\'t have PEP 723 script metadata configured. Initialize it to start managing dependencies.</p>\n      <div class="init-help">\n        <h4>What will happen:</h4>\n        <ul>\n          <li>A PEP 723 metadata cell will be added to the beginning of your notebook</li>\n          <li>The metadata will include basic Python requirements</li>\n          <li>A lockfile will be generated and stored in the notebook metadata</li>\n        </ul>\n      </div>\n    ';const n=document.createElement("button");n.textContent="Add metadata cell",n.className="init-btn",n.onclick=()=>this._initializePep723();const o=document.createElement("div");o.id="init-status-message",o.className="status-message",t.appendChild(n),t.appendChild(o),e.appendChild(t)}_createErrorPage(e,t){const n=document.createElement("div");n.className="pep723-error",n.innerHTML=`\n      <div class="error-icon">‚ö†Ô∏è</div>\n      <h3>Configuration Error</h3>\n      <p>${t}</p>\n      <div class="error-help">\n        <h4>Requirements:</h4>\n        <ul>\n          <li>PEP 723 metadata must be in the first cell of the notebook</li>\n          <li>The cell must contain only PEP 723 metadata and whitespace</li>\n          <li>No other code or comments should be present in the cell</li>\n        </ul>\n      </div>\n    `,e.appendChild(n)}_createMainInterface(e){const t=document.createElement("div");t.className="metadata-section",this._updateMetadataContent(t),e.appendChild(t);const n=document.createElement("div");n.className="dependency-form",this._createDependencyForm(n),e.appendChild(n);const o=document.createElement("div");o.className="tree-section",this._createTreeDisplay(o),e.appendChild(o),this._loadInitialTree()}_createDependencyForm(e){const t=document.createElement("h3");t.textContent="Add New Dependency",e.appendChild(t);const n=document.createElement("div");n.className="form-group";const o=document.createElement("input");o.type="text",o.id="dependency-input",o.placeholder="e.g., requests, pandas>=2.0.0, numpy[dev]",o.className="dependency-input",o.addEventListener("keydown",e=>{"Enter"===e.key&&this._addDependency()});const a=document.createElement("button");a.textContent="Add Dependency",a.className="add-dependency-btn",a.onclick=()=>this._addDependency();const i=document.createElement("div");i.id="status-message",i.className="status-message",n.appendChild(o),n.appendChild(a),n.appendChild(i),e.appendChild(n)}_validateNotebook(){const e=this._context.model.cells;if(0===e.length)return{valid:!1,error:"Notebook has no cells."};const t=/^# \/\/\/ [a-zA-Z0-9-]+$/m;let n=!1,o=-1;for(let a=0;a<e.length;a++){const i=e.get(a);if("code"===i.type){const e=i.sharedModel.getSource();if(t.test(e)){n=!0,o=a;break}}}if(!n)return{valid:!1,needsInitialization:!0};if(0!==o)return{valid:!1,error:`PEP 723 metadata found in cell ${o+1}. Metadata must only be in the first cell.`};const a=e.get(0);if("code"!==a.type)return{valid:!1,error:"First cell must be a code cell."};const i=a.sharedModel.getSource();if(!/^# \/\/\/ [a-zA-Z0-9-]+$\s(^#( .*)?$\s)+^# \/\/\/$/m.test(i))return{valid:!1,error:"First cell must contain valid PEP 723 script metadata."};const s=i.split("\n");for(const e of s){const t=e.trim();if(""!==t&&!t.match(/^# \/\/\/ [a-zA-Z0-9-]+$/)&&!t.match(/^#( .*)?$/)&&!t.match(/^# \/\/\/$/))return{valid:!1,error:"First cell must contain only PEP 723 metadata and whitespace. Found non-metadata content."}}for(let n=1;n<e.length;n++){const o=e.get(n);if("code"===o.type){const e=o.sharedModel.getSource();if(t.test(e))return{valid:!1,error:`PEP 723 metadata found in cell ${n+1}. Metadata must only be in the first cell.`}}}return{valid:!0}}_updateMetadataContent(e){e.innerHTML="<h3>Current Script Metadata</h3>";const t=this._context.model.cells.get(0).sharedModel.getSource(),n=document.createElement("div");n.className="current-metadata",n.innerHTML=`<pre>${t}</pre>`,e.appendChild(n)}_createTreeDisplay(e){const t=document.createElement("h3");t.className="tree-title",this._updateTreeTitle(t),e.appendChild(t);const n=document.createElement("div");n.className="tree-content",n.innerHTML="<p>Loading dependency tree...</p>",e.appendChild(n);const o=document.createElement("button");o.className="lock-btn",o.onclick=()=>this._toggleLock(),this._updateLockButton(o),e.appendChild(o)}_updateTreeTitle(e){const t=e||this.node.querySelector(".tree-title");if(!t)return;const n=void 0!==this._context.model.getMetadata("uv.lock");t.textContent=n?"üîí Dependency Tree":"üîì Dependency Tree";const o=this.node.querySelector(".tree-content");o&&(n?o.classList.remove("unlocked"):o.classList.add("unlocked"))}_updateTreeDisplay(e){const t=this.node.querySelector(".tree-content");t&&void 0!==e&&(""===e.trim()?t.innerHTML="<p>No dependencies</p>":t.innerHTML=`<pre>${e}</pre>`),this._updateTreeTitle(),this._updateLockButton()}async _loadInitialTree(){try{const e=this._context.model.cells.get(0).sharedModel.getSource(),t=this._context.model.getMetadata("uv.lock"),n=await l("get-tree",{method:"POST",body:JSON.stringify({script_metadata:e,lockfile_content:t||null})});this._latestLockfileContent=n.lockfile_content,this._updateTreeDisplay(n.tree_output)}catch(e){console.error("Error loading initial tree:",e);const t=this.node.querySelector(".tree-content");t&&(t.innerHTML="<p>Failed to load dependency tree.</p>"),this._updateTreeTitle()}}_updateLockButton(e){const t=e||this.node.querySelector(".lock-btn");if(!t)return;const n=void 0!==this._context.model.getMetadata("uv.lock");t.textContent=n?"Unlock":"Lock",t.className=n?"lock-btn unlock":"lock-btn lock"}_toggleLock(){void 0!==this._context.model.getMetadata("uv.lock")?this._context.model.deleteMetadata("uv.lock"):this._latestLockfileContent&&this._context.model.setMetadata("uv.lock",this._latestLockfileContent),this._updateTreeTitle(),this._updateLockButton()}async _addDependency(){const e=this.node.querySelector("#dependency-input"),t=this.node.querySelector(".add-dependency-btn"),n=this.node.querySelector("#status-message"),o=e.value.trim();if(o){e.disabled=!0,t.disabled=!0,this._showStatus(n,"Adding dependency...","loading");try{const t=this._context.model.cells.get(0),a=t.sharedModel.getSource(),i=this._context.model.getMetadata("uv.lock"),s=await l("add-dependency",{method:"POST",body:JSON.stringify({script_metadata:a,dependency:o,lockfile_content:i||null})});t.sharedModel.setSource(s.updated_metadata),this._latestLockfileContent=s.lockfile_content,void 0!==i&&s.lockfile_content&&this._context.model.setMetadata("uv.lock",s.lockfile_content),this._updateMetadataContent(this.node.querySelector(".metadata-section")),this._updateTreeDisplay(s.tree_output),e.value="",this._showStatus(n,`Successfully added "${o}"`,"success")}catch(e){console.error("Error adding dependency:",e);const t=e instanceof Error?e.message:"Failed to add dependency";this._showStatus(n,`Error: ${t}`,"error")}finally{e.disabled=!1,t.disabled=!1}}else this._showStatus(n,"Please enter a dependency name.","error")}async _initializePep723(){const e=this.node.querySelector(".init-btn"),t=this.node.querySelector("#init-status-message");e.disabled=!0,this._showStatus(t,"Initializing PEP 723 metadata...","loading");try{const e=await l("initialize",{method:"POST",body:JSON.stringify({})});this._context.model.sharedModel.insertCell(0,{cell_type:"code",source:e.initial_metadata,metadata:{jupyter:{source_hidden:!0}}}),e.lockfile_content&&this._context.model.setMetadata("uv.lock",e.lockfile_content),this._showStatus(t,"PEP 723 metadata initialized successfully!","success"),setTimeout(()=>{this.node.innerHTML="",this._createContent()},1500)}catch(n){console.error("Error initializing PEP 723:",n);const o=n instanceof Error?n.message:"Failed to initialize metadata";this._showStatus(t,`Error: ${o}`,"error"),e.disabled=!1}}_showStatus(e,t,n){e.textContent=t,e.className=`status-message ${n}`,"loading"!==n&&setTimeout(()=>{e.textContent="",e.className="status-message"},3e3)}_onContentChanged(){this.node.innerHTML="",this._createContent()}dispose(){this._context.model.contentChanged.disconnect(this._onContentChanged,this),super.dispose()}}class p extends i.ABCWidgetFactory{createNewWidget(e){const t=new r(e),n=new i.DocumentWidget({content:t,context:e});return n.title.label=`PEP 723: ${e.localPath}`,n}}const h={id:"pep723widget:plugin",description:"A JupyterLab extension to edit pep723 inline script metadata in notebooks.",autoStart:!0,requires:[a.IDocumentManager],optional:[o.ISettingRegistry],activate:(e,t,n)=>{console.log("JupyterLab extension pep723widget is activated!");const o=new p({name:"pep723-notebook-viewer",label:"PEP 723 Viewer",fileTypes:["notebook"],defaultFor:[],canStartKernel:!1,shutdownOnClose:!1,modelName:"notebook"});t.registry.addWidgetFactory(o),n&&n.load(h.id).then(e=>{console.log("pep723widget settings loaded:",e.composite)}).catch(e=>{console.error("Failed to load settings for pep723widget.",e)}),l("get-example").then(e=>{console.log(e)}).catch(e=>{console.error(`The pep723widget server extension appears to be missing.\n${e}`)})}},u=h}}]);