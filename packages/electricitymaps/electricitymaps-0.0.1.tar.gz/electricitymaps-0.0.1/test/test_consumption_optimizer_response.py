# coding: utf-8

"""
    Electricity Maps API

    Electricity Maps API

    The version of the OpenAPI document: 1.0.0
    Contact: hello@electricitymaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi.models.consumption_optimizer_response import ConsumptionOptimizerResponse

class TestConsumptionOptimizerResponse(unittest.TestCase):
    """ConsumptionOptimizerResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsumptionOptimizerResponse:
        """Test ConsumptionOptimizerResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsumptionOptimizerResponse`
        """
        model = ConsumptionOptimizerResponse()
        if include_optional:
            return ConsumptionOptimizerResponse(
                optimal_start_time = '2025-08-12T17:00:00+00:00',
                optimal_location = None,
                optimization_output = openapi.models.consumption_optimizer_response_optimization_output.ConsumptionOptimizerResponse_optimizationOutput(
                    metric_value_immediate_execution = 100, 
                    metric_value_optimal_execution = 50, 
                    metric_value_start_window_execution = 80.5, 
                    metric_unit = 'gCO2/kWh', 
                    optimization_metric = 'flow-traced_carbon_intensity', 
                    zone_key = 'DK-DK2', )
            )
        else:
            return ConsumptionOptimizerResponse(
                optimal_start_time = '2025-08-12T17:00:00+00:00',
                optimal_location = None,
                optimization_output = openapi.models.consumption_optimizer_response_optimization_output.ConsumptionOptimizerResponse_optimizationOutput(
                    metric_value_immediate_execution = 100, 
                    metric_value_optimal_execution = 50, 
                    metric_value_start_window_execution = 80.5, 
                    metric_unit = 'gCO2/kWh', 
                    optimization_metric = 'flow-traced_carbon_intensity', 
                    zone_key = 'DK-DK2', ),
        )
        """

    def testConsumptionOptimizerResponse(self):
        """Test ConsumptionOptimizerResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
