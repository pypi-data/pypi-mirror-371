# coding: utf-8

"""
    Electricity Maps API

    Electricity Maps API

    The version of the OpenAPI document: 1.0.0
    Contact: hello@electricitymaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi.models.past_range_response_power_breakdown import PastRangeResponsePowerBreakdown

class TestPastRangeResponsePowerBreakdown(unittest.TestCase):
    """PastRangeResponsePowerBreakdown unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PastRangeResponsePowerBreakdown:
        """Test PastRangeResponsePowerBreakdown
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PastRangeResponsePowerBreakdown`
        """
        model = PastRangeResponsePowerBreakdown()
        if include_optional:
            return PastRangeResponsePowerBreakdown(
                zone = '',
                data = [
                    openapi.models.power_breakdown.PowerBreakdown(
                        zone = '', 
                        datetime = '', 
                        updated_at = '', 
                        created_at = '', 
                        power_consumption_breakdown = openapi.models.power_consumption_breakdown.powerConsumptionBreakdown(), 
                        power_production_breakdown = openapi.models.power_consumption_breakdown.powerConsumptionBreakdown(), 
                        power_import_breakdown = openapi.models.power_import_breakdown.powerImportBreakdown(), 
                        power_export_breakdown = openapi.models.power_import_breakdown.powerImportBreakdown(), 
                        fossil_free_percentage = 1.337, 
                        renewable_percentage = 1.337, 
                        power_consumption_total = 1.337, 
                        power_production_total = 1.337, 
                        power_import_total = 1.337, 
                        power_export_total = 1.337, )
                    ],
                temporal_granularity = '15_minutes',
                aggregation_period = '15_minutes'
            )
        else:
            return PastRangeResponsePowerBreakdown(
                zone = '',
                data = [
                    openapi.models.power_breakdown.PowerBreakdown(
                        zone = '', 
                        datetime = '', 
                        updated_at = '', 
                        created_at = '', 
                        power_consumption_breakdown = openapi.models.power_consumption_breakdown.powerConsumptionBreakdown(), 
                        power_production_breakdown = openapi.models.power_consumption_breakdown.powerConsumptionBreakdown(), 
                        power_import_breakdown = openapi.models.power_import_breakdown.powerImportBreakdown(), 
                        power_export_breakdown = openapi.models.power_import_breakdown.powerImportBreakdown(), 
                        fossil_free_percentage = 1.337, 
                        renewable_percentage = 1.337, 
                        power_consumption_total = 1.337, 
                        power_production_total = 1.337, 
                        power_import_total = 1.337, 
                        power_export_total = 1.337, )
                    ],
                temporal_granularity = '15_minutes',
        )
        """

    def testPastRangeResponsePowerBreakdown(self):
        """Test PastRangeResponsePowerBreakdown"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
