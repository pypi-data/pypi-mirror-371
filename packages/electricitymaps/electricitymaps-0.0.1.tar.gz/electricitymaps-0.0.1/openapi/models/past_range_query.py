# coding: utf-8

"""
    Electricity Maps API

    Electricity Maps API

    The version of the OpenAPI document: 1.0.0
    Contact: hello@electricitymaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi.models.emission_factor_type import EmissionFactorType
from openapi.models.temporal_granularity import TemporalGranularity
from typing import Optional, Set
from typing_extensions import Self

class PastRangeQuery(BaseModel):
    """
    PastRangeQuery
    """ # noqa: E501
    start: StrictStr = Field(description="The start datetime to get the data for.")
    end: StrictStr = Field(description="The end datetime to get the data for.")
    temporal_granularity: Optional[TemporalGranularity] = Field(default=None, alias="temporalGranularity")
    zone_key: Optional[StrictStr] = Field(default=None, description="An Electricity Maps zone key.", alias="zoneKey")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the location to get the data for.")
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude of the location to get the data for.")
    data_center_provider: Optional[StrictStr] = Field(default=None, description="The provider of the data center to get the data for.", alias="dataCenterProvider")
    data_center_region: Optional[StrictStr] = Field(default=None, description="The region of the data center to get the data for.", alias="dataCenterRegion")
    disable_caller_lookup: Optional[StrictStr] = Field(default='false', description="If true, the fallback IP-based zone lookup will not be performed.", alias="disableCallerLookup")
    disable_estimations: Optional[StrictStr] = Field(default='false', description="If true, the response will exclude estimated data points", alias="disableEstimations")
    emission_factor_type: Optional[EmissionFactorType] = Field(default=None, alias="emissionFactorType")
    __properties: ClassVar[List[str]] = ["start", "end", "temporalGranularity", "zoneKey", "lat", "lon", "dataCenterProvider", "dataCenterRegion", "disableCallerLookup", "disableEstimations", "emissionFactorType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PastRangeQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PastRangeQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start": obj.get("start"),
            "end": obj.get("end"),
            "temporalGranularity": obj.get("temporalGranularity"),
            "zoneKey": obj.get("zoneKey"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "dataCenterProvider": obj.get("dataCenterProvider"),
            "dataCenterRegion": obj.get("dataCenterRegion"),
            "disableCallerLookup": obj.get("disableCallerLookup") if obj.get("disableCallerLookup") is not None else 'false',
            "disableEstimations": obj.get("disableEstimations") if obj.get("disableEstimations") is not None else 'false',
            "emissionFactorType": obj.get("emissionFactorType")
        })
        return _obj


