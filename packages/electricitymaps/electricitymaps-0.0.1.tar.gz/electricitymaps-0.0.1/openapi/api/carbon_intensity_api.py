# coding: utf-8

"""
    Electricity Maps API

    Electricity Maps API

    The version of the OpenAPI document: 1.0.0
    Contact: hello@electricitymaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi.models.carbon_intensity import CarbonIntensity
from openapi.models.carbon_intensity_forecast_response import CarbonIntensityForecastResponse
from openapi.models.emission_factor_type import EmissionFactorType
from openapi.models.forecast_environment import ForecastEnvironment
from openapi.models.history_response_carbon_intensity import HistoryResponseCarbonIntensity
from openapi.models.past_range_response_carbon_intensity import PastRangeResponseCarbonIntensity
from openapi.models.past_response_carbon_intensity import PastResponseCarbonIntensity
from openapi.models.temporal_granularity import TemporalGranularity

from openapi.api_client import ApiClient, RequestSerialized
from openapi.api_response import ApiResponse
from openapi.rest import RESTResponseType


class CarbonIntensityAPI:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_carbon_intensity_forecast(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        horizon_hours: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of hours ahead to forecast.")] = None,
        environment: Annotated[Optional[ForecastEnvironment], Field(description="The environment to use for the forecast.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CarbonIntensityForecastResponse:
        """Carbon Intensity Forecast

        Get the carbon intensity forecast for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param horizon_hours: The number of hours ahead to forecast.
        :type horizon_hours: float
        :param environment: The environment to use for the forecast.
        :type environment: ForecastEnvironment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_forecast_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            horizon_hours=horizon_hours,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensityForecastResponse",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_carbon_intensity_forecast_with_http_info(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        horizon_hours: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of hours ahead to forecast.")] = None,
        environment: Annotated[Optional[ForecastEnvironment], Field(description="The environment to use for the forecast.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CarbonIntensityForecastResponse]:
        """Carbon Intensity Forecast

        Get the carbon intensity forecast for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param horizon_hours: The number of hours ahead to forecast.
        :type horizon_hours: float
        :param environment: The environment to use for the forecast.
        :type environment: ForecastEnvironment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_forecast_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            horizon_hours=horizon_hours,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensityForecastResponse",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_carbon_intensity_forecast_without_preload_content(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        horizon_hours: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of hours ahead to forecast.")] = None,
        environment: Annotated[Optional[ForecastEnvironment], Field(description="The environment to use for the forecast.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Carbon Intensity Forecast

        Get the carbon intensity forecast for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param horizon_hours: The number of hours ahead to forecast.
        :type horizon_hours: float
        :param environment: The environment to use for the forecast.
        :type environment: ForecastEnvironment
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_forecast_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            horizon_hours=horizon_hours,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensityForecastResponse",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_carbon_intensity_forecast_serialize(
        self,
        temporal_granularity,
        zone_key,
        lat,
        lon,
        data_center_provider,
        data_center_region,
        disable_caller_lookup,
        horizon_hours,
        environment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if temporal_granularity is not None:
            
            _query_params.append(('temporalGranularity', temporal_granularity.value))
            
        if zone_key is not None:
            
            _query_params.append(('zoneKey', zone_key))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if data_center_provider is not None:
            
            _query_params.append(('dataCenterProvider', data_center_provider))
            
        if data_center_region is not None:
            
            _query_params.append(('dataCenterRegion', data_center_region))
            
        if disable_caller_lookup is not None:
            
            _query_params.append(('disableCallerLookup', disable_caller_lookup))
            
        if horizon_hours is not None:
            
            _query_params.append(('horizonHours', horizon_hours))
            
        if environment is not None:
            
            _query_params.append(('environment', environment.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/carbon-intensity/forecast',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_carbon_intensity_history(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HistoryResponseCarbonIntensity:
        """Carbon Intensity History

        Get the last 24 hours of carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_history_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoryResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_carbon_intensity_history_with_http_info(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HistoryResponseCarbonIntensity]:
        """Carbon Intensity History

        Get the last 24 hours of carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_history_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoryResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_carbon_intensity_history_without_preload_content(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Carbon Intensity History

        Get the last 24 hours of carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_history_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoryResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_carbon_intensity_history_serialize(
        self,
        temporal_granularity,
        zone_key,
        lat,
        lon,
        data_center_provider,
        data_center_region,
        disable_caller_lookup,
        disable_estimations,
        emission_factor_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if temporal_granularity is not None:
            
            _query_params.append(('temporalGranularity', temporal_granularity.value))
            
        if zone_key is not None:
            
            _query_params.append(('zoneKey', zone_key))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if data_center_provider is not None:
            
            _query_params.append(('dataCenterProvider', data_center_provider))
            
        if data_center_region is not None:
            
            _query_params.append(('dataCenterRegion', data_center_region))
            
        if disable_caller_lookup is not None:
            
            _query_params.append(('disableCallerLookup', disable_caller_lookup))
            
        if disable_estimations is not None:
            
            _query_params.append(('disableEstimations', disable_estimations))
            
        if emission_factor_type is not None:
            
            _query_params.append(('emissionFactorType', emission_factor_type.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/carbon-intensity/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_carbon_intensity_latest(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CarbonIntensity:
        """Carbon Intensity Latest

        Get the latest carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_latest_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_carbon_intensity_latest_with_http_info(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CarbonIntensity]:
        """Carbon Intensity Latest

        Get the latest carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_latest_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_carbon_intensity_latest_without_preload_content(
        self,
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Carbon Intensity Latest

        Get the latest carbon intensity for a zone

        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_latest_serialize(
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_carbon_intensity_latest_serialize(
        self,
        temporal_granularity,
        zone_key,
        lat,
        lon,
        data_center_provider,
        data_center_region,
        disable_caller_lookup,
        disable_estimations,
        emission_factor_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if temporal_granularity is not None:
            
            _query_params.append(('temporalGranularity', temporal_granularity.value))
            
        if zone_key is not None:
            
            _query_params.append(('zoneKey', zone_key))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if data_center_provider is not None:
            
            _query_params.append(('dataCenterProvider', data_center_provider))
            
        if data_center_region is not None:
            
            _query_params.append(('dataCenterRegion', data_center_region))
            
        if disable_caller_lookup is not None:
            
            _query_params.append(('disableCallerLookup', disable_caller_lookup))
            
        if disable_estimations is not None:
            
            _query_params.append(('disableEstimations', disable_estimations))
            
        if emission_factor_type is not None:
            
            _query_params.append(('emissionFactorType', emission_factor_type.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/carbon-intensity/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_carbon_intensity_past(
        self,
        dt: Annotated[StrictStr, Field(description="The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PastResponseCarbonIntensity:
        """Carbon Intensity Past

        Get the carbon intensity for a zone at a given datetime

        :param dt: The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested. (required)
        :type dt: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_serialize(
            dt=dt,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_carbon_intensity_past_with_http_info(
        self,
        dt: Annotated[StrictStr, Field(description="The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PastResponseCarbonIntensity]:
        """Carbon Intensity Past

        Get the carbon intensity for a zone at a given datetime

        :param dt: The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested. (required)
        :type dt: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_serialize(
            dt=dt,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_carbon_intensity_past_without_preload_content(
        self,
        dt: Annotated[StrictStr, Field(description="The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Carbon Intensity Past

        Get the carbon intensity for a zone at a given datetime

        :param dt: The datetime to get the data for. By default this needs to be the specific hour unless another temporal granularity is requested. (required)
        :type dt: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_serialize(
            dt=dt,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_carbon_intensity_past_serialize(
        self,
        dt,
        temporal_granularity,
        zone_key,
        lat,
        lon,
        data_center_provider,
        data_center_region,
        disable_caller_lookup,
        disable_estimations,
        emission_factor_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if dt is not None:
            
            _query_params.append(('datetime', dt))
            
        if temporal_granularity is not None:
            
            _query_params.append(('temporalGranularity', temporal_granularity.value))
            
        if zone_key is not None:
            
            _query_params.append(('zoneKey', zone_key))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if data_center_provider is not None:
            
            _query_params.append(('dataCenterProvider', data_center_provider))
            
        if data_center_region is not None:
            
            _query_params.append(('dataCenterRegion', data_center_region))
            
        if disable_caller_lookup is not None:
            
            _query_params.append(('disableCallerLookup', disable_caller_lookup))
            
        if disable_estimations is not None:
            
            _query_params.append(('disableEstimations', disable_estimations))
            
        if emission_factor_type is not None:
            
            _query_params.append(('emissionFactorType', emission_factor_type.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/carbon-intensity/past',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_carbon_intensity_past_range(
        self,
        start: Annotated[StrictStr, Field(description="The start datetime to get the data for.")],
        end: Annotated[StrictStr, Field(description="The end datetime to get the data for.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PastRangeResponseCarbonIntensity:
        """Carbon Intensity Past Range

        Get the carbon intensity for a zone at a given datetime range

        :param start: The start datetime to get the data for. (required)
        :type start: str
        :param end: The end datetime to get the data for. (required)
        :type end: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_range_serialize(
            start=start,
            end=end,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastRangeResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_carbon_intensity_past_range_with_http_info(
        self,
        start: Annotated[StrictStr, Field(description="The start datetime to get the data for.")],
        end: Annotated[StrictStr, Field(description="The end datetime to get the data for.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PastRangeResponseCarbonIntensity]:
        """Carbon Intensity Past Range

        Get the carbon intensity for a zone at a given datetime range

        :param start: The start datetime to get the data for. (required)
        :type start: str
        :param end: The end datetime to get the data for. (required)
        :type end: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_range_serialize(
            start=start,
            end=end,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastRangeResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_carbon_intensity_past_range_without_preload_content(
        self,
        start: Annotated[StrictStr, Field(description="The start datetime to get the data for.")],
        end: Annotated[StrictStr, Field(description="The end datetime to get the data for.")],
        temporal_granularity: Annotated[Optional[TemporalGranularity], Field(description="The temporal granularity of the data to get.")] = None,
        zone_key: Annotated[Optional[StrictStr], Field(description="An Electricity Maps zone key.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of the location to get the data for.")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of the location to get the data for.")] = None,
        data_center_provider: Annotated[Optional[StrictStr], Field(description="The provider of the data center to get the data for.")] = None,
        data_center_region: Annotated[Optional[StrictStr], Field(description="The region of the data center to get the data for.")] = None,
        disable_caller_lookup: Annotated[Optional[StrictStr], Field(description="If true, the fallback IP-based zone lookup will not be performed.")] = None,
        disable_estimations: Annotated[Optional[StrictStr], Field(description="If true, the response will exclude estimated data points")] = None,
        emission_factor_type: Annotated[Optional[EmissionFactorType], Field(description="The type of emission factor to use.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Carbon Intensity Past Range

        Get the carbon intensity for a zone at a given datetime range

        :param start: The start datetime to get the data for. (required)
        :type start: str
        :param end: The end datetime to get the data for. (required)
        :type end: str
        :param temporal_granularity: The temporal granularity of the data to get.
        :type temporal_granularity: TemporalGranularity
        :param zone_key: An Electricity Maps zone key.
        :type zone_key: str
        :param lat: Latitude of the location to get the data for.
        :type lat: float
        :param lon: Longitude of the location to get the data for.
        :type lon: float
        :param data_center_provider: The provider of the data center to get the data for.
        :type data_center_provider: str
        :param data_center_region: The region of the data center to get the data for.
        :type data_center_region: str
        :param disable_caller_lookup: If true, the fallback IP-based zone lookup will not be performed.
        :type disable_caller_lookup: str
        :param disable_estimations: If true, the response will exclude estimated data points
        :type disable_estimations: str
        :param emission_factor_type: The type of emission factor to use.
        :type emission_factor_type: EmissionFactorType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_carbon_intensity_past_range_serialize(
            start=start,
            end=end,
            temporal_granularity=temporal_granularity,
            zone_key=zone_key,
            lat=lat,
            lon=lon,
            data_center_provider=data_center_provider,
            data_center_region=data_center_region,
            disable_caller_lookup=disable_caller_lookup,
            disable_estimations=disable_estimations,
            emission_factor_type=emission_factor_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PastRangeResponseCarbonIntensity",
            '400': "InputError",
            '401': "UnauthorizedError",
            '404': "NoDataError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_carbon_intensity_past_range_serialize(
        self,
        start,
        end,
        temporal_granularity,
        zone_key,
        lat,
        lon,
        data_center_provider,
        data_center_region,
        disable_caller_lookup,
        disable_estimations,
        emission_factor_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if temporal_granularity is not None:
            
            _query_params.append(('temporalGranularity', temporal_granularity.value))
            
        if zone_key is not None:
            
            _query_params.append(('zoneKey', zone_key))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if data_center_provider is not None:
            
            _query_params.append(('dataCenterProvider', data_center_provider))
            
        if data_center_region is not None:
            
            _query_params.append(('dataCenterRegion', data_center_region))
            
        if disable_caller_lookup is not None:
            
            _query_params.append(('disableCallerLookup', disable_caller_lookup))
            
        if disable_estimations is not None:
            
            _query_params.append(('disableEstimations', disable_estimations))
            
        if emission_factor_type is not None:
            
            _query_params.append(('emissionFactorType', emission_factor_type.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'authToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/carbon-intensity/past-range',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


