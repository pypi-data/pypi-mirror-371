# coding: utf-8

"""
    Electricity Maps API

    Electricity Maps API

    The version of the OpenAPI document: 1.0.0
    Contact: hello@electricitymaps.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from openapi.models.optimization_metric import OptimizationMetric
from typing import Optional, Set
from typing_extensions import Self

class ConsumptionOptimizerResponseOptimizationOutput(BaseModel):
    """
    ConsumptionOptimizerResponseOptimizationOutput
    """ # noqa: E501
    metric_value_immediate_execution: Union[StrictFloat, StrictInt] = Field(description="The metric value if the optimal start time is the immediate execution", alias="metricValueImmediateExecution")
    metric_value_optimal_execution: Union[StrictFloat, StrictInt] = Field(description="The metric value if the optimal start time is the optimal execution", alias="metricValueOptimalExecution")
    metric_value_start_window_execution: Union[StrictFloat, StrictInt] = Field(description="The metric value started at the start window", alias="metricValueStartWindowExecution")
    metric_unit: StrictStr = Field(description="The unit of the metric", alias="metricUnit")
    optimization_metric: OptimizationMetric = Field(alias="optimizationMetric")
    zone_key: StrictStr = Field(description="The zone key of the optimal location", alias="zoneKey")
    __properties: ClassVar[List[str]] = ["metricValueImmediateExecution", "metricValueOptimalExecution", "metricValueStartWindowExecution", "metricUnit", "optimizationMetric", "zoneKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumptionOptimizerResponseOptimizationOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumptionOptimizerResponseOptimizationOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metricValueImmediateExecution": obj.get("metricValueImmediateExecution"),
            "metricValueOptimalExecution": obj.get("metricValueOptimalExecution"),
            "metricValueStartWindowExecution": obj.get("metricValueStartWindowExecution"),
            "metricUnit": obj.get("metricUnit"),
            "optimizationMetric": obj.get("optimizationMetric"),
            "zoneKey": obj.get("zoneKey")
        })
        return _obj


