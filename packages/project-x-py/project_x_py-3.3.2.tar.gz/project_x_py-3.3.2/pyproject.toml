[project]
name = "project-x-py"
version = "3.3.2"
description = "High-performance Python SDK for futures trading with real-time WebSocket data, technical indicators, order management, and market depth analysis"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "TexasCoding", email = "jeff10278@me.com" }]
maintainers = [{ name = "TexasCoding", email = "jeff10278@me.com" }]
keywords = [
    "trading",
    "futures",
    "topstepx",
    "projectx",
    "api-client",
    "real-time-data",
    "market-data",
    "financial-data",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.12"
dependencies = [
    "polars>=1.31.0", # TODO: Update to 1.31.0
    "numpy>=2.3.2",
    "pytz>=2025.2",
    "requests>=2.32.4",
    "httpx[http2]>=0.27.0",
    "rich>=14.1.0",
    "signalrcore>=0.9.5",
    "websocket-client>=1.0.0",
    "pydantic>=2.11.7",
    "pyyaml>=6.0.2",
    "orjson>=3.11.1",
    "uvloop>=0.21.0",
    "msgpack-python>=0.5.6",
    "lz4>=4.4.4",
    "cachetools>=6.1.0",
    "plotly>=6.3.0",
    "deprecated>=1.2.18",
]

[project.optional-dependencies]
# Real-time features (WebSocket support)
realtime = ["signalrcore>=0.9.5", "websocket-client>=1.0.0"]

# Development dependencies
dev = [
    "ruff>=0.12.3",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "aioresponses>=0.7.6",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.10.0",
    "requests-mock>=1.9.0",
    "aioresponses>=0.7.6",
]

# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.22.0",
]

# All optional dependencies
all = ["project-x-py[realtime,dev,test,docs]"]

[project.urls]
Homepage = "https://github.com/TexasCoding/project-x-py"
Documentation = "https://project-x-py.readthedocs.io/en/latest/"
Repository = "https://github.com/TexasCoding/project-x-py.git"
"Bug Tracker" = "https://github.com/TexasCoding/project-x-py/issues"
Changelog = "https://github.com/TexasCoding/project-x-py/blob/main/CHANGELOG.md"

[project.scripts]
projectx-check = "project_x_py.cli:check_setup"
projectx-config = "project_x_py.cli:create_config"



[build-system]
requires = ["hatchling>=1.13.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/project_x_py/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/project_x_py"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/docs", "README.md", "CHANGELOG.md", "LICENSE"]

# Development tools configuration
[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "justfile",
    "Makefile",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
]

ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "N815",  # Variable in class scope should not be mixedCase (API compatibility)
    "N818",  # Exception name should be named with an Error suffix
    "UP007", # Use X | Y for type annotations (optional)
    "N811", # Variable in class scope should not be mixedCase (API compatibility)
    "RUF022", # Use a list comprehension to create a new list (optional)
    "RUF006", # Use a list comprehension to create a new list (optional)
]

fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"src/project_x_py/indicators/__init__.py" = ["N801", "N802"]  # Allow uppercase class/function names for TA-Lib style compatibility
"src/project_x_py/indicators/*.py" = ["N801"]  # Allow uppercase class names for TA-Lib style compatibility
"tests/**/*" = ["S101", "PLR2004", "PLR0913", "PLR0915"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["project_x_py"]
force-single-line = false
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["signalrcore.*", "polars.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=project_x_py",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "realtime: marks tests that require real-time connections",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["project_x_py"]
skip_glob = [".*"]

[dependency-groups]
dev = [
    "ruff>=0.12.3",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.14.1",
    "pre-commit>=4.2.0",
    "types-requests>=2.32.4.20250611",
    "types-pytz>=2025.2.0.20250516",
    "types-pyyaml>=6.0.12.20250516",
    "psutil>=7.0.0",
    "pyjwt>=2.10.1",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]
